[{"authorTime":"2017-05-23 10:44:01","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":6,"curCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n    jetty.start();\n\n    return jetty;\n  }\n","date":"2018-01-23 20:35:14","endLine":566,"groupId":"15291","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/31393ba6b219168f2efc42a7af7142c9ec4e4d.src","preCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n    jetty.start();\n\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"B"},{"authorDate":"2017-05-23 10:44:01","commitOrder":6,"curCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n","date":"2017-05-23 10:58:51","endLine":604,"groupId":"15291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createProxiedJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/8f707157ba751255f3e02267dc43c9fad8b64e.src","preCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"NB"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":7,"curCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n","date":"2018-11-30 01:58:51","endLine":647,"groupId":"15291","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/db4b195c97133df5535eddd0f784a7b63685eb.src","preCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n    jetty.start();\n\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":7,"curCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig, true);\n\n    return jetty;\n  }\n","date":"2018-11-30 01:58:51","endLine":685,"groupId":"15291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createProxiedJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/db4b195c97133df5535eddd0f784a7b63685eb.src","preCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    SocketProxy proxy = new SocketProxy(0, sslConfig != null && sslConfig.isSSLMode());\n    jetty.setProxyPort(proxy.getListenPort());\n    jetty.start();\n    proxy.open(jetty.getBaseUrl().toURI());\n    proxies.put(proxy.getUrl(), proxy);\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":8,"curCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n","date":"2018-12-17 00:58:20","endLine":684,"groupId":"15291","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d9/8a1e0242e9a247e1abc265ba1c9b5cfd6cf427.src","preCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"M"},{"authorDate":"2018-12-17 00:58:20","commitOrder":8,"curCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig, true);\n\n    return jetty;\n  }\n","date":"2018-12-17 00:58:20","endLine":722,"groupId":"15291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createProxiedJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d9/8a1e0242e9a247e1abc265ba1c9b5cfd6cf427.src","preCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig, true);\n\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":691,"status":"M"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-22 04:28:25","codes":[{"authorDate":"2020-06-22 04:28:25","commitOrder":9,"curCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n","date":"2020-06-22 04:28:25","endLine":709,"groupId":"121897","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/3586d6c70a0126770502c4251c913f4a68a20a.src","preCode":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":676,"status":"M"},{"authorDate":"2020-06-22 04:28:25","commitOrder":9,"curCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig, true);\n\n    return jetty;\n  }\n","date":"2020-06-22 04:28:25","endLine":747,"groupId":"121897","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createProxiedJetty","params":"(FilesolrHome@StringdataDir@StringshardList@StringsolrConfigOverride@StringschemaOverride@Replica.TypereplicaType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/3586d6c70a0126770502c4251c913f4a68a20a.src","preCode":"  public JettySolrRunner createProxiedJetty(File solrHome, String dataDir,\n                                     String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType)\n      throws Exception {\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n\n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig, true);\n\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"M"}],"commitId":"aa5b26f6c40e6f6ac78d4574448ab0241c1b68b0","commitMessage":"@@@Remove some needless toAbsolutePath calls (#1582)\n\n","date":"2020-06-22 04:28:25","modifiedFileCount":"11","status":"M","submitter":"David Smiley"}]
