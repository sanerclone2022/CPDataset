[{"authorTime":"2013-03-05 09:03:06","codes":[{"authorDate":"2013-01-08 02:33:12","commitOrder":4,"curCode":"  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n","date":"2013-01-08 02:33:12","endLine":236,"groupId":"32527","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransformers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/f5a0e254e0033f55fd72d41368bee2420c6803.src","preCode":"  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"NB"},{"authorDate":"2013-03-05 09:03:06","commitOrder":4,"curCode":"  public void testFunkyFieldNames() {\n    ReturnFields rf = new SolrReturnFields(req(\"fl\", \"#foo_s\", \"fl\", \"id\"));\n    assertFalse(rf.wantsScore());\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"#foo_s\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    assertQ(req(\"q\",\"id:1\", \"fl\",\"#foo_s\", \"fl\",\"id\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[@name='id'][.='1']\"\n            ,\"//arr[@name='#foo_s']/str[.='how now brown cow']\"\n            );\n\n  }\n","date":"2013-03-05 09:03:06","endLine":325,"groupId":"8026","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFunkyFieldNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/739904f36976cea5766392385c691a32dc365e.src","preCode":"  public void testFunkyFieldNames() {\n    ReturnFields rf = new SolrReturnFields(req(\"fl\", \"#foo_s\", \"fl\", \"id\"));\n    assertFalse(rf.wantsScore());\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"#foo_s\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    assertQ(req(\"q\",\"id:1\", \"fl\",\"#foo_s\", \"fl\",\"id\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[@name='id'][.='1']\"\n            ,\"//arr[@name='#foo_s']/str[.='how now brown cow']\"\n            );\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"7347761737bdad390b52cf85744943fa1bc3b347","commitMessage":"@@@SOLR-4524: test proving this works\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1452612 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-05 09:03:06","modifiedFileCount":"1","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2013-03-05 09:03:06","codes":[{"authorDate":"2014-02-25 09:03:07","commitOrder":5,"curCode":"  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n","date":"2014-02-25 09:03:07","endLine":245,"groupId":"16169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransformers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4ce905cf840f976c49d6f8ee29e7f34d15a1c6.src","preCode":"  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2013-03-05 09:03:06","commitOrder":5,"curCode":"  public void testFunkyFieldNames() {\n    ReturnFields rf = new SolrReturnFields(req(\"fl\", \"#foo_s\", \"fl\", \"id\"));\n    assertFalse(rf.wantsScore());\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"#foo_s\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    assertQ(req(\"q\",\"id:1\", \"fl\",\"#foo_s\", \"fl\",\"id\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[@name='id'][.='1']\"\n            ,\"//arr[@name='#foo_s']/str[.='how now brown cow']\"\n            );\n\n  }\n","date":"2013-03-05 09:03:06","endLine":325,"groupId":"8026","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFunkyFieldNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/739904f36976cea5766392385c691a32dc365e.src","preCode":"  public void testFunkyFieldNames() {\n    ReturnFields rf = new SolrReturnFields(req(\"fl\", \"#foo_s\", \"fl\", \"id\"));\n    assertFalse(rf.wantsScore());\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"#foo_s\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    assertQ(req(\"q\",\"id:1\", \"fl\",\"#foo_s\", \"fl\",\"id\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[@name='id'][.='1']\"\n            ,\"//arr[@name='#foo_s']/str[.='how now brown cow']\"\n            );\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"N"}],"commitId":"b88669c60f2944d8916b05b4058e0e3069ef5e50","commitMessage":"@@@SOLR-5423: CSV output doesn't include function field\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1571505 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-25 09:03:07","modifiedFileCount":"4","status":"M","submitter":"Steven Rowe"},{"authorTime":"2013-03-05 09:03:06","codes":[{"authorDate":"2016-03-26 03:22:44","commitOrder":6,"curCode":"  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n\n    \r\n    rf = new SolrReturnFields( req(\"fl\", \"[geo f=store_rpt]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[geo]\"));\n    assertFalse( rf.wantsField( \"store_rpt\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNotNull(rf.getTransformer());\n  }\n","date":"2016-03-26 03:59:32","endLine":275,"groupId":"103274","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransformers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/45/9f9596c6ac5dc2252dae66c99cf92dd89bc005.src","preCode":"  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2013-03-05 09:03:06","commitOrder":6,"curCode":"  public void testFunkyFieldNames() {\n    ReturnFields rf = new SolrReturnFields(req(\"fl\", \"#foo_s\", \"fl\", \"id\"));\n    assertFalse(rf.wantsScore());\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"#foo_s\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    assertQ(req(\"q\",\"id:1\", \"fl\",\"#foo_s\", \"fl\",\"id\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[@name='id'][.='1']\"\n            ,\"//arr[@name='#foo_s']/str[.='how now brown cow']\"\n            );\n\n  }\n","date":"2013-03-05 09:03:06","endLine":325,"groupId":"103274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFunkyFieldNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/739904f36976cea5766392385c691a32dc365e.src","preCode":"  public void testFunkyFieldNames() {\n    ReturnFields rf = new SolrReturnFields(req(\"fl\", \"#foo_s\", \"fl\", \"id\"));\n    assertFalse(rf.wantsScore());\n    assertTrue(rf.wantsField(\"id\"));\n    assertTrue(rf.wantsField(\"#foo_s\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n\n    assertQ(req(\"q\",\"id:1\", \"fl\",\"#foo_s\", \"fl\",\"id\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[@name='id'][.='1']\"\n            ,\"//arr[@name='#foo_s']/str[.='how now brown cow']\"\n            );\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"N"}],"commitId":"ffd557b117455cb2a37e1a27cfd0d026314b4137","commitMessage":"@@@SOLR-8902: Make sure ReturnFields only returns the requested fields\n","date":"2016-03-26 03:59:32","modifiedFileCount":"3","status":"M","submitter":"Ryan McKinley"}]
