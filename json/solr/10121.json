[{"authorTime":"2015-12-10 03:52:28","codes":[{"authorDate":"2015-12-11 10:28:25","commitOrder":5,"curCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","date":"2015-12-11 10:28:25","endLine":67,"groupId":"46422","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"GroupOperation","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/f7e94bb2b1998fc0ac37e2ddb38d59f287a83f.src","preCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2015-12-10 03:52:28","commitOrder":5,"curCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","date":"2015-12-10 03:52:28","endLine":147,"groupId":"48571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ParallelStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6c/43a14aea5cdbd38a47533d1fe1db482505e510.src","preCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"}],"commitId":"60dca1b4f988e0a839ceb5e54ad85df70cc1f1f9","commitMessage":"@@@SOLR-8337: Add ReduceOperation and wire it into the ReducerStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719246 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-11 10:28:25","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-01-05 08:32:29","codes":[{"authorDate":"2015-12-11 10:28:25","commitOrder":6,"curCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","date":"2015-12-11 10:28:25","endLine":67,"groupId":"46422","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"GroupOperation","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/f7e94bb2b1998fc0ac37e2ddb38d59f287a83f.src","preCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2016-01-05 08:32:29","commitOrder":6,"curCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","date":"2016-01-05 08:32:29","endLine":150,"groupId":"48571","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ParallelStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/e684910e5648498ad5c3a44963b9e484de02ab.src","preCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"26a1d1ea34a14025048bb020377dcc82bed005da","commitMessage":"@@@SOLR-7535: Add UpdateStream to Streaming API and Streaming Expression\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1722990 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-05 08:32:29","modifiedFileCount":"10","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-07-12 08:10:27","codes":[{"authorDate":"2015-12-11 10:28:25","commitOrder":7,"curCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","date":"2015-12-11 10:28:25","endLine":67,"groupId":"46422","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"GroupOperation","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/f7e94bb2b1998fc0ac37e2ddb38d59f287a83f.src","preCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2016-07-12 08:10:27","commitOrder":7,"curCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","date":"2016-07-17 10:36:30","endLine":148,"groupId":"48571","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ParallelStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/31/25ff0cc7deb045a8231cb39fc941220588a7a2.src","preCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"fc3894e837701b78a4704cf27529c34c15666586","commitMessage":"@@@SOLR-9240:Support running the topic() Streaming Expression in parallel mode.\n","date":"2016-07-17 10:36:30","modifiedFileCount":"5","status":"M","submitter":"jbernste"},{"authorTime":"2017-03-23 15:42:20","codes":[{"authorDate":"2017-03-23 15:42:20","commitOrder":8,"curCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","date":"2017-03-23 15:42:20","endLine":73,"groupId":"10121","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"GroupOperation","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/28cc1e0fd80072adb1c0613286ecfc48b57ff3.src","preCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2017-03-23 15:42:20","commitOrder":8,"curCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","date":"2017-03-23 15:42:20","endLine":151,"groupId":"10121","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"ParallelStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/e13549d05cb65a309dd0e26925d0275be7a902.src","preCode":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    \r\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    \r\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"4edfc1a9c7b877a23cffbf5f73a2728173fa663d","commitMessage":"@@@SOLR-6615: use constants for 'sort'.  'distrib'\n","date":"2017-03-23 15:42:20","modifiedFileCount":"37","status":"M","submitter":"Noble Paul"}]
