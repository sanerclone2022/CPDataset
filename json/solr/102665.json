[{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2017-07-11 07:58:23","commitOrder":1,"curCode":"  public void testDoublePointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_dv\";\n    String nonDocValuesField = \"number_p_d\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values, sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues), RoundingMode.HALF_UP)\n          .divide(BigDecimal.valueOf(2.0D), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (double value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i),\n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":675,"groupId":"44593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testDoublePointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_dv\";\n    String nonDocValuesField = \"number_p_d\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values, sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues), RoundingMode.HALF_UP)\n          .divide(BigDecimal.valueOf(2.0D), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (double value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i),\n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"B"},{"authorDate":"2017-07-11 07:58:23","commitOrder":1,"curCode":"  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (float value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":975,"groupId":"44593","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatPointFieldRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (float value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":908,"status":"B"}],"commitId":"5bb09e08528552c310d30fc627dc823a86aa6880","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values\n","date":"2017-07-11 07:58:23","modifiedFileCount":"1","status":"B","submitter":"Steve Rowe"},{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":2,"curCode":"  public void testDoublePointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_dv\";\n    String nonDocValuesField = \"number_p_d\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values, sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (double value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i),\n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","date":"2017-07-15 01:54:35","endLine":670,"groupId":"34162","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testDoublePointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_dv\";\n    String nonDocValuesField = \"number_p_d\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values, sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues), RoundingMode.HALF_UP)\n          .divide(BigDecimal.valueOf(2.0D), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (double value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i),\n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"},{"authorDate":"2017-07-11 07:58:23","commitOrder":2,"curCode":"  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (float value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":975,"groupId":"44593","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatPointFieldRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (float value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":908,"status":"N"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2017-08-05 22:59:11","commitOrder":3,"curCode":"  public void testDoublePointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_dv\";\n    String nonDocValuesField = \"number_p_d\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values, sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min)).add(BigDecimal.valueOf(buffer * 2.0D))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (double value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i),\n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","date":"2017-08-05 22:59:11","endLine":669,"groupId":"102665","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/89e7829c3522eba145433af8c4462d621f4c5c.src","preCode":"  public void testDoublePointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_dv\";\n    String nonDocValuesField = \"number_p_d\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values, sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (double value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i),\n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"M"},{"authorDate":"2017-07-11 07:58:23","commitOrder":3,"curCode":"  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (float value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":975,"groupId":"102665","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatPointFieldRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    \r\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (float value : sortedValues) {\n      \r\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":908,"status":"N"}],"commitId":"cff5e985835759b4fcb64629ddca817fa6e17944","commitMessage":"@@@SOLR-10796: TestPointFields.testDoublePointFieldRangeFacet(): Guard against converting a double-valued '-Infinity' to BigDecimal\n","date":"2017-08-05 22:59:11","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"}]
