[{"authorTime":"2014-03-13 05:52:49","codes":[{"authorDate":"2013-03-06 12:50:33","commitOrder":2,"curCode":"  public static String JQ(String request) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\"); \n\n    String response;\n    boolean failed=true;\n    try {\n      response = restTestHarness.query(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    return response;\n  }\n","date":"2013-03-06 12:50:33","endLine":178,"groupId":"29184","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"JQ","params":"(Stringrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7c/c995f7b8cf902048ef85e5d38bc3033e6be9e9.src","preCode":"  public static String JQ(String request) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\"); \n\n    String response;\n    boolean failed=true;\n    try {\n      response = restTestHarness.query(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    return response;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"NB"},{"authorDate":"2014-03-13 05:52:49","commitOrder":2,"curCode":"  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n","date":"2014-03-13 05:52:49","endLine":491,"groupId":"52494","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertJDelete","params":"(Stringrequest@doubledelta@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/f4857ee4f037a9875c09c204e79ab8450eb210.src","preCode":"  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"B"}],"commitId":"979230aca49c9ae7abbd6a076df9f3df59cec31a","commitMessage":"@@@SOLR-5653: Create a RestManager to provide REST API endpoints for reconfigurable plugins\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576939 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-13 05:52:49","modifiedFileCount":"23","status":"M","submitter":"Steven Rowe"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2020-05-01 07:50:31","commitOrder":3,"curCode":"  public static String JQ(String request) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\"); \n\n    String response;\n    boolean failed=true;\n    try {\n      response = restTestHarness.query(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: {}\", request);\n      }\n    }\n\n    return response;\n  }\n","date":"2020-05-01 07:50:31","endLine":184,"groupId":"101918","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"JQ","params":"(Stringrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/d90bea1266f359697ac75d7d3433d1b5971eae.src","preCode":"  public static String JQ(String request) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\"); \n\n    String response;\n    boolean failed=true;\n    try {\n      response = restTestHarness.query(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    return response;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-05-01 07:50:31","commitOrder":3,"curCode":"  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: {}\", request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error={}\\n expected ={}\"\n              + \"\\n response = {}\\n request = {}\"\n              , err, testJSON, response, request);\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\\n expected ={}\\n\"\n              + \"\\n response = {}\\n request = {}\"\n              , testJSON, response, request\n          );\n        }\n      }\n    }\n  }\n","date":"2020-05-01 07:50:31","endLine":472,"groupId":"101918","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertJDelete","params":"(Stringrequest@doubledelta@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/d90bea1266f359697ac75d7d3433d1b5971eae.src","preCode":"  public static void assertJDelete(String request, double delta, String... tests) throws Exception {\n    int queryStartPos = request.indexOf('?');\n    String query;\n    String path;\n    if (-1 == queryStartPos) {\n      query = \"\";\n      path = request;\n    } else {\n      query = request.substring(queryStartPos + 1);\n      path = request.substring(0, queryStartPos);\n    }\n    query = setParam(query, \"wt\", \"json\");\n    request = path + '?' + setParam(query, \"indent\", \"on\");\n\n    String response;\n    boolean failed = true;\n    try {\n      response = restTestHarness.delete(request);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + request);\n      }\n    }\n\n    for (String test : tests) {\n      if (null == test || 0 == test.length()) continue;\n      String testJSON = json(test);\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, testJSON, delta);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n              \"\\n expected =\" + testJSON +\n              \"\\n response = \" + response +\n              \"\\n request = \" + request + \"\\n\"\n          );\n        }\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"}]
