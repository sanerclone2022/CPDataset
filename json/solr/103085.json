[{"authorTime":"2011-11-06 03:20:37","codes":[{"authorDate":"2011-11-06 03:20:37","commitOrder":1,"curCode":"  void tryQuerySameTypes(String template, String numbers, String type) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    \r\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n","date":"2011-11-06 03:20:37","endLine":113,"groupId":"40814","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tryQuerySameTypes","params":"(Stringtemplate@Stringnumbers@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/881020811ac4076c6b2a1178cb22f4f30b0856.src","preCode":"  void tryQuerySameTypes(String template, String numbers, String type) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    \r\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2011-11-06 03:20:37","commitOrder":1,"curCode":"  void tryQueryDiffTypes(String template, String numbers, String[] types) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n\n    String[] numParts = numbers.split(\",\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, types[idx % types.length]).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, types[(idx + 1) % types.length]).replace(patN, numParts[idx]);\n    }\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    QueryUtils.checkUnequal(q1, q2);\n  }\n","date":"2011-11-06 03:20:37","endLine":131,"groupId":"40813","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"tryQueryDiffTypes","params":"(Stringtemplate@Stringnumbers@String[]types)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/881020811ac4076c6b2a1178cb22f4f30b0856.src","preCode":"  void tryQueryDiffTypes(String template, String numbers, String[] types) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n\n    String[] numParts = numbers.split(\",\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, types[idx % types.length]).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, types[(idx + 1) % types.length]).replace(patN, numParts[idx]);\n    }\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    QueryUtils.checkUnequal(q1, q2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"130ec534c5279c0da64e1982fe234f048dd48666","commitMessage":"@@@Fix for SOLR-2829. False-positives on cache hits.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1198024 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-06 03:20:37","modifiedFileCount":"3","status":"B","submitter":"Erick Erickson"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2012-11-24 03:45:50","commitOrder":2,"curCode":"  void tryQuerySameTypes(String template, String numbers, String type) throws SyntaxError {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    \r\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n","date":"2012-11-24 03:45:50","endLine":118,"groupId":"103085","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tryQuerySameTypes","params":"(Stringtemplate@Stringnumbers@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/da59185c1003787a60fc346af020d48f612248.src","preCode":"  void tryQuerySameTypes(String template, String numbers, String type) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    \r\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":2,"curCode":"  void tryQueryDiffTypes(String template, String numbers, String[] types) throws SyntaxError {\n    String s1 = template;\n    String s2 = template;\n\n    String[] numParts = numbers.split(\",\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, types[idx % types.length]).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, types[(idx + 1) % types.length]).replace(patN, numParts[idx]);\n    }\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    QueryUtils.checkUnequal(q1, q2);\n  }\n","date":"2012-11-24 03:45:50","endLine":136,"groupId":"103085","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"tryQueryDiffTypes","params":"(Stringtemplate@Stringnumbers@String[]types)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/da59185c1003787a60fc346af020d48f612248.src","preCode":"  void tryQueryDiffTypes(String template, String numbers, String[] types) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n\n    String[] numParts = numbers.split(\",\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, types[idx % types.length]).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, types[(idx + 1) % types.length]).replace(patN, numParts[idx]);\n    }\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    QueryUtils.checkUnequal(q1, q2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"2d4e789d00ecb5dfaf73e7df01a7da4502c404a9","commitMessage":"@@@SOLR-4093: solr specific parser + localParams syntax\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1413042 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-11-24 03:45:50","modifiedFileCount":"35","status":"M","submitter":"Yonik Seeley"}]
