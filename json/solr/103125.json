[{"authorTime":"2017-01-26 09:23:13","codes":[{"authorDate":"2017-01-26 09:23:13","commitOrder":7,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2017-01-26 09:23:13","endLine":217,"groupId":"49680","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/efa523409a9c9ef2fd1ef79865661dc112f81f.src","preCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"MB"},{"authorDate":"2017-01-26 09:23:13","commitOrder":7,"curCode":"  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2017-01-26 09:23:13","endLine":1405,"groupId":"49689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplayWithInPlaceUpdatesAndDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/efa523409a9c9ef2fd1ef79865661dc112f81f.src","preCode":"  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"B"}],"commitId":"5375410807aecf3cc67f82ca1e9ee591f39d0ac7","commitMessage":"@@@SOLR-5944: In-place updates of Numeric DocValues\n","date":"2017-01-26 09:23:13","modifiedFileCount":"22","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2020-01-17 02:47:06","codes":[{"authorDate":"2020-01-17 02:47:06","commitOrder":8,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2020-01-17 02:47:06","endLine":301,"groupId":"49680","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2020-01-17 02:47:06","commitOrder":8,"curCode":"  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2020-01-17 02:47:06","endLine":1631,"groupId":"49689","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplayWithInPlaceUpdatesAndDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1507,"status":"M"}],"commitId":"5f2d7c4855987670489d68884c787e4cfb377fa9","commitMessage":"@@@SOLR-14184: Internal 'test' variable DirectUpdateHandler2.commitOnClose has been removed and replaced with TestInjection.skipIndexWriterCommitOnClose\n","date":"2020-01-17 02:47:06","modifiedFileCount":"13","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2020-01-17 02:47:06","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":9,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2020-06-18 05:51:41","endLine":304,"groupId":"103125","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/7e12ec0afc77bdf59319a6ca336f9323d198a9.src","preCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2020-01-17 02:47:06","commitOrder":9,"curCode":"  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2020-01-17 02:47:06","endLine":1631,"groupId":"103125","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplayWithInPlaceUpdatesAndDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); \r\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); \r\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1507,"status":"N"}],"commitId":"b01e249c9ec724b6df120a5d731020cfe4de3fce","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 1)\n","date":"2020-06-18 05:51:41","modifiedFileCount":"213","status":"M","submitter":"Erick Erickson"}]
