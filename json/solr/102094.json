[{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-01-09 01:33:19","commitOrder":2,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2013-01-09 01:33:19","endLine":1218,"groupId":"6952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/929e821ab187af750b6217807e868e7c1aaf19.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1174,"status":"B"},{"authorDate":"2012-11-24 03:45:50","commitOrder":2,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n","date":"2012-11-24 03:45:50","endLine":574,"groupId":"1995","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/b4e9ba5cf8b02e9945a8905e36f329770fb568.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"NB"}],"commitId":"76f5a8bada6edb52c3f5066714edec4d2ec461bc","commitMessage":"@@@SOLR-4208: ExtendedDismaxQParserPlugin has been refactored to make subclassing easier\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1430399 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-01-09 01:33:19","modifiedFileCount":"2","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2013-03-22 05:31:19","codes":[{"authorDate":"2013-01-09 01:33:19","commitOrder":3,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2013-01-09 01:33:19","endLine":1218,"groupId":"6952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/929e821ab187af750b6217807e868e7c1aaf19.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1174,"status":"N"},{"authorDate":"2013-03-22 05:31:19","commitOrder":3,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        ((PhraseQuery) query).setSlop(slop);\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","date":"2013-03-22 05:31:19","endLine":590,"groupId":"1995","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/2febc0c5d64acaed40fca1f637fd85cc256af9.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"}],"commitId":"7584c40c7a30da0e7e9bc616bc4734c4d731ada7","commitMessage":"@@@SOLR-4625: fix boosts and phrase slops on sub parsers\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1459537 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-22 05:31:19","modifiedFileCount":"2","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2015-06-16 18:18:40","codes":[{"authorDate":"2015-06-16 18:18:40","commitOrder":4,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2015-06-16 18:18:40","endLine":1274,"groupId":"45953","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/ca0ba91ab7d81f4d3de40ebcfdb8c7b7390baa.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1223,"status":"M"},{"authorDate":"2015-06-16 18:18:40","commitOrder":4,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","date":"2015-06-16 18:18:40","endLine":408,"groupId":"49895","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/1e0f8571e1cc9d4a22b129547be1fafeec18c3.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        ((PhraseQuery) query).setSlop(slop);\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"}],"commitId":"c397fe723462cfe4069304fe3b3bcea648217060","commitMessage":"@@@LUCENE-6531: Make PhraseQuery immutable.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1685754 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-16 18:18:40","modifiedFileCount":"55","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-06-16 18:18:40","codes":[{"authorDate":"2015-06-18 15:14:05","commitOrder":5,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2015-06-18 15:14:05","endLine":1276,"groupId":"45953","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/cbf64605aafa2d69caf61df6bbe85acedb6b07.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1225,"status":"M"},{"authorDate":"2015-06-16 18:18:40","commitOrder":5,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","date":"2015-06-16 18:18:40","endLine":408,"groupId":"49895","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/1e0f8571e1cc9d4a22b129547be1fafeec18c3.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"}],"commitId":"4aafacfbef423a25a349dd8c6e5e6178ac1ba334","commitMessage":"@@@LUCENE-6570: Make BooleanQuery immutable.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686145 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-18 15:14:05","modifiedFileCount":"184","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-06-16 18:18:40","codes":[{"authorDate":"2015-08-03 06:31:19","commitOrder":6,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2015-08-03 06:31:19","endLine":1276,"groupId":"45953","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/ef5d5075a656b9dc505a454e84c0d82feebb00.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1225,"status":"M"},{"authorDate":"2015-06-16 18:18:40","commitOrder":6,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","date":"2015-06-16 18:18:40","endLine":408,"groupId":"49895","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/1e0f8571e1cc9d4a22b129547be1fafeec18c3.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"}],"commitId":"4a63a328d4c40a22b2dd76a9a06023a80180ac29","commitMessage":"@@@SOLR-3085: New edismax param mm.autoRelax which helps in certain cases of the stopwords/zero-hits issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1693833 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-03 06:31:19","modifiedFileCount":"5","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2015-09-07 21:34:46","codes":[{"authorDate":"2015-08-03 06:31:19","commitOrder":7,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2015-08-03 06:31:19","endLine":1276,"groupId":"45953","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/ef5d5075a656b9dc505a454e84c0d82feebb00.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1225,"status":"N"},{"authorDate":"2015-09-07 21:34:46","commitOrder":7,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","date":"2015-09-07 21:34:46","endLine":410,"groupId":"49895","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/dcabe3cf80c5e96529d715b4e0cac22b58e018.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n        query.setBoost(pq.getBoost());\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"962313b83ba9c69379e1f84dffc881a361713ce9","commitMessage":"@@@LUCENE-6590: Replace Query.getBoost.  setBoost and clone with a new BoostQuery.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1701621 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-07 21:34:46","modifiedFileCount":"226","status":"M","submitter":"Adrien Grand"},{"authorTime":"2016-03-04 18:54:10","codes":[{"authorDate":"2016-03-04 18:54:10","commitOrder":8,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2016-03-04 18:54:10","endLine":1260,"groupId":"17877","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/01f3ece1ebe2eb61a627a917a3d1e443086d4a.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1207,"status":"M"},{"authorDate":"2016-03-04 18:54:10","commitOrder":8,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","date":"2016-03-04 18:54:10","endLine":410,"groupId":"49895","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/c0fd726ee2ef029754f63fa643790448787c6f.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      }\n      if (query instanceof MultiPhraseQuery) {\n        ((MultiPhraseQuery) query).setSlop(slop);\n      }\n\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"}],"commitId":"517acece6a210b2d1baf75a39fe3b77ea59926b2","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n\nConflicts:\n\tsolr/CHANGES.txt\n","date":"2016-03-04 18:54:10","modifiedFileCount":"303","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-03-04 18:54:10","codes":[{"authorDate":"2016-07-01 01:04:11","commitOrder":9,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2016-07-07 16:02:29","endLine":1277,"groupId":"17877","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/0a3020e3033ab6a002df0f3ea4426bad450c3d.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1230,"status":"M"},{"authorDate":"2016-03-04 18:54:10","commitOrder":9,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","date":"2016-03-04 18:54:10","endLine":410,"groupId":"49895","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/c0fd726ee2ef029754f63fa643790448787c6f.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"N"}],"commitId":"f1528bf338f42ef0e10f6cf1333286eb05139acd","commitMessage":"@@@LUCENE-7369: Similarity.coord and BooleanQuery.disableCoord are removed.\n","date":"2016-07-07 16:02:29","modifiedFileCount":"70","status":"M","submitter":"Adrien Grand"},{"authorTime":"2016-11-23 01:32:53","codes":[{"authorDate":"2016-11-23 01:32:53","commitOrder":10,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2016-11-23 01:33:20","endLine":1256,"groupId":"17877","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/b6188ec180a90a6786e5b73dc3d976907cec1f.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1209,"status":"M"},{"authorDate":"2016-11-23 01:32:53","commitOrder":10,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","date":"2016-11-23 01:33:20","endLine":448,"groupId":"49895","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0f/6c7ac34759fbf959a37f5c0fce88cd14911a1f.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"bf9db95f218f49bac8e7971eb953a9fd9d13a2f0","commitMessage":"@@@SOLR-9786: FieldType.getSetQuery.  QParser.flags/isFilter.  solr query parser use getSetQuery when appropriate and other optimizations\n","date":"2016-11-23 01:33:20","modifiedFileCount":"10","status":"M","submitter":"yonik"},{"authorTime":"2016-11-23 01:32:53","codes":[{"authorDate":"2017-03-17 07:41:37","commitOrder":11,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query;\n            if (val == null) {\n              query = super.getFieldQuery(field, vals, false);\n            } else {\n              query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            }\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (QueryParserConfigurationException e) {\n        throw e;  \r\n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2017-03-17 07:41:47","endLine":1413,"groupId":"17877","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/aee881c935db063150ca1b695bef48f0c52e04.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"M"},{"authorDate":"2016-11-23 01:32:53","commitOrder":11,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","date":"2016-11-23 01:33:20","endLine":448,"groupId":"49895","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0f/6c7ac34759fbf959a37f5c0fce88cd14911a1f.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"d1b2fb33ef3bc0ced65feb98c31cffe4f209da7f","commitMessage":"@@@SOLR-9185: Solr's edismax and Lucene/standard query parsers should optionally not split on whitespace before sending terms to analysis\n","date":"2017-03-17 07:41:47","modifiedFileCount":"9","status":"M","submitter":"Steve Rowe"},{"authorTime":"2016-11-23 01:32:53","codes":[{"authorDate":"2017-03-29 06:39:28","commitOrder":12,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query;\n            if (val == null) {\n              query = super.getFieldQuery(field, vals, false);\n            } else {\n              query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            }\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2017-03-29 06:39:28","endLine":1405,"groupId":"17877","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/98/25f72b9f33ce9dfbe7a91208118be8ff91b12a.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query;\n            if (val == null) {\n              query = super.getFieldQuery(field, vals, false);\n            } else {\n              query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            }\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (QueryParserConfigurationException e) {\n        throw e;  \r\n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1353,"status":"M"},{"authorDate":"2016-11-23 01:32:53","commitOrder":12,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","date":"2016-11-23 01:33:20","endLine":448,"groupId":"49895","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0f/6c7ac34759fbf959a37f5c0fce88cd14911a1f.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"0a689f4d95e981e99ae0e80741e7cf1fa74ff60f","commitMessage":"@@@SOLR-10357: Enable edismax and standard query parsers to handle the option combination sow=false / autoGeneratePhraseQueries=true by setting QueryBuilder.autoGenerateMultiTermSynonymsQuery\n","date":"2017-03-29 06:39:28","modifiedFileCount":"4","status":"M","submitter":"Steve Rowe"},{"authorTime":"2016-11-23 01:32:53","codes":[{"authorDate":"2018-11-05 23:29:39","commitOrder":13,"curCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query;\n            if (val == null) {\n              query = super.getFieldQuery(field, vals, false);\n            } else {\n              query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            }\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              if (type == QType.FIELD) { \r\n                BooleanQuery bq = (BooleanQuery) query;\n                query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n              }\n            } else if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (query instanceof SpanQuery) {\n              return query;\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","date":"2018-11-05 23:32:49","endLine":1455,"groupId":"102094","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"getQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/3412173c04cb0c1cfcf5a5d69ac09841038929.src","preCode":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  \r\n          case PHRASE:\n            Query query;\n            if (val == null) {\n              query = super.getFieldQuery(field, vals, false);\n            } else {\n              query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n            }\n            \r\n            \r\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              PhraseQuery.Builder builder = new PhraseQuery.Builder();\n              Term[] terms = pq.getTerms();\n              int[] positions = pq.getPositions();\n              for (int i = 0; i < terms.length; ++i) {\n                builder.add(terms[i], positions[i]);\n              }\n              builder.setSlop(slop);\n              query = builder.build();\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n              if (slop != mpq.getSlop()) {\n                query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n              }\n            } else if (minClauseSize > 1) {\n              \r\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        \r\n        \r\n        return null;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"M"},{"authorDate":"2016-11-23 01:32:53","commitOrder":13,"curCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","date":"2016-11-23 01:33:20","endLine":448,"groupId":"102094","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getFieldQuery","params":"(Stringfield@StringqueryText@intslop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0f/6c7ac34759fbf959a37f5c0fce88cd14911a1f.src","preCode":"  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws SyntaxError {\n    Query query = getFieldQuery(field, queryText, true, false);\n\n    \r\n    \r\n    if (subQParser == null) {\n      if (query instanceof PhraseQuery) {\n        PhraseQuery pq = (PhraseQuery) query;\n        Term[] terms = pq.getTerms();\n        int[] positions = pq.getPositions();\n        PhraseQuery.Builder builder = new PhraseQuery.Builder();\n        for (int i = 0; i < terms.length; ++i) {\n          builder.add(terms[i], positions[i]);\n        }\n        builder.setSlop(slop);\n        query = builder.build();\n      } else if (query instanceof MultiPhraseQuery) {\n        MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n      \n        if (slop != mpq.getSlop()) {\n          query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n        }\n      }\n    }\n\n    return query;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"01808eee938833b4a1c17a8a92cabdb683732a17","commitMessage":"@@@SOLR-12243: Edismax missing phrase queries when phrases contain multiterm synonyms\n","date":"2018-11-05 23:32:49","modifiedFileCount":"2","status":"M","submitter":"Steve Rowe"}]
