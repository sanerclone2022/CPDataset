[{"authorTime":"2012-08-05 02:32:33","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":4,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"B"},{"authorDate":"2012-08-05 02:32:33","commitOrder":4,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","date":"2012-08-05 02:32:33","endLine":1018,"groupId":"38164","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/5b3bed0ee4fc975eb9b152c0a61d8b76c8c525.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1007,"status":"NB"}],"commitId":"d4b66af3b36d417b5a18bf7c405721970c56e4a5","commitMessage":"@@@SOLR-3727: improve solrcloud close/shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1372701 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-14 09:31:27","modifiedFileCount":"7","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-02-26 12:09:52","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":5,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-02-26 12:09:52","commitOrder":5,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","date":"2013-02-26 12:09:52","endLine":1282,"groupId":"38164","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/f6da17c8c861011321466e90aab4dd40ed7cf2.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd.getCloudDescriptor());\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1271,"status":"M"}],"commitId":"d0d2ff9209683bf887cc269b1ee1684f24f4ddbf","commitMessage":"@@@SOLR-4078: Allow custom naming of SolrCloud nodes so that a new host:port combination can take over for a previous shard.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1450012 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-02-26 12:09:52","modifiedFileCount":"21","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-03-15 07:44:21","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":6,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-03-15 07:44:21","commitOrder":6,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","date":"2013-03-15 07:44:21","endLine":1290,"groupId":"38164","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/28/e369cf1c0afd885de9fda789c2f7aec28fcc32.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN); \n    String shardZkNodeName = getCoreNodeName(cd);\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), shardZkNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1273,"status":"M"}],"commitId":"b6719269fae599fde821136e657ca799ea3fc420","commitMessage":"@@@SOLR-4568: The lastPublished state check before becoming a leader is not working correctly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1456723 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-15 07:44:21","modifiedFileCount":"3","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-03-15 08:31:55","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":7,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-03-15 08:31:55","commitOrder":7,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","date":"2013-03-15 08:31:55","endLine":1293,"groupId":"38164","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/92e35d5ee13bf20080ebdfac3960153067fe11.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1273,"status":"M"}],"commitId":"841d757232425435fa5029caca8bf21f2f747097","commitMessage":"@@@SOLR-4570: Even if an explicit shard id is used.  ZkController#preRegister should still wait to see the shard id in it's current ClusterState.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1456731 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-15 08:31:55","modifiedFileCount":"1","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-04-08 23:16:31","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":8,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-04-08 23:16:31","commitOrder":8,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    cd.getCloudDescriptor().setShardState(null);\n    cd.getCloudDescriptor().setShardRange(null);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","date":"2013-04-08 23:16:31","endLine":1305,"groupId":"38164","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/2dec3817a30a4b7962a8fc897a71965102f263.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"M"}],"commitId":"873b2308b6f988527f57cdc29fe0827783ee8270","commitMessage":"@@@SOLR-3755: A new collections api to add additional shards dynamically by splitting existing shards\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1465661 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-04-08 23:16:31","modifiedFileCount":"24","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2013-04-09 04:00:15","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":9,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-04-09 04:00:15","commitOrder":9,"curCode":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","date":"2013-04-09 04:00:15","endLine":1307,"groupId":"38164","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5b/ad8899e84a7d814c359975d4f9c50b92e29b8e.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    cd.getCloudDescriptor().setShardState(null);\n    cd.getCloudDescriptor().setShardRange(null);\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"M"}],"commitId":"fcb859806b4e941529090ff9e4141a47ea1edba6","commitMessage":"@@@SOLR-3755: Set update log to buffering mode in preRegister before the core can accept any requests\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1465760 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-04-09 04:00:15","modifiedFileCount":"2","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2013-04-10 23:08:39","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":10,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-04-10 23:08:39","commitOrder":10,"curCode":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      \r\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","date":"2013-04-10 23:08:39","endLine":1310,"groupId":"38164","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/8728604482a62716dd72a9635d161a3cae48c3.src","preCode":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"M"}],"commitId":"e27b3f24c006b17bb304fb0f639c7e44c624a9f3","commitMessage":"@@@SOLR-3755: Set update log to buffer before core is published\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1466506 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-04-10 23:08:39","modifiedFileCount":"1","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2013-05-24 03:35:52","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":11,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-05-24 03:35:52","commitOrder":11,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","date":"2013-05-24 03:35:52","endLine":1307,"groupId":"38164","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/c7bcae55536b46461023fc977002e50ce4ae72.src","preCode":"  public void preRegister(SolrCore core) throws KeeperException, InterruptedException {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      \r\n      core.getUpdateHandler().getUpdateLog().bufferUpdates();\n    }\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"M"}],"commitId":"2d716bfa979bdc5a2a799467ce72f69be07dcf17","commitMessage":"@@@SOLR-4745: Do not pass a SolrCore in ZkController.preRegister()\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1485835 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-05-24 03:35:52","modifiedFileCount":"3","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-06-10 06:51:21","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":12,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-06-10 06:51:21","commitOrder":12,"curCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","date":"2013-06-10 06:51:21","endLine":1303,"groupId":"38164","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/a10b4bef39318b721eda303e97d018029abb27.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n    \r\n    if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {\n      cd.getCloudDescriptor().setShardState(null);\n      cd.getCloudDescriptor().setShardRange(null);\n    }\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"M"}],"commitId":"d35702de9a5da05da79db22dd71b6b4460a49760","commitMessage":"@@@SOLR-4805. SOLR-4843: SolreCore#reload should not call preRegister and publish a DOWN state to ZooKeeper.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1491310 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-10 06:51:21","modifiedFileCount":"7","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-06-27 04:18:33","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":13,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-06-27 04:18:33","commitOrder":13,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n    \n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    \r\n    \r\n    try {\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2013-06-27 04:18:33","endLine":1362,"groupId":"54488","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/b6c6b882e5f0679988834d8e41076d3388abd1.src","preCode":"  public void preRegister(CoreDescriptor cd) throws KeeperException, InterruptedException {\n\n\n    \r\n    \r\n    publish(cd, ZkStateReader.DOWN, false);\n\n    String coreNodeName = getCoreNodeName(cd);\n    \n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      String shardId;\n      shardId = doGetShardIdProcess(cd.getName(), cd);\n      cd.getCloudDescriptor().setShardId(shardId);\n    } else {\n      \r\n      doGetShardIdProcess(cd.getName(), cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1333,"status":"M"}],"commitId":"b9e1537a7e12e6c15622452e48d8ca8c23aa98c4","commitMessage":"@@@SOLR-4916: Add support to write and read Solr index files and transaction log files to and from HDFS.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1497072 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-27 04:18:33","modifiedFileCount":"42","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-10-29 16:37:02","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":14,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-10-29 16:37:02","commitOrder":14,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    \r\n    \r\n    try {\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cd.getCloudDescriptor().getCoreNodeName() != null ) {\n        \r\n        if(zkStateReader.getClusterState().hasCollection(cd.getCloudDescriptor().getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCloudDescriptor().getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cd.getCloudDescriptor().getShardId());\n           if(slice != null){\n             if(slice.getReplica(cd.getCloudDescriptor().getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,coreNodeName +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2013-10-29 16:37:02","endLine":1402,"groupId":"54488","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/2f37db637731a421fe96abcb6304f7eda5f24a.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n    \n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    \r\n    \r\n    try {\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1358,"status":"M"}],"commitId":"0ce6e9a6949fd2ffee8ac56309557433e64f5268","commitMessage":"@@@SOLR-5311 - Avoid registering replicas which are removed .  SOLR-5310 -Add a collection admin command to remove a replica \n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1536606 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-10-29 16:37:02","modifiedFileCount":"14","status":"M","submitter":"Noble Paul"},{"authorTime":"2013-12-02 15:25:58","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":15,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-12-02 15:25:58","commitOrder":15,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cloudDesc.getCoreNodeName() != null ) {\n        \r\n        if(zkStateReader.getClusterState().hasCollection(cloudDesc.getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cloudDesc.getShardId());\n           if(slice != null){\n             if(slice.getReplica(cloudDesc.getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,cloudDesc.getCoreNodeName() +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2013-12-02 15:25:58","endLine":1378,"groupId":"54488","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/91eb9ba55f86341431367f5f22328d88eda68d.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n      cd.getCloudDescriptor().setCoreNodeName(coreNodeName);\n    }\n\n    \r\n    \r\n    try {\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cd.getCloudDescriptor().getCoreNodeName() != null ) {\n        \r\n        if(zkStateReader.getClusterState().hasCollection(cd.getCloudDescriptor().getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cd.getCloudDescriptor().getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cd.getCloudDescriptor().getShardId());\n           if(slice != null){\n             if(slice.getReplica(cd.getCloudDescriptor().getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,coreNodeName +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1333,"status":"M"}],"commitId":"a7f879db7682841539468f9af71f8b28423d9321","commitMessage":"@@@SOLR-5510\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1546922 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-02 15:25:58","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2013-12-30 12:28:35","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":16,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2013-12-30 12:28:35","commitOrder":16,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2013-12-30 12:28:35","endLine":1361,"groupId":"54488","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/a73667b3d8289bcf1c22856f46182463630bbe.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n      if(cd.getCloudDescriptor().getCollectionName() !=null && cloudDesc.getCoreNodeName() != null ) {\n        \r\n        if(zkStateReader.getClusterState().hasCollection(cloudDesc.getCollectionName())){\n        DocCollection coll = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n         if(!\"true\".equals(coll.getStr(\"autoCreated\"))){\n           Slice slice = coll.getSlice(cloudDesc.getShardId());\n           if(slice != null){\n             if(slice.getReplica(cloudDesc.getCoreNodeName()) == null) {\n               log.info(\"core_removed This core is removed from ZK\");\n               throw new SolrException(ErrorCode.NOT_FOUND,cloudDesc.getCoreNodeName() +\" is removed\");\n             }\n           }\n         }\n        }\n      }\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1330,"status":"M"}],"commitId":"a59dec83e51fe4013375f22980fcf9d7e3272432","commitMessage":"@@@SOLR-5580: Remove more code that is not legal for determining if a core is new or not.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1554138 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-30 12:28:35","modifiedFileCount":"2","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-01-06 12:37:48","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":17,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-01-06 12:37:48","commitOrder":17,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-01-06 12:37:48","endLine":1378,"groupId":"54488","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/4fd134b432190fa240368e42aebf3b30458548.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1347,"status":"M"}],"commitId":"5dfb49986ec46cb279b6279f83e34e6e34df02df","commitMessage":"@@@SOLR-5608: Don't allow a closed SolrCore to publish state to ZooKeeper.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1555659 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-06 12:37:48","modifiedFileCount":"1","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-02-24 20:31:30","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":18,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-02-24 20:31:30","commitOrder":18,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    checkStateInZk(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-02-24 20:31:30","endLine":1386,"groupId":"54488","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/b6b8ba753f509144d976b4e5d21796c7eef494.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1353,"status":"M"}],"commitId":"79e9707ce7dcbc1b01d09261b8ae5243979769e7","commitMessage":"@@@SORL-5609 Don't let cores create slices/named replicas .  SOLR-5130 addReplica Collections API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1571264 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-24 20:31:30","modifiedFileCount":"10","status":"M","submitter":"Noble Paul"},{"authorTime":"2014-02-27 14:50:22","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":19,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-02-27 14:50:22","commitOrder":19,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-02-27 14:50:22","endLine":1387,"groupId":"54488","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/7477799239d357bd006581fc5512e1738c2e4c.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    checkStateInZk(cd);\n    \r\n    \r\n    try {\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1353,"status":"M"}],"commitId":"58c98f703b2faaf510bd390dc63698fd059de8b2","commitMessage":"@@@SOLR-5609 use coreNodeName to compare replicas.  CollectionsAPIDistributedZkTest.testCollectionsAPI() randomly switches to legacyCloud=false\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1572449 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-27 14:50:22","modifiedFileCount":"5","status":"M","submitter":"Noble Paul"},{"authorTime":"2014-04-16 16:37:26","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":20,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-04-16 16:37:26","commitOrder":20,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.isExternal()  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-04-16 16:37:26","endLine":1409,"groupId":"37755","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/9652d53d4150d574fe78b34c79a94feeaf5c38.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1371,"status":"M"}],"commitId":"3cb0a855a01ea15edee5a1f6ca191832bde9c532","commitMessage":"@@@ SOLR-5473: Make one state.json per collection .   SOLR-5474: Have a new mode for SolrJ to support stateFormat=2\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1587834 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-16 16:37:26","modifiedFileCount":"18","status":"M","submitter":"Noble Paul"},{"authorTime":"2014-04-30 19:24:06","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":21,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-04-30 19:24:06","commitOrder":21,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-04-30 19:24:06","endLine":1394,"groupId":"42456","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/b266beb1e5592e2d1ec5f4263921399b230138.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.isExternal()  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1360,"status":"M"}],"commitId":"2ce57608ee95f3075c2e466210566f69285b11a3","commitMessage":"@@@revert SOLR-5473 .  SOLR-5474\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1591253 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-30 19:24:06","modifiedFileCount":"18","status":"M","submitter":"Noble Paul"},{"authorTime":"2014-07-03 00:50:32","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":22,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-07-03 00:50:32","commitOrder":22,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat() >1  ){\n        log.info(\"Registering watch for collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-07-03 00:50:32","endLine":1444,"groupId":"37755","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/082212159162895b00e1b18cef8c0c1019f286.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1406,"status":"M"}],"commitId":"af18eeed89c1469c1ec55451133843cd69c20972","commitMessage":"@@@SOLR-5473 one state.json per collection .  SOLR-5474 support for one json per collection\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1607418 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-03 00:50:32","modifiedFileCount":"18","status":"M","submitter":"Noble Paul"},{"authorTime":"2014-07-03 19:13:35","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":23,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-07-03 19:13:35","commitOrder":23,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-07-03 19:13:35","endLine":1430,"groupId":"42456","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/165f29fcecd0a1059f60eed37f718b6f62658e.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat() >1  ){\n        log.info(\"Registering watch for collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1396,"status":"M"}],"commitId":"2f28cc16e0e419e52e1892578b2bc2e941507790","commitMessage":"@@@reverting SOLR-5473 .  SOLR-5474\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1607587 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-03 19:13:35","modifiedFileCount":"18","status":"M","submitter":"Noble Paul"},{"authorTime":"2014-08-14 20:32:27","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":24,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-08-14 20:32:27","commitOrder":24,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-08-14 20:32:27","endLine":1472,"groupId":"54488","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/f57ff73b707856b447c4261e5a539bca145619.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1439,"status":"M"}],"commitId":"f25288764a92c20163520b53c8f6fd7fbfa18ca0","commitMessage":"@@@SOLR-5656: Add autoAddReplicas feature for shared file systems.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1617919 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-08-14 20:32:27","modifiedFileCount":"48","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-09-12 22:11:17","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":25,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2014-09-12 22:11:17","commitOrder":25,"curCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if(collection !=null && collection.getStateFormat()>1  ){\n        log.info(\"Registering watch for external collection {}\",cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2014-09-12 22:11:17","endLine":1503,"groupId":"37755","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5f/f39836d5b3fcc029b6bf92a1dc4d7c71993a3c.src","preCode":"  public void preRegister(CoreDescriptor cd ) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    \n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1465,"status":"M"}],"commitId":"7888a435416e0dc872a026bad1ae0a39e0ae4d64","commitMessage":"@@@split clusterstate.json SOLR-5473.  SOLR-5474.  SOLR-5810\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1624556 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-12 22:11:17","modifiedFileCount":"12","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-04-04 15:02:20","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":26,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2015-04-04 15:02:20","commitOrder":26,"curCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2015-04-04 15:02:20","endLine":1521,"groupId":"37755","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/1c9802f481c6cd1abb9f1388903e62c6a445d7.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, ZkStateReader.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1483,"status":"M"}],"commitId":"2d15d935f039adda066c5e582b1ba66da884e5ea","commitMessage":"@@@SOLR-7336: Add State enum to Replica\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1671240 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-04 15:02:20","modifiedFileCount":"42","status":"M","submitter":"Shai Erera"},{"authorTime":"2015-08-07 22:07:21","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":27,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2015-08-07 22:07:21","commitOrder":27,"curCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        log.info(\"Registering watch for collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2015-08-07 22:07:21","endLine":1543,"groupId":"30141","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9c/da2e9b096bf93b2eae52b04d4f72ef3b21d246.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null && collection.getStateFormat() > 1) {\n        log.info(\"Registering watch for external collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1505,"status":"M"}],"commitId":"29e1d19b7370ce5266f80cced7c433cfdaddb8ce","commitMessage":"@@@SOLR-5756: A utility Collection API to move a collection from stateFormat=1 to stateFormat=2\nSOLR-7870: Write a test which asserts that requests to stateFormat=2 collection succeed on a node even after all local replicas of that collection have been removed\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1694692 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-07 22:07:21","modifiedFileCount":"11","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2016-04-21 20:31:14","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":28,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2016-04-21 20:31:14","commitOrder":28,"curCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2016-04-21 20:31:14","endLine":1503,"groupId":"63319","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3a/fc3b998929a7146430953b5aef6dd48525ffe2.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(cd.getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        log.info(\"Registering watch for collection {}\", cd.getCloudDescriptor().getCollectionName());\n        zkStateReader.addCollectionWatch(cd.getCloudDescriptor().getCollectionName());\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"M"}],"commitId":"2ff8bb0c8b65148b5d4043a4e795412c7571e460","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-21 20:31:14","modifiedFileCount":"13","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":29,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2016-05-23 14:35:53","commitOrder":29,"curCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1486,"groupId":"54488","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/6e7666513332023ce31a494cd419ed5d9ff00d.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.addCollectionWatch(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1446,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-06-03 22:05:20","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":30,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2016-06-03 22:05:20","commitOrder":30,"curCode":"  public void preRegister(CoreDescriptor cd) throws InterruptedException {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2016-06-03 22:50:23","endLine":1462,"groupId":"54488","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/fa54b2a9360fd0d9a30e0ddbab9269068464b1.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1422,"status":"M"}],"commitId":"d550b1ca43c7c523b71b4540edef217036421f9e","commitMessage":"@@@SOLR-9140: Replace some zk state polling with CollectionStateWatchers\n","date":"2016-06-03 22:50:23","modifiedFileCount":"5","status":"M","submitter":"Alan Woodward"},{"authorTime":"2016-06-07 19:11:01","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":31,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2016-06-07 19:11:01","commitOrder":31,"curCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2016-06-07 19:11:01","endLine":1486,"groupId":"54488","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/6e7666513332023ce31a494cd419ed5d9ff00d.src","preCode":"  public void preRegister(CoreDescriptor cd) throws InterruptedException {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1446,"status":"M"}],"commitId":"d74db527bfc0150fa1ee5af267a07496aa394ee0","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-06-07 19:11:01","modifiedFileCount":"36","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":32,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2016-10-03 03:18:22","commitOrder":32,"curCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","date":"2016-10-03 03:18:22","endLine":1521,"groupId":"54488","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/85a678d8cbeb5804d02f8bbcb1da78bb4522dd.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.info(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1481,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-10-04 16:25:17","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":33,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2017-10-04 16:25:17","commitOrder":33,"curCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","date":"2017-10-04 16:25:17","endLine":1512,"groupId":"23138","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd@booleanpublishState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/8a1308826a56b1993cf1f7e6205395f1352051.src","preCode":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      \r\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1474,"status":"M"}],"commitId":"990573689887cd0e6df0313984b3051aa74ba76f","commitMessage":"@@@SOLR-11424: When legacyCloud=false.  cores should not publish itself as DOWN on startup\n","date":"2017-10-04 16:25:17","modifiedFileCount":"2","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2017-10-15 00:15:40","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":34,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2017-10-15 00:15:40","commitOrder":34,"curCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","date":"2017-10-15 00:15:40","endLine":1607,"groupId":"23138","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd@booleanpublishState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/171dab5faaf8516e160cbc712488cf4ed550c4.src","preCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1566,"status":"M"}],"commitId":"8dd489edcee009e40f44f98c79e69434bd6333ea","commitMessage":"@@@SOLR-11285: Support simulations at scale in the autoscaling framework. \npart 1 (refactoring).\n","date":"2017-10-15 00:15:40","modifiedFileCount":"78","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2018-03-31 22:04:01","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":35,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2018-03-31 22:04:01","commitOrder":35,"curCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      \r\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","date":"2018-03-31 22:04:01","endLine":1674,"groupId":"23138","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd@booleanpublishState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/2a8b9d7e1bef8c5a1281946430dbfb3312b94b.src","preCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1630,"status":"M"}],"commitId":"dc9c60322a0fb026553d5fe359c8e5c41b0d07ef","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-03-31 22:04:01","modifiedFileCount":"11","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-04-17 21:16:31","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":36,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"12085","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2018-04-17 21:16:31","commitOrder":36,"curCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      \r\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","date":"2018-04-17 21:16:31","endLine":1686,"groupId":"7429","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd@booleanpublishState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/d02b6b01a9bfdf42351b398805b7fe1fbae1a0.src","preCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      \r\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1643,"status":"M"}],"commitId":"09db13f4f459a391896db2a90b2830f9b1fd898d","commitMessage":"@@@SOLR-12187: Replica should watch clusterstate and unload itself if its entry is removed\n","date":"2018-04-17 21:16:31","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-05-02 01:06:57","codes":[{"authorDate":"2012-08-14 09:31:27","commitOrder":37,"curCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","date":"2012-08-14 09:31:27","endLine":716,"groupId":"1024","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"closeKeeper","params":"(SolrZooKeeperkeeper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/0de649ddc54e18cf7799d18fbc7afc0aea2393.src","preCode":"  private void closeKeeper(SolrZooKeeper keeper) {\n    if (keeper != null) {\n      try {\n        keeper.close();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\",\n            e);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"N"},{"authorDate":"2020-05-02 01:06:57","commitOrder":37,"curCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (log.isDebugEnabled()) {\n        log.debug(collection == null ?\n                \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n                \"Registering watch for collection {}\",\n            collectionName);\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      \r\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","date":"2020-05-02 01:06:57","endLine":1810,"groupId":"1024","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"preRegister","params":"(CoreDescriptorcd@booleanpublishState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/0f2e467141bda0078c10821a1a35fc36b7d663.src","preCode":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    \r\n    \r\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      \r\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      \r\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      \r\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1765,"status":"M"}],"commitId":"217c2faa2cd7b540d8e9933355dbd878a4d32057","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-02 01:06:57","modifiedFileCount":"11","status":"M","submitter":"Erick Erickson"}]
