[{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n","date":"2016-05-05 15:05:25","endLine":88,"groupId":"23460","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDatabase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","date":"2016-05-05 15:05:25","endLine":182,"groupId":"23460","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"MB"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-06-30 02:27:56","commitOrder":3,"curCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    \n  }\n","date":"2016-06-30 02:27:56","endLine":89,"groupId":"23460","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDatabase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/98/0d0e772b85210602a15cc0e451c27b67044f74.src","preCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":3,"curCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","date":"2016-05-05 15:05:25","endLine":182,"groupId":"23460","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"1ae0d8d6e1394a941b65c940cb449662d7cab5d2","commitMessage":"@@@SOLR-9246: If the JDBCStream sees an unknown column type it will now throw a detailed exception\n","date":"2016-06-30 02:27:56","modifiedFileCount":"2","status":"M","submitter":"Dennis Gove"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2017-05-12 21:44:16","commitOrder":4,"curCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n","date":"2017-05-12 21:44:16","endLine":103,"groupId":"23460","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDatabase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/13f24ba281feea7c007ac2c6c762410058a080.src","preCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":4,"curCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","date":"2016-05-05 15:05:25","endLine":182,"groupId":"23460","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"e61b5b34bf14b9addd98eeafdad43b92e6208d5f","commitMessage":"@@@SOLR-10617: JDBCStream to support additional types.  minor refactoring to separate out CalciteJDBCStream.  upgrade hsqldb for JDBCStream & DIH tests.\n","date":"2017-05-12 21:44:16","modifiedFileCount":"4","status":"M","submitter":"jdyer1"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2019-04-16 20:00:09","commitOrder":5,"curCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").getConstructor().newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n","date":"2019-04-16 20:00:09","endLine":106,"groupId":"10751","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDatabase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/be1011e4ef752e79cb1df9b33c880ef63f0a8b.src","preCode":"  public static void setupDatabase() throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    Class.forName(\"org.hsqldb.jdbcDriver\").newInstance();\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement  = connection.createStatement();\n    statement.executeUpdate(\"create table COUNTRIES(CODE varchar(3) not null primary key, COUNTRY_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE(ID int not null primary key, NAME varchar(50), COUNTRY_CODE char(2), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table PEOPLE_SPORTS(ID int not null primary key, PERSON_ID int, SPORT_NAME varchar(50), DELETED char(1) default 'N')\");\n    statement.executeUpdate(\"create table UNSUPPORTED_COLUMNS(ID int not null primary key, UNSP binary)\");\n    statement.executeUpdate(\"create table DUAL(ID int not null primary key)\");\n    statement.executeUpdate(\"insert into DUAL values(1)\");\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":5,"curCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","date":"2016-05-05 15:05:25","endLine":182,"groupId":"10751","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  public void testJDBCJoin() throws Exception {\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n          Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','NI')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NG')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NF')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NE')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','NC')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NZ')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','NR')\");\n    }\n    \n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    stream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE where COUNTRIES.CODE = 'NL' order by PEOPLE.ID\", new FieldComparator(\"ID\", ComparatorOrder.ASCENDING));\n    tuples = getTuples(stream);\n    \n    assertEquals(3, tuples.size());\n    assertOrderOf(tuples, \"ID\", 11, 17, 19);\n    assertOrderOf(tuples, \"NAME\", \"Emma\", \"Mia\", \"Olivia\");    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"faaee86efb01fa6e431fcb129cfb956c7d62d514","commitMessage":"@@@LUCENE-8738: Move to Java 11 as minimum Java version (merged branch: jira/LUCENE-8738)\n\nCo-authored-by: Adrien Grand <jpountz@apache.org>\n","date":"2019-04-16 20:00:09","modifiedFileCount":"119","status":"M","submitter":"Uwe Schindler"}]
