[{"authorTime":"2014-09-03 05:25:05","codes":[{"authorDate":"2014-09-03 05:25:05","commitOrder":7,"curCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); \r\n      if (success) {\n        log.debug(\"Added field(s): {}\", newFields);\n      } else {\n        log.error(\"Failed to add field(s): {}\", newFields);\n        newSchema = null;\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2014-09-03 05:25:05","endLine":257,"groupId":"17094","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addFields","params":"(Collection<SchemaField>newFields@Map<String@Collection<String>>copyFieldNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/8a8cf7dd2dc8a03cfc88fa942d24ecdf756c25.src","preCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); \r\n      if (success) {\n        log.debug(\"Added field(s): {}\", newFields);\n      } else {\n        log.error(\"Failed to add field(s): {}\", newFields);\n        newSchema = null;\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"MB"},{"authorDate":"2014-09-03 05:25:05","commitOrder":7,"curCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n        \n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); \r\n      if (success) {\n        log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n      } else {\n        log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2014-09-03 05:25:05","endLine":320,"groupId":"21306","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addDynamicFields","params":"(Collection<SchemaField>newDynamicFields@Map<String@Collection<String>>copyFieldNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/8a8cf7dd2dc8a03cfc88fa942d24ecdf756c25.src","preCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n        \n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); \r\n      if (success) {\n        log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n      } else {\n        log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"B"}],"commitId":"d88b031c89a5246457c5cb185a3c3cd5e86d2c39","commitMessage":"@@@SOLR-5097: Schema API: Add REST support for adding dynamic fields to the schema.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1622135 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-03 05:25:05","modifiedFileCount":"9","status":"M","submitter":"Steven Rowe"},{"authorTime":"2014-10-01 23:20:48","codes":[{"authorDate":"2014-10-01 23:20:48","commitOrder":8,"curCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2014-10-01 23:20:48","endLine":449,"groupId":"17094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addFields","params":"(Collection<SchemaField>newFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/4dc7bea3f762b7af4a1aea7889e786d6d48858.src","preCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields, Map<String, Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); \r\n      if (success) {\n        log.debug(\"Added field(s): {}\", newFields);\n      } else {\n        log.error(\"Failed to add field(s): {}\", newFields);\n        newSchema = null;\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2014-10-01 23:20:48","commitOrder":8,"curCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2014-10-01 23:20:48","endLine":499,"groupId":"21306","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addDynamicFields","params":"(Collection<SchemaField>newDynamicFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/4dc7bea3f762b7af4a1aea7889e786d6d48858.src","preCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n        \n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); \r\n      if (success) {\n        log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n      } else {\n        log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"041ea208538b50c1457e7be4d588c6409ef21609","commitMessage":"@@@SOLR-6476\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1628734 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-10-01 23:20:48","modifiedFileCount":"8","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-03-17 13:13:36","codes":[{"authorDate":"2015-03-17 13:13:36","commitOrder":9,"curCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2015-03-17 13:13:36","endLine":442,"groupId":"17094","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addFields","params":"(Collection<SchemaField>newFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/6a89fc0c2f45c79f0f4cf9a721b2a3740e8ddd.src","preCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2015-03-17 13:13:36","commitOrder":9,"curCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2015-03-17 13:13:36","endLine":610,"groupId":"21306","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addDynamicFields","params":"(Collection<SchemaField>newDynamicFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/6a89fc0c2f45c79f0f4cf9a721b2a3740e8ddd.src","preCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"M"}],"commitId":"ff83497b27c56dd86a94f64e081c2694772bd571","commitMessage":"@@@SOLR-6141: Schema API: Remove fields.  dynamic fields.  field types and copy fields; and replace fields.  dynamic fields and field types\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1667175 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-17 13:13:36","modifiedFileCount":"11","status":"M","submitter":"Steven Rowe"},{"authorTime":"2015-04-09 12:42:30","codes":[{"authorDate":"2015-04-09 12:42:30","commitOrder":10,"curCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2015-04-09 12:42:30","endLine":434,"groupId":"17094","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addFields","params":"(Collection<SchemaField>newFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/6d6bc65b8edc75fb83961e5399755eea21c27c.src","preCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2015-04-09 12:42:30","commitOrder":10,"curCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2015-04-09 12:42:30","endLine":601,"groupId":"21306","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addDynamicFields","params":"(Collection<SchemaField>newDynamicFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/6d6bc65b8edc75fb83961e5399755eea21c27c.src","preCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      \r\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"4c83c2200c9b2097cad09e5dd0f97033254620df","commitMessage":"@@@SOLR-7366: fix regression in ManagedIndexSchema's handling of ResourceLoaderAware objects used by field types.  causing example XML docs to not be indexable via bin/post; add a test indexing example docs that fails without the patch and succeeds with it\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1672238 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-09 12:42:30","modifiedFileCount":"2","status":"M","submitter":"Steven Rowe"},{"authorTime":"2015-04-09 12:42:30","codes":[{"authorDate":"2016-02-01 22:15:17","commitOrder":11,"curCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.fields.get(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2016-02-01 22:15:17","endLine":439,"groupId":"17094","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addFields","params":"(Collection<SchemaField>newFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b41cd18accc1518c76a2ae4e1ac8f42e093bae.src","preCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.getFieldOrNull(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2015-04-09 12:42:30","commitOrder":11,"curCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2015-04-09 12:42:30","endLine":601,"groupId":"21306","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addDynamicFields","params":"(Collection<SchemaField>newDynamicFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/6d6bc65b8edc75fb83961e5399755eea21c27c.src","preCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"N"}],"commitId":"064c0ac00fed662183c4cb117f6aeb6d0f9fe1a1","commitMessage":"@@@SOLR-8607: The Schema API refuses to add new fields that match existing dynamic fields\n","date":"2016-02-01 22:15:17","modifiedFileCount":"2","status":"M","submitter":"Steve Rowe"},{"authorTime":"2015-04-09 12:42:30","codes":[{"authorDate":"2020-04-20 03:58:50","commitOrder":12,"curCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.fields.get(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"{} contains default value: {}\", newField.getName(), newField.getDefaultValue());\n          }\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"{} is required in this schema\", newField.getName());\n          }\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2020-04-20 03:58:50","endLine":450,"groupId":"101972","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addFields","params":"(Collection<SchemaField>newFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/04b2230384f85bff293769ea6c93b239d6756d.src","preCode":"  public ManagedIndexSchema addFields(Collection<SchemaField> newFields,\n                                      Map<String, Collection<String>> copyFieldNames,\n                                      boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newField : newFields) {\n        if (null != newSchema.fields.get(newField.getName())) {\n          String msg = \"Field '\" + newField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        newSchema.fields.put(newField.getName(), newField);\n\n        if (null != newField.getDefaultValue()) {\n          log.debug(newField.getName() + \" contains default value: \" + newField.getDefaultValue());\n          newSchema.fieldsWithDefaultValue.add(newField);\n        }\n        if (newField.isRequired()) {\n          log.debug(\"{} is required in this schema\", newField.getName());\n          newSchema.requiredFields.add(newField);\n        }\n        Collection<String> copyFields = copyFieldNames.get(newField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n\n      newSchema.refreshAnalyzers();\n\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added field(s): {}\", newFields);\n        } else {\n          log.error(\"Failed to add field(s): {}\", newFields);\n          newSchema = null;\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"},{"authorDate":"2015-04-09 12:42:30","commitOrder":12,"curCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","date":"2015-04-09 12:42:30","endLine":601,"groupId":"101972","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addDynamicFields","params":"(Collection<SchemaField>newDynamicFields@Map<String@Collection<String>>copyFieldNames@booleanpersist)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/6d6bc65b8edc75fb83961e5399755eea21c27c.src","preCode":"  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n      if (persist) {\n        success = newSchema.persistManagedSchema(false); \r\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"N"}],"commitId":"f01c040ab3a600eb20995a9faf8d1b526efef321","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-20 03:58:50","modifiedFileCount":"27","status":"M","submitter":"Erick Erickson"}]
