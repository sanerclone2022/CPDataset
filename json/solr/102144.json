[{"authorTime":"2012-05-14 21:42:17","codes":[{"authorDate":"2012-05-14 21:42:17","commitOrder":3,"curCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<Collector>();\n    if (topNGroups > 0) {\n      firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2012-05-14 21:42:17","endLine":100,"groupId":"42698","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/a8eb3c71c219188cda9faa13c8665b46686ecf.src","preCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<Collector>();\n    if (topNGroups > 0) {\n      firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2012-05-14 21:42:17","commitOrder":3,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<Collector>();\n    secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n    );\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2012-05-14 21:42:17","endLine":133,"groupId":"18040","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/dcabb22acd74054b7446f72dd97a827898fd8e.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<Collector>();\n    secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n    );\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"MB"}],"commitId":"04dceabc182ef5f7ff38cc382aaef2e0852cf167","commitMessage":"@@@SOLR-3436: Group count incorrect when not all shards are queried in the second pass.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1338194 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-05-14 21:42:17","modifiedFileCount":"9","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<>();\n    if (topNGroups > 0) {\n      firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2014-03-12 22:39:17","endLine":101,"groupId":"42698","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/798470c98de66b2e54a2c3b2f70c1561550f25.src","preCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<Collector>();\n    if (topNGroups > 0) {\n      firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<>();\n    secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n    );\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2014-03-12 22:39:17","endLine":134,"groupId":"18040","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/b43befc05ddbf7d3abcfe84c8cbad900dbd076.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<Collector>();\n    secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n    );\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-05-17 00:39:56","codes":[{"authorDate":"2014-05-17 00:39:56","commitOrder":5,"curCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<>();\n    FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object,Object>(), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new FunctionAllGroupsCollector(vs, new HashMap<Object,Object>());\n      } else {\n        allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2014-05-17 00:39:56","endLine":118,"groupId":"10646","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/53e747d3bd12cb125c4008bff860706cd16922.src","preCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<>();\n    if (topNGroups > 0) {\n      firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2014-05-17 00:39:56","commitOrder":5,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<>();\n    FieldType fieldType = field.getType();\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new FunctionSecondPassGroupingCollector(\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true, vs, new HashMap<Object,Object>()\n      );\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2014-05-17 00:39:56","endLine":149,"groupId":"1520","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/8b4851f6a63e7c8c3067deec265b4f3a887b06.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<>();\n    secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n    );\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"e2ba693a6ee11127897a25de1dbb7549ebe6ea3a","commitMessage":"@@@LUCENE-5666: Add UninvertingReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1595259 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-17 00:39:56","modifiedFileCount":"155","status":"M","submitter":"Robert Muir"},{"authorTime":"2015-11-23 21:09:21","codes":[{"authorDate":"2015-11-23 21:09:21","commitOrder":6,"curCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object,Object>(), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new FunctionAllGroupsCollector(vs, new HashMap<Object,Object>());\n      } else {\n        allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2015-11-23 21:09:21","endLine":118,"groupId":"10646","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/9e8e046cb5e54c0d88cc9cf5026ea1ec6ffe47.src","preCode":"  public List<Collector> create() throws IOException {\n    List<Collector> collectors = new ArrayList<>();\n    FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object,Object>(), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new FunctionAllGroupsCollector(vs, new HashMap<Object,Object>());\n      } else {\n        allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2015-11-23 21:09:21","commitOrder":6,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new FunctionSecondPassGroupingCollector(\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true, vs, new HashMap<Object,Object>()\n      );\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2015-11-23 21:09:21","endLine":149,"groupId":"1520","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/5058c987ed30c7d7ea0dc196aa28897e9f10d5.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    List<Collector> collectors = new ArrayList<>();\n    FieldType fieldType = field.getType();\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new FunctionSecondPassGroupingCollector(\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true, vs, new HashMap<Object,Object>()\n      );\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"11d8f445bee8b05c6b2c5d3bae54598d4fd34e7b","commitMessage":"@@@SOLR-8277: (Search|Top)GroupsFieldCommand tweaks\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1715798 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-23 21:09:21","modifiedFileCount":"2","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-02-08 02:38:22","codes":[{"authorDate":"2017-02-08 02:38:22","commitOrder":7,"curCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object,Object>(), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new FunctionAllGroupsCollector(vs, new HashMap<Object,Object>());\n      } else {\n        allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2017-02-08 02:38:22","endLine":117,"groupId":"10646","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/f9f9da3c6aa26e06b5a24fc33ba1b24c6847a3.src","preCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object,Object>(), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumericType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new FunctionAllGroupsCollector(vs, new HashMap<Object,Object>());\n      } else {\n        allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2017-02-08 02:38:22","commitOrder":7,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new FunctionSecondPassGroupingCollector(\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true, vs, new HashMap<Object,Object>()\n      );\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2017-02-08 02:38:22","endLine":148,"groupId":"1520","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/6c40148af9fa364b386e27c532b34674db07cf.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumericType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new FunctionSecondPassGroupingCollector(\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true, vs, new HashMap<Object,Object>()\n      );\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"59c41e2a6c685dd9ac943c69d12e9bfe2a7d380e","commitMessage":"@@@SOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n\nModify references to getNumericType() to use the new getNumberType(). NumberType is shared for the different numeric implementations supported in Solr (TrieFields and PointFields).\nCC SOLR-8396\n","date":"2017-02-08 02:38:22","modifiedFileCount":"27","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-03-29 02:52:53","codes":[{"authorDate":"2017-03-29 02:52:53","commitOrder":8,"curCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2017-04-10 18:10:18","endLine":121,"groupId":"8531","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/1dda050a383edb43d49ed805c8e2127b7feb2d.src","preCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object,Object>(), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new FunctionAllGroupsCollector(vs, new HashMap<Object,Object>());\n      } else {\n        allGroupsCollector = new TermAllGroupsCollector(field.getName());\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2017-03-29 02:52:53","commitOrder":8,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2017-04-10 18:10:18","endLine":148,"groupId":"52900","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/ea4cd9ade523a10b715d8ef0f8d9a3c389c303.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new FunctionSecondPassGroupingCollector(\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true, vs, new HashMap<Object,Object>()\n      );\n    } else {\n      secondPassCollector = new TermSecondPassGroupingCollector(\n          field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"caf329717ef643b2a5a8b7ef0bfb7bd5e096c849","commitMessage":"@@@LUCENE-7701: Refactor grouping collectors\n","date":"2017-04-10 18:10:18","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"},{"authorTime":"2017-04-19 18:50:24","codes":[{"authorDate":"2017-03-29 02:52:53","commitOrder":9,"curCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2017-04-10 18:10:18","endLine":121,"groupId":"8531","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/1dda050a383edb43d49ed805c8e2127b7feb2d.src","preCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2017-04-19 18:50:24","commitOrder":9,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2017-04-19 19:28:14","endLine":148,"groupId":"52900","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a4/962789a0c528cce4278cedca87cd3dd72e8ddb.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"323c972922c5d2e272ef4558cf725e5d9ccef623","commitMessage":"@@@SOLR-10394: a few more essentially non-public sortWithinGroup to withinGroupSort renames\n","date":"2017-04-19 19:28:14","modifiedFileCount":"6","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2018-07-18 18:49:31","codes":[{"authorDate":"2017-03-29 02:52:53","commitOrder":10,"curCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2017-04-10 18:10:18","endLine":121,"groupId":"8531","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/1dda050a383edb43d49ed805c8e2127b7feb2d.src","preCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2018-07-18 18:49:31","commitOrder":10,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2018-07-18 18:55:05","endLine":148,"groupId":"52900","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/7e10da4cc8748f63d3354b2479db8f48626278.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore, true\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"7d8fc543f01a31c8439c369b26c3c8c5924ba4ea","commitMessage":"@@@LUCENE-8411: Remove fillFields from TopFieldCollector factory methods.\n","date":"2018-07-18 18:55:05","modifiedFileCount":"28","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-23 15:05:02","codes":[{"authorDate":"2017-03-29 02:52:53","commitOrder":11,"curCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","date":"2017-04-10 18:10:18","endLine":121,"groupId":"102144","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/1dda050a383edb43d49ed805c8e2127b7feb2d.src","preCode":"  public List<Collector> create() throws IOException {\n    final List<Collector> collectors = new ArrayList<>(2);\n    final FieldType fieldType = field.getType();\n    if (topNGroups > 0) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topNGroups);\n      } else {\n        firstPassGroupingCollector\n            = new FirstPassGroupingCollector<>(new TermGroupSelector(field.getName()), groupSort, topNGroups);\n      }\n      collectors.add(firstPassGroupingCollector);\n    }\n    if (includeGroupCount) {\n      if (fieldType.getNumberType() != null) {\n        ValueSource vs = fieldType.getValueSource(field, null);\n        allGroupsCollector = new AllGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()));\n      } else {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(field.getName()));\n      }\n      collectors.add(allGroupsCollector);\n    }\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2018-07-23 15:05:02","commitOrder":11,"curCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, withinGroupSort, maxDocPerGroup, needMaxScore\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, withinGroupSort, maxDocPerGroup, needMaxScore\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","date":"2018-07-23 15:06:49","endLine":161,"groupId":"102144","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/02841ab4f42f43195326fdff8c4983a8a0cc99.src","preCode":"  public List<Collector> create() throws IOException {\n    if (firstPhaseGroups.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final List<Collector> collectors = new ArrayList<>(1);\n    final FieldType fieldType = field.getType();\n    if (fieldType.getNumberType() != null) {\n      ValueSource vs = fieldType.getValueSource(field, null);\n      Collection<SearchGroup<MutableValue>> v = GroupConverter.toMutable(field, firstPhaseGroups);\n      secondPassCollector = new TopGroupsCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()),\n          v, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore\n      );\n    } else {\n      secondPassCollector = new TopGroupsCollector<>(new TermGroupSelector(field.getName()),\n          firstPhaseGroups, groupSort, withinGroupSort, maxDocPerGroup, needScores, needMaxScore\n      );\n    }\n    collectors.add(secondPassCollector);\n    return collectors;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"55bfadbce115a825a75686fe0bfe71406bc3ee44","commitMessage":"@@@LUCENE-8412: TopFieldCollector no longer takes a trackDocScores option.\n","date":"2018-07-23 15:06:49","modifiedFileCount":"30","status":"M","submitter":"Adrien Grand"}]
