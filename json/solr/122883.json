[{"authorTime":"2020-07-07 10:17:26","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":2,"curCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request,\n                                   String collection)\n      throws SolrServerException, IOException {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      if (!ur.getDeleteQuery().isEmpty())\n        return super.request(request, collection);\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request))\n          return super.request(request, collection);\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw (IOException) e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      } else if (e instanceof SolrServerException) {\n        throw (SolrServerException) e;\n      } else {\n        throw new SolrServerException(e);\n      }\n    }\n\n    return super.request(request, collection);\n  }\n","date":"2020-06-18 05:51:41","endLine":121,"groupId":"58489","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(@SuppressWarnings({\"rawtypes\"})SolrRequestrequest@Stringcollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/46c12839da2b6c397bd2ea1e9d30a8d869eb76.src","preCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request,\n                                   String collection)\n      throws SolrServerException, IOException {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      if (!ur.getDeleteQuery().isEmpty())\n        return super.request(request, collection);\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request))\n          return super.request(request, collection);\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw (IOException) e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      } else if (e instanceof SolrServerException) {\n        throw (SolrServerException) e;\n      } else {\n        throw new SolrServerException(e);\n      }\n    }\n\n    return super.request(request, collection);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/MockingHttp2SolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"NB"},{"authorDate":"2020-07-07 10:17:26","commitOrder":2,"curCode":"  public Cancellable asyncRequest(@SuppressWarnings({\"rawtypes\"}) SolrRequest request,\n                                  String collection, AsyncListener<NamedList<Object>> asyncListener) {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      \r\n      if (ur.getDeleteQuery() != null && !ur.getDeleteQuery().isEmpty()) {\n        return super.asyncRequest(request, collection, asyncListener);\n      }\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request)) {\n          return super.asyncRequest(request, collection, asyncListener);\n        }\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          e = new SolrServerException(e);\n        }\n      }\n      asyncListener.onFailure(e);\n    }\n\n    return super.asyncRequest(request, collection, asyncListener);\n  }\n","date":"2020-07-07 10:17:26","endLine":155,"groupId":"62411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncRequest","params":"(@SuppressWarnings({\"rawtypes\"})SolrRequestrequest@Stringcollection@AsyncListener<NamedList<Object>>asyncListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ab/6cf8391983a145e79fa59b64f31d6aecf79899.src","preCode":"  public Cancellable asyncRequest(@SuppressWarnings({\"rawtypes\"}) SolrRequest request,\n                                  String collection, AsyncListener<NamedList<Object>> asyncListener) {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      \r\n      if (ur.getDeleteQuery() != null && !ur.getDeleteQuery().isEmpty()) {\n        return super.asyncRequest(request, collection, asyncListener);\n      }\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request)) {\n          return super.asyncRequest(request, collection, asyncListener);\n        }\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          e = new SolrServerException(e);\n        }\n      }\n      asyncListener.onFailure(e);\n    }\n\n    return super.asyncRequest(request, collection, asyncListener);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/MockingHttp2SolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"a80eb84d5659a06a10860ad2470e87d80b19fa5d","commitMessage":"@@@SOLR-14354: HttpShardHandler send requests in async (#1470)\n\n","date":"2020-07-07 10:17:26","modifiedFileCount":"23","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":3,"curCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request,\n                                   String collection)\n      throws SolrServerException, IOException {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      if (!ur.getDeleteQuery().isEmpty())\n        return super.request(request, collection);\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request))\n          return super.request(request, collection);\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw (IOException) e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      } else if (e instanceof SolrServerException) {\n        throw (SolrServerException) e;\n      } else {\n        throw new SolrServerException(e);\n      }\n    }\n\n    return super.request(request, collection);\n  }\n","date":"2020-06-18 05:51:41","endLine":121,"groupId":"122883","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"request","params":"(@SuppressWarnings({\"rawtypes\"})SolrRequestrequest@Stringcollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/46c12839da2b6c397bd2ea1e9d30a8d869eb76.src","preCode":"  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request,\n                                   String collection)\n      throws SolrServerException, IOException {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      if (!ur.getDeleteQuery().isEmpty())\n        return super.request(request, collection);\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request))\n          return super.request(request, collection);\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw (IOException) e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      } else if (e instanceof SolrServerException) {\n        throw (SolrServerException) e;\n      } else {\n        throw new SolrServerException(e);\n      }\n    }\n\n    return super.request(request, collection);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/MockingHttp2SolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2021-06-22 00:19:37","commitOrder":3,"curCode":"  public Cancellable asyncRequest(SolrRequest<?> request,\n                                  String collection, AsyncListener<NamedList<Object>> asyncListener) {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      \r\n      if (ur.getDeleteQuery() != null && !ur.getDeleteQuery().isEmpty()) {\n        return super.asyncRequest(request, collection, asyncListener);\n      }\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request)) {\n          return super.asyncRequest(request, collection, asyncListener);\n        }\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          e = new SolrServerException(e);\n        }\n      }\n      asyncListener.onFailure(e);\n    }\n\n    return super.asyncRequest(request, collection, asyncListener);\n  }\n","date":"2021-06-22 00:19:37","endLine":155,"groupId":"122883","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"asyncRequest","params":"(SolrRequest<?>request@Stringcollection@AsyncListener<NamedList<Object>>asyncListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/0de4bb08ccfd6c02ef26497ac46bc98dd5df9e.src","preCode":"  public Cancellable asyncRequest(@SuppressWarnings({\"rawtypes\"}) SolrRequest request,\n                                  String collection, AsyncListener<NamedList<Object>> asyncListener) {\n    if (request instanceof UpdateRequest) {\n      UpdateRequest ur = (UpdateRequest) request;\n      \r\n      if (ur.getDeleteQuery() != null && !ur.getDeleteQuery().isEmpty()) {\n        return super.asyncRequest(request, collection, asyncListener);\n      }\n    }\n\n    if (exp != null) {\n      if (oneExpPerReq) {\n        if (reqGotException.contains(request)) {\n          return super.asyncRequest(request, collection, asyncListener);\n        }\n        else\n          reqGotException.add(request);\n      }\n\n      Exception e = exception();\n      if (e instanceof IOException) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          e = new SolrServerException(e);\n        }\n      }\n      asyncListener.onFailure(e);\n    }\n\n    return super.asyncRequest(request, collection, asyncListener);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/MockingHttp2SolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
