[{"authorTime":"2020-04-07 18:26:11","codes":[{"authorDate":"2020-04-07 18:26:11","commitOrder":1,"curCode":"  public void testHealthCheckHandler() throws Exception {\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","date":"2020-04-07 18:26:11","endLine":142,"groupId":"57294","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHealthCheckHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/517f2f95b5825c6304c13838e1741b591f479d.src","preCode":"  public void testHealthCheckHandler() throws Exception {\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2020-04-07 18:26:11","commitOrder":1,"curCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","date":"2020-04-07 18:26:11","endLine":152,"groupId":"57296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHealthCheckHandlerSolrJ","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/517f2f95b5825c6304c13838e1741b591f479d.src","preCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"f2114b9935fb20de146ab9ef4c2e99c870af7215","commitMessage":"@@@SOLR-14210: Include replica health in healtcheck handler (#1387)\n\n","date":"2020-04-07 18:26:11","modifiedFileCount":"1","status":"B","submitter":"Jan H?ydahl"},{"authorTime":"2020-04-07 18:26:11","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":2,"curCode":"  public void testHealthCheckHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","date":"2020-06-18 05:51:41","endLine":143,"groupId":"57294","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHealthCheckHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/a03ab8082813b334a197368e64ab64b0b9614b.src","preCode":"  public void testHealthCheckHandler() throws Exception {\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-04-07 18:26:11","commitOrder":2,"curCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","date":"2020-04-07 18:26:11","endLine":152,"groupId":"57296","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHealthCheckHandlerSolrJ","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/517f2f95b5825c6304c13838e1741b591f479d.src","preCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"b01e249c9ec724b6df120a5d731020cfe4de3fce","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 1)\n","date":"2020-06-18 05:51:41","modifiedFileCount":"213","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-04-07 18:26:11","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":3,"curCode":"  public void testHealthCheckHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","date":"2021-01-18 23:59:41","endLine":144,"groupId":"57294","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHealthCheckHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/b66939f2f9e62e3652e29640b05e914d730007.src","preCode":"  public void testHealthCheckHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-04-07 18:26:11","commitOrder":3,"curCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","date":"2020-04-07 18:26:11","endLine":152,"groupId":"57296","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHealthCheckHandlerSolrJ","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/517f2f95b5825c6304c13838e1741b591f479d.src","preCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-04-07 18:26:11","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":4,"curCode":"  public void testHealthCheckHandler() throws Exception {\n    GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","date":"2021-07-13 23:49:56","endLine":143,"groupId":"103527","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testHealthCheckHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/8f16635d41371457a1839c3435ac2e382effb1.src","preCode":"  public void testHealthCheckHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    \r\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      \r\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      \r\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      \r\n      newJetty.getCoreContainer().shutdown();\n\n      \r\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    \r\n    \r\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-04-07 18:26:11","commitOrder":4,"curCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","date":"2020-04-07 18:26:11","endLine":152,"groupId":"103527","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHealthCheckHandlerSolrJ","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/517f2f95b5825c6304c13838e1741b591f479d.src","preCode":"  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    \r\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
