[{"authorTime":"2015-06-21 00:24:08","codes":[{"authorDate":"2015-06-21 00:24:08","commitOrder":1,"curCode":"  public void testGetFieldAccuracy() throws Exception {\n    String fieldName = \"signatureField\";\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse fieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(fieldResponse);\n    Map<String, Object> fieldAttributes = fieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(fieldAttributes.get(\"type\"))));\n  }\n","date":"2015-06-21 00:24:08","endLine":172,"groupId":"37220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  public void testGetFieldAccuracy() throws Exception {\n    String fieldName = \"signatureField\";\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse fieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(fieldResponse);\n    Map<String, Object> fieldAttributes = fieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(fieldAttributes.get(\"type\"))));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2015-06-21 00:24:08","commitOrder":1,"curCode":"  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    \r\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    \r\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    \r\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n","date":"2015-06-21 00:24:08","endLine":511,"groupId":"37220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceDynamicFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    \r\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    \r\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    \r\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"B"}],"commitId":"fdeffbb536dc91712ad8572b386c8c9c1b2b7c8d","commitMessage":"@@@SOLR-7182: Make the Schema-API a first class citizen of SolrJ\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686650 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-21 00:24:08","modifiedFileCount":"0","status":"B","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2015-06-21 00:24:08","commitOrder":2,"curCode":"  public void testGetFieldAccuracy() throws Exception {\n    String fieldName = \"signatureField\";\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse fieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(fieldResponse);\n    Map<String, Object> fieldAttributes = fieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(fieldAttributes.get(\"type\"))));\n  }\n","date":"2015-06-21 00:24:08","endLine":172,"groupId":"101100","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  public void testGetFieldAccuracy() throws Exception {\n    String fieldName = \"signatureField\";\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse fieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(fieldResponse);\n    Map<String, Object> fieldAttributes = fieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(fieldAttributes.get(\"type\"))));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    \r\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    \r\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    \r\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n","date":"2016-10-03 03:18:22","endLine":505,"groupId":"101100","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReplaceDynamicFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/26c27259aa2e9f661a1129dc11c11c40d70c21.src","preCode":"  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    \r\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    \r\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    \r\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"}]
