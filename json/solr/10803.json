[{"authorTime":"2017-04-17 22:10:05","codes":[{"authorDate":"2017-04-13 01:18:19","commitOrder":4,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","date":"2017-04-13 03:04:52","endLine":117,"groupId":"10385","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/b839bbae77d25c0a1ff11b38b620b2a118284d.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2017-04-17 22:10:05","commitOrder":4,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression convert(inches) - expecting 3 value but found 1\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","date":"2017-04-17 23:09:05","endLine":103,"groupId":"58814","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/0c3dc0160fa1ea8ca4a2614f51a284ecb53c0d.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression convert(inches) - expecting 3 value but found 1\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ConversionEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"8417307c63362806031fda14512ff373559cc65a","commitMessage":"@@@SOLR-10486: Add Length Conversion Evaluators\n","date":"2017-04-17 23:09:05","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-04-13 01:18:19","commitOrder":5,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","date":"2017-04-13 03:04:52","endLine":117,"groupId":"10385","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/b839bbae77d25c0a1ff11b38b620b2a118284d.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-08-26 17:07:19","commitOrder":5,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid expression convert(inches) - expecting exactly 3 parameters but found 1\", e.getCause().getCause().getMessage());\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","date":"2017-08-26 17:07:19","endLine":78,"groupId":"10385","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/21/94b8f2a9484fdc3d863d00a54a30a69cd0af39.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression convert(inches) - expecting 3 value but found 1\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ConversionEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"ddcb98e9c3e0d5f6acf59f872e8324e7ad144506","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-26 17:07:19","modifiedFileCount":"90","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2017-04-13 01:18:19","commitOrder":6,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","date":"2017-04-13 03:04:52","endLine":117,"groupId":"10385","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/b839bbae77d25c0a1ff11b38b620b2a118284d.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2020-06-17 01:27:53","commitOrder":6,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid expression convert(inches) - expecting exactly 3 parameters but found 1\", e.getCause().getCause().getMessage());\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      @SuppressWarnings({\"rawtypes\"})\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":80,"groupId":"10385","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/49/97902f82eb2e75c45879189b45b680633f16a2.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid expression convert(inches) - expecting exactly 3 parameters but found 1\", e.getCause().getCause().getMessage());\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ConversionEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2017-04-13 01:18:19","commitOrder":7,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","date":"2017-04-13 03:04:52","endLine":117,"groupId":"10803","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/b839bbae77d25c0a1ff11b38b620b2a118284d.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2021-06-22 00:19:37","commitOrder":7,"curCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid expression convert(inches) - expecting exactly 3 parameters but found 1\", e.getCause().getCause().getMessage());\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      Tuple tuple = new Tuple(new HashMap<>());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":78,"groupId":"10803","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testInvalidExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/098b47dd6230549ab5f13b70561f395c04c9b6.src","preCode":"  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertEquals(\"Invalid expression convert(inches) - expecting exactly 3 parameters but found 1\", e.getCause().getCause().getMessage());\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"convert(inches, yards, 3)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      @SuppressWarnings({\"rawtypes\"})\n      Tuple tuple = new Tuple(new HashMap());\n      evaluator.evaluate(tuple);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"No conversion available from INCHES to YARDS\"));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/ConversionEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
