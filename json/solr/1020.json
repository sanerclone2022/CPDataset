[{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2019-10-06 20:30:40","commitOrder":5,"curCode":"  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","date":"2019-10-06 20:30:40","endLine":106,"groupId":"20299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/e53718f9c88ef2be5521809620f3f2c238381d.src","preCode":"  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"NB"},{"authorDate":"2020-06-25 11:08:51","commitOrder":5,"curCode":"  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, Utils.NEW_LINKED_HASHMAP_FUN);\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":160,"groupId":"20299","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"plugins","params":"(Supplier<SolrZkClient>zkClientSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/21/c16e344d223171828dcb1a8f706539c698b5ed.src","preCode":"  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, Utils.NEW_LINKED_HASHMAP_FUN);\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/ContainerPluginsApi.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"57a892f896f543913d6b22a81577f69184cd94b6","commitMessage":"@@@SOLR-14404 CoreContainer level custom requesthandlers (#1432)\n\nSOLR-14404 CoreContainer level custom requesthandlers","date":"2020-06-25 11:08:51","modifiedFileCount":"12","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-09-05 21:19:45","codes":[{"authorDate":"2019-10-06 20:30:40","commitOrder":6,"curCode":"  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","date":"2019-10-06 20:30:40","endLine":106,"groupId":"1020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/e53718f9c88ef2be5521809620f3f2c238381d.src","preCode":"  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2020-09-05 21:19:45","commitOrder":6,"curCode":"  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, o -> new LinkedHashMap<>());\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","date":"2020-09-05 21:19:45","endLine":160,"groupId":"1020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"plugins","params":"(Supplier<SolrZkClient>zkClientSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/7a48726cd22eadddad66361faf057bca7e2eeb.src","preCode":"  public static Map<String, Object> plugins(Supplier<SolrZkClient> zkClientSupplier) throws IOException {\n    SolrZkClient zkClient = zkClientSupplier.get();\n    try {\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return (Map<String, Object>) clusterPropsJson.computeIfAbsent(PLUGIN, Utils.NEW_LINKED_HASHMAP_FUN);\n    } catch (KeeperException.NoNodeException e) {\n      return new LinkedHashMap<>();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/ContainerPluginsApi.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"f71ba62d4ae3100ffe54bdf5df8254e2bbf6ec9d","commitMessage":"@@@SOLR-14579: Comment SolrJ 'Utils' generic map functions\n","date":"2020-09-05 21:19:45","modifiedFileCount":"6","status":"M","submitter":"Erick Erickson"}]
