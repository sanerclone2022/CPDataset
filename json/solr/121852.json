[{"authorTime":"2019-08-29 21:11:51","codes":[{"authorDate":"2019-03-11 02:05:00","commitOrder":2,"curCode":"  protected void writeCoreProperties(Path coreDirectory, String corename) throws IOException {\n    Properties props = new Properties();\n    props.setProperty(\"name\", corename);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coreDirectory, props, this.getSaferTestName());\n  }\n","date":"2019-03-11 02:05:00","endLine":213,"groupId":"17561","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeCoreProperties","params":"(PathcoreDirectory@Stringcorename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/b6ec17ea1b431061e11b8f379406ced69f7144.src","preCode":"  protected void writeCoreProperties(Path coreDirectory, String corename) throws IOException {\n    Properties props = new Properties();\n    props.setProperty(\"name\", corename);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coreDirectory, props, this.getSaferTestName());\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"NB"},{"authorDate":"2019-08-29 21:11:51","commitOrder":2,"curCode":"  public static JettySolrRunner createAndStartJetty(String solrHome, Properties nodeProperties, JettyConfig jettyConfig) throws Exception {\n\n    initCore(null, null, solrHome);\n\n    Path coresDir = createTempDir().resolve(\"cores\");\n\n    Properties props = new Properties();\n    props.setProperty(\"name\", DEFAULT_TEST_CORENAME);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coresDir.resolve(\"core\"), props, \"RestTestBase\");\n\n    Properties nodeProps = new Properties(nodeProperties);\n    nodeProps.setProperty(\"coreRootDirectory\", coresDir.toString());\n    nodeProps.setProperty(\"configSetBaseDir\", solrHome);\n\n    jetty = new JettySolrRunner(solrHome, nodeProps, jettyConfig);\n    jetty.start();\n    port = jetty.getLocalPort();\n    log.info(\"Jetty Assigned Port#\" + port);\n    return jetty;\n  }\n","date":"2019-08-29 21:52:46","endLine":118,"groupId":"17561","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createAndStartJetty","params":"(StringsolrHome@PropertiesnodeProperties@JettyConfigjettyConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6d/cccb4c099e1977c2cbf1771b9574bcb5892df6.src","preCode":"  public static JettySolrRunner createAndStartJetty(String solrHome, Properties nodeProperties, JettyConfig jettyConfig) throws Exception {\n\n    initCore(null, null, solrHome);\n\n    Path coresDir = createTempDir().resolve(\"cores\");\n\n    Properties props = new Properties();\n    props.setProperty(\"name\", DEFAULT_TEST_CORENAME);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coresDir.resolve(\"core\"), props, \"RestTestBase\");\n\n    Properties nodeProps = new Properties(nodeProperties);\n    nodeProps.setProperty(\"coreRootDirectory\", coresDir.toString());\n    nodeProps.setProperty(\"configSetBaseDir\", solrHome);\n\n    jetty = new JettySolrRunner(solrHome, nodeProps, jettyConfig);\n    jetty.start();\n    port = jetty.getLocalPort();\n    log.info(\"Jetty Assigned Port#\" + port);\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"319cb005d314e6f15dd73339e99657d8e39218a4","commitMessage":"@@@SOLR-13539: Introduce EmbeddedSolrServerTestBase\n\nThis groundwork commit allows tests to randomize request content-type\nmore flexibly.  This will be taken advantage of by subsequent commits.\n\nCo-Authored-By: Thomas Woeckinger\nCloses: #755\n","date":"2019-08-29 21:52:46","modifiedFileCount":"11","status":"M","submitter":"Jason Gerlowski"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2019-03-11 02:05:00","commitOrder":3,"curCode":"  protected void writeCoreProperties(Path coreDirectory, String corename) throws IOException {\n    Properties props = new Properties();\n    props.setProperty(\"name\", corename);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coreDirectory, props, this.getSaferTestName());\n  }\n","date":"2019-03-11 02:05:00","endLine":213,"groupId":"121852","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeCoreProperties","params":"(PathcoreDirectory@Stringcorename)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/b6ec17ea1b431061e11b8f379406ced69f7144.src","preCode":"  protected void writeCoreProperties(Path coreDirectory, String corename) throws IOException {\n    Properties props = new Properties();\n    props.setProperty(\"name\", corename);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coreDirectory, props, this.getSaferTestName());\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"},{"authorDate":"2020-05-01 07:50:31","commitOrder":3,"curCode":"  public static JettySolrRunner createAndStartJetty(String solrHome, Properties nodeProperties, JettyConfig jettyConfig) throws Exception {\n\n    initCore(null, null, solrHome);\n\n    Path coresDir = createTempDir().resolve(\"cores\");\n\n    Properties props = new Properties();\n    props.setProperty(\"name\", DEFAULT_TEST_CORENAME);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coresDir.resolve(\"core\"), props, \"RestTestBase\");\n\n    Properties nodeProps = new Properties(nodeProperties);\n    nodeProps.setProperty(\"coreRootDirectory\", coresDir.toString());\n    nodeProps.setProperty(\"configSetBaseDir\", solrHome);\n\n    jetty = new JettySolrRunner(solrHome, nodeProps, jettyConfig);\n    jetty.start();\n    port = jetty.getLocalPort();\n    log.info(\"Jetty Assigned Port#{}\", port);\n    return jetty;\n  }\n","date":"2020-05-01 07:50:31","endLine":118,"groupId":"121852","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createAndStartJetty","params":"(StringsolrHome@PropertiesnodeProperties@JettyConfigjettyConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/75/0dd15f701e28c757eca3105bd2e4ed51408c46.src","preCode":"  public static JettySolrRunner createAndStartJetty(String solrHome, Properties nodeProperties, JettyConfig jettyConfig) throws Exception {\n\n    initCore(null, null, solrHome);\n\n    Path coresDir = createTempDir().resolve(\"cores\");\n\n    Properties props = new Properties();\n    props.setProperty(\"name\", DEFAULT_TEST_CORENAME);\n    props.setProperty(\"configSet\", \"collection1\");\n    props.setProperty(\"config\", \"${solrconfig:solrconfig.xml}\");\n    props.setProperty(\"schema\", \"${schema:schema.xml}\");\n\n    writeCoreProperties(coresDir.resolve(\"core\"), props, \"RestTestBase\");\n\n    Properties nodeProps = new Properties(nodeProperties);\n    nodeProps.setProperty(\"coreRootDirectory\", coresDir.toString());\n    nodeProps.setProperty(\"configSetBaseDir\", solrHome);\n\n    jetty = new JettySolrRunner(solrHome, nodeProps, jettyConfig);\n    jetty.start();\n    port = jetty.getLocalPort();\n    log.info(\"Jetty Assigned Port#\" + port);\n    return jetty;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"}]
