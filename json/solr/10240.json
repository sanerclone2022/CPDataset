[{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-11-01 23:26:28","commitOrder":2,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2017-11-01 23:30:15","endLine":57,"groupId":"57428","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/0ab330edd2b72a2d8094ef789a8939eb988704.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"MB"},{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n    \n    return pearsonsCorrelation.correlation(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","date":"2017-08-26 17:07:19","endLine":56,"groupId":"40560","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/d9166c921c61df399332e8a8646c2db7bb75ac.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n    \n    return pearsonsCorrelation.correlation(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"}],"commitId":"6d5a7920ae17e4b209c58749f972ca6db38df600","commitMessage":"@@@SOLR-11593: Add support for covariance matrices to the cov Stream Evaluator\n","date":"2017-11-01 23:30:15","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-11-14 08:44:30","codes":[{"authorDate":"2017-11-01 23:26:28","commitOrder":3,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2017-11-01 23:30:15","endLine":57,"groupId":"57428","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/0ab330edd2b72a2d8094ef789a8939eb988704.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2017-11-14 08:44:30","commitOrder":3,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","date":"2017-11-14 08:44:46","endLine":137,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/1160c4490e5f896d269e7b3badc709527a9443.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n    \n    return pearsonsCorrelation.correlation(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"59360b4617a0fb9f67108af7219941d841dfec2d","commitMessage":"@@@SOLR-11570: Add support for correlation matrices to the corr Stream Evaluator\n","date":"2017-11-14 08:44:46","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-12-05 10:08:58","codes":[{"authorDate":"2017-12-05 10:08:58","commitOrder":4,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2017-12-05 10:09:41","endLine":57,"groupId":"57428","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/80578a7abe1c805c8cb49ad41c87c7f65752a8.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2017-12-05 10:08:58","commitOrder":4,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","date":"2017-12-05 10:09:41","endLine":137,"groupId":"23510","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/87248bf43b174c9e0fb7823f360a7f5835cbdf.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"8750e5f2a97e2011da7a3c821dca38a31d0f9bf1","commitMessage":"@@@SOLR-11485: Add olsRegress.  spline and derivative Stream Evaluators\n","date":"2017-12-05 10:09:41","modifiedFileCount":"46","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2017-12-05 10:08:58","commitOrder":5,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2017-12-05 10:09:41","endLine":57,"groupId":"57428","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/80578a7abe1c805c8cb49ad41c87c7f65752a8.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2018-01-23 20:35:14","commitOrder":5,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","date":"2018-01-23 20:35:14","endLine":136,"groupId":"23510","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/6c5d0d207bb2bca69710981f8186cc3bb2960f.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.addToContext(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-04-10 18:57:34","codes":[{"authorDate":"2017-12-05 10:08:58","commitOrder":6,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2017-12-05 10:09:41","endLine":57,"groupId":"57428","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/80578a7abe1c805c8cb49ad41c87c7f65752a8.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2018-04-10 18:57:34","commitOrder":6,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","date":"2018-04-10 18:57:34","endLine":136,"groupId":"23510","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/6f2e22aaa84ffe70b26a2a9113df0059ce0a63.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"b65229c90479cf3b798759a02dee6120564c28c7","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-04-10 18:57:34","modifiedFileCount":"12","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-10-07 10:17:45","codes":[{"authorDate":"2019-10-07 10:17:45","commitOrder":7,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2019-10-07 10:18:00","endLine":60,"groupId":"57428","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/b316138a00dc69aee6401b5cf8bc763866573d.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      return new Matrix(coData);\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-10-07 10:17:45","commitOrder":7,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","date":"2019-10-07 10:18:00","endLine":147,"groupId":"23510","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/c72f414d0058e6d347dd52a7065b3f5817f425.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"88fee95d54183c3c3d163660e99184c76d7cdb58","commitMessage":"@@@SOLR-13298: Allow zplot to plot matrices\n","date":"2019-10-07 10:18:00","modifiedFileCount":"9","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":8,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":60,"groupId":"10240","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/3ac897882e65c92960893b10de26457d25e034.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n      Covariance covariance = new Covariance();\n\n      return covariance.covariance(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n    } else if(values.length == 1) {\n      Matrix matrix = (Matrix) values[0];\n      double[][] data = matrix.getData();\n      Covariance covariance = new Covariance(data, true);\n      RealMatrix coMatrix = covariance.getCovarianceMatrix();\n      double[][] coData = coMatrix.getData();\n      Matrix realMatrix = new Matrix(coData);\n      List<String> labels = CorrelationEvaluator.getColumnLabels(matrix.getColumnLabels(), coData.length);\n      realMatrix.setColumnLabels(labels);\n      realMatrix.setRowLabels(labels);\n      return realMatrix;\n    } else {\n      throw new IOException(\"The cov function expects either two numeric arrays or a matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":8,"curCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":147,"groupId":"10240","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/235601802440d95520a6662a361cf6dfd5bca5.src","preCode":"  public Object doWork(Object ... values) throws IOException{\n\n    if(values.length == 2) {\n      Object first = values[0];\n      Object second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof List<?>)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a list of numbers\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (type.equals(CorrelationType.pearsons)) {\n        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();\n        return pearsonsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else if (type.equals(CorrelationType.kendalls)) {\n        KendallsCorrelation kendallsCorrelation = new KendallsCorrelation();\n        return kendallsCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n\n      } else if (type.equals(CorrelationType.spearmans)) {\n        SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation();\n        return spearmansCorrelation.correlation(\n            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n        );\n      } else {\n        return null;\n      }\n    } else if(values.length == 1) {\n      if(values[0] instanceof Matrix) {\n        Matrix matrix = (Matrix)values[0];\n        double[][] data = matrix.getData();\n        if (type.equals(CorrelationType.pearsons)) {\n          PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation(data);\n          RealMatrix corrMatrix = pearsonsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix = new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", pearsonsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.kendalls)) {\n          KendallsCorrelation kendallsCorrelation = new KendallsCorrelation(data);\n          RealMatrix corrMatrix = kendallsCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", kendallsCorrelation);\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else if (type.equals(CorrelationType.spearmans)) {\n          SpearmansCorrelation spearmansCorrelation = new SpearmansCorrelation(new Array2DRowRealMatrix(data, false));\n          RealMatrix corrMatrix = spearmansCorrelation.getCorrelationMatrix();\n          double[][] corrMatrixData = corrMatrix.getData();\n          Matrix realMatrix =  new Matrix(corrMatrixData);\n          realMatrix.setAttribute(\"corr\", spearmansCorrelation.getRankCorrelation());\n          List<String> labels = getColumnLabels(matrix.getColumnLabels(), corrMatrixData.length);\n          realMatrix.setColumnLabels(labels);\n          realMatrix.setRowLabels(labels);\n          return realMatrix;\n        } else {\n          return null;\n        }\n      } else {\n        throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n      }\n    } else {\n      throw new IOException(\"corr function operates on either two numeric arrays or a single matrix as parameters.\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CorrelationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
