[{"authorTime":"2019-06-11 22:12:52","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":3,"curCode":"  public void registerDocCollectionWatcher(String collection, DocCollectionWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(state) == true) {\n      removeDocCollectionWatcher(collection, stateWatcher);\n    }\n  }\n","date":"2019-06-18 00:59:43","endLine":1660,"groupId":"20208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"registerDocCollectionWatcher","params":"(Stringcollection@DocCollectionWatcherstateWatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/72203eacb801fba6859d03a0f8ad500243ef36.src","preCode":"  public void registerDocCollectionWatcher(String collection, DocCollectionWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(state) == true) {\n      removeDocCollectionWatcher(collection, stateWatcher);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1641,"status":"B"},{"authorDate":"2019-06-11 22:12:52","commitOrder":3,"curCode":"  public void registerCollectionPropsWatcher(final String collection, CollectionPropsWatcher propsWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionPropsObservers.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(propsWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      collectionPropsWatchers.computeIfAbsent(collection, PropsWatcher::new).refreshAndWatch(false);\n    }\n  }\n","date":"2019-06-11 22:12:52","endLine":1808,"groupId":"20208","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerCollectionPropsWatcher","params":"(finalStringcollection@CollectionPropsWatcherpropsWatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/9f89ec7f3e2cbaed6b7bd214a085115064c374.src","preCode":"  public void registerCollectionPropsWatcher(final String collection, CollectionPropsWatcher propsWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionPropsObservers.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(propsWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      collectionPropsWatchers.computeIfAbsent(collection, PropsWatcher::new).refreshAndWatch(false);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1794,"status":"NB"}],"commitId":"5a974860fa83408a86ca64b417f3111b037da7eb","commitMessage":"@@@SOLR-13490: Fix CollectionStateWatcher/CollectionStatePredicate based APIs in ZkStateReader and CloudSolrClient to be triggered on liveNode changes.\n\nAlso add Predicate<DocCollection> equivilents for callers that don't care about liveNodes.\n","date":"2019-06-18 00:59:43","modifiedFileCount":"15","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2019-06-11 22:12:52","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public void registerDocCollectionWatcher(String collection, DocCollectionWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    state = updatePerReplicaState(state);\n    if (stateWatcher.onStateChanged(state) == true) {\n      removeDocCollectionWatcher(collection, stateWatcher);\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":1623,"groupId":"1015","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"registerDocCollectionWatcher","params":"(Stringcollection@DocCollectionWatcherstateWatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/b9d72327d9e0f5ae44f5c1cbac1a8a3f6ce642.src","preCode":"  public void registerDocCollectionWatcher(String collection, DocCollectionWatcher stateWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(stateWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      new StateWatcher(collection).refreshAndWatch();\n    }\n\n    DocCollection state = clusterState.getCollectionOrNull(collection);\n    if (stateWatcher.onStateChanged(state) == true) {\n      removeDocCollectionWatcher(collection, stateWatcher);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1603,"status":"M"},{"authorDate":"2019-06-11 22:12:52","commitOrder":4,"curCode":"  public void registerCollectionPropsWatcher(final String collection, CollectionPropsWatcher propsWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionPropsObservers.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(propsWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      collectionPropsWatchers.computeIfAbsent(collection, PropsWatcher::new).refreshAndWatch(false);\n    }\n  }\n","date":"2019-06-11 22:12:52","endLine":1808,"groupId":"1015","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerCollectionPropsWatcher","params":"(finalStringcollection@CollectionPropsWatcherpropsWatcher)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/9f89ec7f3e2cbaed6b7bd214a085115064c374.src","preCode":"  public void registerCollectionPropsWatcher(final String collection, CollectionPropsWatcher propsWatcher) {\n    AtomicBoolean watchSet = new AtomicBoolean(false);\n    collectionPropsObservers.compute(collection, (k, v) -> {\n      if (v == null) {\n        v = new CollectionWatch<>();\n        watchSet.set(true);\n      }\n      v.stateWatchers.add(propsWatcher);\n      return v;\n    });\n\n    if (watchSet.get()) {\n      collectionPropsWatchers.computeIfAbsent(collection, PropsWatcher::new).refreshAndWatch(false);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1794,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
