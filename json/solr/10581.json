[{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":1,"curCode":"  public void testFacetAggregation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n  }\n","date":"2016-05-05 15:05:25","endLine":219,"groupId":"16007","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/29c70f54a46bd31f8a867b479c0193e36985a7.src","preCode":"  public void testFacetAggregation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"},{"authorDate":"2016-05-05 15:05:25","commitOrder":1,"curCode":"  public void testErrorPropagation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n  }\n","date":"2016-05-05 15:05:25","endLine":416,"groupId":"16007","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/29c70f54a46bd31f8a867b479c0193e36985a7.src","preCode":"  public void testErrorPropagation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"B"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"B","submitter":"Karl Wright"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":2,"curCode":"  public void testFacetAggregation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n  }\n","date":"2016-11-16 10:33:58","endLine":227,"groupId":"16007","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/a600d4947304f46646d7e4768e69d42b897cb8.src","preCode":"  public void testFacetAggregation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":2,"curCode":"  public void testErrorPropagation() throws Exception {\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n","date":"2016-11-16 10:33:58","endLine":422,"groupId":"16007","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/a600d4947304f46646d7e4768e69d42b897cb8.src","preCode":"  public void testErrorPropagation() throws Exception {\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2017-02-16 02:55:09","commitOrder":3,"curCode":"  public void testFacetAggregation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); \r\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); \r\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); \r\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n  }\n","date":"2017-02-16 02:55:09","endLine":236,"groupId":"10581","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/7856aed5b9a53fd3bc573c4e69a5abfc6db66e.src","preCode":"  public void testFacetAggregation() throws Exception {\n\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":3,"curCode":"  public void testErrorPropagation() throws Exception {\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n","date":"2016-11-16 10:33:58","endLine":422,"groupId":"10581","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorPropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/a600d4947304f46646d7e4768e69d42b897cb8.src","preCode":"  public void testErrorPropagation() throws Exception {\n    \r\n    Properties props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from \" + COLLECTIONORALIAS + \" group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"}],"commitId":"bfeb4e7f848221e946f51f96ebb2e900e84e787f","commitMessage":"@@@Merge branch 'jira/solr-8593'\n","date":"2017-02-16 02:55:09","modifiedFileCount":"11","status":"M","submitter":"Joel Bernstein"}]
