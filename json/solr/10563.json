[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","date":"2011-07-10 07:01:53","endLine":67,"groupId":"14080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpellCheckResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/2c2d5272720db66848d01de122b3fe21ac26e2.src","preCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","date":"2011-07-10 07:01:53","endLine":105,"groupId":"14080","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpellCheckResponse_Extended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/2c2d5272720db66848d01de122b3fe21ac26e2.src","preCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2012-06-05 03:01:31","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","date":"2011-07-10 07:01:53","endLine":67,"groupId":"14080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpellCheckResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/2c2d5272720db66848d01de122b3fe21ac26e2.src","preCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2012-06-05 03:01:31","commitOrder":2,"curCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    \r\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","date":"2012-06-05 03:01:31","endLine":105,"groupId":"14080","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpellCheckResponse_Extended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/d6890dea44585efbfaf3102aa6459544ba25e0.src","preCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"649dfb6e792a90bb3c9356ef1b76faa804b77134","commitMessage":"@@@SOLR-2993:  fix (1) for fail on TestSpellCheckResponse\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1346088 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-05 03:01:31","modifiedFileCount":"1","status":"M","submitter":"James Dyer"},{"authorTime":"2012-06-05 03:01:31","codes":[{"authorDate":"2012-06-05 03:48:26","commitOrder":3,"curCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","date":"2012-06-05 03:48:26","endLine":66,"groupId":"14080","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpellCheckResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/67/ec83b826bbdf881edde7b7a4a1fd2aebc85f74.src","preCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2012-06-05 03:01:31","commitOrder":3,"curCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    \r\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","date":"2012-06-05 03:01:31","endLine":105,"groupId":"14080","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpellCheckResponse_Extended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/d6890dea44585efbfaf3102aa6459544ba25e0.src","preCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    \r\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"050f6c7a3c4e12ede3aa89dff06215b4904aac43","commitMessage":"@@@SOLR-2993:  fix (2) for fail on TestSpellCheckResponse:  ConjunctionSolrSpellChecker was not preserving original Token Freqs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1346116 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-05 03:48:26","modifiedFileCount":"2","status":"M","submitter":"James Dyer"},{"authorTime":"2012-06-05 03:01:31","codes":[{"authorDate":"2012-06-05 05:33:36","commitOrder":4,"curCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","date":"2012-06-05 05:33:36","endLine":67,"groupId":"14080","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpellCheckResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/d6890dea44585efbfaf3102aa6459544ba25e0.src","preCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2012-06-05 03:01:31","commitOrder":4,"curCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    \r\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","date":"2012-06-05 03:01:31","endLine":105,"groupId":"14080","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpellCheckResponse_Extended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/d6890dea44585efbfaf3102aa6459544ba25e0.src","preCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    \r\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"848a7cc01b1fb14cf60aa74d89defb95ef36cb95","commitMessage":"@@@SOLR-2993:  revert r1346116\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1346168 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-05 05:33:36","modifiedFileCount":"2","status":"M","submitter":"James Dyer"},{"authorTime":"2012-06-06 01:44:02","codes":[{"authorDate":"2012-06-06 01:44:02","commitOrder":5,"curCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","date":"2012-06-06 01:44:02","endLine":68,"groupId":"14080","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpellCheckResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/16e81cb7c9ce75a3d432920426ff5a0a753b78.src","preCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2012-06-06 01:44:02","commitOrder":5,"curCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","date":"2012-06-06 01:44:02","endLine":107,"groupId":"14080","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpellCheckResponse_Extended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/16e81cb7c9ce75a3d432920426ff5a0a753b78.src","preCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    \r\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"ce20e7b133c7006ba8d0339f51d1c7f985b2cc07","commitMessage":"@@@SOLR-2993:  fix test failures (SOLR-2993-fixes.patch)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1346489 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-06 01:44:02","modifiedFileCount":"5","status":"M","submitter":"James Dyer"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2014-12-31 22:05:48","commitOrder":6,"curCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    client.add(doc);\n    client.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","date":"2014-12-31 22:05:48","endLine":65,"groupId":"10563","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpellCheckResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/780f6103b12cd4114d378dd6cf77cb30f9cfd7.src","preCode":"  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":6,"curCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    client.add(doc);\n    client.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","date":"2014-12-31 22:05:48","endLine":104,"groupId":"10563","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpellCheckResponse_Extended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/780f6103b12cd4114d378dd6cf77cb30f9cfd7.src","preCode":"  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    \r\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    \r\n\n    \r\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"ef809a0f10e78aec3f97c878f90ff74673f98745","commitMessage":"@@@SOLR-6895: Deprecate SolrServer classes and replace with SolrClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1648697 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-31 22:05:48","modifiedFileCount":"152","status":"M","submitter":"Alan Woodward"}]
