[{"authorTime":"2016-12-19 23:15:04","codes":[{"authorDate":"2016-06-18 07:49:48","commitOrder":2,"curCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n","date":"2016-07-29 00:59:05","endLine":157,"groupId":"39083","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createACLProvider","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/bb1ad85454ef66881bd640d5307763430e0d59.src","preCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"NB"},{"authorDate":"2016-12-19 23:15:04","commitOrder":2,"curCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n","date":"2016-12-19 23:15:04","endLine":184,"groupId":"39083","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createACLProvider","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fb/35e722281c826fcb5003f943c4aa42e8aa48fe.src","preCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"a1a8b2864e621c18aa86b21d4a244233e991a47d","commitMessage":"@@@SOLR-9513: Generic Hadoop authentication plugins.  GenericHadoopAuthPlugin and ConfigurableInternodeAuthHadoopPlugin\n","date":"2016-12-19 23:15:04","modifiedFileCount":"7","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2017-08-09 18:46:53","codes":[{"authorDate":"2017-08-09 18:46:53","commitOrder":3,"curCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n          List<ACL> acls = null;\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n          } else {\n            acls = zkACLProvider.getACLsToAdd(path);\n          }\n\n          return acls;\n        }\n      };\n    }\n","date":"2017-08-09 18:46:53","endLine":238,"groupId":"102021","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createACLProvider","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/3544c0658a85afec0c98ff13e634b6f4f46366.src","preCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2017-08-09 18:46:53","commitOrder":3,"curCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n          List<ACL> acls = null;\n\n          \r\n          \r\n          \r\n          \r\n          \r\n          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n          } else {\n            acls = zkACLProvider.getACLsToAdd(path);\n          }\n\n          return acls;\n        }\n      };\n    }\n","date":"2017-08-09 18:46:53","endLine":216,"groupId":"102021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createACLProvider","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/5becc88354ca6fc4f94d9aaeb29533159fd001.src","preCode":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"b091934f9e98568b848d0584a1145c8e514cbd21","commitMessage":"@@@Create znode upfront and fix chroot handling in delegation token feature\n","date":"2017-08-09 18:46:53","modifiedFileCount":"4","status":"M","submitter":"Shalin Shekhar Mangar"}]
