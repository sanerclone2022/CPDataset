[{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":2,"curCode":"  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (PosVal<Double> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-07-15 01:54:35","endLine":810,"groupId":"34163","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (PosVal<Double> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":725,"status":"MB"},{"authorDate":"2017-07-15 01:54:27","commitOrder":2,"curCode":"  public void testFloatPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n \n    String nonDocValuesField = \"number_p_f_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n \n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values;\n    List<PosVal<Float>> sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (PosVal<Float> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min - buffer;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-07-15 01:54:35","endLine":1214,"groupId":"34166","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatPointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testFloatPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n \n    String nonDocValuesField = \"number_p_f_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n \n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values;\n    List<PosVal<Float>> sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (PosVal<Float> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min - buffer;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1127,"status":"B"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-08-07 19:01:39","commitOrder":3,"curCode":"  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min)).add(BigDecimal.valueOf(buffer * 2.0D))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (PosVal<Double> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-08-07 19:01:39","endLine":809,"groupId":"102667","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/2adb4b2893d4c1484ad410ea45411795160c89.src","preCode":"  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    \r\n    for (PosVal<Double> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":724,"status":"M"},{"authorDate":"2017-07-15 01:54:27","commitOrder":3,"curCode":"  public void testFloatPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n \n    String nonDocValuesField = \"number_p_f_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n \n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values;\n    List<PosVal<Float>> sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (PosVal<Float> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min - buffer;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-07-15 01:54:35","endLine":1214,"groupId":"102667","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloatPointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testFloatPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n \n    String nonDocValuesField = \"number_p_f_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n \n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values;\n    List<PosVal<Float>> sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer);\n    \r\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    \r\n    for (PosVal<Float> value : sortedValues) {\n      \r\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        \r\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min - buffer;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1127,"status":"N"}],"commitId":"90199e7485f4ee997f80aef071642d3829e61273","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-07 19:01:39","modifiedFileCount":"7","status":"M","submitter":"Karl Wright"}]
