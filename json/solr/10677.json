[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), eq(a_i, 9))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),lt(a_i, 10)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), or(eq(a_i, 9),eq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),not(eq(a_i, 9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(lteq(a_i, 9), gteq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\")), and(eq(sum(a_i), 9),eq(sum(a_i), 9)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","date":"2018-04-06 02:00:07","endLine":655,"groupId":"55065","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHavingStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), eq(a_i, 9))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),lt(a_i, 10)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), or(eq(a_i, 9),eq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),not(eq(a_i, 9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(lteq(a_i, 9), gteq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\")), and(eq(sum(a_i), 9),eq(sum(a_i), 9)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","date":"2018-04-06 02:00:07","endLine":764,"groupId":"60063","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelHavingStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), eq(a_i, 9))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),lt(a_i, 10)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), or(eq(a_i, 9),eq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),not(eq(a_i, 9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(lteq(a_i, 9), gteq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\")), and(eq(sum(a_i), 9),eq(sum(a_i), 9)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","date":"2018-04-06 02:00:07","endLine":655,"groupId":"10677","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHavingStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), eq(a_i, 9))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),lt(a_i, 10)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), or(eq(a_i, 9),eq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(eq(a_i, 9),not(eq(a_i, 9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n    stream = factory.constructStream(\"having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), and(lteq(a_i, 9), gteq(a_i, 8)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\")), and(eq(sum(a_i), 9),eq(sum(a_i), 9)))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"},{"authorDate":"2018-11-28 00:21:42","commitOrder":2,"curCode":"  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id, qt=\\\"/export\\\"), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id, qt=\\\"/export\\\"), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id, qt=\\\"/export\\\"), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id, qt=\\\"/export\\\"), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id, qt=\\\"/export\\\"), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f, qt=\\\"/export\\\")), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","date":"2018-11-28 00:22:02","endLine":769,"groupId":"10677","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelHavingStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/639d4bc8fa96853700ee3a75bd2091f2437482.src","preCode":"  public void testParallelHavingStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"having\", HavingStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), eq(a_i, 9)))\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    Tuple t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\", having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n\n    stream = factory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", workers=2, sort=\\\"a_f asc\\\",having(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    t = tuples.get(0);\n    assertTrue(t.getString(\"id\").equals(\"8\"));\n\n    t = tuples.get(1);\n    assertTrue(t.getString(\"id\").equals(\"9\"));\n\n    stream = factory.constructStream(\"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"a_f asc\\\", having(rollup(over=a_f, sum(a_i), search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    t = tuples.get(0);\n    assertTrue(t.getDouble(\"a_f\") == 10.0D);\n\n    solrClientCache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
