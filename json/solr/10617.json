[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":206,"groupId":"12026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAnalyzeEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = (long) tuple.get(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","date":"2018-04-06 02:00:07","endLine":769,"groupId":"12026","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinomialCoefficient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = (long) tuple.get(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":755,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2019-10-11 09:18:45","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":206,"groupId":"12026","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAnalyzeEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2019-10-11 09:18:45","commitOrder":2,"curCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = tuple.getLong(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","date":"2019-10-11 09:19:25","endLine":1208,"groupId":"12026","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinomialCoefficient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/76c4ef5b2991c69762f5d3ca41c07dfd0b25a4.src","preCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = (long) tuple.get(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1194,"status":"M"}],"commitId":"ad1c24e1903a74c611ec610aaf350d50d709519e","commitMessage":"@@@SOLR-13829: RecursiveEvaluator casts Continuous numbers to Discrete Numbers.  causing mismatch\n","date":"2019-10-11 09:19:25","modifiedFileCount":"17","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-10-11 09:18:45","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      @SuppressWarnings({\"rawtypes\"})\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":215,"groupId":"12026","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAnalyzeEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2019-10-11 09:18:45","commitOrder":3,"curCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = tuple.getLong(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","date":"2019-10-11 09:19:25","endLine":1208,"groupId":"12026","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinomialCoefficient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/76c4ef5b2991c69762f5d3ca41c07dfd0b25a4.src","preCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = tuple.getLong(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1194,"status":"N"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2019-10-11 09:18:45","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List<?> terms = (List<?>)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<?> l = (List<?>)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":218,"groupId":"10617","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testAnalyzeEvaluator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/d63f712675315916856997d007621dff2b8caf.src","preCode":"  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      @SuppressWarnings({\"rawtypes\"})\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      \r\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      \r\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-10-11 09:18:45","commitOrder":4,"curCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = tuple.getLong(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","date":"2019-10-11 09:19:25","endLine":1208,"groupId":"10617","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinomialCoefficient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/76c4ef5b2991c69762f5d3ca41c07dfd0b25a4.src","preCode":"  public void testBinomialCoefficient() throws Exception {\n    String cexpr = \"binomialCoefficient(8,3)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    long binomialCoefficient = tuple.getLong(\"return-value\");\n    assertEquals(binomialCoefficient, 56);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1194,"status":"N"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
