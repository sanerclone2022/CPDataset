[{"authorTime":"2015-11-03 08:43:17","codes":[{"authorDate":"2017-12-16 00:24:18","commitOrder":2,"curCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2017-12-16 00:24:18","endLine":420,"groupId":"36156","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initSourceSelectorSyntax","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/0df2bcba1bbb9e9fe080ca40b2f84ee6c32ebf.src","preCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"},{"authorDate":"2015-11-03 08:43:17","commitOrder":2,"curCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2015-11-03 08:43:17","endLine":389,"groupId":"36156","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initSourceSelectorSyntax","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/0cf9dee4976ce406836737ce84a0006eac79af.src","preCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"NB"}],"commitId":"3e2f9e62d772218bf1fcae6d58542fad3ec43742","commitMessage":"@@@LUCENE-2899: Add OpenNLP Analysis capabilities as a module\n","date":"2017-12-16 00:24:18","modifiedFileCount":"3","status":"M","submitter":"Steve Rowe"},{"authorTime":"2020-06-09 07:03:34","codes":[{"authorDate":"2017-12-16 00:24:18","commitOrder":3,"curCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2017-12-16 00:24:18","endLine":420,"groupId":"36156","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initSourceSelectorSyntax","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/0df2bcba1bbb9e9fe080ca40b2f84ee6c32ebf.src","preCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"},{"authorDate":"2020-06-09 07:03:34","commitOrder":3,"curCode":"  private void initSourceSelectorSyntax(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2020-06-09 07:03:34","endLine":395,"groupId":"37684","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initSourceSelectorSyntax","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/00caddc0669a3e797dc44b08ef9796552d9eb3.src","preCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"4dcdd750f2dc892c88a98cc350941e7b8869d67f","commitMessage":"@@@SOLR-14545: Fix or suppress warnings in apache/solr/update\n","date":"2020-06-09 07:03:34","modifiedFileCount":"56","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-09 07:03:34","codes":[{"authorDate":"2020-06-12 22:56:22","commitOrder":4,"curCode":"  private void initSourceSelectorSyntax(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2020-06-12 22:56:22","endLine":429,"groupId":"37684","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initSourceSelectorSyntax","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/dbd013c50f4f9e84dce8642d10a89491cff930.src","preCode":"  private void initSourceSelectorSyntax(NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2020-06-09 07:03:34","commitOrder":4,"curCode":"  private void initSourceSelectorSyntax(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2020-06-09 07:03:34","endLine":395,"groupId":"37684","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initSourceSelectorSyntax","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/00caddc0669a3e797dc44b08ef9796552d9eb3.src","preCode":"  private void initSourceSelectorSyntax(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"}],"commitId":"8cbfb192ab151312efe7d0de42478329604cba90","commitMessage":"@@@SOLR-14563: Fix or suppress warnings in solr/contrib\n","date":"2020-06-12 22:56:22","modifiedFileCount":"23","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-09 02:08:25","codes":[{"authorDate":"2021-06-09 02:08:25","commitOrder":5,"curCode":"  private void initSourceSelectorSyntax(NamedList<?> args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<?> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList<?> selectorConfig = (NamedList<?>) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<?> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList<?> exc = (NamedList<?>) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      NamedList<?> destList = (NamedList<?>) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2021-06-09 02:08:25","endLine":423,"groupId":"101142","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"initSourceSelectorSyntax","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/1edc3f513422aa1e0ea9e8f92e7d8c7e4f914a.src","preCode":"  private void initSourceSelectorSyntax(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' child 'exclude' must be <lst/>\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                \"' has unexpected 'exclude' sub-param(s): '\"\n                + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n              \"' contains unexpected child param(s): '\" +\n              selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"Init params do not specify any field from which to extract entities, please supply either \"\n          + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for OpenNLPExtractNamedEntitiesUpdateProcessor for further details.\");\n    }\n\n    if (d instanceof NamedList) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n\n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' are both mandatory and can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n            PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n            \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n            + destList.getName(0) + \"'\");\n      }\n\n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n            \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n\n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n          \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n          PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/contrib/analysis-extras/src/java/org/apache/solr/update/processor/OpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2021-06-09 02:08:25","commitOrder":5,"curCode":"  private void initSourceSelectorSyntax(NamedList<?> args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<?> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        NamedList<?> selectorConfig = (NamedList<?>) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<?> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          NamedList<?> exc = (NamedList<?>) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      NamedList<?> destList = (NamedList<?>) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","date":"2021-06-09 02:08:25","endLine":389,"groupId":"101142","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"initSourceSelectorSyntax","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1f/36aa8d35346c5555aca63d0b65b2c18e632eb5.src","preCode":"  private void initSourceSelectorSyntax(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (0 <= args.indexOf(PATTERN_PARAM, 0) || 0 <= args.indexOf(REPLACEMENT_PARAM, 0) ) {\n      throw new SolrException(SERVER_ERROR,\"Short hand syntax must not be mixed with full syntax. Found \" +\n          SOURCE_PARAM + \" and \" + DEST_PARAM + \" but also found \" + PATTERN_PARAM + \" or \" + REPLACEMENT_PARAM);\n    }\n\n    Object d = args.remove(DEST_PARAM);\n    assert null != d;\n    \n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    assert null != sources;\n\n    if (1 == sources.size()) {\n      if (sources.get(0) instanceof NamedList) {\n        \r\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n        srcInclusions = parseSelectorParams(selectorConfig);\n\n        List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n        for (Object excObj : excList) {\n          if (null == excObj) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' can not be null\");\n          }\n          if (!(excObj instanceof NamedList)) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' child 'exclude' must be <lst/>\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList exc = (NamedList) excObj;\n          srcExclusions.add(parseSelectorParams(exc));\n          if (0 < exc.size()) {\n            throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                    \"' has unexpected 'exclude' sub-param(s): '\"\n                                    + selectorConfig.getName(0) + \"'\");\n          }\n          \r\n          selectorConfig.remove(\"exclude\");\n        }\n\n        if (0 < selectorConfig.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM +\n                                  \"' contains unexpected child param(s): '\" +\n                                  selectorConfig.getName(0) + \"'\");\n        }\n        \r\n        sources.remove(0);\n      }\n    }\n    if (1 <= sources.size()) {\n      \r\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n    if (srcInclusions == null) {\n      throw new SolrException(SERVER_ERROR, \"Init params do not specify anything to clone, please supply either \"\n      + SOURCE_PARAM + \" and \" + DEST_PARAM + \" or \" + PATTERN_PARAM + \" and \" + REPLACEMENT_PARAM + \". See javadocs\" +\n          \"for CloneFieldUpdateProcessorFactory for further details.\");\n    }\n    \n    if (d instanceof NamedList) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList destList = (NamedList) d;\n\n      Object patt = destList.remove(PATTERN_PARAM);\n      Object replacement = destList.remove(REPLACEMENT_PARAM);\n      \n      if (null == patt || null == replacement) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' are both mandatoryand can not be null\");\n      }\n      if (! (patt instanceof String && replacement instanceof String)) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' children '\" +\n                                PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM +\n                                \"' must both be strings (i.e. <str>)\");\n      }\n      if (0 != destList.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' has unexpected children: '\"\n                                + destList.getName(0) + \"'\");\n      }\n      \n      try {\n        this.pattern = Pattern.compile(patt.toString());\n      } catch (PatternSyntaxException pe) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' child '\" + PATTERN_PARAM +\n                                \" is not a valid regex pattern: \" + patt, pe);\n      }\n      dest = replacement.toString();\n        \n    } else if (d instanceof String) {\n      dest = d.toString();\n    } else {\n      throw new SolrException(SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must either be a string \" +\n                              \"(i.e. <str>) or a list (i.e. <lst>) containing '\" +\n                              PATTERN_PARAM + \"' and '\" + REPLACEMENT_PARAM);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"916b7a04f65490179a73e2c1620bab1df65e4bb8","commitMessage":"@@@SOLR-15385 RawTypes Part II.  Searching for NamedList (#165)\n\nMost updates relate to NamedListInitializationPlugin init method.  and RequestHandler.\n\nLink to JIRA issues for some extant bugs.\n\nCo-authored-by: David Smiley <dsmiley@apache.org>","date":"2021-06-09 02:08:25","modifiedFileCount":"221","status":"M","submitter":"Mike Drob"}]
