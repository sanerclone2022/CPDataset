[{"authorTime":"2021-04-06 00:57:24","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":5,"curCode":"  public void assertFullWalkNoDups(SolrParams params, Consumer<Map<Object,Object>> consumer)\n    throws Exception {\n    \n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        consumer.accept(doc);\n      }\n      cursorMark = nextCursorMark;\n    }\n  }\n","date":"2021-04-06 00:57:24","endLine":885,"groupId":"40893","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDups","params":"(SolrParamsparams@Consumer<Map<Object@Object>>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public void assertFullWalkNoDups(SolrParams params, Consumer<Map<Object,Object>> consumer)\n    throws Exception {\n    \n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        consumer.accept(doc);\n      }\n      cursorMark = nextCursorMark;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":854,"status":"B"},{"authorDate":"2021-04-06 00:57:24","commitOrder":5,"curCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.getFieldValue(\"id\").toString());\n        if (ids.exists(id)) {\n          String msg = \"walk already seen: \" + id;\n          try {\n            try {\n              queryAndCompareShards(params(\"distrib\",\"false\",\n                                           \"q\",\"id:\"+id));\n            } catch (AssertionError ae) {\n              throw new AssertionError(msg + \", found shard inconsistency that would explain it...\", ae);\n            }\n            final QueryResponse rsp = cloudClient.query(params(\"q\",\"id:\"+id));\n            throw new AssertionError(msg + \", don't know why; q=id:\"+id+\" gives: \" + rsp.toString());\n          } catch (Exception e) {\n            throw new AssertionError(msg + \", exception trying to fiture out why...\", e);\n          }\n        }\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      });\n    return ids;\n  }\n","date":"2021-04-06 00:57:24","endLine":815,"groupId":"18961","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"assertFullWalkNoDups","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/b4971cc86f9775c40fddb970a4f525cf87168c.src","preCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.getFieldValue(\"id\").toString());\n        if (ids.exists(id)) {\n          String msg = \"walk already seen: \" + id;\n          try {\n            try {\n              queryAndCompareShards(params(\"distrib\",\"false\",\n                                           \"q\",\"id:\"+id));\n            } catch (AssertionError ae) {\n              throw new AssertionError(msg + \", found shard inconsistency that would explain it...\", ae);\n            }\n            final QueryResponse rsp = cloudClient.query(params(\"q\",\"id:\"+id));\n            throw new AssertionError(msg + \", don't know why; q=id:\"+id+\" gives: \" + rsp.toString());\n          } catch (Exception e) {\n            throw new AssertionError(msg + \", exception trying to fiture out why...\", e);\n          }\n        }\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      });\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"MB"}],"commitId":"59a59138668e9513060824d85ee375a1723f4bfb","commitMessage":"@@@SOLR-11921: Move \"cursorMark\" logic from QueryComponent to SearchHandler so it can work with things like QueryElevationComponent that modify the SortSpec in prepare().  as well as possible custom \"search\" components other then QueryComponent\n","date":"2021-04-06 00:57:24","modifiedFileCount":"9","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-04-06 00:57:24","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":6,"curCode":"  public void assertFullWalkNoDups(SolrParams params, Consumer<Map<Object,Object>> consumer)\n    throws Exception {\n    \n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings(\"unchecked\")\n      List<Map<Object,Object>> docs = (List<Map<Object, Object>>) (((Map<?, ?>)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        consumer.accept(doc);\n      }\n      cursorMark = nextCursorMark;\n    }\n  }\n","date":"2021-07-13 23:49:56","endLine":884,"groupId":"122778","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertFullWalkNoDups","params":"(SolrParamsparams@Consumer<Map<Object@Object>>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/8574c5282e4ef5640946d05498ca4ddd1c7ea8.src","preCode":"  public void assertFullWalkNoDups(SolrParams params, Consumer<Map<Object,Object>> consumer)\n    throws Exception {\n    \n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params,\n                                 CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<Object,Object>> docs = (List) (((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        consumer.accept(doc);\n      }\n      cursorMark = nextCursorMark;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":854,"status":"M"},{"authorDate":"2021-04-06 00:57:24","commitOrder":6,"curCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.getFieldValue(\"id\").toString());\n        if (ids.exists(id)) {\n          String msg = \"walk already seen: \" + id;\n          try {\n            try {\n              queryAndCompareShards(params(\"distrib\",\"false\",\n                                           \"q\",\"id:\"+id));\n            } catch (AssertionError ae) {\n              throw new AssertionError(msg + \", found shard inconsistency that would explain it...\", ae);\n            }\n            final QueryResponse rsp = cloudClient.query(params(\"q\",\"id:\"+id));\n            throw new AssertionError(msg + \", don't know why; q=id:\"+id+\" gives: \" + rsp.toString());\n          } catch (Exception e) {\n            throw new AssertionError(msg + \", exception trying to fiture out why...\", e);\n          }\n        }\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      });\n    return ids;\n  }\n","date":"2021-04-06 00:57:24","endLine":815,"groupId":"122778","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertFullWalkNoDups","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/b4971cc86f9775c40fddb970a4f525cf87168c.src","preCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.getFieldValue(\"id\").toString());\n        if (ids.exists(id)) {\n          String msg = \"walk already seen: \" + id;\n          try {\n            try {\n              queryAndCompareShards(params(\"distrib\",\"false\",\n                                           \"q\",\"id:\"+id));\n            } catch (AssertionError ae) {\n              throw new AssertionError(msg + \", found shard inconsistency that would explain it...\", ae);\n            }\n            final QueryResponse rsp = cloudClient.query(params(\"q\",\"id:\"+id));\n            throw new AssertionError(msg + \", don't know why; q=id:\"+id+\" gives: \" + rsp.toString());\n          } catch (Exception e) {\n            throw new AssertionError(msg + \", exception trying to fiture out why...\", e);\n          }\n        }\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n      });\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
