[{"authorTime":"2018-10-16 03:09:40","codes":[{"authorDate":"2018-10-30 21:41:59","commitOrder":2,"curCode":"  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n","date":"2018-10-30 21:42:24","endLine":1825,"groupId":"19517","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/46/42388500df6df3133baaa4b8b00efd92e3760b.src","preCode":"  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1805,"status":"B"},{"authorDate":"2018-10-16 03:09:40","commitOrder":2,"curCode":"  public void testPow() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=pow(a, 2), c=pow(2, a), d=pow(10, 3), e=pow(a, array(1, 2, 3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> pows = (List<Number>)tuple.get(\"b\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 100, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 900, 0.0);\n\n    pows = (List<Number>)tuple.get(\"c\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 1024, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 1048576, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 1073741824, 0.0);\n\n    double p = tuple.getDouble(\"d\");\n    assertEquals(p, 1000, 0.0);\n\n    pows = (List<Number>)tuple.get(\"e\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 10, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 27000, 0.0);\n\n  }\n","date":"2018-10-16 03:47:03","endLine":1820,"groupId":"14973","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/fc2ce9f8020ecfbb8ce0981b05428ab4ef0743.src","preCode":"  public void testPow() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=pow(a, 2), c=pow(2, a), d=pow(10, 3), e=pow(a, array(1, 2, 3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> pows = (List<Number>)tuple.get(\"b\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 100, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 900, 0.0);\n\n    pows = (List<Number>)tuple.get(\"c\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 1024, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 1048576, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 1073741824, 0.0);\n\n    double p = tuple.getDouble(\"d\");\n    assertEquals(p, 1000, 0.0);\n\n    pows = (List<Number>)tuple.get(\"e\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 10, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 27000, 0.0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1787,"status":"NB"}],"commitId":"856e28d8cf07cc34bc1361784bf00e7aceb3af97","commitMessage":"@@@SOLR-11572: Add recip Stream Evaluator to support reciprocal transformations\n","date":"2018-10-30 21:42:24","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-10-16 03:09:40","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n","date":"2020-06-17 01:27:53","endLine":2531,"groupId":"10917","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2510,"status":"M"},{"authorDate":"2018-10-16 03:09:40","commitOrder":3,"curCode":"  public void testPow() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=pow(a, 2), c=pow(2, a), d=pow(10, 3), e=pow(a, array(1, 2, 3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> pows = (List<Number>)tuple.get(\"b\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 100, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 900, 0.0);\n\n    pows = (List<Number>)tuple.get(\"c\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 1024, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 1048576, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 1073741824, 0.0);\n\n    double p = tuple.getDouble(\"d\");\n    assertEquals(p, 1000, 0.0);\n\n    pows = (List<Number>)tuple.get(\"e\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 10, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 27000, 0.0);\n\n  }\n","date":"2018-10-16 03:47:03","endLine":1820,"groupId":"10917","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/fc2ce9f8020ecfbb8ce0981b05428ab4ef0743.src","preCode":"  public void testPow() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=pow(a, 2), c=pow(2, a), d=pow(10, 3), e=pow(a, array(1, 2, 3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> pows = (List<Number>)tuple.get(\"b\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 100, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 900, 0.0);\n\n    pows = (List<Number>)tuple.get(\"c\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 1024, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 1048576, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 1073741824, 0.0);\n\n    double p = tuple.getDouble(\"d\");\n    assertEquals(p, 1000, 0.0);\n\n    pows = (List<Number>)tuple.get(\"e\");\n    assertEquals(pows.size(), 3);\n    assertEquals(pows.get(0).doubleValue(), 10, 0.0);\n    assertEquals(pows.get(1).doubleValue(), 400, 0.0);\n    assertEquals(pows.get(2).doubleValue(), 27000, 0.0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1787,"status":"N"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
