[{"authorTime":"2018-12-12 22:15:41","codes":[{"authorDate":"2019-05-30 00:52:57","commitOrder":5,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2019-05-30 00:53:10","endLine":308,"groupId":"26306","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/50bcce86f2bda7bfa00c57017f77e4d1af4fb0.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"},{"authorDate":"2018-12-12 22:15:41","commitOrder":5,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2018-12-12 22:16:08","endLine":369,"groupId":"26306","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/71473eefe45e97e6f5c6cd82998799068d58d5.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"NB"}],"commitId":"6ca372fcbb2a77dce3ed4488a56edf7da9a1bb32","commitMessage":"@@@SOLR-13494: Add DeepRandomStream implementation\n","date":"2019-05-30 00:53:10","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-10-15 00:36:19","codes":[{"authorDate":"2019-10-15 00:36:19","commitOrder":6,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2019-10-15 00:36:19","endLine":308,"groupId":"26306","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/ef18c2aa80f72dda819519331de495f3d64adb.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2019-10-15 00:36:19","commitOrder":6,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2019-10-15 00:36:19","endLine":369,"groupId":"26306","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/6d17989caddcb32eefc720ab0392e89c597cfd.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"04786244d0ae37eef88948c7fdfb5ccb84ca47da","commitMessage":"@@@LUCENE-8979: Code Cleanup: Use entryset for map iteration wherever possible. - part 2\n\n","date":"2019-10-15 00:36:19","modifiedFileCount":"38","status":"M","submitter":"Koen De Groote"},{"authorTime":"2020-06-10 07:16:14","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":7,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2020-06-10 07:21:36","endLine":308,"groupId":"26306","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/b3d3c74f5173e67d2666634a40b834f528322b.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2020-06-10 07:16:14","commitOrder":7,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2020-06-10 07:21:36","endLine":371,"groupId":"26306","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c2/a87000bd42388f84e4fd13664859986f885dc7.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-12-08 00:03:03","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":8,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2020-06-10 07:21:36","endLine":308,"groupId":"10318","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/b3d3c74f5173e67d2666634a40b834f528322b.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"N"},{"authorDate":"2020-12-08 00:03:03","commitOrder":8,"curCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    \r\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    Aliases aliases = checkAlias ? zkStateReader.getAliases() : null;\n\n    for(String col : collectionNames) {\n      List<String> collections = (aliases != null)\n          ? aliases.resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(c -> clusterState.getCollectionOrNull(c, true))\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[0]);\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","date":"2020-12-08 00:03:03","endLine":357,"groupId":"10318","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSlices","params":"(StringcollectionName@ZkStateReaderzkStateReader@booleancheckAlias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/a2211725dd9b9b0251f9f8b318eda661f0a695.src","preCode":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    \r\n    \r\n\n    \r\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  \r\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    \r\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    \r\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"30e5e38336de49433a7ecc60fb169c2426278565","commitMessage":"@@@SOLR-14987: Reuse HttpSolrClient per node vs. one per Solr core when using CloudSolrStream (#2067)\n\n","date":"2020-12-08 00:03:03","modifiedFileCount":"5","status":"M","submitter":"Timothy Potter"}]
