[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1284,"groupId":"23058","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1242,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testParallelShuffleStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"11\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"12\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"13\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"14\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"15\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"16\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"17\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"18\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"19\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"20\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"21\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"22\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"23\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"24\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"25\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"26\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"27\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"28\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"29\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"30\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"31\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"32\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"33\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"34\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"35\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"36\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"37\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"38\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"39\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"40\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"41\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"42\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"43\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"44\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"45\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"46\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"47\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"48\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"49\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"50\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"51\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"52\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"53\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"54\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"55\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"56\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"1000\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(shuffle(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamFactory(streamFactory);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 3, 4, 6, 56);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n      assert (pstream.toExpression(streamFactory).toString().contains(\"shuffle\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1376,"groupId":"3689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelShuffleStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testParallelShuffleStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"11\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"12\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"13\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"14\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"15\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"16\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"17\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"18\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"19\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"20\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"21\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"22\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"23\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"24\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"25\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"26\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"27\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"28\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"29\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"30\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"31\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"32\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"33\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"34\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"35\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"36\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"37\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"38\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"39\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"40\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"41\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"42\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"43\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"44\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"45\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"46\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"47\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"48\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"49\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"50\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"51\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"52\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"53\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"54\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"55\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"56\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"1000\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(shuffle(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamFactory(streamFactory);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 3, 4, 6, 56);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n      assert (pstream.toExpression(streamFactory).toString().contains(\"shuffle\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-11-28 00:21:42","commitOrder":2,"curCode":"  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":1290,"groupId":"10681","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/639d4bc8fa96853700ee3a75bd2091f2437482.src","preCode":"  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"M"},{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testParallelShuffleStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"11\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"12\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"13\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"14\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"15\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"16\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"17\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"18\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"19\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"20\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"21\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"22\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"23\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"24\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"25\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"26\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"27\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"28\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"29\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"30\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"31\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"32\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"33\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"34\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"35\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"36\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"37\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"38\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"39\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"40\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"41\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"42\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"43\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"44\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"45\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"46\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"47\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"48\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"49\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"50\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"51\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"52\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"53\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"54\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"55\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"56\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"1000\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(shuffle(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamFactory(streamFactory);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 3, 4, 6, 56);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n      assert (pstream.toExpression(streamFactory).toString().contains(\"shuffle\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1376,"groupId":"10681","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelShuffleStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testParallelShuffleStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"10\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"11\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"12\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"13\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"14\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"15\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"16\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"17\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"18\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"19\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"20\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"21\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"22\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"23\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"24\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"25\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"26\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"27\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"28\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"29\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"30\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"31\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"32\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"33\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"34\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"35\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"36\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"37\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"38\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"39\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"40\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"41\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"42\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"43\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"44\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"45\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"46\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"47\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"48\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"49\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"50\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"51\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"52\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"53\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"54\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"55\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .add(id, \"56\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"1000\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(shuffle(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamFactory(streamFactory);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 3, 4, 6, 56);\n\n      \r\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); \r\n      assert (pstream.toExpression(streamFactory).toString().contains(\"shuffle\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"N"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
