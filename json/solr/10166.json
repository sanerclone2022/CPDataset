[{"authorTime":"2017-02-10 13:39:06","codes":[{"authorDate":"2017-02-10 13:39:06","commitOrder":1,"curCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left && (boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-02-10 13:39:51","endLine":89,"groupId":"49249","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/0bd9880fca18633a183b601ef60836124eee63.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left && (boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AndEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2017-02-10 13:39:06","commitOrder":1,"curCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left || (boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-02-10 13:39:51","endLine":89,"groupId":"38121","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/d9df8e732566bfcdc409b0c7c29c3c4c1de8d6.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left || (boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OrEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"62489678d074edb2ee962e1c4ee38026ff504b2a","commitMessage":"@@@SOLR-9916: Adds Stream Evaluators to support evaluating values from tuples\n","date":"2017-02-10 13:39:51","modifiedFileCount":"6","status":"B","submitter":"Dennis Gove"},{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (Boolean)left && (Boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-08-26 17:07:19","endLine":50,"groupId":"10166","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/b876ea6719a7b7965f7da50e5976c08bb48651.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left && (boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AndEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (Boolean)left || (Boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-08-26 17:07:19","endLine":50,"groupId":"10166","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/38537f6b285fe53bdb60f7c95cb33d582602b5.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Boolean){\n      return new BooleanChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (boolean)left || (boolean)right;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OrEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"ddcb98e9c3e0d5f6acf59f872e8324e7ad144506","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-26 17:07:19","modifiedFileCount":"90","status":"M","submitter":"Karl Wright"}]
