[{"authorTime":"2012-02-10 08:43:54","codes":[{"authorDate":"2012-02-10 08:43:54","commitOrder":2,"curCode":"  public void testMinValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"min-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"aaa\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(-3),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","date":"2012-02-10 08:43:54","endLine":502,"groupId":"35292","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/95/369cf5332be5fc4721f7364fcc01521eb90752.src","preCode":"  public void testMinValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"min-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"aaa\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(-3),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"MB"},{"authorDate":"2012-02-10 08:43:54","commitOrder":2,"curCode":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","date":"2012-02-10 08:43:54","endLine":543,"groupId":"54150","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/95/369cf5332be5fc4721f7364fcc01521eb90752.src","preCode":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"MB"}],"commitId":"7c51126b867eeaeda48c995e9db3891d637519e1","commitMessage":"@@@SOLR-2802: change min/max processors to fail hard if values are not comparable.  also imrpvoe error handling/logging in FieldMutatingUpdateProcessor\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1242625 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-10 08:43:54","modifiedFileCount":"4","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2018-07-16 18:24:45","codes":[{"authorDate":"2018-07-16 18:24:45","commitOrder":3,"curCode":"  public void testMinValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"min-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"aaa\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(-3),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", 42, \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","date":"2018-07-16 18:24:45","endLine":529,"groupId":"102940","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMinValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1f/48d71ef1b465a78ea5b90bd706daf321f355ed.src","preCode":"  public void testMinValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"min-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"aaa\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(-3),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"},{"authorDate":"2018-07-16 18:24:45","commitOrder":3,"curCode":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", 42, \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","date":"2018-07-16 18:24:45","endLine":570,"groupId":"102940","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMaxValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1f/48d71ef1b465a78ea5b90bd706daf321f355ed.src","preCode":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    \r\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"}],"commitId":"c97f27b06c1d7c250e9596a9bc7bf5ca11ef6ad3","commitMessage":"@@@Merge branch 'remove-constructor-wrapper-classes' of https://github.com/michaelbraun/lucene-solr:\nLUCENE-8345.  GitHub PR #392: Remove instantiation of redundant wrapper classes for primitives; add wrapper class constructors to forbiddenapis.\nThis closes #392\n","date":"2018-07-16 18:24:45","modifiedFileCount":"96","status":"M","submitter":"Uwe Schindler"}]
