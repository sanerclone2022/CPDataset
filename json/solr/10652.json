[{"authorTime":"2016-02-20 09:03:06","codes":[{"authorDate":"2016-01-08 09:55:25","commitOrder":2,"curCode":"  public void testSelectStream() throws Exception {\n\n    SelectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"select(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    \n  }\n","date":"2016-01-08 09:55:25","endLine":101,"groupId":"4685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/e600a427f2228d25ea35d1b53abe9dfafe1ff6.src","preCode":"  public void testSelectStream() throws Exception {\n\n    SelectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"select(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2016-02-20 09:03:06","commitOrder":2,"curCode":"  public void testTopicStream() throws Exception {\n\n    TopicStream stream;\n    String expressionString;\n\n    \r\n    stream = new TopicStream(StreamExpressionParser.parse(\"topic(collection2, collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", id=\\\"blah\\\", checkpointEvery=1000)\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"topic(collection2,collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"checkpointEvery=1000\"));\n  }\n","date":"2016-02-20 09:03:43","endLine":139,"groupId":"4685","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopicStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/baa012adba881b33d5801d96b59cd74e613766.src","preCode":"  public void testTopicStream() throws Exception {\n\n    TopicStream stream;\n    String expressionString;\n\n    \r\n    stream = new TopicStream(StreamExpressionParser.parse(\"topic(collection2, collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", id=\\\"blah\\\", checkpointEvery=1000)\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"topic(collection2,collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"checkpointEvery=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"b2475bf9fdc59c02454f730a6cc4916cff03f862","commitMessage":"@@@SOLR-8588: Add TopicStream to the streaming API to support publish/subscribe messaging\n","date":"2016-02-20 09:03:43","modifiedFileCount":"4","status":"M","submitter":"jbernste"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testSelectStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (SelectStream stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"select(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":107,"groupId":"10652","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testSelectStream() throws Exception {\n\n    SelectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"select(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testTopicStream() throws Exception {\n\n    String expressionString;\n\n    \r\n    try (TopicStream stream = new TopicStream(StreamExpressionParser.parse(\"topic(collection2, collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", id=\\\"blah\\\", checkpointEvery=1000)\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"topic(collection2,collection1\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"checkpointEvery=1000\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":140,"groupId":"10652","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopicStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testTopicStream() throws Exception {\n\n    TopicStream stream;\n    String expressionString;\n\n    \r\n    stream = new TopicStream(StreamExpressionParser.parse(\"topic(collection2, collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", id=\\\"blah\\\", checkpointEvery=1000)\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"topic(collection2,collection1\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"checkpointEvery=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
