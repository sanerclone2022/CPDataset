[{"authorTime":"2016-01-08 23:56:33","codes":[{"authorDate":"2016-01-08 23:56:33","commitOrder":1,"curCode":"  private void testJDBCSolrInnerJoinExpression() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    \r\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-01-08 23:56:33","endLine":349,"groupId":"23459","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/ab7e3981b154b0cfca3d9425063ed969f61fda.src","preCode":"  private void testJDBCSolrInnerJoinExpression() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    \r\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"},{"authorDate":"2016-01-08 23:56:33","commitOrder":1,"curCode":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    \r\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-01-08 23:56:33","endLine":455,"groupId":"23459","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpressionWithProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/ab7e3981b154b0cfca3d9425063ed969f61fda.src","preCode":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    \r\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"}],"commitId":"fe4d702f83fb12c1543d3a483c7e3ba04bb521c9","commitMessage":"@@@SOLR-8479: Add JDBCStream to Streaming API and Streaming Expressions for integration with external data sources\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723749 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-08 23:56:33","modifiedFileCount":"2","status":"B","submitter":"Dennis Gove"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-05-05 15:05:25","endLine":294,"groupId":"2004","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  private void testJDBCSolrInnerJoinExpression() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    \r\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-05-05 15:05:25","endLine":400,"groupId":"2004","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpressionWithProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/15cfec0e126a30dec9f0fb64d052c09c3c786a.src","preCode":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    \r\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":3,"curCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-11-16 10:33:58","endLine":305,"groupId":"31302","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/4d53ad0bde1856ff6e636e7b83f92431e7b9e4.src","preCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":3,"curCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-11-16 10:33:58","endLine":411,"groupId":"31302","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpressionWithProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/4d53ad0bde1856ff6e636e7b83f92431e7b9e4.src","preCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2016-11-04 23:27:32","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":4,"curCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-11-16 10:33:58","endLine":305,"groupId":"31302","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/4d53ad0bde1856ff6e636e7b83f92431e7b9e4.src","preCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2016-11-04 23:27:32","commitOrder":4,"curCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =\n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","date":"2016-11-16 11:06:25","endLine":405,"groupId":"31302","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpressionWithProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c6/61fa2bc5be9e90664284433ca22f9778d82a9e.src","preCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    \r\n    \r\n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"c20d1298d3b26482dfc46a557d9c0680ce84aaed","commitMessage":"@@@SOLR-9729: JDBCStream improvements\n","date":"2016-11-16 11:06:25","modifiedFileCount":"2","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":5,"curCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":327,"groupId":"15580","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/ff33a083a55696e4508e94490441f56803af93.src","preCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":5,"curCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n              + \"    PERSONID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":436,"groupId":"15580","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpressionWithProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/ff33a083a55696e4508e94490441f56803af93.src","preCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    \r\n    expression =\n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    \r\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2019-04-05 20:52:02","commitOrder":6,"curCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(fetchSize=300, connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n\n      stream = factory.constructStream(expression);\n      String expr = ((Expressible)stream).toExpression(factory).toString();\n      assertTrue(expr.contains(\"fetchSize=300\"));\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2019-04-05 20:52:52","endLine":356,"groupId":"10756","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/ac88d15608de5610ac66baab42b9e6a871d7b5.src","preCode":"  public void testJDBCSolrInnerJoinExpression() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":6,"curCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n              + \"    PERSONID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":436,"groupId":"10756","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCSolrInnerJoinExpressionWithProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/ff33a083a55696e4508e94490441f56803af93.src","preCode":"  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    \r\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    \r\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n\n      \r\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n              + \"    PERSONID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"46131e9cdaf3fc377e307342d793846c4f36186a","commitMessage":"@@@SOLR-13374: Add fetchSize parameter to the jdbc Streaming Expression\n","date":"2019-04-05 20:52:52","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"}]
