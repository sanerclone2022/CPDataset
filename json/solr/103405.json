[{"authorTime":"2018-05-25 13:03:54","codes":[{"authorDate":"2018-05-25 13:03:54","commitOrder":1,"curCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","date":"2018-05-25 13:03:54","endLine":202,"groupId":"52274","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequireZkConnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/eb6a484c42208a32fd7cd889fde9436c3dbea2.src","preCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2018-05-25 13:03:54","commitOrder":1,"curCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"no servers hosting shard:\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","date":"2018-05-25 13:03:54","endLine":255,"groupId":"52274","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequireZkConnectedDistrib","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/eb6a484c42208a32fd7cd889fde9436c3dbea2.src","preCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"no servers hosting shard:\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"}],"commitId":"54a63d0d0c250a4aa45a3e3a770efffc106f8ce2","commitMessage":"@@@SOLR-12388: Enable a strict ZooKeeper-connected search request mode.  in which search requests will fail when the coordinating node cant communicate with ZooKeeper.  by setting the \"shards.tolerant\" param to \"requireZkConnected\"\n","date":"2018-05-25 13:03:54","modifiedFileCount":"10","status":"B","submitter":"Steve Rowe"},{"authorTime":"2018-05-30 12:39:26","codes":[{"authorDate":"2018-05-25 13:03:54","commitOrder":2,"curCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","date":"2018-05-25 13:03:54","endLine":202,"groupId":"52274","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequireZkConnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/eb6a484c42208a32fd7cd889fde9436c3dbea2.src","preCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2018-05-30 12:39:26","commitOrder":2,"curCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(\"Exception message is missing 'no servers hosting shard:': \" + e, e.getMessage().contains(\"no servers hosting shard:\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","date":"2018-05-30 12:39:26","endLine":255,"groupId":"52274","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequireZkConnectedDistrib","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/fc68c11004c5c9ae1803ca3c58e96cbb3b0e4c.src","preCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"no servers hosting shard:\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"bd14de24e9515b00198c42107486c99722ed8649","commitMessage":"@@@SOLR-12388: print out exception when assert fails\n","date":"2018-05-30 12:39:26","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2018-06-01 04:09:11","codes":[{"authorDate":"2018-05-25 13:03:54","commitOrder":3,"curCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","date":"2018-05-25 13:03:54","endLine":202,"groupId":"52274","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequireZkConnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/eb6a484c42208a32fd7cd889fde9436c3dbea2.src","preCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2018-06-01 04:09:11","commitOrder":3,"curCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        ignoreException(\"no servers hosting shard:\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(\"Unrecognized exception message: \" + e, \n            e.getMessage().contains(\"no servers hosting shard:\") \n                || e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n      unIgnoreException(\"no servers hosting shard:\");\n      unIgnoreException(\"ZooKeeper is not connected\");\n    }\n  }\n","date":"2018-06-01 04:09:11","endLine":260,"groupId":"52274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequireZkConnectedDistrib","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/289bda5f0ca0f4de5c0cb5cc87f6145aef8410.src","preCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(\"Exception message is missing 'no servers hosting shard:': \" + e, e.getMessage().contains(\"no servers hosting shard:\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"252a8145d9374978776f3fc10bfa12e14bf8433a","commitMessage":"@@@SOLR-12388: Add an expected exception message to SearchHandlerTest.testRequireZkConnectedDistrib()\n","date":"2018-06-01 04:09:11","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":213,"groupId":"103405","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testRequireZkConnected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/17b551c2fd17d8e6117ba2a54d3ae78cc8a0f2.src","preCode":"  public void testRequireZkConnected() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(5, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(5, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 2)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n      JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n      \r\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(disconnectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        ignoreException(\"no servers hosting shard:\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(\"Unrecognized exception message: \" + e, \n            e.getMessage().contains(\"no servers hosting shard:\") \n                || e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n      unIgnoreException(\"no servers hosting shard:\");\n      unIgnoreException(\"ZooKeeper is not connected\");\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":272,"groupId":"103405","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testRequireZkConnectedDistrib","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/17b551c2fd17d8e6117ba2a54d3ae78cc8a0f2.src","preCode":"  public void testRequireZkConnectedDistrib() throws Exception{\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(2, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(2, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      \r\n      String collectionName = \"testRequireZkConnectedDistribCollection\";\n      String configName = collectionName + \"Config\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n      CollectionAdminRequest.createCollection(collectionName, configName, 2, 1)\n          .process(miniCluster.getSolrClient());\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(ShardParams.SHARDS_TOLERANT, \"requireZkConnected\");\n      QueryRequest req = new QueryRequest(params);\n      QueryResponse rsp = req.process(cloudSolrClient, collectionName);\n      assertTrue(rsp.getResponseHeader().getBooleanArg(\"zkConnected\"));\n\n      Collection<Slice> slices = cloudSolrClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlices();\n      Slice disconnectedSlice = getRandomEntry(slices);\n      Replica disconnectedReplica = getRandomEntry(disconnectedSlice.getReplicas());\n\n      \r\n      Slice connectedSlice = getRandomEntry(slices);\n      while (connectedSlice.getName().equals(disconnectedSlice.getName())) {\n        connectedSlice = getRandomEntry(slices);\n      }\n      Replica connectedReplica = connectedSlice.getReplicas().iterator().next();\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(connectedReplica.getCoreUrl()).build()) {\n        ignoreException(\"ZooKeeper is not connected\");\n        ignoreException(\"no servers hosting shard:\");\n        JettySolrRunner disconnectedJetty = miniCluster.getReplicaJetty(disconnectedReplica);\n        disconnectedJetty.getCoreContainer().getZkController().getZkClient().close();\n        req.process(httpSolrClient);\n        fail(\"An exception should be thrown when ZooKeeper is not connected and shards.tolerant=requireZkConnected\");\n      } catch (Exception e) {\n        assertTrue(\"Unrecognized exception message: \" + e, \n            e.getMessage().contains(\"no servers hosting shard:\") \n                || e.getMessage().contains(\"ZooKeeper is not connected\"));\n      }\n    }\n    finally {\n      miniCluster.shutdown();\n      unIgnoreException(\"no servers hosting shard:\");\n      unIgnoreException(\"ZooKeeper is not connected\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
