[{"authorTime":"2018-08-23 10:47:04","codes":[{"authorDate":"2018-08-23 10:47:04","commitOrder":1,"curCode":"  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.remove(key);\n      }\n\n      return false;\n    } else {\n      throw new IOException(\"The removeCache function requires two parameters: workspace and key\");\n    }\n  }\n","date":"2018-08-27 07:48:56","endLine":56,"groupId":"55394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/fa3cd1035f206fff8fe88c6e2fe4867cee03c8.src","preCode":"  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.remove(key);\n      }\n\n      return false;\n    } else {\n      throw new IOException(\"The removeCache function requires two parameters: workspace and key\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RemoveCacheEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2018-08-23 10:47:04","commitOrder":1,"curCode":"  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.get(key);\n      }\n\n      return null;\n    } else {\n      throw new IOException(\"The getCache function requires two parameters: workspace and key\");\n    }\n  }\n","date":"2018-08-27 07:48:56","endLine":56,"groupId":"55394","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e3/40d80845ba9ca40278f9c2e257707582a925b2.src","preCode":"  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.get(key);\n      }\n\n      return null;\n    } else {\n      throw new IOException(\"The getCache function requires two parameters: workspace and key\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GetCacheEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"b72ff3babbaeebb4c754ca905ac62512bf5fc1e7","commitMessage":"@@@SOLR-12687: Add functions to cache data structures and mathematical models\n","date":"2018-08-27 07:48:56","modifiedFileCount":"5","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.remove(key);\n      }\n\n      return false;\n    } else {\n      throw new IOException(\"The removeCache function requires two parameters: workspace and key\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":58,"groupId":"55394","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c3/bd47b4c8c4537ce3f7a4f2a02af81de8dbca26.src","preCode":"  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.remove(key);\n      }\n\n      return false;\n    } else {\n      throw new IOException(\"The removeCache function requires two parameters: workspace and key\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RemoveCacheEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.get(key);\n      }\n\n      return null;\n    } else {\n      throw new IOException(\"The getCache function requires two parameters: workspace and key\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":58,"groupId":"55394","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/b8050b920d61c6d257f7fd85a78b2117d3c5c4.src","preCode":"  public Object doWork(Object... values) throws IOException {\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.get(key);\n      }\n\n      return null;\n    } else {\n      throw new IOException(\"The getCache function requires two parameters: workspace and key\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GetCacheEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":3,"curCode":"  public Object doWork(Object... values) throws IOException {\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n\n      ConcurrentMap<String, ConcurrentMap<String, Object>> objectCache = this.streamContext.getObjectCache();\n      ConcurrentMap<String, Object> spaceCache = objectCache.get(space);\n      if(spaceCache != null) {\n        return spaceCache.remove(key);\n      }\n\n      return false;\n    } else {\n      throw new IOException(\"The removeCache function requires two parameters: workspace and key\");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":56,"groupId":"10181","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/793aa87b016a846a6ab09a15873804580531af.src","preCode":"  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.remove(key);\n      }\n\n      return false;\n    } else {\n      throw new IOException(\"The removeCache function requires two parameters: workspace and key\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RemoveCacheEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":3,"curCode":"  public Object doWork(Object... values) throws IOException {\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n\n      ConcurrentMap<String, ConcurrentMap<String, Object>> objectCache = this.streamContext.getObjectCache();\n      ConcurrentMap<String, Object> spaceCache = objectCache.get(space);\n      return (spaceCache != null) ? spaceCache.get(key) : null;\n    } else {\n      throw new IOException(\"The getCache function requires two parameters: workspace and key\");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":52,"groupId":"10181","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/6d4e25099454b6ba8b2fdf2a68d1ed7150e0b4.src","preCode":"  public Object doWork(Object... values) throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentMap objectCache = this.streamContext.getObjectCache();\n    if(values.length == 2) {\n      String space = (String)values[0];\n      String key = (String)values[1];\n      space = space.replace(\"\\\"\", \"\");\n      key = key.replace(\"\\\"\", \"\");\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentMap spaceCache = (ConcurrentMap)objectCache.get(space);\n\n      if(spaceCache != null) {\n        return spaceCache.get(key);\n      }\n\n      return null;\n    } else {\n      throw new IOException(\"The getCache function requires two parameters: workspace and key\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GetCacheEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
