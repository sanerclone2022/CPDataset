[{"authorTime":"2017-04-12 01:22:23","codes":[{"authorDate":"2017-04-12 01:22:23","commitOrder":4,"curCode":"  static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact, boolean simple,\n                            BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","date":"2017-04-12 01:22:23","endLine":222,"groupId":"8142","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toMaps","params":"(MetricRegistryregistry@List<MetricFilter>shouldMatchFilters@MetricFiltermustMatchFilter@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/00857a912057d361ac66d805ef82f5abc5905c.src","preCode":"  static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact, boolean simple,\n                            BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"MB"},{"authorDate":"2017-04-12 01:22:23","commitOrder":4,"curCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","date":"2017-04-12 01:22:23","endLine":259,"groupId":"8145","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMetrics","params":"(MetricRegistryregistry@Collection<String>names@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/00857a912057d361ac66d805ef82f5abc5905c.src","preCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"e30cc70fddcdd6fddb5eedf9f38e77fcb3f33bd1","commitMessage":"@@@SOLR-9959: SolrInfoMBean-s category and hierarchy cleanup.\n","date":"2017-04-12 01:22:23","modifiedFileCount":"132","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-04-18 18:46:39","codes":[{"authorDate":"2017-04-18 18:46:39","commitOrder":5,"curCode":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                     MetricFilter mustMatchFilter, PropertyFilter propertyFilter,\n                     boolean skipHistograms, boolean skipAggregateValues,\n                     boolean compact, boolean simple,\n                     BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, propertyFilter, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","date":"2017-04-18 18:46:39","endLine":215,"groupId":"8142","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toMaps","params":"(MetricRegistryregistry@List<MetricFilter>shouldMatchFilters@MetricFiltermustMatchFilter@PropertyFilterpropertyFilter@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/90a0f0085b7ca5cd3db785f37687e05be61a94.src","preCode":"  static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact, boolean simple,\n                            BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2017-04-18 18:46:39","commitOrder":5,"curCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","date":"2017-04-18 18:46:39","endLine":252,"groupId":"8145","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMetrics","params":"(MetricRegistryregistry@Collection<String>names@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/90a0f0085b7ca5cd3db785f37687e05be61a94.src","preCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"bb69c02e575caac12c8735a0f6b96ed5808f94e2","commitMessage":"@@@SOLR-10418: Metrics API should return JVM system properties.\n","date":"2017-04-18 18:46:39","modifiedFileCount":"10","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-08-17 18:32:22","codes":[{"authorDate":"2017-08-17 18:32:22","commitOrder":6,"curCode":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                     MetricFilter mustMatchFilter, PropertyFilter propertyFilter,\n                     boolean skipHistograms, boolean skipAggregateValues,\n                     boolean compact, boolean simple,\n                     BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, propertyFilter, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n","date":"2017-08-17 18:33:36","endLine":215,"groupId":"8142","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toMaps","params":"(MetricRegistryregistry@List<MetricFilter>shouldMatchFilters@MetricFiltermustMatchFilter@PropertyFilterpropertyFilter@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/e2db2f0d60f68aeeb54ce77b3701b03bcb605e.src","preCode":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                     MetricFilter mustMatchFilter, PropertyFilter propertyFilter,\n                     boolean skipHistograms, boolean skipAggregateValues,\n                     boolean compact, boolean simple,\n                     BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, propertyFilter, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2017-08-17 18:32:22","commitOrder":6,"curCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n","date":"2017-08-17 18:33:36","endLine":252,"groupId":"8145","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMetrics","params":"(MetricRegistryregistry@Collection<String>names@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/e2db2f0d60f68aeeb54ce77b3701b03bcb605e.src","preCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"1c3656917652732506c6dfa4978db7af128dffdb","commitMessage":"@@@SOLR-11215: Make a metric accessible through a single param.\n","date":"2017-08-17 18:33:36","modifiedFileCount":"6","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-08-17 18:32:22","codes":[{"authorDate":"2020-10-07 20:57:26","commitOrder":7,"curCode":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                     MetricFilter mustMatchFilter, Predicate<CharSequence> propertyFilter,\n                     boolean skipHistograms, boolean skipAggregateValues,\n                     boolean compact, boolean simple,\n                     BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, propertyFilter, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n","date":"2020-10-07 23:52:55","endLine":303,"groupId":"102494","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toMaps","params":"(MetricRegistryregistry@List<MetricFilter>shouldMatchFilters@MetricFiltermustMatchFilter@Predicate<CharSequence>propertyFilter@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/7b13c2b5e5e0196a2118633a25d983c12a1ee4.src","preCode":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                     MetricFilter mustMatchFilter, PropertyFilter propertyFilter,\n                     boolean skipHistograms, boolean skipAggregateValues,\n                     boolean compact, boolean simple,\n                     BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    final SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, propertyFilter, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2017-08-17 18:32:22","commitOrder":7,"curCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n","date":"2017-08-17 18:33:36","endLine":252,"groupId":"102494","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMetrics","params":"(MetricRegistryregistry@Collection<String>names@booleanskipHistograms@booleanskipAggregateValues@booleancompact@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/e2db2f0d60f68aeeb54ce77b3701b03bcb605e.src","preCode":"  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"}],"commitId":"43b1a2fdc7a4bf8e5c8409013d07858dec6d0c35","commitMessage":"@@@SOLR-14691: Metrics reporting should avoid creating objects.\n","date":"2020-10-07 23:52:55","modifiedFileCount":"20","status":"M","submitter":"Andrzej Bialecki"}]
