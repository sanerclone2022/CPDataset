[{"authorTime":"2017-11-01 07:21:58","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":4,"curCode":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","date":"2017-06-29 17:00:17","endLine":1911,"groupId":"10283","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollectionRetry","params":"(StringtestCollectionName@StringconfigSetName@intnumShards@intreplicationFactor@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6e/1613f33bada06cca2bed4badbe86a98bc2f6d8.src","preCode":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1898,"status":"NB"},{"authorDate":"2017-11-01 07:21:58","commitOrder":4,"curCode":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); \r\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","date":"2017-11-01 07:21:58","endLine":456,"groupId":"49771","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollectionWithRetry","params":"(StringtestCollectionName@Stringconfig@intnumShards@intreplicationFactor@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/483f5678a16ac643f5b6f8170c3590374ede93.src","preCode":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); \r\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"B"}],"commitId":"148d81c1e9578221e61cbc2acbf2a7a2082d9fc0","commitMessage":"@@@SOLR-11438: Solr should return rf when min_rf is specified for deletes as well as adds\n","date":"2017-11-01 07:21:58","modifiedFileCount":"3","status":"M","submitter":"Erick Erickson"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":2016,"groupId":"10283","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollectionRetry","params":"(StringtestCollectionName@StringconfigSetName@intnumShards@intreplicationFactor@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/db4b195c97133df5535eddd0f784a7b63685eb.src","preCode":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2003,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); \r\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":490,"groupId":"49771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollectionWithRetry","params":"(StringtestCollectionName@Stringconfig@intnumShards@intreplicationFactor@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/eadfe56b974b685290d8964dab9cf29eeeb24e.src","preCode":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); \r\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":6,"curCode":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor)\n      throws SolrServerException, IOException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","date":"2020-07-08 23:57:24","endLine":2066,"groupId":"101910","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollectionRetry","params":"(StringtestCollectionName@StringconfigSetName@intnumShards@intreplicationFactor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/01018aa2686adc85eb68d2a844b6145f233360.src","preCode":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2053,"status":"M"},{"authorDate":"2020-07-08 23:57:24","commitOrder":6,"curCode":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor) throws IOException, SolrServerException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); \r\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","date":"2020-07-08 23:57:24","endLine":518,"groupId":"101910","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollectionWithRetry","params":"(StringtestCollectionName@Stringconfig@intnumShards@intreplicationFactor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/d50f3e5c730b86fc148d0f81d3fae2bba89725.src","preCode":"  void createCollectionWithRetry(String testCollectionName, String config, int numShards, int replicationFactor, int maxShardsPerNode) throws IOException, SolrServerException, InterruptedException, TimeoutException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n    if (resp.getResponse().get(\"failure\") != null) {\n      Thread.sleep(5000); \r\n\n      CollectionAdminRequest.deleteCollection(testCollectionName).process(cloudClient);\n\n      resp = createCollection(testCollectionName, \"conf1\", numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/ReplicationFactorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"}]
