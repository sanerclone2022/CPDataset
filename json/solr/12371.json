[{"authorTime":"2018-09-23 18:45:59","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":2,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"NB"},{"authorDate":"2018-09-23 18:45:59","commitOrder":2,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2018-09-23 18:45:59","endLine":286,"groupId":"51245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f1/28c2e436221a7278385767378256a065e90d2b.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"e6e3dc7ea8c626f0f4a1173f899a9d7bb1af26d1","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-09-23 18:45:59","modifiedFileCount":"14","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-09-27 18:45:38","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":3,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2018-09-27 18:45:38","commitOrder":3,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2018-09-27 18:45:38","endLine":292,"groupId":"51245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6e/851dbd957b48c2dc546d3bc6e23508e1feb048.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"c587410f99375005c680ece5e24a4dfd40d8d3eb","commitMessage":"@@@SOLR-12756: Refactor Assign and extract replica placement strategies out of it.\n\nNow.  assignment is done with the help of a builder class instead of calling a method with large number of arguments. The number of special cases that had to be handled have been cut down as well.\n","date":"2018-09-27 18:45:38","modifiedFileCount":"12","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":4,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2018-11-30 01:58:51","endLine":295,"groupId":"51245","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/abaf05d53ea5e39a6c49e2ce83ff6b44a85642.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2019-06-12 06:56:02","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":5,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2019-06-12 06:56:02","commitOrder":5,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2019-06-12 06:56:02","endLine":297,"groupId":"51245","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/49/b1e26431498465374e5d4850220f9f831d742b.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"bfb5b41144f13e4d10d64a9c1bd53f3f498d7e4e","commitMessage":"@@@SOLR-12013: collections API CUSTERSTATUS command fails when configset missing\n","date":"2019-06-12 06:56:02","modifiedFileCount":"8","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-07 06:11:37","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":6,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-06-07 06:11:37","commitOrder":6,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-06-07 06:11:37","endLine":307,"groupId":"51245","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/0332e895a2dfac23885b6a9f5d926bae371b2a.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"3cbb1e0b4f9a49df1ff53e62ad0930f1cf4e7def","commitMessage":"@@@SOLR-14480: Fix or suppress warnings in solr/cloud/api\n","date":"2020-06-07 06:11:37","modifiedFileCount":"28","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-10 02:59:17","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":7,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-06-10 02:59:17","commitOrder":7,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-06-10 02:59:17","endLine":305,"groupId":"51245","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/95/fffa47f37980156a2b51e5fdbddfcc2fa6eec3.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n            ZkStateReader.NODE_NAME_PROP, createReplica.node,\n            ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n        if (createReplica.coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n        }\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"1ab9b811c65abb3d1a827c87b4f1135116ff90eb","commitMessage":"@@@SOLR-12823: remove /clusterstate.json (#1528)\n\n* SOLR-12823: remove /clusterstate.json\n\nRemove all code dealing with Zookeeper's /clusterstate.json.  remove Collection API's MIGRATESTATEVERSION.  remove legacyCloud option.\n\nAlso fixes SOLR-11877 DocCollection.getStateFormat is buggy\n\nCo-authored-by: Ilan Ginzburg <iginzburg@salesforce.com>","date":"2020-06-10 02:59:17","modifiedFileCount":"69","status":"M","submitter":"murblanc"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":8,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-07-08 23:57:24","commitOrder":8,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            CollectionAdminParams.SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-07-08 23:57:24","endLine":300,"groupId":"51245","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/2146bbfb32d18067605e16c4b765cfb6588068.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-08-30 17:36:28","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":9,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-08-30 17:36:28","commitOrder":9,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            CollectionAdminParams.SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, cloudConfig, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-08-30 17:36:28","endLine":292,"groupId":"51245","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@CloudConfigcloudConfig@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/66d3bbb0343fbed38c88d5657fde40e53ed21f.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            CollectionAdminParams.SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"a3b3ba10e34b3401e7a93c1b69889df4feb6430b","commitMessage":"@@@SOLR-14794: pass configuration to Collection API commands (#1801)\n\nPass CloudConfig instance representing the solrcloud section of solr.xml configuration from Overseer to the Collection and Config Set API commands it executes.","date":"2020-08-30 17:36:28","modifiedFileCount":"32","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2020-09-01 23:21:12","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":10,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-09-01 23:21:12","commitOrder":10,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            CollectionAdminParams.SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-09-01 23:21:12","endLine":291,"groupId":"51245","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/5639f4989dd36db40aab804a2b2e0a2c82e239.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            CollectionAdminParams.SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, cloudConfig, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"825c18c59b36dc3dee9763746d136b745bf22b21","commitMessage":"@@@SOLR-14794: revert commit passing CloudConfig everywhere (a3b3ba10e34b3401e7a93c1b69889df4feb6430b) and remove tab in solr/bin/solr.cmd\n","date":"2020-09-01 23:21:12","modifiedFileCount":"32","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2020-10-27 02:10:49","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":11,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-10-27 02:10:49","commitOrder":11,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-10-27 02:10:49","endLine":266,"groupId":"51245","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/98/97f07895304059e0d8a5df77d0ac4d0b1e4aa6.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    if (coll.getStr(WITH_COLLECTION) != null) {\n      String withCollectionName = coll.getStr(WITH_COLLECTION);\n      DocCollection withCollection = clusterState.getCollection(withCollectionName);\n      if (withCollection.getActiveSlices().size() > 1)  {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The `withCollection` must have only one shard, found: \" + withCollection.getActiveSlices().size());\n      }\n      String withCollectionShard = withCollection.getActiveSlices().iterator().next().getName();\n\n      List<Replica> replicas = withCollection.getReplicas(createReplica.node);\n      if (replicas == null || replicas.isEmpty()) {\n        \r\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toString(),\n            ZkStateReader.COLLECTION_PROP, withCollectionName,\n            ZkStateReader.SHARD_ID_PROP, withCollectionShard,\n            \"node\", createReplica.node,\n            \r\n            CollectionAdminParams.SKIP_NODE_ASSIGNMENT, \"true\",\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.TRUE.toString()); \r\n        addReplica(clusterState, props, results, null);\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"b649f3f40d08a94705252350733ace3003010a5b","commitMessage":"@@@SOLR-14964: remove Autoscaling related withCollection and COLOCATED_WITH (#2034)\n\nPart of SOLR-14656 (remove Autoscalin)","date":"2020-10-27 02:10:49","modifiedFileCount":"9","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2020-12-01 03:05:48","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":12,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2020-12-01 03:05:48","commitOrder":12,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2020-12-01 03:05:48","endLine":265,"groupId":"51245","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5f/4114a59616d24a53407c9f13b55ad9cf8513ce.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(createReplica.node),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"a0492840ee8690ddf48369665c744d16c7dd30cb","commitMessage":"@@@SOLR-12182: Don't persist base_url in ZK as the scheme is variable.  compute from node_name instead (#2010)\n\n","date":"2020-12-01 03:05:48","modifiedFileCount":"53","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-02-02 03:25:17","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":13,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2021-02-02 03:25:17","commitOrder":13,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2021-02-02 03:25:17","endLine":262,"groupId":"43775","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6e/34b0fdd95f4b7da96daa02d48858a004c268e3.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singletonList(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"99748384cfb16cdef2c5a116243cddc23cedf11c","commitMessage":"@@@SOLR-14253 Replace sleep calls with ZK waits (#1297)\n\nCo-Authored-By: markrmiller <markrmiller@apache.org>","date":"2021-02-02 03:25:17","modifiedFileCount":"7","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-02-13 09:42:18","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":14,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2021-02-13 09:42:18","commitOrder":14,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ocmh.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ocmh.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ocmh.cloudManager, ocmh.zkStateReader);\n      } else {\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2021-02-13 09:42:18","endLine":268,"groupId":"43775","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/55b7668f3b2b646d5170c1e374e01f423c3c1c.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      try {\n        ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n      }\n    }\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"23755ddfdd36a9613010cb9e6201127df55be744","commitMessage":"@@@SOLR-14928: allow cluster state updates to be done in a distributed way and not through Overseer (#2364)\n\n","date":"2021-02-13 09:42:18","modifiedFileCount":"42","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2021-02-19 21:40:23","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":15,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2021-02-19 21:40:23","commitOrder":15,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        try {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        CollectionHandlingUtils.waitToSeeReplicasInState(ccc.getZkStateReader(), ccc.getSolrCloudManager().getTimeSource(), collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    CollectionHandlingUtils.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2021-02-19 21:40:23","endLine":268,"groupId":"3360","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/c7261144d8036168dc33a0d4e5198dfee7e1b1.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ocmh.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ocmh.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ocmh.cloudManager, ocmh.zkStateReader);\n      } else {\n        try {\n          ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        ocmh.waitToSeeReplicasInState(collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"e7c80f6445a04cb3d1b49d85d773fde283c916fe","commitMessage":"@@@SOLR-15157: refactor Collection API to separate from Overseer and message handling abstractions (#2390)\n\nNo functional changes. In preparation of distributing the Collection API command execution.","date":"2021-02-19 21:40:23","modifiedFileCount":"42","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2021-06-25 13:22:29","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":16,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"40291","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2021-06-25 13:22:29","commitOrder":16,"curCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        try {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        CollectionHandlingUtils.waitToSeeReplicasInState(ccc.getZkStateReader(), ccc.getSolrCloudManager().getTimeSource(), collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = coll.getConfigName();\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    CollectionHandlingUtils.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2021-06-25 13:22:29","endLine":268,"groupId":"10447","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplicaParams","params":"(ClusterStateclusterState@ZkNodePropsmessage@@SuppressWarnings({\"rawtypes\"})NamedListresults@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@StringasyncId@ShardHandlershardHandler@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/7d51a39f14fb64abc6e76d5367847ee58365c5.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        try {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        CollectionHandlingUtils.waitToSeeReplicasInState(ccc.getZkStateReader(), ccc.getSolrCloudManager().getTimeSource(), collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = zkStateReader.readConfigName(collectionName);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    CollectionHandlingUtils.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"caca8279586ffecf9e6a6e80515d3fd531d06c85","commitMessage":"@@@SOLR-14341: Move configName into DocCollection (state.json) (#17)\n\nSolrCloud: move the reference a collection has to a configSet in ZooKeeper from the\n  collections/collectionName into its state.json.  For many-collection clusters.  this is an\n  optimization when the cluster status is fetched.\n\nCo-authored-by: Nazerke Seidan <nseidan@salesforce.com>\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-25 13:22:29","modifiedFileCount":"34","status":"M","submitter":"Nazerke Seidan"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2016-03-08 18:53:39","commitOrder":17,"curCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","date":"2016-03-08 18:53:39","endLine":663,"groupId":"12371","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"getParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/c8c3989dfba0209abf80878fd42d253faefefd.src","preCode":"    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      return params;\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"N"},{"authorDate":"2021-07-13 23:49:56","commitOrder":17,"curCode":"  private ModifiableSolrParams getReplicaParams(ZkNodeProps message, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, CreateReplica createReplica) throws InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        try {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        CollectionHandlingUtils.waitToSeeReplicasInState(ccc.getZkStateReader(), ccc.getSolrCloudManager().getTimeSource(), collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = coll.getConfigName();\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    CollectionHandlingUtils.addPropertyParams(message, params);\n\n    return params;\n  }\n","date":"2021-07-13 23:49:56","endLine":267,"groupId":"12371","id":32,"instanceNumber":2,"isCurCommit":1,"methodName":"getReplicaParams","params":"(ZkNodePropsmessage@StringcollectionName@DocCollectioncoll@booleanskipCreateReplicaInClusterState@CreateReplicacreateReplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/c10a498dc1066fa486caface48ed9000f24a47.src","preCode":"  private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, String collectionName, DocCollection coll, boolean skipCreateReplicaInClusterState, String asyncId, ShardHandler shardHandler, CreateReplica createReplica) throws IOException, InterruptedException, KeeperException {\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    if (!skipCreateReplicaInClusterState) {\n      ZkNodeProps props = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n          ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n          ZkStateReader.NODE_NAME_PROP, createReplica.node,\n          ZkStateReader.REPLICA_TYPE, createReplica.replicaType.name());\n      if (createReplica.coreNodeName != null) {\n        props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, createReplica.coreNodeName);\n      }\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        try {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.CORE_NODE_NAME,\n        CollectionHandlingUtils.waitToSeeReplicasInState(ccc.getZkStateReader(), ccc.getSolrCloudManager().getTimeSource(), collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n\n    String configName = coll.getConfigName();\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, createReplica.coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collectionName);\n    params.set(CoreAdminParams.REPLICA_TYPE, createReplica.replicaType.name());\n    if (createReplica.sliceName != null) {\n      params.set(CoreAdminParams.SHARD, createReplica.sliceName);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (createReplica.coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, createReplica.coreNodeName);\n    }\n    CollectionHandlingUtils.addPropertyParams(message, params);\n\n    return params;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
