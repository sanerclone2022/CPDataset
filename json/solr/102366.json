[{"authorTime":"2014-11-05 20:38:06","codes":[{"authorDate":"2014-11-05 20:38:06","commitOrder":1,"curCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":238,"groupId":"36610","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"applySetUserProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"},{"authorDate":"2014-11-05 20:38:06","commitOrder":1,"curCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if(!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":282,"groupId":"21458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"applySetProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if(!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"}],"commitId":"30db71bbde029845baf2ebf46068c6b23f1399d6","commitMessage":"@@@SOLR-6533. SOLR-6654\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1636862 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-05 20:38:06","modifiedFileCount":"18","status":"B","submitter":"Noble Paul"},{"authorTime":"2015-03-18 05:52:05","codes":[{"authorDate":"2014-11-05 20:38:06","commitOrder":2,"curCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":238,"groupId":"36610","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"applySetUserProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2015-03-18 05:52:05","commitOrder":2,"curCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(StrUtils.formatString(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2015-03-18 05:52:05","endLine":447,"groupId":"21458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"applySetProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/85/162b3cabd502c518be71c243ed4578b6979cc4.src","preCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"8d64c08c1aa215f20b4809598bca6378031c62a4","commitMessage":"@@@SOLR-7258: Forbid MessageFormat.format and MessageFormat single-arg constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1667414 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-18 05:52:05","modifiedFileCount":"15","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-03-27 00:39:14","codes":[{"authorDate":"2014-11-05 20:38:06","commitOrder":3,"curCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":238,"groupId":"36610","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"applySetUserProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2015-03-27 00:39:14","commitOrder":3,"curCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2015-03-27 00:39:14","endLine":479,"groupId":"36610","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"applySetProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/55705e192a67bac5730fa94b20f7a164741326.src","preCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(StrUtils.formatString(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"ad913e40138e1881f2f4e2099efa4f6782d91d11","commitMessage":"@@@SOLR-7226: Make /query/* jmx/* .  requestDispatcher/*.  <listener> <initParams> properties in solrconfig.xml editable\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1669368 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-27 00:39:14","modifiedFileCount":"7","status":"M","submitter":"Noble Paul"},{"authorTime":"2018-06-22 11:21:13","codes":[{"authorDate":"2014-11-05 20:38:06","commitOrder":4,"curCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":238,"groupId":"36610","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"applySetUserProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2018-06-22 11:21:13","commitOrder":4,"curCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2018-06-22 11:21:13","endLine":652,"groupId":"36610","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"applySetProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/d543fa1d5a0a5ebbe37a0cb70d2c6844c2ae10.src","preCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"25e7631b9014a5d0729be7926313c498df1dc606","commitMessage":"@@@SOLR-12482: Config API returns status 0 for failed operations\n","date":"2018-06-22 11:21:13","modifiedFileCount":"3","status":"M","submitter":"Steve Rowe"},{"authorTime":"2020-06-06 03:22:44","codes":[{"authorDate":"2014-11-05 20:38:06","commitOrder":5,"curCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":238,"groupId":"36610","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"applySetUserProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2020-06-06 03:22:44","commitOrder":5,"curCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        @SuppressWarnings({\"rawtypes\"})\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2020-06-06 03:22:44","endLine":725,"groupId":"36610","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"applySetProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/7101895c46948c18618778cd8c0bed9e025ccb.src","preCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"M"}],"commitId":"ae3de57b33dec2c78ae34e601c2c1c0bc7717825","commitMessage":"@@@SOLR-14538: Fix or suppress remaining warnings in apache/solr/handler\n","date":"2020-06-06 03:22:44","modifiedFileCount":"28","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2014-11-05 20:38:06","commitOrder":6,"curCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2014-11-05 20:38:06","endLine":238,"groupId":"102366","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"applySetUserProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/e5ddfee8d3a7e70401484a0feda8c4cde21a24.src","preCode":"    private ConfigOverlay applySetUserProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        overlay = overlay.setUserProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2021-06-03 06:17:26","commitOrder":6,"curCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class<?> typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","date":"2021-06-03 06:17:26","endLine":706,"groupId":"102366","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"applySetProp","params":"(CommandOperationop@ConfigOverlayoverlay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/f44e30aae6e66a8941ebfb5fca406eccbc48ad.src","preCode":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        @SuppressWarnings({\"rawtypes\"})\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
