[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n","date":"2018-04-06 02:00:07","endLine":1100,"groupId":"32794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTranspose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1073,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testUnitize() throws Exception {\n    String cexpr = \"let(echo=true, a=unitize(matrix(array(1,2,3), array(4,5,6))), b=unitize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.2672612419124244, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0.5345224838248488, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 0.8017837257372732, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 0.6837634587578276, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array3.get(2).doubleValue(), 0.6837634587578276, 0.0);\n  }\n","date":"2018-04-06 02:00:07","endLine":1133,"groupId":"16509","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnitize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testUnitize() throws Exception {\n    String cexpr = \"let(echo=true, a=unitize(matrix(array(1,2,3), array(4,5,6))), b=unitize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.2672612419124244, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0.5345224838248488, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 0.8017837257372732, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 0.6837634587578276, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array3.get(2).doubleValue(), 0.6837634587578276, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1103,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n","date":"2020-06-17 01:27:53","endLine":2050,"groupId":"10906","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTranspose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2022,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  public void testUnitize() throws Exception {\n    String cexpr = \"let(echo=true, a=unitize(matrix(array(1,2,3), array(4,5,6))), b=unitize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.2672612419124244, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0.5345224838248488, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 0.8017837257372732, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 0.6837634587578276, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array3.get(2).doubleValue(), 0.6837634587578276, 0.0);\n  }\n","date":"2020-06-17 01:27:53","endLine":2085,"groupId":"10906","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnitize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testUnitize() throws Exception {\n    String cexpr = \"let(echo=true, a=unitize(matrix(array(1,2,3), array(4,5,6))), b=unitize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.2672612419124244, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0.5345224838248488, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 0.8017837257372732, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 0.6837634587578276, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.4558423058385518, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 0.5698028822981898, 0.0);\n    assertEquals(array3.get(2).doubleValue(), 0.6837634587578276, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2053,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
