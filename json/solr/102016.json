[{"authorTime":"2016-12-19 23:15:04","codes":[{"authorDate":"2016-07-26 02:15:48","commitOrder":3,"curCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","date":"2016-08-03 07:42:10","endLine":124,"groupId":"33262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(ServletRequestrequest@ServletResponseresponse@FilterChainfilterChain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/27861e8c4d308031ee5ac809db8d27e2898298.src","preCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"NB"},{"authorDate":"2016-12-19 23:15:04","commitOrder":3,"curCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","date":"2016-12-19 23:15:04","endLine":105,"groupId":"33262","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doFilter","params":"(ServletRequestrequest@ServletResponseresponse@FilterChainfilterChain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fb/35e722281c826fcb5003f943c4aa42e8aa48fe.src","preCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"a1a8b2864e621c18aa86b21d4a244233e991a47d","commitMessage":"@@@SOLR-9513: Generic Hadoop authentication plugins.  GenericHadoopAuthPlugin and ConfigurableInternodeAuthHadoopPlugin\n","date":"2016-12-19 23:15:04","modifiedFileCount":"7","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":4,"curCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    \r\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","date":"2018-12-17 00:58:20","endLine":140,"groupId":"33262","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(ServletRequestrequest@ServletResponseresponse@FilterChainfilterChain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/12168650157de248f21f830c6293740b31f1c4.src","preCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-12-17 00:58:20","commitOrder":4,"curCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    \r\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","date":"2018-12-17 00:58:20","endLine":116,"groupId":"33262","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doFilter","params":"(ServletRequestrequest@ServletResponseresponse@FilterChainfilterChain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/06a25ed1a856abf0a874ac5b71bd83fd2b6311.src","preCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2019-02-25 16:34:05","codes":[{"authorDate":"2019-02-25 16:34:05","commitOrder":5,"curCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    \r\n    Locale.setDefault(Locale.US);\n    super.doFilter(request, response, filterChainWrapper);\n  }\n","date":"2019-02-25 16:34:05","endLine":127,"groupId":"102016","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doFilter","params":"(ServletRequestrequest@ServletResponseresponse@FilterChainfilterChain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/84564d6831f2dbde8487004d73020d18befe04.src","preCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    \r\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-02-25 16:34:05","commitOrder":5,"curCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    \r\n    Locale.setDefault(Locale.US);\n    super.doFilter(request, response, filterChainWrapper);\n  }\n","date":"2019-02-25 16:34:05","endLine":103,"groupId":"102016","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doFilter","params":"(ServletRequestrequest@ServletResponseresponse@FilterChainfilterChain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/800708dd07093151d03d4ce771145b9d57578f.src","preCode":"  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    \r\n    \r\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    \r\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    \r\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"c599ad98023a6615e4a47240cb5bde2c4be89cd0","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2019-02-25 16:34:05","modifiedFileCount":"18","status":"M","submitter":"Karl Wright"}]
