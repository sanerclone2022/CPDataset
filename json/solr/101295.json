[{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public void testInvalidSTD2() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"std\", \"-1f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 0.0,std = -1.0\");\n    try {\n        implTestStandard(params,\n              0.0f,\n              -1f);\n        fail(\"testInvalidSTD2 failed to throw exception: \"+expectedException);\n    } catch(NormalizerException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","date":"2016-11-02 01:50:14","endLine":85,"groupId":"43282","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidSTD2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/10/fa9720ccd438342ffebe5eaac461b9b7683187.src","preCode":"  public void testInvalidSTD2() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"std\", \"-1f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 0.0,std = -1.0\");\n    try {\n        implTestStandard(params,\n              0.0f,\n              -1f);\n        fail(\"testInvalidSTD2 failed to throw exception: \"+expectedException);\n    } catch(NormalizerException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestStandardNormalizer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public void testInvalidSTD3() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"avg\", \"1f\");\n    params.put(\"std\", \"0f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 1.0,std = 0.0\");\n    try {\n        implTestStandard(params,\n              1f,\n              0f);\n        fail(\"testInvalidSTD3 failed to throw exception: \"+expectedException);\n    } catch(NormalizerException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","date":"2016-11-02 01:50:14","endLine":103,"groupId":"16701","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidSTD3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/10/fa9720ccd438342ffebe5eaac461b9b7683187.src","preCode":"  public void testInvalidSTD3() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"avg\", \"1f\");\n    params.put(\"std\", \"0f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 1.0,std = 0.0\");\n    try {\n        implTestStandard(params,\n              1f,\n              0f);\n        fail(\"testInvalidSTD3 failed to throw exception: \"+expectedException);\n    } catch(NormalizerException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestStandardNormalizer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"5a66b3bc089e4b3e73b1c41c4cdcd89b183b85e7","commitMessage":"@@@SOLR-8542: Adds Solr Learning to Rank (LTR) plugin for reranking results with machine learning models. (Michael Nilsson.  Diego Ceccarelli.  Joshua Pantony.  Jon Dorando.  Naveen Santhapuri.  Alessandro Benedetti.  David Grohmann.  Christine Poerschke)\n","date":"2016-11-02 01:50:14","modifiedFileCount":"0","status":"B","submitter":"Christine Poerschke"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testInvalidSTD2() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"std\", \"-1f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 0.0,std = -1.0\");\n\n    NormalizerException ex = SolrTestCaseJ4.expectThrows(NormalizerException.class,\n        () -> implTestStandard(params, 0.0f, -1f)\n    );\n    assertEquals(expectedException.toString(), ex.toString());\n  }\n","date":"2019-08-03 15:30:49","endLine":79,"groupId":"101295","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidSTD2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/e415fff28b357f6e7c16d28395b28006de1ffd.src","preCode":"  public void testInvalidSTD2() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"std\", \"-1f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 0.0,std = -1.0\");\n    try {\n        implTestStandard(params,\n              0.0f,\n              -1f);\n        fail(\"testInvalidSTD2 failed to throw exception: \"+expectedException);\n    } catch(NormalizerException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestStandardNormalizer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testInvalidSTD3() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"avg\", \"1f\");\n    params.put(\"std\", \"0f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 1.0,std = 0.0\");\n\n    NormalizerException ex = SolrTestCaseJ4.expectThrows(NormalizerException.class,\n        () -> implTestStandard(params, 1f, 0f)\n    );\n    assertEquals(expectedException.toString(), ex.toString());\n  }\n","date":"2019-08-03 15:30:49","endLine":94,"groupId":"101295","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidSTD3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/e415fff28b357f6e7c16d28395b28006de1ffd.src","preCode":"  public void testInvalidSTD3() {\n    final Map<String,Object> params = new HashMap<String,Object>();\n    params.put(\"avg\", \"1f\");\n    params.put(\"std\", \"0f\");\n    final NormalizerException expectedException =\n        new NormalizerException(\"Standard Normalizer standard deviation must be positive \"\n            + \"| avg = 1.0,std = 0.0\");\n    try {\n        implTestStandard(params,\n              1f,\n              0f);\n        fail(\"testInvalidSTD3 failed to throw exception: \"+expectedException);\n    } catch(NormalizerException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestStandardNormalizer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
