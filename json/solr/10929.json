[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testTtest() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(0,1,2,3,4,5,6,7,9,10,11,12), \" +\n                       \"b=array(0,1,2,3,4,5,6,7,1,1,1,1), \" +\n                       \"ttest=ttest(a, b),\" +\n                       \"sample2Mean=mean(b),\"+\n                       \"onesamplettest=ttest(sample2Mean, b),\" +\n                       \"pairedttest=pairedTtest(a,b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map testResult = (Map)tuples.get(0).get(\"ttest\");\n    Number tstat = (Number)testResult.get(\"t-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(tstat.doubleValue(), 2.3666107120397575, .0001);\n    assertEquals(pval.doubleValue(), 0.029680704317867967, .0001);\n\n    Map testResult2 = (Map)tuples.get(0).get(\"onesamplettest\");\n    Number tstat2 = (Number)testResult2.get(\"t-statistic\");\n    Number pval2 = (Number)testResult2.get(\"p-value\");\n    assertEquals(tstat2.doubleValue(), 0, .0001);\n    assertEquals(pval2.doubleValue(), 1, .0001);\n\n    Map testResult3 = (Map)tuples.get(0).get(\"pairedttest\");\n    Number tstat3 = (Number)testResult3.get(\"t-statistic\");\n    Number pval3 = (Number)testResult3.get(\"p-value\");\n    assertEquals(tstat3.doubleValue(), 2.321219442769799, .0001);\n    assertEquals(pval3.doubleValue(), 0.0404907407662755, .0001);\n  }\n","date":"2018-04-06 02:00:07","endLine":2649,"groupId":"12026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTtest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testTtest() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(0,1,2,3,4,5,6,7,9,10,11,12), \" +\n                       \"b=array(0,1,2,3,4,5,6,7,1,1,1,1), \" +\n                       \"ttest=ttest(a, b),\" +\n                       \"sample2Mean=mean(b),\"+\n                       \"onesamplettest=ttest(sample2Mean, b),\" +\n                       \"pairedttest=pairedTtest(a,b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map testResult = (Map)tuples.get(0).get(\"ttest\");\n    Number tstat = (Number)testResult.get(\"t-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(tstat.doubleValue(), 2.3666107120397575, .0001);\n    assertEquals(pval.doubleValue(), 0.029680704317867967, .0001);\n\n    Map testResult2 = (Map)tuples.get(0).get(\"onesamplettest\");\n    Number tstat2 = (Number)testResult2.get(\"t-statistic\");\n    Number pval2 = (Number)testResult2.get(\"p-value\");\n    assertEquals(tstat2.doubleValue(), 0, .0001);\n    assertEquals(pval2.doubleValue(), 1, .0001);\n\n    Map testResult3 = (Map)tuples.get(0).get(\"pairedttest\");\n    Number tstat3 = (Number)testResult3.get(\"t-statistic\");\n    Number pval3 = (Number)testResult3.get(\"p-value\");\n    assertEquals(tstat3.doubleValue(), 2.321219442769799, .0001);\n    assertEquals(pval3.doubleValue(), 0.0404907407662755, .0001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2615,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testGtestDataSet() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(1,1,2,3,4,5,6,7,9,10,11,12), \" +\n        \"    b=array(1,1,2,3,4,5,6,7,1,1,1,1), \" +\n        \"    gtest=gtestDataSet(a, b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map testResult = (Map)tuples.get(0).get(\"gtest\");\n    Number gstat = (Number)testResult.get(\"G-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(gstat.doubleValue(), 22.41955157784917, .0001);\n    assertEquals(pval.doubleValue(), 0.021317102314826752, .0001);\n  }\n","date":"2018-04-06 02:00:07","endLine":2695,"groupId":"12026","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGtestDataSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testGtestDataSet() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(1,1,2,3,4,5,6,7,9,10,11,12), \" +\n        \"    b=array(1,1,2,3,4,5,6,7,1,1,1,1), \" +\n        \"    gtest=gtestDataSet(a, b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map testResult = (Map)tuples.get(0).get(\"gtest\");\n    Number gstat = (Number)testResult.get(\"G-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(gstat.doubleValue(), 22.41955157784917, .0001);\n    assertEquals(pval.doubleValue(), 0.021317102314826752, .0001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2675,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  public void testTtest() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(0,1,2,3,4,5,6,7,9,10,11,12), \" +\n                       \"b=array(0,1,2,3,4,5,6,7,1,1,1,1), \" +\n                       \"ttest=ttest(a, b),\" +\n                       \"sample2Mean=mean(b),\"+\n                       \"onesamplettest=ttest(sample2Mean, b),\" +\n                       \"pairedttest=pairedTtest(a,b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"rawtypes\"})\n    Map testResult = (Map)tuples.get(0).get(\"ttest\");\n    Number tstat = (Number)testResult.get(\"t-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(tstat.doubleValue(), 2.3666107120397575, .0001);\n    assertEquals(pval.doubleValue(), 0.029680704317867967, .0001);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map testResult2 = (Map)tuples.get(0).get(\"onesamplettest\");\n    Number tstat2 = (Number)testResult2.get(\"t-statistic\");\n    Number pval2 = (Number)testResult2.get(\"p-value\");\n    assertEquals(tstat2.doubleValue(), 0, .0001);\n    assertEquals(pval2.doubleValue(), 1, .0001);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map testResult3 = (Map)tuples.get(0).get(\"pairedttest\");\n    Number tstat3 = (Number)testResult3.get(\"t-statistic\");\n    Number pval3 = (Number)testResult3.get(\"p-value\");\n    assertEquals(tstat3.doubleValue(), 2.321219442769799, .0001);\n    assertEquals(pval3.doubleValue(), 0.0404907407662755, .0001);\n  }\n","date":"2020-06-17 01:27:53","endLine":4373,"groupId":"10929","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTtest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testTtest() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                       \"a=array(0,1,2,3,4,5,6,7,9,10,11,12), \" +\n                       \"b=array(0,1,2,3,4,5,6,7,1,1,1,1), \" +\n                       \"ttest=ttest(a, b),\" +\n                       \"sample2Mean=mean(b),\"+\n                       \"onesamplettest=ttest(sample2Mean, b),\" +\n                       \"pairedttest=pairedTtest(a,b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map testResult = (Map)tuples.get(0).get(\"ttest\");\n    Number tstat = (Number)testResult.get(\"t-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(tstat.doubleValue(), 2.3666107120397575, .0001);\n    assertEquals(pval.doubleValue(), 0.029680704317867967, .0001);\n\n    Map testResult2 = (Map)tuples.get(0).get(\"onesamplettest\");\n    Number tstat2 = (Number)testResult2.get(\"t-statistic\");\n    Number pval2 = (Number)testResult2.get(\"p-value\");\n    assertEquals(tstat2.doubleValue(), 0, .0001);\n    assertEquals(pval2.doubleValue(), 1, .0001);\n\n    Map testResult3 = (Map)tuples.get(0).get(\"pairedttest\");\n    Number tstat3 = (Number)testResult3.get(\"t-statistic\");\n    Number pval3 = (Number)testResult3.get(\"p-value\");\n    assertEquals(tstat3.doubleValue(), 2.321219442769799, .0001);\n    assertEquals(pval3.doubleValue(), 0.0404907407662755, .0001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4336,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  public void testGtestDataSet() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(1,1,2,3,4,5,6,7,9,10,11,12), \" +\n        \"    b=array(1,1,2,3,4,5,6,7,1,1,1,1), \" +\n        \"    gtest=gtestDataSet(a, b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"rawtypes\"})\n    Map testResult = (Map)tuples.get(0).get(\"gtest\");\n    Number gstat = (Number)testResult.get(\"G-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(gstat.doubleValue(), 22.41955157784917, .0001);\n    assertEquals(pval.doubleValue(), 0.021317102314826752, .0001);\n  }\n","date":"2020-06-17 01:27:53","endLine":4421,"groupId":"10929","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGtestDataSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testGtestDataSet() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"    a=array(1,1,2,3,4,5,6,7,9,10,11,12), \" +\n        \"    b=array(1,1,2,3,4,5,6,7,1,1,1,1), \" +\n        \"    gtest=gtestDataSet(a, b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map testResult = (Map)tuples.get(0).get(\"gtest\");\n    Number gstat = (Number)testResult.get(\"G-statistic\");\n    Number pval = (Number)testResult.get(\"p-value\");\n    assertEquals(gstat.doubleValue(), 22.41955157784917, .0001);\n    assertEquals(pval.doubleValue(), 0.021317102314826752, .0001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4400,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
