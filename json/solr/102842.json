[{"authorTime":"2020-07-07 10:17:26","codes":[{"authorDate":"2020-05-08 03:02:36","commitOrder":6,"curCode":"    public void testCollectionCreateSearchDelete() throws Exception {\n        CloudSolrClient solrClient = cluster.getSolrClient();\n        String collectionName = \"testkerberoscollection_authz\";\n\n        \r\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n                NUM_SHARDS, REPLICATION_FACTOR);\n        create.process(solrClient);\n\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"1\");\n        solrClient.add(collectionName, doc);\n        solrClient.commit(collectionName);\n\n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        QueryResponse rsp = solrClient.query(collectionName, query);\n        assertEquals(1, rsp.getResults().getNumFound());\n\n        CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n        deleteReq.process(solrClient);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n                solrClient.getZkStateReader(), true, 330);\n    }\n","date":"2020-07-08 00:37:50","endLine":80,"groupId":"33339","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCollectionCreateSearchDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/20e54940e8f54d737849f5f0ae3f38241ed631.src","preCode":"    public void testCollectionCreateSearchDelete() throws Exception {\n        CloudSolrClient solrClient = cluster.getSolrClient();\n        String collectionName = \"testkerberoscollection_authz\";\n\n        \r\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n                NUM_SHARDS, REPLICATION_FACTOR);\n        create.process(solrClient);\n\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"1\");\n        solrClient.add(collectionName, doc);\n        solrClient.commit(collectionName);\n\n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        QueryResponse rsp = solrClient.query(collectionName, query);\n        assertEquals(1, rsp.getResults().getNumFound());\n\n        CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n        deleteReq.process(solrClient);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n                solrClient.getZkStateReader(), true, 330);\n    }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestRuleBasedAuthorizationWithKerberos.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2020-07-07 10:17:26","commitOrder":6,"curCode":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    \r\n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    \r\n    assertAuthMetricsMinimums(13, 8, 0, 5, 0, 0);  }\n","date":"2020-07-07 10:17:26","endLine":140,"groupId":"32695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCollectionCreateSearchDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/5497ed9920c79e891d0b1fb45757a6ecd8b6f4.src","preCode":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    \r\n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    \r\n    assertAuthMetricsMinimums(13, 8, 0, 5, 0, 0);  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"NB"}],"commitId":"d3f4b21deb0056098e9e888a6b9d72e0bf2d0834","commitMessage":"@@@SOLR-10814 Add short-name feature to RuleBasedAuthz plugin\n\nAdditional-Author: Hrishikesh Gadre <hgadre@cloudera.com>\n","date":"2020-07-08 00:37:50","modifiedFileCount":"11","status":"M","submitter":"Mike Drob"},{"authorTime":"2020-07-20 20:17:01","codes":[{"authorDate":"2020-05-08 03:02:36","commitOrder":7,"curCode":"    public void testCollectionCreateSearchDelete() throws Exception {\n        CloudSolrClient solrClient = cluster.getSolrClient();\n        String collectionName = \"testkerberoscollection_authz\";\n\n        \r\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n                NUM_SHARDS, REPLICATION_FACTOR);\n        create.process(solrClient);\n\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"1\");\n        solrClient.add(collectionName, doc);\n        solrClient.commit(collectionName);\n\n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        QueryResponse rsp = solrClient.query(collectionName, query);\n        assertEquals(1, rsp.getResults().getNumFound());\n\n        CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n        deleteReq.process(solrClient);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n                solrClient.getZkStateReader(), true, 330);\n    }\n","date":"2020-07-08 00:37:50","endLine":80,"groupId":"33339","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCollectionCreateSearchDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/20e54940e8f54d737849f5f0ae3f38241ed631.src","preCode":"    public void testCollectionCreateSearchDelete() throws Exception {\n        CloudSolrClient solrClient = cluster.getSolrClient();\n        String collectionName = \"testkerberoscollection_authz\";\n\n        \r\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n                NUM_SHARDS, REPLICATION_FACTOR);\n        create.process(solrClient);\n\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"1\");\n        solrClient.add(collectionName, doc);\n        solrClient.commit(collectionName);\n\n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        QueryResponse rsp = solrClient.query(collectionName, query);\n        assertEquals(1, rsp.getResults().getNumFound());\n\n        CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n        deleteReq.process(solrClient);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n                solrClient.getZkStateReader(), true, 330);\n    }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestRuleBasedAuthorizationWithKerberos.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2020-07-20 20:17:01","commitOrder":7,"curCode":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    \r\n    assertAuthMetricsMinimums(4, 2, 0, 2, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(8, 4, 0, 4, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    \r\n    assertAuthMetricsMinimums(11, 7, 0, 4, 0, 0);  }\n","date":"2020-07-20 20:17:01","endLine":91,"groupId":"32695","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCollectionCreateSearchDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/65/38fd515045a38c525d647389b18da92110c846.src","preCode":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    \r\n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    \r\n    assertAuthMetricsMinimums(13, 8, 0, 5, 0, 0);  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"cc0c111949d5039a0c7cb67cad55c63e2f761298","commitMessage":"@@@SOLR-14656: Removing Autoscaling Framework\n\nThe following were removed:\n *  Autoscaling policy.  triggers etc.\n *  withCollection handling\n *  UTILIZENODE command\n *  Sim framework\n *  Suggestions tab in UI\n *  Reference guide pages for autoscaling\n *  autoAddReplicas feature\n *  UTILIZENODE\n","date":"2020-07-20 20:17:01","modifiedFileCount":"47","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2021-04-03 00:37:51","codes":[{"authorDate":"2021-04-03 00:37:51","commitOrder":8,"curCode":"    public void testCollectionCreateSearchDelete() throws Exception {\n        CloudSolrClient solrClient = cluster.getSolrClient();\n\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"1\");\n        solrClient.add(collectionName, doc);\n        solrClient.commit(collectionName);\n\n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        QueryResponse rsp = solrClient.query(collectionName, query);\n        assertEquals(1, rsp.getResults().getNumFound());\n\n        CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n        deleteReq.process(solrClient);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n                solrClient.getZkStateReader(), true, 330);\n    }\n","date":"2021-04-06 02:13:44","endLine":119,"groupId":"102842","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCollectionCreateSearchDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/898919fe5788c6a19d5535c0b01b38cae6b199.src","preCode":"    public void testCollectionCreateSearchDelete() throws Exception {\n        CloudSolrClient solrClient = cluster.getSolrClient();\n        String collectionName = \"testkerberoscollection_authz\";\n\n        \r\n        CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n                NUM_SHARDS, REPLICATION_FACTOR);\n        create.process(solrClient);\n\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(\"id\", \"1\");\n        solrClient.add(collectionName, doc);\n        solrClient.commit(collectionName);\n\n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        QueryResponse rsp = solrClient.query(collectionName, query);\n        assertEquals(1, rsp.getResults().getNumFound());\n\n        CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n        deleteReq.process(solrClient);\n        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n                solrClient.getZkStateReader(), true, 330);\n    }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestRuleBasedAuthorizationWithKerberos.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2021-04-03 00:37:51","commitOrder":8,"curCode":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    \r\n    assertAuthMetricsMinimums(2, 1, 0, 1, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(4, 2, 0, 2, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    \r\n    assertAuthMetricsMinimums(6, 4, 0, 2, 0, 0);\n  }\n","date":"2021-04-06 02:13:44","endLine":92,"groupId":"102842","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testCollectionCreateSearchDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/520be199c6baf379336ffcfd3817d4fa837e60.src","preCode":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    \r\n    assertAuthMetricsMinimums(4, 2, 0, 2, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(8, 4, 0, 4, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    \r\n    assertAuthMetricsMinimums(11, 7, 0, 4, 0, 0);  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"def7f47a4d2389ce8362ce7215095c5e43afe5c0","commitMessage":"@@@SOLR-15233: Set doAs in ConfigurableInternodeAuthHadoopPlugin\n\nAdditional-Author: Jason Gerlowski <gerlowskija@apache.org>\nAdditional-Author: Geza Nagy <gezan>\n","date":"2021-04-06 02:13:44","modifiedFileCount":"7","status":"M","submitter":"Mike Drob"}]
