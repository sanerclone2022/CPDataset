[{"authorTime":"2019-05-11 03:01:48","codes":[{"authorDate":"2019-05-11 03:01:48","commitOrder":1,"curCode":"  public Facet2DStream(String zkHost, String collection, ModifiableSolrParams params, Bucket x, Bucket y, String dimensions, Metric metric) throws IOException {\n    if (dimensions != null) {\n      String[] strDimensions = dimensions.split(\",\");\n      if (strDimensions.length != 2) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n      }\n      this.dimensionX = Integer.parseInt(strDimensions[0]);\n      this.dimensionY = Integer.parseInt(strDimensions[1]);\n\n    }\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    this.bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    init(collection, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","date":"2019-05-11 03:02:18","endLine":92,"groupId":"37920","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"Facet2DStream","params":"(StringzkHost@Stringcollection@ModifiableSolrParamsparams@Bucketx@Buckety@Stringdimensions@Metricmetric)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/d48df83db431c1285402007e6179d33db1b839.src","preCode":"  public Facet2DStream(String zkHost, String collection, ModifiableSolrParams params, Bucket x, Bucket y, String dimensions, Metric metric) throws IOException {\n    if (dimensions != null) {\n      String[] strDimensions = dimensions.split(\",\");\n      if (strDimensions.length != 2) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n      }\n      this.dimensionX = Integer.parseInt(strDimensions[0]);\n      this.dimensionY = Integer.parseInt(strDimensions[1]);\n\n    }\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    this.bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    init(collection, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2019-05-11 03:01:48","commitOrder":1,"curCode":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0]);\n        dimensionY = Integer.parseInt(strDimensions[1]);\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","date":"2019-05-11 03:02:18","endLine":181,"groupId":"46849","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"Facet2DStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/d48df83db431c1285402007e6179d33db1b839.src","preCode":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0]);\n        dimensionY = Integer.parseInt(strDimensions[1]);\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"f9cd8b09574f4212d9d6f4619bcbf68be8ec34b7","commitMessage":"@@@SOLR-13047: Add facet2D Streaming Expression\n\nCo-authored-by: Joel Bernstein <jbernste@apache.org>\nCo-authored-by: Nazerke Seidan <seinaz1997@gmail.com>\n","date":"2019-05-11 03:02:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2019-05-11 04:12:35","codes":[{"authorDate":"2019-05-11 03:01:48","commitOrder":2,"curCode":"  public Facet2DStream(String zkHost, String collection, ModifiableSolrParams params, Bucket x, Bucket y, String dimensions, Metric metric) throws IOException {\n    if (dimensions != null) {\n      String[] strDimensions = dimensions.split(\",\");\n      if (strDimensions.length != 2) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n      }\n      this.dimensionX = Integer.parseInt(strDimensions[0]);\n      this.dimensionY = Integer.parseInt(strDimensions[1]);\n\n    }\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    this.bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    init(collection, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","date":"2019-05-11 03:02:18","endLine":92,"groupId":"37920","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"Facet2DStream","params":"(StringzkHost@Stringcollection@ModifiableSolrParamsparams@Bucketx@Buckety@Stringdimensions@Metricmetric)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/d48df83db431c1285402007e6179d33db1b839.src","preCode":"  public Facet2DStream(String zkHost, String collection, ModifiableSolrParams params, Bucket x, Bucket y, String dimensions, Metric metric) throws IOException {\n    if (dimensions != null) {\n      String[] strDimensions = dimensions.split(\",\");\n      if (strDimensions.length != 2) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n      }\n      this.dimensionX = Integer.parseInt(strDimensions[0]);\n      this.dimensionY = Integer.parseInt(strDimensions[1]);\n\n    }\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    this.bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    init(collection, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"},{"authorDate":"2019-05-11 04:12:35","commitOrder":2,"curCode":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","date":"2019-05-11 04:12:35","endLine":179,"groupId":"46849","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"Facet2DStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/3e2fd648ee83888a422f24f63c80bfb5c84cf1.src","preCode":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0]);\n        dimensionY = Integer.parseInt(strDimensions[1]);\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"6069ef6ca63a2f07d086166af379690927307e19","commitMessage":"@@@SOLR-13047: Fix Pre-commit\n","date":"2019-05-11 04:12:35","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-12-10 05:02:29","codes":[{"authorDate":"2019-05-11 03:01:48","commitOrder":3,"curCode":"  public Facet2DStream(String zkHost, String collection, ModifiableSolrParams params, Bucket x, Bucket y, String dimensions, Metric metric) throws IOException {\n    if (dimensions != null) {\n      String[] strDimensions = dimensions.split(\",\");\n      if (strDimensions.length != 2) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n      }\n      this.dimensionX = Integer.parseInt(strDimensions[0]);\n      this.dimensionY = Integer.parseInt(strDimensions[1]);\n\n    }\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    this.bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    init(collection, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","date":"2019-05-11 03:02:18","endLine":92,"groupId":"11363","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"Facet2DStream","params":"(StringzkHost@Stringcollection@ModifiableSolrParamsparams@Bucketx@Buckety@Stringdimensions@Metricmetric)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/d48df83db431c1285402007e6179d33db1b839.src","preCode":"  public Facet2DStream(String zkHost, String collection, ModifiableSolrParams params, Bucket x, Bucket y, String dimensions, Metric metric) throws IOException {\n    if (dimensions != null) {\n      String[] strDimensions = dimensions.split(\",\");\n      if (strDimensions.length != 2) {\n        throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n      }\n      this.dimensionX = Integer.parseInt(strDimensions[0]);\n      this.dimensionY = Integer.parseInt(strDimensions[1]);\n\n    }\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    this.bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    init(collection, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"},{"authorDate":"2019-12-10 05:02:29","commitOrder":3,"curCode":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 10;\n    int dimensionY = 10;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","date":"2019-12-10 05:04:03","endLine":184,"groupId":"11363","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"Facet2DStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/cb147d47242c3559565ba0cdbfe3c7e63f4d56.src","preCode":"  public Facet2DStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if (collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter bucketXExpression = factory.getNamedOperand(expression, \"x\");\n    StreamExpressionNamedParameter bucketYExpression = factory.getNamedOperand(expression, \"y\");\n    StreamExpressionNamedParameter dimensionsExpression = factory.getNamedOperand(expression, \"dimensions\");\n    List <StreamExpression> metricExpression = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    if (collectionName == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - collectionName expected as first operand\", expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for (StreamExpressionNamedParameter namedParam : namedParams) {\n      if (!namedParam.getName().equals(\"x\") && !namedParam.getName().equals(\"y\") &&\n          !namedParam.getName().equals(\"dimensions\") && !namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    Bucket x = null;\n    if (bucketXExpression != null) {\n      if (bucketXExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyX = ((StreamExpressionValue) bucketXExpression.getParameter()).getValue();\n        if(keyX != null && !keyX.equals(\"\")){\n          x = new Bucket(keyX.trim());\n        }\n      }\n    }\n    Bucket y = null;\n    if (bucketYExpression != null) {\n      if (bucketYExpression.getParameter() instanceof StreamExpressionValue) {\n        String keyY = ((StreamExpressionValue) bucketYExpression.getParameter()).getValue();\n        if(keyY != null && !keyY.equals(\"\")){\n          y = new Bucket(keyY.trim());\n        }\n      }\n    }\n\n    if (x == null || y == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - x and y buckets expected. eg. 'x=\\\"name\\\"'\", expression, collectionName));\n    }\n\n    Metric metric = null;\n    if(metricExpression == null || metricExpression.size() == 0){\n      metric = new CountMetric();\n    } else {\n      metric = factory.constructMetric(metricExpression.get(0));\n    }\n\n    String bucketSortString = metric.getIdentifier() + \" desc\";\n    FieldComparator bucketSort = parseBucketSort(bucketSortString, x, y);\n\n    int dimensionX = 0;\n    int dimensionY = 0;\n    if (dimensionsExpression != null) {\n      if (dimensionsExpression.getParameter() instanceof StreamExpressionValue) {\n        String[] strDimensions = ((StreamExpressionValue) dimensionsExpression.getParameter()).getValue().split(\",\");\n        if (strDimensions.length != 2) {\n          throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - two dimension values expected\"));\n        }\n        dimensionX = Integer.parseInt(strDimensions[0].trim());\n        dimensionY = Integer.parseInt(strDimensions[1].trim());\n      }\n    }\n\n    String zkHost = null;\n    if (zkHostExpression == null) {\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if (zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if (zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue) zkHostExpression.getParameter()).getValue();\n    }\n\n    if (zkHost == null) {\n      throw new IOException(String.format(Locale.ROOT, \"invalid expression %s - zkHost not found for collection '%s'\", expression, collectionName));\n    }\n\n    init(collectionName, params, x, y, bucketSort, dimensionX, dimensionY, metric, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"1eaa5b5ac25699e1dfa401862a1e1df9655185fb","commitMessage":"@@@SOLR-13957: Add sensible defaults for the facet.  random.  facet2D.  timeseries.  stats and update Streaming Expressions\n","date":"2019-12-10 05:04:03","modifiedFileCount":"9","status":"M","submitter":"Joel Bernstein"}]
