[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":6,"curCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","date":"2018-11-30 01:58:51","endLine":147,"groupId":"52359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelUpdateQTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/b67d4b055ccc07147bf9c107c04228ac86f01e.src","preCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":6,"curCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","date":"2019-03-04 17:41:45","endLine":158,"groupId":"52359","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelUpdateQTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":7,"curCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","date":"2021-01-18 23:59:41","endLine":163,"groupId":"10484","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelUpdateQTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-03-04 17:41:45","commitOrder":7,"curCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","date":"2019-03-04 17:41:45","endLine":158,"groupId":"10484","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelUpdateQTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testParallelUpdateQTime() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    UpdateRequest req = new UpdateRequest();\n    for (int i=0; i<10; i++)  {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(TestUtil.nextInt(random(), 1000, 1100)));\n      req.add(doc);\n    }\n    UpdateResponse response = req.process(getRandomClient(), COLLECTION);\n    \r\n    assertTrue(response.getQTime() >= 0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
