[{"authorTime":"2021-04-06 00:57:24","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":5,"curCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        \n      });\n    return ids;\n  }\n","date":"2021-04-06 00:57:24","endLine":845,"groupId":"18961","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDups","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        \n      });\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"MB"},{"authorDate":"2021-04-06 00:57:24","commitOrder":5,"curCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-04-06 00:57:24","endLine":1137,"groupId":"19296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursorJQ","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/158aa23a5f0ccfdc226e924341ac8f9990fb01.src","preCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"B"}],"commitId":"59a59138668e9513060824d85ee375a1723f4bfb","commitMessage":"@@@SOLR-11921: Move \"cursorMark\" logic from QueryComponent to SearchHandler so it can work with things like QueryElevationComponent that modify the SortSpec in prepare().  as well as possible custom \"search\" components other then QueryComponent\n","date":"2021-04-06 00:57:24","modifiedFileCount":"9","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":6,"curCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        \n      });\n    return ids;\n  }\n","date":"2021-04-06 00:57:24","endLine":845,"groupId":"122771","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDups","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public SentinelIntSet assertFullWalkNoDups(int maxSize, SolrParams params) \n    throws Exception {\n    final SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    assertFullWalkNoDups(params, (doc) -> {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        \n      });\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"N"},{"authorDate":"2021-07-08 04:15:36","commitOrder":6,"curCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-07-08 04:15:36","endLine":1136,"groupId":"122771","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCursorJQ","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/7576a44536af9ec981155e5fe2833bc2bdaf61.src","preCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"M"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"}]
