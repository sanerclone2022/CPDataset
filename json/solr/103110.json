[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","date":"2011-07-10 07:01:53","endLine":284,"groupId":"9539","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/ab99ec539a70a04dfa04d094400d294aefe1aa.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","date":"2011-07-10 07:01:53","endLine":604,"groupId":"45955","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/ab99ec539a70a04dfa04d094400d294aefe1aa.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2012-04-15 22:41:44","commitOrder":2,"curCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","date":"2012-04-15 22:41:44","endLine":285,"groupId":"15826","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/0b8d41d0af545751ec2fb9e6d1433dcbdde04c.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","date":"2011-07-10 07:01:53","endLine":604,"groupId":"45955","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/ab99ec539a70a04dfa04d094400d294aefe1aa.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"N"}],"commitId":"cf85aab1a06cb2b12e4778c1dd7c1368a6225b91","commitMessage":"@@@LUCENE-3808: Switch LuceneTestCaseRunner to RandomizedRunner. Enforce Random sharing contracts. Enforce thread leaks.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1326351 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-15 22:41:44","modifiedFileCount":"501","status":"M","submitter":"Dawid Weiss"},{"authorTime":"2012-05-16 02:47:45","codes":[{"authorDate":"2012-05-16 02:47:45","commitOrder":3,"curCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","date":"2012-05-16 02:47:45","endLine":285,"groupId":"15826","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9e/f906787cc8bea5286830d7506c0013152f47da.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2012-05-16 02:47:45","commitOrder":3,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","date":"2012-05-16 02:47:45","endLine":646,"groupId":"45955","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9e/f906787cc8bea5286830d7506c0013152f47da.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"}],"commitId":"4652d65f0b0fb5ce1a248d6585470abdf8f38bf3","commitMessage":"@@@LUCENE-4047: Cleanup of LuceneTestCase: moved blocks of initialization/ cleanup code into JUnit instance and class rules.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1338826 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-05-16 02:47:45","modifiedFileCount":"34","status":"M","submitter":"Dawid Weiss"},{"authorTime":"2014-04-01 04:35:16","codes":[{"authorDate":"2014-04-01 04:35:16","commitOrder":4,"curCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","date":"2014-04-01 04:35:16","endLine":290,"groupId":"15826","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/52fb0970376906728332bc1e5c5b685a03cccb.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2014-04-01 04:35:16","commitOrder":4,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","date":"2014-04-01 04:35:16","endLine":647,"groupId":"45955","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/52fb0970376906728332bc1e5c5b685a03cccb.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"M"}],"commitId":"6750845f9b04bcc7ba4b93ec576c657f95f94b1e","commitMessage":"@@@LUCENE-5560: Followup: Cleanup charset handling for Java 7\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1583449 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-01 04:35:16","modifiedFileCount":"60","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2014-05-17 00:39:56","codes":[{"authorDate":"2014-05-17 00:39:56","commitOrder":5,"curCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","date":"2014-05-17 00:39:56","endLine":284,"groupId":"15826","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/d29edf650cdc2aafa4d8f81287e567d30370b5.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2014-05-17 00:39:56","commitOrder":5,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","date":"2014-05-17 00:39:56","endLine":636,"groupId":"45955","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/d29edf650cdc2aafa4d8f81287e567d30370b5.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    FieldCache.DEFAULT.purgeAllCaches();   \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"M"}],"commitId":"e2ba693a6ee11127897a25de1dbb7549ebe6ea3a","commitMessage":"@@@LUCENE-5666: Add UninvertingReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1595259 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-17 00:39:56","modifiedFileCount":"155","status":"M","submitter":"Robert Muir"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":6,"curCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","date":"2017-06-29 17:00:17","endLine":280,"groupId":"18469","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/ee94b86bb41dcc451f72c81c21f6ed911b9e95.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":6,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","date":"2017-06-29 17:00:17","endLine":708,"groupId":"45955","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/ee94b86bb41dcc451f72c81c21f6ed911b9e95.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-10-30 23:25:28","commitOrder":7,"curCode":"  public void testExternalField() throws Exception {\n    clearIndex();\n\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","date":"2017-10-30 23:26:31","endLine":286,"groupId":"18469","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/032037bcf64d02a5bfd657b2dcdbe97e03896c.src","preCode":"  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":7,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","date":"2017-06-29 17:00:17","endLine":708,"groupId":"45955","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/ee94b86bb41dcc451f72c81c21f6ed911b9e95.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"N"}],"commitId":"84fa17d42a9c0c24f784ecc7afdb107e2503c610","commitMessage":"@@@TestFunctionQuery: clear index before each test to avoid cross contamination\n","date":"2017-10-30 23:26:31","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-12-06 21:06:03","codes":[{"authorDate":"2017-12-06 21:06:03","commitOrder":8,"curCode":"  public void testExternalField() throws Exception {\n    clearIndex();\n\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,0, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = Math.max(0, vals[j]);\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","date":"2017-12-06 21:06:03","endLine":286,"groupId":"103110","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testExternalField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/b33dac98d942e3ca30a68bc2ca364f1858e12a.src","preCode":"  public void testExternalField() throws Exception {\n    clearIndex();\n\n    String field = \"foo_extf\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random();\n    for (int i=0; i<10; i++) {   \r\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      \r\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        int v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        \r\n        Arrays.sort(ids,0,len);\n      }\n\n      \r\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      \r\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString());\n\n      \r\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      \r\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  \r\n      }\n\n      singleTest(field, \"\\0\", answers);\n      \r\n    }  \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2017-12-06 21:06:03","commitOrder":8,"curCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,0, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","date":"2017-12-06 21:06:03","endLine":772,"groupId":"103110","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalFieldValueSourceParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/b33dac98d942e3ca30a68bc2ca364f1858e12a.src","preCode":"  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    int[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    \r\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\");\n    \r\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    \r\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\");\n    assertU(adoc(\"id\", \"10000\")); \r\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);  \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"}],"commitId":"a8a63464e7da63b3dbc884634fd0e00b3f0c140b","commitMessage":"@@@LUCENE-7996: Queries are now required to produce positive scores.\n","date":"2017-12-06 21:06:03","modifiedFileCount":"20","status":"M","submitter":"Adrien Grand"}]
