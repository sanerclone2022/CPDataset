[{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-07-06 01:30:52","commitOrder":3,"curCode":"  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"100\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"1\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    \r\n    expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                 \"scoreNodes(termFreq=\\\"avg(price_f)\\\",gatherNodes(collection1, \" +\n                                                                   expr+\",\"+\n                                                                   \"walk=\\\"node->basket_s\\\",\" +\n                                                                   \"gather=\\\"product_s\\\", \" +\n                                                                   \"count(*), \" +\n                                                                   \"avg(price_f), \" +\n                                                                   \"sum(price_f), \" +\n                                                                   \"min(price_f), \" +\n                                                                   \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product5\"));\n    assert(tuple0.getLong(\"docFreq\") == 1);\n    assert(tuple0.getDouble(\"avg(price_f)\") == 100);\n\n    tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product4\"));\n    assert(tuple1.getLong(\"docFreq\") == 2);\n    assert(tuple1.getDouble(\"avg(price_f)\") == 1);\n\n    tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product1\"));\n    assert(tuple2.getLong(\"docFreq\") == 8);\n    assert(tuple2.getDouble(\"avg(price_f)\") == 1);\n\n    cache.close();\n  }\n","date":"2016-07-07 02:06:38","endLine":510,"groupId":"32716","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testScoreNodesStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/41b7341ab8b317271e5dd8580eda6baa3490ba.src","preCode":"  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"100\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"1\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    \r\n    expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                 \"scoreNodes(termFreq=\\\"avg(price_f)\\\",gatherNodes(collection1, \" +\n                                                                   expr+\",\"+\n                                                                   \"walk=\\\"node->basket_s\\\",\" +\n                                                                   \"gather=\\\"product_s\\\", \" +\n                                                                   \"count(*), \" +\n                                                                   \"avg(price_f), \" +\n                                                                   \"sum(price_f), \" +\n                                                                   \"min(price_f), \" +\n                                                                   \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product5\"));\n    assert(tuple0.getLong(\"docFreq\") == 1);\n    assert(tuple0.getDouble(\"avg(price_f)\") == 100);\n\n    tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product4\"));\n    assert(tuple1.getLong(\"docFreq\") == 2);\n    assert(tuple1.getDouble(\"avg(price_f)\") == 1);\n\n    tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product1\"));\n    assert(tuple2.getLong(\"docFreq\") == 8);\n    assert(tuple2.getDouble(\"avg(price_f)\") == 1);\n\n    cache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"NB"},{"authorDate":"2016-10-03 03:18:22","commitOrder":3,"curCode":"  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    \r\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":582,"groupId":"32716","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScoreNodesFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/fc5143a64352a13e235b50a675f30de085bd4a.src","preCode":"  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    \r\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"B"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-02-28 01:03:03","codes":[{"authorDate":"2016-07-06 01:30:52","commitOrder":4,"curCode":"  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"100\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"1\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    \r\n    expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                 \"scoreNodes(termFreq=\\\"avg(price_f)\\\",gatherNodes(collection1, \" +\n                                                                   expr+\",\"+\n                                                                   \"walk=\\\"node->basket_s\\\",\" +\n                                                                   \"gather=\\\"product_s\\\", \" +\n                                                                   \"count(*), \" +\n                                                                   \"avg(price_f), \" +\n                                                                   \"sum(price_f), \" +\n                                                                   \"min(price_f), \" +\n                                                                   \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product5\"));\n    assert(tuple0.getLong(\"docFreq\") == 1);\n    assert(tuple0.getDouble(\"avg(price_f)\") == 100);\n\n    tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product4\"));\n    assert(tuple1.getLong(\"docFreq\") == 2);\n    assert(tuple1.getDouble(\"avg(price_f)\") == 1);\n\n    tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product1\"));\n    assert(tuple2.getLong(\"docFreq\") == 8);\n    assert(tuple2.getDouble(\"avg(price_f)\") == 1);\n\n    cache.close();\n  }\n","date":"2016-07-07 02:06:38","endLine":510,"groupId":"10572","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testScoreNodesStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/41b7341ab8b317271e5dd8580eda6baa3490ba.src","preCode":"  public void testScoreNodesStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"100\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"1\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"1\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"1\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product3->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n\n    String expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                         \"scoreNodes(gatherNodes(collection1, \" +\n                                                 expr+\",\"+\n                                                 \"walk=\\\"node->basket_s\\\",\" +\n                                                 \"gather=\\\"product_s\\\", \" +\n                                                 \"count(*), \" +\n                                                 \"avg(price_f), \" +\n                                                 \"sum(price_f), \" +\n                                                 \"min(price_f), \" +\n                                                 \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Tuple tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    \r\n    expr2 = \"sort(by=\\\"nodeScore desc\\\", \" +\n                 \"scoreNodes(termFreq=\\\"avg(price_f)\\\",gatherNodes(collection1, \" +\n                                                                   expr+\",\"+\n                                                                   \"walk=\\\"node->basket_s\\\",\" +\n                                                                   \"gather=\\\"product_s\\\", \" +\n                                                                   \"count(*), \" +\n                                                                   \"avg(price_f), \" +\n                                                                   \"sum(price_f), \" +\n                                                                   \"min(price_f), \" +\n                                                                   \"max(price_f))))\";\n\n    stream = factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    tuple0 = tuples.get(0);\n    assert(tuple0.getString(\"node\").equals(\"product5\"));\n    assert(tuple0.getLong(\"docFreq\") == 1);\n    assert(tuple0.getDouble(\"avg(price_f)\") == 100);\n\n    tuple1 = tuples.get(1);\n    assert(tuple1.getString(\"node\").equals(\"product4\"));\n    assert(tuple1.getLong(\"docFreq\") == 2);\n    assert(tuple1.getDouble(\"avg(price_f)\") == 1);\n\n    tuple2 = tuples.get(2);\n    assert(tuple2.getString(\"node\").equals(\"product1\"));\n    assert(tuple2.getLong(\"docFreq\") == 8);\n    assert(tuple2.getDouble(\"avg(price_f)\") == 1);\n\n    cache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"N"},{"authorDate":"2017-02-28 01:03:03","commitOrder":4,"curCode":"  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        \r\n        \r\n        \r\n        \r\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 4);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n","date":"2017-02-28 01:03:26","endLine":582,"groupId":"10572","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScoreNodesFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/781efedf02ada262996c2e000f0623795c95fd.src","preCode":"  public void testScoreNodesFacetStream() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_ss\", \"product1\", \"product_ss\", \"product3\", \"product_ss\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_ss\", \"product1\", \"product_ss\", \"product6\", \"product_ss\", \"product7\", \"price_f\", \"1\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_ss\", \"product4\",  \"product_ss\",\"product3\", \"product_ss\",\"product1\", \"price_f\", \"1\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_ss\", \"product4\", \"product_ss\", \"product3\", \"product_ss\", \"product1\",\"price_f\", \"1\")\n        .add(id, \"12\", \"basket_s\", \"basket5\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"13\", \"basket_s\", \"basket6\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"14\", \"basket_s\", \"basket7\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .add(id, \"15\", \"basket_s\", \"basket4\", \"product_ss\", \"product1\", \"price_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    TupleStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"sort\", SortStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"sort(by=\\\"nodeScore desc\\\",scoreNodes(facet(collection1, q=\\\"product_ss:product3\\\", buckets=\\\"product_ss\\\", bucketSorts=\\\"count(*) desc\\\", bucketSizeLimit=100, count(*))))\";\n\n    stream = factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    \r\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getString(\"node\").equals(\"product3\"));\n    assert(tuple.getLong(\"docFreq\") == 3);\n    assert(tuple.getLong(\"count(*)\") == 3);\n\n    Tuple tuple0 = tuples.get(1);\n    assert(tuple0.getString(\"node\").equals(\"product4\"));\n    assert(tuple0.getLong(\"docFreq\") == 2);\n    assert(tuple0.getLong(\"count(*)\") == 2);\n\n    Tuple tuple1 = tuples.get(2);\n    assert(tuple1.getString(\"node\").equals(\"product1\"));\n    assert(tuple1.getLong(\"docFreq\") == 8);\n    assert(tuple1.getLong(\"count(*)\") == 3);\n\n    Tuple tuple2 = tuples.get(3);\n    assert(tuple2.getString(\"node\").equals(\"product5\"));\n    assert(tuple2.getLong(\"docFreq\") == 1);\n    assert(tuple2.getLong(\"count(*)\") == 1);\n\n\n    cache.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"0c1fde664fb1c9456b3fdc2abd08e80dc8f86eb8","commitMessage":"@@@SOLR-10208: Adjust scoring formula for the scoreNodes function\n","date":"2017-02-28 01:03:26","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"}]
