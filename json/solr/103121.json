[{"authorTime":"2018-06-04 12:32:31","codes":[{"authorDate":"2018-06-04 12:32:31","commitOrder":1,"curCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","date":"2018-06-04 12:32:31","endLine":1085,"groupId":"44730","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistOldBufferLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/79cee61c168215bf446dd6fcf933c090c44496.src","preCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1011,"status":"B"},{"authorDate":"2018-06-04 12:32:31","commitOrder":1,"curCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      \r\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","date":"2018-06-04 12:32:31","endLine":590,"groupId":"39679","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistOldBufferLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/96319295d73ea73125f18f44a215af36b36ec3.src","preCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      \r\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"B"}],"commitId":"ab316bbc91c273b13c851a38ad5d14ef64ab3eec","commitMessage":"@@@SOLR-9922: Write buffering updates to another tlog\n","date":"2018-06-04 12:32:31","modifiedFileCount":"11","status":"B","submitter":"Cao Manh Dat"},{"authorTime":"2018-06-04 12:32:31","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":2,"curCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      \n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      \n      UpdateLog updateLog = uhandler.getUpdateLog();\n\n      \r\n      \r\n      \n      \r\n      timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","date":"2018-11-30 01:58:51","endLine":1103,"groupId":"44730","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistOldBufferLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/301d2bcfef16ca3676596747a419ccdaf6d59a.src","preCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1020,"status":"M"},{"authorDate":"2018-06-04 12:32:31","commitOrder":2,"curCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      \r\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","date":"2018-06-04 12:32:31","endLine":590,"groupId":"39679","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistOldBufferLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/96319295d73ea73125f18f44a215af36b36ec3.src","preCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      \r\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"N"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2020-01-17 02:47:06","codes":[{"authorDate":"2020-01-17 02:47:06","commitOrder":3,"curCode":"  public void testExistOldBufferLog() throws Exception {\n\n    TestInjection.skipIndexWriterCommitOnClose = true;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      \n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      \n      UpdateLog updateLog = uhandler.getUpdateLog();\n\n      \r\n      \r\n      \n      \r\n      timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","date":"2020-01-17 02:47:06","endLine":1086,"groupId":"103121","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistOldBufferLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v117 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      ulog.applyBufferedUpdates();\n      \n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",v117)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      \n      UpdateLog updateLog = uhandler.getUpdateLog();\n\n      \r\n      \r\n      \n      \r\n      timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      \n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"M"},{"authorDate":"2020-01-17 02:47:06","commitOrder":3,"curCode":"  public void testExistOldBufferLog() throws Exception {\n    TestInjection.skipIndexWriterCommitOnClose = true;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      \r\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n","date":"2020-01-17 02:47:06","endLine":575,"groupId":"103121","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistOldBufferLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/146ea80edc483c7a0812725eb1e071fb397ddb.src","preCode":"  public void testExistOldBufferLog() throws Exception {\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      \r\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      \r\n      assertTrue(ulog.existOldBufferLog());   \r\n\n      \r\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      \r\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); \r\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      \r\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"5f2d7c4855987670489d68884c787e4cfb377fa9","commitMessage":"@@@SOLR-14184: Internal 'test' variable DirectUpdateHandler2.commitOnClose has been removed and replaced with TestInjection.skipIndexWriterCommitOnClose\n","date":"2020-01-17 02:47:06","modifiedFileCount":"13","status":"M","submitter":"Chris Hostetter"}]
