[{"authorTime":"2017-03-08 05:00:38","codes":[{"authorDate":"2017-03-08 05:00:38","commitOrder":1,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-03-08 05:01:21","endLine":958,"groupId":"60611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3a/4c3fed770b863e1a74ecd573d9f1a4457b31b2.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"B"},{"authorDate":"2017-03-08 05:00:38","commitOrder":1,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoMBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-03-08 05:01:21","endLine":981,"groupId":"26658","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3a/4c3fed770b863e1a74ecd573d9f1a4457b31b2.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoMBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":960,"status":"B"}],"commitId":"4d7bc9477144937335e997ad630c4b89f558ddc5","commitMessage":"@@@SOLR-9858: Collect aggregated metrics from nodes and shard leaders in overseer.\n","date":"2017-03-08 05:01:21","modifiedFileCount":"26","status":"B","submitter":"Andrzej Bialecki"},{"authorTime":"2017-04-12 01:22:23","codes":[{"authorDate":"2017-04-12 01:22:23","commitOrder":2,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-04-12 01:22:23","endLine":1055,"groupId":"60611","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/eb06ae7ded0d958f6ce1b71ab565aac4251c79.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1030,"status":"M"},{"authorDate":"2017-04-12 01:22:23","commitOrder":2,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-04-12 01:22:23","endLine":1078,"groupId":"26658","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/eb06ae7ded0d958f6ce1b71ab565aac4251c79.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoMBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1057,"status":"M"}],"commitId":"e30cc70fddcdd6fddb5eedf9f38e77fcb3f33bd1","commitMessage":"@@@SOLR-9959: SolrInfoMBean-s category and hierarchy cleanup.\n","date":"2017-04-12 01:22:23","modifiedFileCount":"132","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-08-01 18:14:32","codes":[{"authorDate":"2017-08-01 18:14:32","commitOrder":3,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-08-01 18:14:32","endLine":1083,"groupId":"60611","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/17c78fe0be150a71dced4cdd33006aed7871e5.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs, null);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1058,"status":"M"},{"authorDate":"2017-08-01 18:14:32","commitOrder":3,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-08-01 18:14:32","endLine":1106,"groupId":"60613","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/17c78fe0be150a71dced4cdd33006aed7871e5.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1085,"status":"M"}],"commitId":"9422da26e52730de5d21d52e26e52ec9c8772df5","commitMessage":"@@@SOLR-11140: Remove unused parameter in (private) SolrMetricManager.prepareCloudPlugins method.\n(Omar Abdelnabi via Christine Poerschke)\n","date":"2017-08-01 18:14:32","modifiedFileCount":"1","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-08-12 09:37:48","codes":[{"authorDate":"2017-08-12 09:37:48","commitOrder":4,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-08-12 09:37:48","endLine":1077,"groupId":"60611","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/1717c3844e3c9d998457ac70ffb54516102d01.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(), SolrShardReporter.class.getName(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1052,"status":"M"},{"authorDate":"2017-08-12 09:37:48","commitOrder":4,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-08-12 09:37:48","endLine":1100,"groupId":"60613","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/1717c3844e3c9d998457ac70ffb54516102d01.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1079,"status":"M"}],"commitId":"2e519ac95520c5081c0b46d38a0b624c1f51c9df","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-12 09:37:48","modifiedFileCount":"9","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2017-09-22 22:37:56","codes":[{"authorDate":"2017-08-12 09:37:48","commitOrder":5,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-08-12 09:37:48","endLine":1077,"groupId":"60611","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/1717c3844e3c9d998457ac70ffb54516102d01.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1052,"status":"N"},{"authorDate":"2017-09-22 22:37:56","commitOrder":5,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-09-22 22:37:56","endLine":1111,"groupId":"60613","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/e9d01e35b4127008ed24c9565591ab212cb842.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1090,"status":"M"}],"commitId":"7672ec41d802cfcc82911f203dccdff176efa5c2","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-22 22:37:56","modifiedFileCount":"2","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-10-18 23:27:04","codes":[{"authorDate":"2017-10-18 23:27:04","commitOrder":6,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info,\n            String.valueOf(core.hashCode()));\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-10-18 23:27:04","endLine":1121,"groupId":"60611","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/fdda389456fb85527081c029f678cf2c2d7a16.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, core.getResourceLoader(), info,\n            String.valueOf(core.hashCode()));\n        ((SolrShardReporter)reporter).setCore(core);\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1097,"status":"M"},{"authorDate":"2017-10-18 23:27:04","commitOrder":6,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-10-18 23:27:04","endLine":1143,"groupId":"60613","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/fdda389456fb85527081c029f678cf2c2d7a16.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1123,"status":"M"}],"commitId":"0b0ed2118277a5b22843faec259da5fefad2be53","commitMessage":"@@@SOLR-11389: For Solr(Shard|Cluster)Reporter instances the SolrMetricManager.registerReporter method is now called after the SolrCore or CoreContainer has been set for the instance.\n","date":"2017-10-18 23:27:04","modifiedFileCount":"8","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-10-18 23:27:04","codes":[{"authorDate":"2018-03-29 22:37:45","commitOrder":7,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2018-03-29 22:37:45","endLine":1167,"groupId":"60611","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/b8864e7b915d1bbf0999b615ed9a44347d9435.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info,\n            String.valueOf(core.hashCode()));\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1144,"status":"M"},{"authorDate":"2017-10-18 23:27:04","commitOrder":7,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","date":"2017-10-18 23:27:04","endLine":1143,"groupId":"60613","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/fdda389456fb85527081c029f678cf2c2d7a16.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1123,"status":"N"}],"commitId":"358e59596d17ba34452ea923e048afee6233d597","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-03-29 22:37:45","modifiedFileCount":"62","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-04-20 03:58:50","codes":[{"authorDate":"2020-04-20 03:58:50","commitOrder":8,"curCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo={}\", info, e);\n      }\n    }\n  }\n","date":"2020-04-20 03:58:50","endLine":1225,"groupId":"102473","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"loadShardReporters","params":"(PluginInfo[]pluginInfos@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/7b7f278ddfbfe0ab193550e29ef23566b56192.src","preCode":"  public void loadShardReporters(PluginInfo[] pluginInfos, SolrCore core) {\n    \r\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      return;\n    }\n    \r\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"shardDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.shard.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n\n    String registryName = core.getCoreMetricManager().getRegistryName();\n    \r\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.shard.toString(),\n        attrs, initArgs);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, core, info, core.getMetricTag());\n      } catch (Exception e) {\n        log.warn(\"Could not load shard reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1202,"status":"M"},{"authorDate":"2020-04-20 03:58:50","commitOrder":8,"curCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo={}\", info, e);\n      }\n    }\n  }\n","date":"2020-04-20 03:58:50","endLine":1247,"groupId":"102473","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"loadClusterReporters","params":"(PluginInfo[]pluginInfos@CoreContainercc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/7b7f278ddfbfe0ab193550e29ef23566b56192.src","preCode":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    \r\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1227,"status":"M"}],"commitId":"f01c040ab3a600eb20995a9faf8d1b526efef321","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-20 03:58:50","modifiedFileCount":"27","status":"M","submitter":"Erick Erickson"}]
