[{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-09-08 13:20:00","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","date":"2017-09-08 13:20:00","endLine":53,"groupId":"42928","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/88400b7a63db0a57b7969b2bc0275f988ccd3e.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray();\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","date":"2017-08-26 17:07:19","endLine":75,"groupId":"42928","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/0a521baeb37e18473c7f3f74c5748924d62ca6.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray();\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FindDelayEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"NB"}],"commitId":"5fee937242430b4f90681968b91969a656fd6dcd","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-08 13:20:00","modifiedFileCount":"55","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-12-05 10:08:58","codes":[{"authorDate":"2017-12-05 10:08:58","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","date":"2017-12-05 10:09:41","endLine":53,"groupId":"42928","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/fa1cf09a2ce6e62487c91cff0171191eb64cd4.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2017-12-05 10:08:58","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","date":"2017-12-05 10:09:41","endLine":75,"groupId":"42928","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/58/486ab6f6b9d9e2a05950f84355b6effb109a83.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray();\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FindDelayEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"8750e5f2a97e2011da7a3c821dca38a31d0f9bf1","commitMessage":"@@@SOLR-11485: Add olsRegress.  spline and derivative Stream Evaluators\n","date":"2017-12-05 10:09:41","modifiedFileCount":"46","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":4,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    @SuppressWarnings({\"unchecked\"})\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","date":"2020-06-08 09:31:51","endLine":55,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/26ed1e9f26022445a5185e8478d79ede2249c7.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":4,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","date":"2020-06-08 09:31:51","endLine":76,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ef/0b44752506de69dbfadba4dab000cd205520bc.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FindDelayEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":5,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] d1 = ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    double[] d2 = ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","date":"2021-06-22 00:19:37","endLine":53,"groupId":"10197","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e9/0bb9d0e42a3c1a886e986234a52735e236eedc.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    double[] d1 = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n    @SuppressWarnings({\"unchecked\"})\n    double[] d2 = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();\n\n    return cosineSimilarity(d1, d2);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CosineSimilarityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":5,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    double[] firstArray = ((List<?>)first).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList<?>)((List<?>)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","date":"2021-06-22 00:19:37","endLine":74,"groupId":"10197","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/202d0b7fad014513af64903ee25cea00cb8e3b.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    \r\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    double[] firstArray = ((List)first).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    double[] secondArray = StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n        ((LinkedList)((List)second).stream().collect(Collectors.toCollection(LinkedList::new))).descendingIterator(),\n        Spliterator.ORDERED), false).mapToDouble(value -> ((Number)value).doubleValue()).toArray();\n    \n    double[] convolution = MathArrays.convolve(firstArray, secondArray);\n    double maxValue = -Double.MAX_VALUE;\n    double indexOfMaxValue = -1;\n\n    for(int idx = 0; idx < convolution.length; ++idx) {\n      double abs = Math.abs(convolution[idx]);\n      if(abs > maxValue) {\n        maxValue = abs;\n        indexOfMaxValue = idx;\n      }\n    }\n\n    return (indexOfMaxValue + 1) - secondArray.length;\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FindDelayEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
