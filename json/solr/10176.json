[{"authorTime":"2017-04-28 04:30:46","codes":[{"authorDate":"2018-04-11 00:36:03","commitOrder":3,"curCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","date":"2018-04-11 00:36:22","endLine":139,"groupId":"51436","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"populateVariables","params":"(TuplecontextTuple)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/ec8c5d1e1871ec734a8f35ab062294ddf54bc5.src","preCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2017-04-28 04:30:46","commitOrder":3,"curCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(eTuple);\n        lets.put(name, eo);\n      }\n    }\n    stream.open();\n  }\n","date":"2017-04-28 05:03:29","endLine":155,"groupId":"51436","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/9f02be5b5705c796b4419f28e270d056b5a1f4.src","preCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(eTuple);\n        lets.put(name, eo);\n      }\n    }\n    stream.open();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"NB"}],"commitId":"9ebe11f1d952b083ad5e60bc589efb6aa4148a48","commitMessage":"@@@SOLR-12158: Allow the monteCarlo Stream Evaluator to support variables\n","date":"2018-04-11 00:36:22","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-04-20 23:11:28","codes":[{"authorDate":"2018-04-11 00:36:03","commitOrder":4,"curCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","date":"2018-04-11 00:36:22","endLine":139,"groupId":"51436","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"populateVariables","params":"(TuplecontextTuple)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/ec8c5d1e1871ec734a8f35ab062294ddf54bc5.src","preCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2018-04-20 23:11:28","commitOrder":4,"curCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      }\n    }\n    stream.open();\n  }\n","date":"2018-04-20 23:11:48","endLine":202,"groupId":"51436","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/8eaf6e2b78a1bee3c711b881c54f987b037a5c.src","preCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(eTuple);\n        lets.put(name, eo);\n      }\n    }\n    stream.open();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"f0d1e11796419d45051f4384f47cf83b0fb8044b","commitMessage":"@@@SOLR-12159: Add memset Stream Evaluator\n","date":"2018-04-20 23:11:48","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-10-11 22:43:30","codes":[{"authorDate":"2018-04-11 00:36:03","commitOrder":5,"curCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","date":"2018-04-11 00:36:22","endLine":139,"groupId":"51436","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"populateVariables","params":"(TuplecontextTuple)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/ec8c5d1e1871ec734a8f35ab062294ddf54bc5.src","preCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2018-10-11 22:43:30","commitOrder":5,"curCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","date":"2018-10-11 22:43:57","endLine":209,"groupId":"51436","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/881c3a446feb81315c311baa1acd44e3397224.src","preCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      }\n    }\n    stream.open();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"a0bb5017722ce698fc390f3990243697341d2b8d","commitMessage":"@@@SOLR-12851: Improvements and fixes to let and select Streaming Expressions\n","date":"2018-10-11 22:43:57","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-10-11 22:43:30","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":6,"curCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":139,"groupId":"51436","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"populateVariables","params":"(TuplecontextTuple)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/df98b1ccb5b74bc4f099d8cfef1a59abda7172.src","preCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2018-10-11 22:43:30","commitOrder":6,"curCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","date":"2018-10-11 22:43:57","endLine":209,"groupId":"51436","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/881c3a446feb81315c311baa1acd44e3397224.src","preCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"N"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-10 07:16:14","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":7,"curCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":139,"groupId":"51436","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"populateVariables","params":"(TuplecontextTuple)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/df98b1ccb5b74bc4f099d8cfef1a59abda7172.src","preCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-06-10 07:16:14","commitOrder":7,"curCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","date":"2020-06-10 07:21:36","endLine":213,"groupId":"35864","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/79/cdcbfe8f5c0d7b2cc0a182830287337342d7da.src","preCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":8,"curCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":136,"groupId":"10176","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"populateVariables","params":"(TuplecontextTuple)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/c27fa62d2f97555b0c0769e1863b9a2c8edc85.src","preCode":"  private void populateVariables(Tuple contextTuple) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    Set<Map.Entry<String, Object>> entries = variables.entrySet();\n\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          contextTuple.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(contextTuple);\n        contextTuple.put(name, eo);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MonteCarloEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":8,"curCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          @SuppressWarnings({\"unchecked\"})\n          Map<String,Object> mem = (Map<String,Object>)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","date":"2021-06-22 00:19:37","endLine":210,"groupId":"10176","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/464a2de72c75b8779a151c733ee3f37057a9f2.src","preCode":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    \r\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        \r\n        \r\n        \r\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
