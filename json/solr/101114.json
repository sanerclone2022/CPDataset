[{"authorTime":"2015-06-21 00:24:08","codes":[{"authorDate":"2015-06-21 00:24:08","commitOrder":1,"curCode":"  public void testDeleteFieldAccuracy() throws Exception {\n    String fieldName = \"fieldToBeDeleted\";\n    Map<String, Object> fieldAttributesRequest = new LinkedHashMap<>();\n    fieldAttributesRequest.put(\"name\", fieldName);\n    fieldAttributesRequest.put(\"type\", \"string\");\n    SchemaRequest.AddField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddField(fieldAttributesRequest);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse initialFieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialFieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteField deleteFieldRequest =\n        new SchemaRequest.DeleteField(fieldName);\n    SchemaResponse.UpdateResponse deleteFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldResponse);\n\n    try {\n      fieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field %s shouldn't be anymore available over Schema API\", fieldName));\n    } catch (SolrException e) {\n      \r\n    }\n  }\n","date":"2015-06-21 00:24:08","endLine":338,"groupId":"3486","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  public void testDeleteFieldAccuracy() throws Exception {\n    String fieldName = \"fieldToBeDeleted\";\n    Map<String, Object> fieldAttributesRequest = new LinkedHashMap<>();\n    fieldAttributesRequest.put(\"name\", fieldName);\n    fieldAttributesRequest.put(\"type\", \"string\");\n    SchemaRequest.AddField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddField(fieldAttributesRequest);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse initialFieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialFieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteField deleteFieldRequest =\n        new SchemaRequest.DeleteField(fieldName);\n    SchemaResponse.UpdateResponse deleteFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldResponse);\n\n    try {\n      fieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field %s shouldn't be anymore available over Schema API\", fieldName));\n    } catch (SolrException e) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"},{"authorDate":"2015-06-21 00:24:08","commitOrder":1,"curCode":"  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      \r\n    }\n  }\n","date":"2015-06-21 00:24:08","endLine":466,"groupId":"3486","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteDynamicFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"B"}],"commitId":"fdeffbb536dc91712ad8572b386c8c9c1b2b7c8d","commitMessage":"@@@SOLR-7182: Make the Schema-API a first class citizen of SolrJ\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686650 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-21 00:24:08","modifiedFileCount":"0","status":"B","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testDeleteFieldAccuracy() throws Exception {\n    String fieldName = \"fieldToBeDeleted\";\n    Map<String, Object> fieldAttributesRequest = new LinkedHashMap<>();\n    fieldAttributesRequest.put(\"name\", fieldName);\n    fieldAttributesRequest.put(\"type\", \"string\");\n    SchemaRequest.AddField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddField(fieldAttributesRequest);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse initialFieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialFieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteField deleteFieldRequest =\n        new SchemaRequest.DeleteField(fieldName);\n    SchemaResponse.UpdateResponse deleteFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldResponse);\n\n    expectThrows(SolrException.class, () -> fieldSchemaRequest.process(getSolrClient()));\n  }\n","date":"2019-08-03 15:30:49","endLine":333,"groupId":"101114","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/ce4ab01b0d887979ccb2e3ffdc13d01cc6fe75.src","preCode":"  public void testDeleteFieldAccuracy() throws Exception {\n    String fieldName = \"fieldToBeDeleted\";\n    Map<String, Object> fieldAttributesRequest = new LinkedHashMap<>();\n    fieldAttributesRequest.put(\"name\", fieldName);\n    fieldAttributesRequest.put(\"type\", \"string\");\n    SchemaRequest.AddField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddField(fieldAttributesRequest);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaRequest.Field fieldSchemaRequest = new SchemaRequest.Field(fieldName);\n    SchemaResponse.FieldResponse initialFieldResponse = fieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialFieldResponse.getField();\n    assertThat(fieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteField deleteFieldRequest =\n        new SchemaRequest.DeleteField(fieldName);\n    SchemaResponse.UpdateResponse deleteFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteFieldResponse);\n\n    try {\n      fieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the field %s shouldn't be anymore available over Schema API\", fieldName));\n    } catch (SolrException e) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    expectThrows(SolrException.class, () -> dynamicFieldSchemaRequest.process(getSolrClient()));\n  }\n","date":"2019-08-03 15:30:49","endLine":453,"groupId":"101114","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteDynamicFieldAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/ce4ab01b0d887979ccb2e3ffdc13d01cc6fe75.src","preCode":"  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
