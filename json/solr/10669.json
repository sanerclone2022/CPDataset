[{"authorTime":"2016-01-14 01:41:41","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","date":"2015-05-11 20:37:18","endLine":102,"groupId":"4686","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/33c848833f7b93970f0cb412c91013507b168a.src","preCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"},{"authorDate":"2016-01-14 01:41:41","commitOrder":2,"curCode":"  public void testIntersectStream() throws Exception {\n    IntersectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new IntersectStream(StreamExpressionParser.parse(\"intersect(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f, a_s\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f,a_s\\\"\"));\n  }\n","date":"2016-01-14 01:41:41","endLine":273,"groupId":"4686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntersectStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/2bcd83e6017b20f05d6cd3f3b4a7be5748a5a9.src","preCode":"  public void testIntersectStream() throws Exception {\n    IntersectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new IntersectStream(StreamExpressionParser.parse(\"intersect(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f, a_s\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f,a_s\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"}],"commitId":"f6ede1b42f94921f0ef340918bfe26628f0bf2df","commitMessage":"@@@SOLR-7525: Add ComplementStream and IntersectStream to the Streaming API and Streaming Expressions\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1724468 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-14 01:41:41","modifiedFileCount":"4","status":"M","submitter":"Dennis Gove"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testMergeStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (MergeStream stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n      assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n      assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":187,"groupId":"10669","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testIntersectStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (IntersectStream stream = new IntersectStream(StreamExpressionParser.parse(\"intersect(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f, a_s\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n      assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n      assertTrue(expressionString.contains(\"on=\\\"a_f,a_s\\\"\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":304,"groupId":"10669","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntersectStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testIntersectStream() throws Exception {\n    IntersectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new IntersectStream(StreamExpressionParser.parse(\"intersect(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f, a_s\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f,a_s\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
