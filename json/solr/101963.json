[{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof String) return Long.parseLong((String) val);\n    } catch (NumberFormatException e) {\n      Double v = Double.parseDouble((String) val);\n      return v.longValue();\n    }\n    return super.toNativeType(val);\n  }\n","date":"2017-01-19 09:27:21","endLine":58,"groupId":"45341","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/fca3c4bca61c7825fa362fc9c56ebb9a8e5c02.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof String) return Long.parseLong((String) val);\n    } catch (NumberFormatException e) {\n      Double v = Double.parseDouble((String) val);\n      return v.longValue();\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LongPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof String) return Integer.parseInt((String) val);\n    } catch (NumberFormatException e) {\n      Float v = Float.parseFloat((String) val);\n      return v.intValue();\n    }\n    return super.toNativeType(val);\n  }\n","date":"2017-01-19 09:27:21","endLine":58,"groupId":"57715","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/bab071ec7577e889e46450212f95fd86acec76.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof String) return Integer.parseInt((String) val);\n    } catch (NumberFormatException e) {\n      Float v = Float.parseFloat((String) val);\n      return v.intValue();\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/IntPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"57934ba4480d71218c7f60d0417dbae9d26188d0","commitMessage":"@@@SOLR-8396: Add support for PointFields in Solr\n","date":"2017-01-19 09:27:21","modifiedFileCount":"33","status":"B","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2019-01-08 12:27:48","codes":[{"authorDate":"2019-01-08 12:27:48","commitOrder":2,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof CharSequence) return Long.parseLong(val.toString());\n    } catch (NumberFormatException e) {\n      Double v = Double.parseDouble(val.toString());\n      return v.longValue();\n    }\n    return super.toNativeType(val);\n  }\n","date":"2019-01-08 12:27:48","endLine":57,"groupId":"7732","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/a6ed3cefbea43919c178f8e3dae1dd2e62565d.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof String) return Long.parseLong((String) val);\n    } catch (NumberFormatException e) {\n      Double v = Double.parseDouble((String) val);\n      return v.longValue();\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LongPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-01-08 12:27:48","commitOrder":2,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof CharSequence) return Integer.parseInt( val.toString());\n    } catch (NumberFormatException e) {\n      Float v = Float.parseFloat(val.toString());\n      return v.intValue();\n    }\n    return super.toNativeType(val);\n  }\n","date":"2019-01-08 12:27:48","endLine":58,"groupId":"7732","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/a9a7811531324c75b1d2d275253831fca31081.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof String) return Integer.parseInt((String) val);\n    } catch (NumberFormatException e) {\n      Float v = Float.parseFloat((String) val);\n      return v.intValue();\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/IntPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"3932a4cc6cc4782cecd8d5f23771e3478485e906","commitMessage":"@@@SOLR-12983: JavabinLoader should avoid creating String Objects and create UTF8CharSequence fields from byte[]\n","date":"2019-01-08 12:27:48","modifiedFileCount":"16","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-09-29 21:53:33","codes":[{"authorDate":"2020-09-29 21:53:33","commitOrder":3,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof CharSequence) return Long.parseLong(val.toString());\n    } catch (NumberFormatException e) {\n      return (long)Double.parseDouble(val.toString());\n    }\n    return super.toNativeType(val);\n  }\n","date":"2020-09-29 21:53:33","endLine":56,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6f/d011da52581a3f28d2767e80dd11e0445f5c34.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof CharSequence) return Long.parseLong(val.toString());\n    } catch (NumberFormatException e) {\n      Double v = Double.parseDouble(val.toString());\n      return v.longValue();\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LongPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-09-29 21:53:33","commitOrder":3,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof CharSequence) return Integer.parseInt( val.toString());\n    } catch (NumberFormatException e) {\n      return (int)Float.parseFloat(val.toString());\n    }\n    return super.toNativeType(val);\n  }\n","date":"2020-09-29 21:53:33","endLine":57,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d1/493cddcb4d13ecd8a140f5e814bcdaab2dd998.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof CharSequence) return Integer.parseInt( val.toString());\n    } catch (NumberFormatException e) {\n      Float v = Float.parseFloat(val.toString());\n      return v.intValue();\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/IntPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"63f0b6b706dcbc8e92a8ff3ee8b81d6d6900aa67","commitMessage":"@@@SOLR-14767 : Fix NumberFormatException when int/long field value is floating num (#1775)\n\n","date":"2020-09-29 21:53:33","modifiedFileCount":"4","status":"M","submitter":"Apoorv Bhawsar"},{"authorTime":"2020-09-30 02:22:11","codes":[{"authorDate":"2020-09-30 02:22:11","commitOrder":4,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof CharSequence) return Long.parseLong(val.toString());\n    } catch (NumberFormatException e) {\n      Double v = Double.parseDouble(val.toString());\n      return v.longValue();\n    }\n    return super.toNativeType(val);\n  }\n","date":"2020-09-30 02:23:13","endLine":57,"groupId":"101963","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/a6ed3cefbea43919c178f8e3dae1dd2e62565d.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).longValue();\n    try {\n      if (val instanceof CharSequence) return Long.parseLong(val.toString());\n    } catch (NumberFormatException e) {\n      return (long)Double.parseDouble(val.toString());\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LongPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-09-30 02:22:11","commitOrder":4,"curCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof CharSequence) return Integer.parseInt( val.toString());\n    } catch (NumberFormatException e) {\n      Float v = Float.parseFloat(val.toString());\n      return v.intValue();\n    }\n    return super.toNativeType(val);\n  }\n","date":"2020-09-30 02:23:13","endLine":58,"groupId":"101963","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"toNativeType","params":"(Objectval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/a9a7811531324c75b1d2d275253831fca31081.src","preCode":"  public Object toNativeType(Object val) {\n    if (val == null) return null;\n    if (val instanceof Number) return ((Number) val).intValue();\n    try {\n      if (val instanceof CharSequence) return Integer.parseInt( val.toString());\n    } catch (NumberFormatException e) {\n      return (int)Float.parseFloat(val.toString());\n    }\n    return super.toNativeType(val);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/IntPointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"274a3d69d29a811f459b1c898eb4497168ee2156","commitMessage":"@@@Revert \"SOLR-14767 : Fix NumberFormatException when int/long field value is floating num\"\n\nThis reverts commit 63f0b6b706dcbc8e92a8ff3ee8b81d6d6900aa67.\n","date":"2020-09-30 02:23:13","modifiedFileCount":"4","status":"M","submitter":"Munendra S N"}]
