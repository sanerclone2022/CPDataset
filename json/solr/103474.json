[{"authorTime":"2015-04-03 17:46:54","codes":[{"authorDate":"2015-04-05 22:59:02","commitOrder":2,"curCode":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","date":"2015-04-05 22:59:02","endLine":244,"groupId":"14411","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchRestoreStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/d7adaa2360369409393a7b2e54df3c582716cb.src","preCode":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"MB"},{"authorDate":"2015-04-03 17:46:54","commitOrder":2,"curCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + \"/replication?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","date":"2015-04-03 17:46:54","endLine":282,"groupId":"49904","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runBackupCommand","params":"(JettySolrRunnermasterJetty@Stringcmd@Stringparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/fca530b23eb614d2068fcef5917058e1d5b7f6.src","preCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + \"/replication?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"NB"}],"commitId":"f7d633a56e99736d9cc51d807c6e745ec63380ab","commitMessage":"@@@SOLR-6637: Better error handling when retrieving checksums (Fixes Policeman Jenkins Failure #2134)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1671400 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-05 22:59:02","modifiedFileCount":"3","status":"M","submitter":"Varun Thacker"},{"authorTime":"2016-04-27 20:09:28","codes":[{"authorDate":"2016-04-27 20:09:28","commitOrder":3,"curCode":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","date":"2016-04-27 20:09:28","endLine":255,"groupId":"14411","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchRestoreStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/5fc7c79be94824215cbcaeaee16051dcdfa6cf.src","preCode":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        \"/replication?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"},{"authorDate":"2016-04-27 20:09:28","commitOrder":3,"curCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","date":"2016-04-27 20:09:28","endLine":284,"groupId":"49904","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runBackupCommand","params":"(JettySolrRunnermasterJetty@Stringcmd@Stringparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/ad7825ea41409c86088204c032b53bdbc96690.src","preCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + \"/replication?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"3b4ec73595adba4d1a4859a35be61f60e6a6be31","commitMessage":"@@@SOLR-9037: replace multiple \"/replication\" strings with one static constant\n","date":"2016-04-27 20:09:28","modifiedFileCount":"11","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2016-04-27 20:09:28","codes":[{"authorDate":"2016-06-24 02:19:14","commitOrder":4,"curCode":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","date":"2016-06-24 02:19:28","endLine":249,"groupId":"14411","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchRestoreStatus","params":"(StringbaseUrl@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/f773a43263198491bed73d351e5dfb45e650ca.src","preCode":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2016-04-27 20:09:28","commitOrder":4,"curCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","date":"2016-04-27 20:09:28","endLine":284,"groupId":"49904","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runBackupCommand","params":"(JettySolrRunnermasterJetty@Stringcmd@Stringparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/ad7825ea41409c86088204c032b53bdbc96690.src","preCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"N"}],"commitId":"07be2c42ba24fea7c4e84836aa4c3f8d059f71d6","commitMessage":"@@@SOLR-7374: Core level backup/restore now supports specifying a directory implementation\n","date":"2016-06-24 02:19:28","modifiedFileCount":"17","status":"M","submitter":"Varun Thacker"},{"authorTime":"2017-07-26 22:35:46","codes":[{"authorDate":"2017-07-26 22:35:46","commitOrder":5,"curCode":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","date":"2017-07-26 22:35:46","endLine":247,"groupId":"14411","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchRestoreStatus","params":"(StringbaseUrl@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/5ebad243a2306bbc9a181a278fcdd67d47d770.src","preCode":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2017-07-26 22:35:46","commitOrder":5,"curCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?wt=xml&command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","date":"2017-07-26 22:35:46","endLine":279,"groupId":"49904","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"runBackupCommand","params":"(JettySolrRunnermasterJetty@Stringcmd@Stringparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/1360639ac91292655704deb94bf3d36c692171.src","preCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"e95b48e12d0034faa11235cf6c0d6b449a6898ea","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-07-26 22:35:46","modifiedFileCount":"78","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-08-06 05:52:48","codes":[{"authorDate":"2020-08-06 05:52:48","commitOrder":6,"curCode":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String leaderUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(leaderUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","date":"2020-08-06 05:52:48","endLine":262,"groupId":"103474","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchRestoreStatus","params":"(StringbaseUrl@StringcoreName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/26/1a775c27c82d4c57b9085e048d086265100eb0.src","preCode":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2020-08-06 05:52:48","commitOrder":6,"curCode":"  public static void runBackupCommand(JettySolrRunner leaderJetty, String cmd, String params) throws IOException {\n    String leaderUrl = buildUrl(leaderJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?wt=xml&command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(leaderUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","date":"2020-08-06 05:52:48","endLine":262,"groupId":"103474","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"runBackupCommand","params":"(JettySolrRunnerleaderJetty@Stringcmd@Stringparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/b0f76a363c6754a8a8dcf4fc68989ad1dcc9e6.src","preCode":"  public static void runBackupCommand(JettySolrRunner masterJetty, String cmd, String params) throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME\n        + ReplicationHandler.PATH+\"?wt=xml&command=\" + cmd + params;\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"7110118ad4f1a68f39a1db1caab374594098243e","commitMessage":"@@@SOLR-14702: Remove oppressive language (part1) (#1711)\n\nReplace references to \"master\" and \"slave\" with \"leader\" and \"follower\"","date":"2020-08-06 05:52:48","modifiedFileCount":"28","status":"M","submitter":"Marcus"}]
