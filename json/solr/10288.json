[{"authorTime":"2018-11-07 00:22:51","codes":[{"authorDate":"2018-11-28 00:21:42","commitOrder":5,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n\n    \r\n    expression.addParameter(collection);\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2018-11-28 00:22:02","endLine":146,"groupId":"7598","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/eeb78e77102275782cfc3100eb927a0a6db439.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n\n    \r\n    expression.addParameter(collection);\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2018-11-07 00:22:51","commitOrder":5,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2018-11-07 00:23:40","endLine":445,"groupId":"7598","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/23a3b2e18cb10b80210bb84480689933eac513.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"NB"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-12-12 22:15:41","codes":[{"authorDate":"2018-12-12 22:15:41","commitOrder":6,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n\n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2018-12-12 22:16:08","endLine":151,"groupId":"10288","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/43969f23cefc5cbf1426076d6f84c617408d5e.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n\n    \r\n    expression.addParameter(collection);\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2018-12-12 22:15:41","commitOrder":6,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2018-12-12 22:16:08","endLine":455,"groupId":"10288","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/d09042b8ffb8de880524dcfb32653ba9c2a4a3.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"}],"commitId":"7e4555a2fdb863d6aac2f785116f8f13e51bf16b","commitMessage":"@@@SOLR-13057: Allow search.  facet and timeseries Streaming Expressions to accept a comma delimited list of collections\n","date":"2018-12-12 22:16:08","modifiedFileCount":"6","status":"M","submitter":"Joel Bernstein"}]
