[{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":3,"curCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-11-16 10:33:58","endLine":364,"groupId":"21969","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/0f785ab612ebce3e16325e0530e401dc512fd6.src","preCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"NB"},{"authorDate":"2017-06-29 17:00:17","commitOrder":3,"curCode":"  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2017-06-29 17:00:17","endLine":130,"groupId":"24804","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"pickShards","params":"(Stringcollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/5e58f459c9a6febc9e42414ce2f62b8915369a.src","preCode":"  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-09-05 00:16:00","codes":[{"authorDate":"2018-09-05 00:16:00","commitOrder":4,"curCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Slice[] slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-09-05 00:16:00","endLine":370,"groupId":"10274","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dd/9be6a64446a587f32ec62da078379e01df41c6.src","preCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2018-09-05 00:16:00","commitOrder":4,"curCode":"  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Slice[] slices = clusterState.getCollection(collection).getActiveSlicesArr();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-09-05 00:16:00","endLine":129,"groupId":"10274","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"pickShards","params":"(Stringcollection)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/d6003d3e9a641155f7c611f9ad27a368e849a4.src","preCode":"  protected void pickShards(String collection) throws IOException {\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n          shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        replicaUrls.add(url);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/stream/AnalyticsShardRequestManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"e0eb7bac02a7e6d434bb159430c3fadfcfe3a564","commitMessage":"@@@SOLR-12723: Reduce object creation in HashBasedRouter.\n","date":"2018-09-05 00:16:00","modifiedFileCount":"19","status":"M","submitter":"Andrzej Bialecki"}]
