[{"authorTime":"2017-12-16 00:24:18","codes":[{"authorDate":"2017-12-16 00:24:18","commitOrder":1,"curCode":"  public void testExtractFieldRegexReplaceAll() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_y2_s\"));\n    assertEquals(\"Flashman\", d.getFieldValue(\"foo_y3_y7_s\"));\n  }\n","date":"2017-12-16 00:24:18","endLine":180,"groupId":"55981","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractFieldRegexReplaceAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/da/d06a8f671ff4eb87583515741aeda9891fa4d9.src","preCode":"  public void testExtractFieldRegexReplaceAll() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_y2_s\"));\n    assertEquals(\"Flashman\", d.getFieldValue(\"foo_y3_y7_s\"));\n  }\n","realPath":"solr/contrib/analysis-extras/src/test/org/apache/solr/update/processor/TestOpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2017-12-16 00:24:18","commitOrder":1,"curCode":"  public void testExtractFieldRegexReplaceAllWithEntityType() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall-with-entity-type\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(d.getFieldNames().toString(), Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_person_y2_s\"));\n    assertEquals(d.getFieldNames().toString(),\"Flashman\", d.getFieldValue(\"foo_person_y3_person_y7_s\"));\n  }\n","date":"2017-12-16 00:24:18","endLine":191,"groupId":"55981","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExtractFieldRegexReplaceAllWithEntityType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/da/d06a8f671ff4eb87583515741aeda9891fa4d9.src","preCode":"  public void testExtractFieldRegexReplaceAllWithEntityType() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall-with-entity-type\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(d.getFieldNames().toString(), Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_person_y2_s\"));\n    assertEquals(d.getFieldNames().toString(),\"Flashman\", d.getFieldValue(\"foo_person_y3_person_y7_s\"));\n  }\n","realPath":"solr/contrib/analysis-extras/src/test/org/apache/solr/update/processor/TestOpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"3e2f9e62d772218bf1fcae6d58542fad3ec43742","commitMessage":"@@@LUCENE-2899: Add OpenNLP Analysis capabilities as a module\n","date":"2017-12-16 00:24:18","modifiedFileCount":"3","status":"B","submitter":"Steve Rowe"},{"authorTime":"2018-07-23 15:58:46","codes":[{"authorDate":"2017-12-16 00:24:18","commitOrder":2,"curCode":"  public void testExtractFieldRegexReplaceAll() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_y2_s\"));\n    assertEquals(\"Flashman\", d.getFieldValue(\"foo_y3_y7_s\"));\n  }\n","date":"2017-12-16 00:24:18","endLine":180,"groupId":"101159","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractFieldRegexReplaceAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/da/d06a8f671ff4eb87583515741aeda9891fa4d9.src","preCode":"  public void testExtractFieldRegexReplaceAll() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_y2_s\"));\n    assertEquals(\"Flashman\", d.getFieldValue(\"foo_y3_y7_s\"));\n  }\n","realPath":"solr/contrib/analysis-extras/src/test/org/apache/solr/update/processor/TestOpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"N"},{"authorDate":"2018-07-23 15:58:46","commitOrder":2,"curCode":"  public void testExtractFieldRegexReplaceAllWithEntityType() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall-with-entity-type\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman in London.\", \"In the words of Flashman in London.\"),\n            f(\"foo_x3_x7_s\", \"Flashman in London. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(d.getFieldNames().toString(), Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_person_y2_s\"));\n    assertEquals(d.getFieldNames().toString(), Arrays.asList(\"London\", \"London\"), d.getFieldValues(\"foo_location_y2_s\"));\n    assertEquals(d.getFieldNames().toString(),\"Flashman\", d.getFieldValue(\"foo_person_y3_person_y7_s\"));\n    assertEquals(d.getFieldNames().toString(),\"London\", d.getFieldValue(\"foo_location_y3_location_y7_s\"));\n  }\n","date":"2018-07-23 15:58:46","endLine":194,"groupId":"101159","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testExtractFieldRegexReplaceAllWithEntityType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/85/1fea0243103330a876fb1edf7e0df71eb7b0c1.src","preCode":"  public void testExtractFieldRegexReplaceAllWithEntityType() throws Exception {\n    SolrInputDocument d = processAdd(\"extract-regex-replaceall-with-entity-type\",\n        doc(f(\"id\", \"1111\"),\n            f(\"foo_x2_s\", \"Infrequently Flashman.\", \"In the words of Flashman.\"),\n            f(\"foo_x3_x7_s\", \"Flashman. Whoa.\")));\n\n    assertNotNull(d);\n    assertEquals(d.getFieldNames().toString(), Arrays.asList(\"Flashman\", \"Flashman\"), d.getFieldValues(\"foo_person_y2_s\"));\n    assertEquals(d.getFieldNames().toString(),\"Flashman\", d.getFieldValue(\"foo_person_y3_person_y7_s\"));\n  }\n","realPath":"solr/contrib/analysis-extras/src/test/org/apache/solr/update/processor/TestOpenNLPExtractNamedEntitiesUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"995a902d1ad40860ee082b57e4e47c1be52c856e","commitMessage":"@@@SOLR-12570: OpenNLPExtractNamedEntitiesUpdateProcessor cannot support multi fields because pattern replacement doesn't work correctly\n","date":"2018-07-23 15:58:46","modifiedFileCount":"2","status":"M","submitter":"koji"}]
