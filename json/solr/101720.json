[{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-07-16 18:24:45","commitOrder":3,"curCode":"  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); \r\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n","date":"2018-07-16 18:24:45","endLine":418,"groupId":"26288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/082a64554419ec7ef613305a6d8bf6738a7e2b.src","preCode":"  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); \r\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"},{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public void beforeTest() throws Exception {\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      req.add(fields.toArray(new String[0]));\n      \n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n  }\n","date":"2018-11-30 01:58:51","endLine":400,"groupId":"26288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/c90594319eb1d16c5a50477e1c05c5623befef.src","preCode":"  public void beforeTest() throws Exception {\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      req.add(fields.toArray(new String[0]));\n      \n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2019-11-10 00:49:31","codes":[{"authorDate":"2018-07-16 18:24:45","commitOrder":4,"curCode":"  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); \r\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n","date":"2018-07-16 18:24:45","endLine":418,"groupId":"101720","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/082a64554419ec7ef613305a6d8bf6738a7e2b.src","preCode":"  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); \r\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2019-11-10 00:49:31","commitOrder":4,"curCode":"  public static void beforeTest() throws Exception {\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n\n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n\n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n\n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n\n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n\n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n\n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n\n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      req.add(fields.toArray(new String[0]));\n\n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n\n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n\n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n\n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n\n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n\n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n\n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n\n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n\n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  }\n","date":"2019-12-12 04:48:17","endLine":399,"groupId":"101720","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/c0a0a770fe453c30fb00ff8423351f125b44be.src","preCode":"  public void beforeTest() throws Exception {\n\n    \r\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n\n    \r\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n\n    \r\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n\n    \r\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n\n    \r\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n\n    \r\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n\n    \r\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n\n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    UpdateRequest req = new UpdateRequest();\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      req.add(fields.toArray(new String[0]));\n\n      if( dt != 0 ) {\n        \r\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n\n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n\n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n\n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n\n      if( s != 0 ){\n        \r\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n\n      \r\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n\n      \r\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n\n      \r\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n\n      \r\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n\n    }\n\n    req.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"f01b3e97d19c4b96ca9eb7d4e2a8647f68fbb969","commitMessage":"@@@SOLR-13904: Make Analytics component sensitive to timeAllowed.\n","date":"2019-12-12 04:48:17","modifiedFileCount":"11","status":"M","submitter":"Mikhail Khludnev"}]
