[{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":1,"curCode":"  public static final CreatorFunction creatorFunction = (params -> {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof DoubleValueStream && param2 instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)param1, (DoubleValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters.\");\n    }\n    DoubleValue[] castedParams = new DoubleValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof DoubleValue) {\n        castedParams[i] = (DoubleValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, castedParams);\n  });\n","date":"2017-06-29 17:00:17","endLine":67,"groupId":"33142","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"creatorFunction","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/6f84e71fbdbd098e49c6b4515b8f2c94f0ec76.src","preCode":"  public static final CreatorFunction creatorFunction = (params -> {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof DoubleValueStream && param2 instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)param1, (DoubleValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters.\");\n    }\n    DoubleValue[] castedParams = new DoubleValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof DoubleValue) {\n        castedParams[i] = (DoubleValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, castedParams);\n  });\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/AddFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2017-06-29 17:00:17","commitOrder":1,"curCode":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  };\n","date":"2017-06-29 17:00:17","endLine":69,"groupId":"33142","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createBitwiseFunction","params":"(Stringname@TwoBoolInBoolOutLambdacomp@AnalyticsValueStream...params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/6cb0aeece84a2ced86b6c09a0ce250e324869b.src","preCode":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  };\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"B","submitter":"Karl Wright"},{"authorTime":"2017-08-01 23:01:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":2,"curCode":"  public static final CreatorFunction creatorFunction = (params -> {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof DoubleValueStream && param2 instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)param1, (DoubleValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters.\");\n    }\n    DoubleValue[] castedParams = new DoubleValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof DoubleValue) {\n        castedParams[i] = (DoubleValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, castedParams);\n  });\n","date":"2017-06-29 17:00:17","endLine":67,"groupId":"101376","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"creatorFunction","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/6f84e71fbdbd098e49c6b4515b8f2c94f0ec76.src","preCode":"  public static final CreatorFunction creatorFunction = (params -> {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof DoubleValueStream && param2 instanceof DoubleValueStream) {\n        return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, (DoubleValueStream)param1, (DoubleValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires numeric parameters.\");\n    }\n    DoubleValue[] castedParams = new DoubleValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof DoubleValue) {\n        castedParams[i] = (DoubleValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createDoubleLambdaFunction(name, (a,b) -> a+b, castedParams);\n  });\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/AddFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"},{"authorDate":"2017-08-01 23:01:17","commitOrder":2,"curCode":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  };\n","date":"2017-10-18 01:52:02","endLine":69,"groupId":"101376","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createBitwiseFunction","params":"(Stringname@TwoBoolInBoolOutLambdacomp@AnalyticsValueStream...params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/dea531d2f604acece02fc3adb76ab0e19bc603.src","preCode":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  };\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"86d84bff82ff8c7a1f6cadfe307685a4dce2f8d9","commitMessage":"@@@SOLR-11145.  SOLR-11146: Added comprehensive unit tests for Analytics Component 2.0 as well as analytics bug fixes.\n","date":"2017-10-18 01:52:02","modifiedFileCount":"41","status":"M","submitter":"Houston Putman"}]
