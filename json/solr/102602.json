[{"authorTime":"2014-09-18 00:30:46","codes":[{"authorDate":"2014-09-18 00:30:46","commitOrder":1,"curCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-09-18 00:30:46","endLine":126,"groupId":"47888","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringlockPath@StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/9ca9073061e0e57967e8e85627512aa9746530.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2014-09-18 00:30:46","commitOrder":1,"curCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-09-18 00:30:46","endLine":76,"groupId":"32237","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringlockPath@StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ae/db8d4b0bb82471236fe96ec902657453120369.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"1866163a72512ede7713bab8c32586a43eb8006d","commitMessage":"@@@SOLR-6519: Make DirectoryFactory#create() take LockFactory\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1625644 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-18 00:30:46","modifiedFileCount":"17","status":"B","submitter":"Uwe Schindler"},{"authorTime":"2014-09-18 02:29:22","codes":[{"authorDate":"2014-09-18 00:30:46","commitOrder":2,"curCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-09-18 00:30:46","endLine":126,"groupId":"47888","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringlockPath@StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/9ca9073061e0e57967e8e85627512aa9746530.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2014-09-18 02:29:22","commitOrder":2,"curCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-09-18 02:29:22","endLine":78,"groupId":"32237","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringlockPath@StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/da52c513d581a10c85d29f6519266207f7c83e.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"6dddd1d6b2dd8ea1d283183d6037f4cfc86be89d","commitMessage":"@@@SOLR-6519: Add back \"single\" lock factory type to StandardDirectoryFactory (to prevent test randomization from failing). Should be discussed in separate issue.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1625724 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-18 02:29:22","modifiedFileCount":"1","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2014-09-18 02:29:22","codes":[{"authorDate":"2014-09-18 02:36:11","commitOrder":3,"curCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-09-18 02:36:11","endLine":128,"groupId":"47888","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringlockPath@StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/da/f927412ed80c20a5790614dfd3a01d8c0e5a3f.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2014-09-18 02:29:22","commitOrder":3,"curCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-09-18 02:29:22","endLine":78,"groupId":"32237","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringlockPath@StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/da52c513d581a10c85d29f6519266207f7c83e.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"}],"commitId":"7978fccfb030b46c1be5e062823ec97e219aa42f","commitMessage":"@@@SOLR-6519: Also allow \"single\" for HDFS\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1625731 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-18 02:36:11","modifiedFileCount":"1","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2014-11-09 20:18:03","codes":[{"authorDate":"2014-11-09 20:18:03","commitOrder":4,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-11-09 20:18:03","endLine":124,"groupId":"60556","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/c7a7eb3b6dc7da5c303cfd165781bf36ee81ce.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2014-11-09 20:18:03","commitOrder":4,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return SimpleFSLockFactory.INSTANCE;\n      case \"native\":\n        return NativeFSLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2014-11-09 20:18:03","endLine":77,"groupId":"31336","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/7ac0eecc3c38cfa31945599d21939dcdef2e3d.src","preCode":"  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"c429f437f08cd5ea95351232b9c51104607cbda5","commitMessage":"@@@LUCENE-5953: Restructure Directory and LockFactory APIs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1637665 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-09 20:18:03","modifiedFileCount":"53","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2016-01-07 22:34:39","codes":[{"authorDate":"2016-01-07 22:34:39","commitOrder":5,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2016-01-07 22:34:39","endLine":173,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/16ee69e2106ccf3fd28b33af5de4819e40cf55.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2016-01-07 22:34:39","commitOrder":5,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2016-01-07 22:34:39","endLine":76,"groupId":"27076","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/d6e6eec555a653f8a9e2dadf588bea00de318e.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      \r\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return SimpleFSLockFactory.INSTANCE;\n      case \"native\":\n        return NativeFSLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"33fc06036fad4e832245127a5b4ae82c7e89ef27","commitMessage":"@@@SOLR-8484: refactor update/SolrIndexConfig.LOCK_TYPE_* into core/DirectoryFactory.LOCK_TYPE_*\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723564 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-07 22:34:39","modifiedFileCount":"10","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2016-01-07 22:34:39","codes":[{"authorDate":"2016-01-08 23:59:36","commitOrder":6,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      LOG.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2016-01-08 23:59:36","endLine":173,"groupId":"43005","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/c9cbae602dad67e86fd9cbb71b37d5d12a7ee2.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2016-01-07 22:34:39","commitOrder":6,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2016-01-07 22:34:39","endLine":76,"groupId":"27076","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/d6e6eec555a653f8a9e2dadf588bea00de318e.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"2580956b8b00e7fbd52d2db418a512a8afb32117","commitMessage":"@@@SOLR-8505: core/DirectoryFactory.LOCK_TYPE_HDFS - add & use it instead of String literals\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723751 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-08 23:59:36","modifiedFileCount":"6","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2016-01-07 22:34:39","codes":[{"authorDate":"2018-08-23 06:26:37","commitOrder":7,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2018-08-23 06:26:37","endLine":188,"groupId":"43005","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/e1de188e545dab0eebca892eacc9a281ce7204.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      LOG.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2016-01-07 22:34:39","commitOrder":7,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2016-01-07 22:34:39","endLine":76,"groupId":"27076","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/d6e6eec555a653f8a9e2dadf588bea00de318e.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"8cde1277ec7151bd6ab62950ac93cbdd6ff04d9f","commitMessage":"@@@SOLR-12690: Regularize LoggerFactory declarations\n","date":"2018-08-23 06:26:37","modifiedFileCount":"93","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-04-18 08:40:32","codes":[{"authorDate":"2020-04-18 08:40:32","commitOrder":8,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      log.warn(\"No lockType configured, assuming '{}'.\", rawLockType);\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2020-04-18 08:40:32","endLine":196,"groupId":"102602","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/3acd6250af4b50c4faf0df2697d51a7337e873.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2020-04-18 08:40:32","commitOrder":8,"curCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '{}'.\", rawLockType);\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","date":"2020-04-18 08:40:32","endLine":79,"groupId":"102602","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createLockFactory","params":"(StringrawLockType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3f/901467b74d7758e018054bbedacf1c1994a2e7.src","preCode":"  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"3af165b32ac8028a6c01ac9c9a6d2c808efa0e85","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-18 08:40:32","modifiedFileCount":"37","status":"M","submitter":"Erick Erickson"}]
