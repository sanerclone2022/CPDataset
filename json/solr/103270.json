[{"authorTime":"2017-03-29 06:39:28","codes":[{"authorDate":"2017-04-06 04:23:26","commitOrder":2,"curCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","date":"2017-04-06 04:23:26","endLine":1015,"groupId":"29367","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShingleQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/372d81d7d6335c27ac0e5928adc18a07cf9af5.src","preCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"B"},{"authorDate":"2017-03-29 06:39:28","commitOrder":2,"curCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    \r\n    \r\n    \r\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n","date":"2017-03-29 06:39:28","endLine":1821,"groupId":"42694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoGeneratePhraseQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/d8bec6cf7db753ccc9e76a297382028df88a51.src","preCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    \r\n    \r\n    \r\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1759,"status":"NB"}],"commitId":"dbd22a6ada774eb30aee4b9312eb7913dee6890e","commitMessage":"@@@SOLR-10423: Disable graph query production via schema configuration <fieldtype ... enableGraphQueries=\"false\">.  This fixes broken queries for ShingleFilter-containing query-time analyzers when request param sow=false.\n","date":"2017-04-06 04:23:26","modifiedFileCount":"7","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-04-26 00:02:25","codes":[{"authorDate":"2017-04-06 04:23:26","commitOrder":3,"curCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","date":"2017-04-06 04:23:26","endLine":1015,"groupId":"29367","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testShingleQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/372d81d7d6335c27ac0e5928adc18a07cf9af5.src","preCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"N"},{"authorDate":"2017-04-26 00:02:25","commitOrder":3,"curCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","date":"2017-04-26 00:02:25","endLine":1834,"groupId":"42694","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoGeneratePhraseQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6a/211d098548d2777bcf7e3fe7007397fbfd4781.src","preCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    \r\n    \r\n    \r\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n      }\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n          q.toString());\n    }\n    \n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n            + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n            q.toString());\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1772,"status":"M"}],"commitId":"dd171ff8fe31df578b7e6fab1eb5bfc1ade3f5fc","commitMessage":"@@@SOLR-10310: By default.  stop splitting on whitespace prior to analysis in edismax and standard/\"lucene\" query parsers\n","date":"2017-04-26 00:02:25","modifiedFileCount":"4","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-05-05 06:53:50","codes":[{"authorDate":"2017-04-06 04:23:26","commitOrder":4,"curCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","date":"2017-04-06 04:23:26","endLine":1015,"groupId":"29367","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testShingleQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/372d81d7d6335c27ac0e5928adc18a07cf9af5.src","preCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"N"},{"authorDate":"2017-05-05 06:53:50","commitOrder":4,"curCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","date":"2017-05-05 06:53:50","endLine":1837,"groupId":"42694","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoGeneratePhraseQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/16b222d079bbebd34c35f4d33ddffd4b5d4293.src","preCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1772,"status":"M"}],"commitId":"e776cbe4464e52a28ceffd9fa46d7c47ed44bb57","commitMessage":"@@@SOLR-7041: Cut over tests from <defaultSearchField> in schema to df on requests\n","date":"2017-05-05 06:53:50","modifiedFileCount":"14","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-04-06 04:23:26","commitOrder":5,"curCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","date":"2017-04-06 04:23:26","endLine":1015,"groupId":"29367","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testShingleQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/372d81d7d6335c27ac0e5928adc18a07cf9af5.src","preCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"N"},{"authorDate":"2017-06-29 17:00:17","commitOrder":5,"curCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","date":"2017-06-29 17:00:17","endLine":1845,"groupId":"42694","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoGeneratePhraseQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/c327db376bb9bff40a94d4e0920a1f894b03b5.src","preCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n                + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1780,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-02-26 22:32:34","codes":[{"authorDate":"2017-04-06 04:23:26","commitOrder":6,"curCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","date":"2017-04-06 04:23:26","endLine":1015,"groupId":"29367","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testShingleQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/372d81d7d6335c27ac0e5928adc18a07cf9af5.src","preCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"N"},{"authorDate":"2020-02-26 22:32:34","commitOrder":6,"curCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","date":"2020-02-26 22:32:34","endLine":1930,"groupId":"42694","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoGeneratePhraseQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/65/e18509ef6e8ab857dfe01e954b72c9a6a32c98.src","preCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1865,"status":"M"}],"commitId":"98dafe2e1047cdfe8ed8bbfb444fab2798193a9f","commitMessage":"@@@LUCENE-9207: Don't build span queries in QueryBuilder (#1239)\n\nQueryBuilder currently has special logic for graph phrase queries with no slop. \nconstructing a spanquery that attempts to follow all paths using a combination of\nOR and NEAR queries. However.  this type of query has known bugs(LUCENE-7398).\nThis commit removes this logic and just builds a disjunction of phrase queries.  one \nphrase per path.","date":"2020-02-26 22:32:34","modifiedFileCount":"6","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-05-11 23:04:39","codes":[{"authorDate":"2017-04-06 04:23:26","commitOrder":7,"curCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","date":"2017-04-06 04:23:26","endLine":1015,"groupId":"103270","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testShingleQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/372d81d7d6335c27ac0e5928adc18a07cf9af5.src","preCode":"  public void testShingleQueries() throws Exception {\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n\n    try (SolrQueryRequest req = req(sowFalseParams)) {\n      QParser qParser = QParser.getParser(\"shingle23:(A B C)\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C\", q.toString());\n    }\n\n    assertJQ(req(\"df\", \"shingle23\", \"q\", \"A B C\", \"sow\", \"false\")\n        , \"/response/numFound==1\"\n    );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"N"},{"authorDate":"2021-05-11 23:04:39","commitOrder":7,"curCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertThat(q, booleanQuery(disjunctionOf(\n            stringQuery(\"(text:\\\"crow blackbird\\\" text:grackl)\"),\n            stringQuery(\"((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\")\n        ), BooleanClause.Occur.MUST));\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertThat(q, booleanQuery(disjunctionOf(\n            stringQuery(\"(text:\\\"crow blackbird\\\" text:grackl) text:wifi\"),\n            stringQuery(\"((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi\")\n        ), BooleanClause.Occur.MUST));\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertThat(q, booleanQuery(disjunctionOf(\n         stringQuery(\"text:\\\"crow blackbird\\\" text:grackl\"),\n         stringQuery(\"((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\")\n      ), BooleanClause.Occur.MUST));\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertThat(q, booleanQuery(booleanQuery(\n          disjunctionOf(termQuery(\"text\", \"wi\"), termQuery(\"text_sw\", \"wi\")),\n          disjunctionOf(termQuery(\"text\", \"fi\"), termQuery(\"text_sw\", \"fi\")),\n          disjunctionOf(\n              stringQuery(\"((+text_sw:crow +text_sw:blackbird) text_sw:grackl)\"),\n              booleanQuery(phraseQuery(\"text\", \"crow blackbird\"), termQuery(\"text\", \"grackl\"))\n          )\n      ), BooleanClause.Occur.MUST));\n    }\n  }\n","date":"2021-05-11 23:04:39","endLine":2155,"groupId":"103270","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoGeneratePhraseQueries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/ae300fd03f0462b1ee861d4eb8c4117078a6a6.src","preCode":"  public void testAutoGeneratePhraseQueries() throws Exception {\n    ModifiableSolrParams noSowParams = new ModifiableSolrParams();\n    noSowParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();\n    sowFalseParams.add(\"sow\", \"false\");\n    sowFalseParams.add(\"df\", \"text\");\n    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();\n    sowTrueParams.add(\"sow\", \"true\");\n    sowTrueParams.add(\"df\", \"text\");\n\n    \r\n    \r\n    \r\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl))\", q.toString());\n      }\n    }\n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"text:grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+(text:\\\"crow blackbird\\\" text:grackl)\", q.toString());\n    }\n    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"text_sw:grackle\", \"edismax\", req); \r\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((+text_sw:crow +text_sw:blackbird) text_sw:grackl))\", q.toString());\n      }\n    }\n\n    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add(\"qf\", \"text text_sw\"));\n\n    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {\n      try (SolrQueryRequest req = req(params)) {\n        QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n        Query q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl))\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n            q.toString());\n\n        qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n        q = qParser.getQuery();\n        assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl) text:wifi)\"\n                + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))\",\n            q.toString());\n      }\n    }\n    \n    try (SolrQueryRequest req = req(sowTrueParams)) {\n      QParser qParser = QParser.getParser(\"grackle\", \"edismax\", req);\n      Query q = qParser.getQuery();\n      assertEquals(\"+((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl)))\",\n          q.toString());\n\n      qParser = QParser.getParser(\"grackle wi fi\", \"edismax\", req);\n      q = qParser.getQuery();\n      assertEquals(\"+(((text:\\\"crow blackbird\\\" text:grackl)\"\n              + \" | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl))) (text:wi | text_sw:wi) (text:fi | text_sw:fi))\",\n          q.toString());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2082,"status":"M"}],"commitId":"f5ad738a6d4c9f3e23b56e95d44120a0d345b4a5","commitMessage":"@@@SOLR-15389: Tests shouldn't rely on dismax clause order (#117)\n\nIntroduces QueryMatcher compatible with Hamcrest assertions.","date":"2021-05-11 23:04:39","modifiedFileCount":"3","status":"M","submitter":"Mike Drob"}]
