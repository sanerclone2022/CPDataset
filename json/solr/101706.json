[{"authorTime":"2017-08-01 23:01:17","codes":[{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","date":"2017-10-18 01:52:02","endLine":181,"groupId":"8457","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"calculateFacetedStat","params":"(ArrayList<ArrayList<T>>lists@Stringstat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/3177d78043118e2356b35e545a0010818b0978.src","preCode":"  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        \r\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        if( list.size() == 0) continue;\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","date":"2017-10-18 01:52:02","endLine":279,"groupId":"8457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"calculateStat","params":"(ArrayList<ArrayList<T>>lists@Stringstat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/c98268a647d822212234e24151f704aeb87cc4.src","preCode":"  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        \r\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        if( list.size() == 0) continue;\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"86d84bff82ff8c7a1f6cadfe307685a4dce2f8d9","commitMessage":"@@@SOLR-11145.  SOLR-11146: Added comprehensive unit tests for Analytics Component 2.0 as well as analytics bug fixes.\n","date":"2017-10-18 01:52:02","modifiedFileCount":"41","status":"B","submitter":"Houston Putman"},{"authorTime":"2020-06-18 23:12:50","codes":[{"authorDate":"2020-06-18 23:12:50","commitOrder":2,"curCode":"  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","date":"2020-06-18 23:12:50","endLine":181,"groupId":"101706","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"calculateFacetedStat","params":"(ArrayList<ArrayList<T>>lists@Stringstat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/1b6df220bec4ad1fa9e6c28882bf133838f856.src","preCode":"  public <T extends Comparable<T>> ArrayList calculateFacetedStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-06-18 23:12:50","commitOrder":2,"curCode":"  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        \r\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        if( list.size() == 0) continue;\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","date":"2020-06-18 23:12:50","endLine":279,"groupId":"101706","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"calculateStat","params":"(ArrayList<ArrayList<T>>lists@Stringstat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/f679d1ba16e23b4c2c837ceb27994625ce8c20.src","preCode":"  public <T extends Comparable<T>> ArrayList calculateStat(ArrayList<ArrayList<T>> lists, String stat) {\n    ArrayList result;\n    if (stat.contains(\"perc_\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n        ArrayList<Integer> percs = new ArrayList<>(1);\n        percs.add(ord);\n        OrdinalCalculator.putOrdinalsInPosition(list, percs);\n        result.add(list.get(ord));\n      }\n    } else if (stat.equals(\"count\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        \r\n        result.add((long)list.size());\n      }\n    } else if (stat.equals(\"missing\")) {\n      result = new ArrayList<Long>();\n      for (ArrayList<T> list : lists) {\n        if( list.size() == 0) continue;\n        result.add(calculateMissing(list,latestType));\n      }\n    } else if (stat.equals(\"unique\")) {\n      result = new ArrayList<Long>();\n      for (List<T> list : lists) {\n        HashSet<T> set = new HashSet<>();\n        set.addAll(list);\n        result.add((long)set.size());\n      }\n    } else if (stat.equals(\"max\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort(list);\n        result.add(list.get(list.size()-1));\n      }\n    } else if (stat.equals(\"min\")) {\n      result = new ArrayList<T>();\n      for (List<T> list : lists) {\n        if( list.size() == 0) continue;\n        Collections.sort((List<T>)list);\n        result.add(list.get(0));\n      }\n    } else {\n      result = null;\n    }\n    return result;\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyAbstractAnalyticsFacetTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"84729edbba04ad7de4b1cae635d8d0fbe803f124","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 2)\n","date":"2020-06-18 23:12:50","modifiedFileCount":"122","status":"M","submitter":"Erick Erickson"}]
