[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2017-04-19 08:56:21","commitOrder":2,"curCode":"  public void testEvalStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"eval(select(echo(\\\"search(\"+COLLECTIONORALIAS+\", q=\\\\\\\"*:*\\\\\\\", fl=id, sort=\\\\\\\"id desc\\\\\\\")\\\"), echo as expr_s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"id\");\n    assertTrue(s.equals(\"hello\"));\n\n  }\n","date":"2017-04-19 08:56:36","endLine":5035,"groupId":"12026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEvalStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/0a4ce692c48e329c740965f99b62399d5743cb.src","preCode":"  public void testEvalStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"eval(select(echo(\\\"search(\"+COLLECTIONORALIAS+\", q=\\\\\\\"*:*\\\\\\\", fl=id, sort=\\\\\\\"id desc\\\\\\\")\\\"), echo as expr_s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"id\");\n    assertTrue(s.equals(\"hello\"));\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":5015,"status":"NB"},{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testPrimes() throws Exception {\n    String cexpr = \"primes(10, 0)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 10);\n    assertEquals(asort.get(0).intValue(), 2);\n    assertEquals(asort.get(1).intValue(), 3);\n    assertEquals(asort.get(2).intValue(), 5);\n    assertEquals(asort.get(3).intValue(), 7);\n    assertEquals(asort.get(4).intValue(), 11);\n    assertEquals(asort.get(5).intValue(), 13);\n    assertEquals(asort.get(6).intValue(), 17);\n    assertEquals(asort.get(7).intValue(), 19);\n    assertEquals(asort.get(8).intValue(), 23);\n    assertEquals(asort.get(9).intValue(), 29);\n  }\n","date":"2018-04-06 02:00:07","endLine":752,"groupId":"12026","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testPrimes() throws Exception {\n    String cexpr = \"primes(10, 0)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 10);\n    assertEquals(asort.get(0).intValue(), 2);\n    assertEquals(asort.get(1).intValue(), 3);\n    assertEquals(asort.get(2).intValue(), 5);\n    assertEquals(asort.get(3).intValue(), 7);\n    assertEquals(asort.get(4).intValue(), 11);\n    assertEquals(asort.get(5).intValue(), 13);\n    assertEquals(asort.get(6).intValue(), 17);\n    assertEquals(asort.get(7).intValue(), 19);\n    assertEquals(asort.get(8).intValue(), 23);\n    assertEquals(asort.get(9).intValue(), 29);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2017-04-19 08:56:21","commitOrder":3,"curCode":"  public void testEvalStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"eval(select(echo(\\\"search(\"+COLLECTIONORALIAS+\", q=\\\\\\\"*:*\\\\\\\", fl=id, sort=\\\\\\\"id desc\\\\\\\")\\\"), echo as expr_s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"id\");\n    assertTrue(s.equals(\"hello\"));\n\n  }\n","date":"2017-04-19 08:56:36","endLine":5035,"groupId":"10607","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEvalStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/0a4ce692c48e329c740965f99b62399d5743cb.src","preCode":"  public void testEvalStream() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"hello\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"eval(select(echo(\\\"search(\"+COLLECTIONORALIAS+\", q=\\\\\\\"*:*\\\\\\\", fl=id, sort=\\\\\\\"id desc\\\\\\\")\\\"), echo as expr_s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"id\");\n    assertTrue(s.equals(\"hello\"));\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":5015,"status":"N"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testPrimes() throws Exception {\n    String cexpr = \"primes(10, 0)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 10);\n    assertEquals(asort.get(0).intValue(), 2);\n    assertEquals(asort.get(1).intValue(), 3);\n    assertEquals(asort.get(2).intValue(), 5);\n    assertEquals(asort.get(3).intValue(), 7);\n    assertEquals(asort.get(4).intValue(), 11);\n    assertEquals(asort.get(5).intValue(), 13);\n    assertEquals(asort.get(6).intValue(), 17);\n    assertEquals(asort.get(7).intValue(), 19);\n    assertEquals(asort.get(8).intValue(), 23);\n    assertEquals(asort.get(9).intValue(), 29);\n  }\n","date":"2020-06-17 01:27:53","endLine":1220,"groupId":"10607","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testPrimes() throws Exception {\n    String cexpr = \"primes(10, 0)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 10);\n    assertEquals(asort.get(0).intValue(), 2);\n    assertEquals(asort.get(1).intValue(), 3);\n    assertEquals(asort.get(2).intValue(), 5);\n    assertEquals(asort.get(3).intValue(), 7);\n    assertEquals(asort.get(4).intValue(), 11);\n    assertEquals(asort.get(5).intValue(), 13);\n    assertEquals(asort.get(6).intValue(), 17);\n    assertEquals(asort.get(7).intValue(), 19);\n    assertEquals(asort.get(8).intValue(), 23);\n    assertEquals(asort.get(9).intValue(), 29);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1193,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
