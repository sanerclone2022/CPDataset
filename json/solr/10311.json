[{"authorTime":"2016-01-14 01:41:41","codes":[{"authorDate":"2016-01-14 01:41:41","commitOrder":1,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectionStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","date":"2016-01-14 01:41:41","endLine":115,"groupId":"28793","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/42d7e21cccbe477855acac36ead86f297801a8.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectionStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ComplementStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2016-01-14 01:41:41","commitOrder":1,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","date":"2016-01-14 01:41:41","endLine":115,"groupId":"28793","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/0083d76219dac8ef5fd9d0d5a952886397bfaa.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"f6ede1b42f94921f0ef340918bfe26628f0bf2df","commitMessage":"@@@SOLR-7525: Add ComplementStream and IntersectStream to the Streaming API and Streaming Expressions\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1724468 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-14 01:41:41","modifiedFileCount":"4","status":"B","submitter":"Dennis Gove"},{"authorTime":"2016-04-20 00:06:32","codes":[{"authorDate":"2016-04-20 00:06:32","commitOrder":2,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      \r\n      if(streamA instanceof Expressible){\n        expression.addParameter(((Expressible)streamA).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This IntersectionStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n      \n      if(originalStreamB instanceof Expressible){\n        expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"<stream>\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":125,"groupId":"10311","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a4/7f05ce07c4f6324aeeedf73fca52a14e700071.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectionStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ComplementStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2016-04-20 00:06:32","commitOrder":2,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      \r\n      if(streamA instanceof Expressible){\n        expression.addParameter(((Expressible)streamA).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n      \n      if(originalStreamB instanceof Expressible){\n        expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"<stream>\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":125,"groupId":"10311","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/04e466386cc61104664af085a3b1e295448f29.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"8ba1a3880bdcfb0a8764e997fae7a79cc29142a4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-20 00:06:32","modifiedFileCount":"43","status":"M","submitter":"Karl Wright"}]
