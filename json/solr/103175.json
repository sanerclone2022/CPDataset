[{"authorTime":"2016-03-04 21:23:47","codes":[{"authorDate":"2017-07-27 01:10:40","commitOrder":4,"curCode":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(\"field_\" + fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = randomDouble(max);\n          values[1] = randomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n\n      }\n      if (random().nextInt(100) >= 1) {\r\n        Arrays.sort(values);\n      }\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n","date":"2017-07-27 01:12:40","endLine":571,"groupId":"4649","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomRange","params":"(intmax@StringfieldName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/3c8d5380eef143e7048a598115f9b530c242a3.src","preCode":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(\"field_\" + fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = randomDouble(max);\n          values[1] = randomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n\n      }\n      if (random().nextInt(100) >= 1) {\r\n        Arrays.sort(values);\n      }\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRangeQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"B"},{"authorDate":"2016-03-04 21:23:47","commitOrder":4,"curCode":"  private Integer[] getRandomRange(int max, String fieldName) {\n    Integer[] values = new Integer[2];\n    values[0] = random().nextInt(max);\n    values[1] = random().nextInt(max);\n    if (fieldName.startsWith(\"test_s\")) {\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      Arrays.sort(values);\n    }\n    return values;\n  }\n","date":"2016-03-04 21:23:47","endLine":359,"groupId":"16722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRandomRange","params":"(intmax@StringfieldName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/698e19920bccda93bc176accc4b9f4faef17b2.src","preCode":"  private Integer[] getRandomRange(int max, String fieldName) {\n    Integer[] values = new Integer[2];\n    values[0] = random().nextInt(max);\n    values[1] = random().nextInt(max);\n    if (fieldName.startsWith(\"test_s\")) {\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      Arrays.sort(values);\n    }\n    return values;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"NB"}],"commitId":"847ab9e326e9462aab9c5b6429cc6f1ee93acb1d","commitMessage":"@@@SOLR-11070.  SOLR-11056: Make docValues range queries behave the same as Trie/Point fields for Double/Float Infinity cases\n","date":"2017-07-27 01:12:40","modifiedFileCount":"5","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-08-10 07:45:03","codes":[{"authorDate":"2017-07-27 01:10:40","commitOrder":5,"curCode":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(\"field_\" + fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = randomDouble(max);\n          values[1] = randomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n\n      }\n      if (random().nextInt(100) >= 1) {\r\n        Arrays.sort(values);\n      }\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n","date":"2017-07-27 01:12:40","endLine":571,"groupId":"103175","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRandomRange","params":"(intmax@StringfieldName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/3c8d5380eef143e7048a598115f9b530c242a3.src","preCode":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(\"field_\" + fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = randomDouble(max);\n          values[1] = randomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n\n      }\n      if (random().nextInt(100) >= 1) {\r\n        Arrays.sort(values);\n      }\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRangeQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"N"},{"authorDate":"2017-08-10 07:45:03","commitOrder":5,"curCode":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = raondomDouble(max);\n          values[1] = raondomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n        \n      }\n      Arrays.sort(values);\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n","date":"2017-08-10 07:45:03","endLine":491,"groupId":"103175","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRandomRange","params":"(intmax@StringfieldName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/575d2e0c29c54021d31647de2bbe60a5ea742c.src","preCode":"  private Integer[] getRandomRange(int max, String fieldName) {\n    Integer[] values = new Integer[2];\n    values[0] = random().nextInt(max);\n    values[1] = random().nextInt(max);\n    if (fieldName.startsWith(\"test_s\")) {\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      Arrays.sort(values);\n    }\n    return values;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/request/TestIntervalFaceting.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"4fcd8a806f8641786b455e0e92ceaf4481a0180d","commitMessage":"@@@SOLR-11071: Improve TestIntervalFacets.testRandom\n","date":"2017-08-10 07:45:03","modifiedFileCount":"1","status":"M","submitter":"Tomas Fernandez Lobbe"}]
