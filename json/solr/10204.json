[{"authorTime":"2019-04-12 21:37:50","codes":[{"authorDate":"2019-04-12 21:37:50","commitOrder":1,"curCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return Math.sqrt(StatUtils.variance(data));\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","date":"2019-04-12 21:37:50","endLine":58,"groupId":"43870","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/132d0998796451bdb097a33f35d149ff40e818.src","preCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return Math.sqrt(StatUtils.variance(data));\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/StandardDeviationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2019-04-12 21:37:50","commitOrder":1,"curCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return StatUtils.variance(data);\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","date":"2019-04-12 21:37:50","endLine":58,"groupId":"43870","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/a3f11b7d6f4f97791923544c0d8778836cb64f.src","preCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return StatUtils.variance(data);\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/VarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"58001bfc870a6f5f04cc200853df7ffe04473866","commitMessage":"@@@SOLR-13391: Add variance and standard deviation stream evaluators\nSquashed commit of the following:\n\ncommit 406d4b959a42e4830ac1c52836ccbcfc1b614b46\nAuthor: Nazerke <seinaz1997@gmail.com>\nDate:   Fri Apr 12 14:03:34 2019 +0200\n\n    added missing package\n\ncommit 32c239687c39c5da3e4f2d0f25df73127331fa99\nAuthor: Nazerke <seinaz1997@gmail.com>\nDate:   Fri Apr 12 14:03:14 2019 +0200\n\n    added package\n\ncommit 7b3f9bd415002969a4ec5d87a9ffbfd6fcff6e92\nAuthor: Nazerke <seinaz1997@gmail.com>\nDate:   Fri Apr 12 14:02:28 2019 +0200\n\n    added var and stddev functions\n\ncommit 77c4f9fdd9f111862a55b645aad960457291414c\nAuthor: Nazerke <seinaz1997@gmail.com>\nDate:   Fri Apr 12 14:00:59 2019 +0200\n\n    added test for the variance and standard deviation stream evaluators\n\ncommit 2d9692c178590b65e46cfd9e04ca0384c7d39ec5\nAuthor: naz <nazerke.seidan@cloudera.com>\nDate:   Wed Apr 10 19:50:30 2019 +0200\n\n    added var and stddev new evaluators\n\ncommit d265225747bce9a0eabd713994ddd4990dbbbfa2\nAuthor: naz <nazerke.seidan@cloudera.com>\nDate:   Wed Apr 10 19:49:23 2019 +0200\n\n    variance streaming evaluator\n\ncommit a3330064bb62b5723b9125334ef1d61fc3b098d3\nAuthor: naz <nazerke.seidan@cloudera.com>\nDate:   Wed Apr 10 19:49:02 2019 +0200\n\n    standard deviation streaming evaluator\n","date":"2019-04-12 21:37:50","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            @SuppressWarnings({\"unchecked\"})\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return Math.sqrt(StatUtils.variance(data));\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","date":"2020-06-08 09:31:51","endLine":59,"groupId":"10204","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/e396dcd4b35a6ec73e10b173964059d771c3ed.src","preCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return Math.sqrt(StatUtils.variance(data));\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/StandardDeviationEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            @SuppressWarnings({\"unchecked\"})\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return StatUtils.variance(data);\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","date":"2020-06-08 09:31:51","endLine":59,"groupId":"10204","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/085bc74afc72c14c7797284de430db2a206a59.src","preCode":"    public Object doWork(Object value) throws IOException{\n        if(null == value){\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n        }\n        else if(value instanceof List){\n            List<Number> c = (List<Number>) value;\n            double[] data = new double[c.size()];\n            for(int i=0; i< c.size(); i++) {\n                data[i] = c.get(i).doubleValue();\n            }\n\n            return StatUtils.variance(data);\n        }\n        else{\n            throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n        }\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/VarianceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"}]
