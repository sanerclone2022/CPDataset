[{"authorTime":"2016-02-09 03:59:26","codes":[{"authorDate":"2016-02-09 03:59:26","commitOrder":8,"curCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs});\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-09 04:41:51","endLine":69,"groupId":"26430","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getWrappedMergePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/07010667ce9f414b283910eeb27efafd3a694a.src","preCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs});\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2016-02-09 03:59:26","commitOrder":8,"curCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final MergePolicyFactory mpf;\n    if (mergePolicyFactoryInfo == null) {\n      mpf = defaultMergePolicyFactory;\n    } else {\n      final String mpfClassName = mergePolicyFactoryInfo.className;\n      final MergePolicyFactoryArgs mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n      final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n      mpf = resourceLoader.newInstance(\n          mpfClassName,\n          MergePolicyFactory.class,\n          NO_SUB_PACKAGES,\n          new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class },\n          new Object[] { resourceLoader, mpfArgs });\n    }\n\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-09 04:41:51","endLine":276,"groupId":"20220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMergePolicy","params":"(finalIndexSchemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/30c56aa6a8d7d46c31532441bea050277cbf55.src","preCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final MergePolicyFactory mpf;\n    if (mergePolicyFactoryInfo == null) {\n      mpf = defaultMergePolicyFactory;\n    } else {\n      final String mpfClassName = mergePolicyFactoryInfo.className;\n      final MergePolicyFactoryArgs mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n      final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n      mpf = resourceLoader.newInstance(\n          mpfClassName,\n          MergePolicyFactory.class,\n          NO_SUB_PACKAGES,\n          new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class },\n          new Object[] { resourceLoader, mpfArgs });\n    }\n\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"MB"}],"commitId":"fc5b1ac279a02f51b634f0fd16ae3efdcdbc520b","commitMessage":"@@@SOLR-8621: deprecate <mergePolicy> in favor of <mergePolicyFactory>\n","date":"2016-02-09 04:41:51","modifiedFileCount":"4","status":"M","submitter":"Shai Erera"},{"authorTime":"2016-02-10 05:13:46","codes":[{"authorDate":"2016-02-10 05:13:46","commitOrder":9,"curCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-11 00:28:06","endLine":70,"groupId":"26430","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getWrappedMergePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/ba237815964065d61dcd224918c6c00abe7e1a.src","preCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs});\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-02-10 05:13:46","commitOrder":9,"curCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-11 00:28:06","endLine":283,"groupId":"26430","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMergePolicy","params":"(finalIndexSchemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/463c2a827dfd398004a21e220f092100752c57.src","preCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final MergePolicyFactory mpf;\n    if (mergePolicyFactoryInfo == null) {\n      mpf = defaultMergePolicyFactory;\n    } else {\n      final String mpfClassName = mergePolicyFactoryInfo.className;\n      final MergePolicyFactoryArgs mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n      final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n      mpf = resourceLoader.newInstance(\n          mpfClassName,\n          MergePolicyFactory.class,\n          NO_SUB_PACKAGES,\n          new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class },\n          new Object[] { resourceLoader, mpfArgs });\n    }\n\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"5d32609cdc413e15619a94d8d508987a65514e7e","commitMessage":"@@@SOLR-8621: add IndexSchema arg to MergePolicyFactory constructor\n","date":"2016-02-11 00:28:06","modifiedFileCount":"12","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2016-02-10 05:13:46","codes":[{"authorDate":"2016-02-11 06:19:06","commitOrder":10,"curCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-11 06:24:15","endLine":83,"groupId":"26430","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getWrappedMergePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/088a8dbc0d475a1bb95b5ba8b407c0cf5a6718.src","preCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2016-02-10 05:13:46","commitOrder":10,"curCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-11 00:28:06","endLine":283,"groupId":"26430","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMergePolicy","params":"(finalIndexSchemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/463c2a827dfd398004a21e220f092100752c57.src","preCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"}],"commitId":"6b6932e8e1f72caf29a078f0532a56c284711f9f","commitMessage":"@@@SOLR-8621: WrapperMergePolicyFactory logic tweaks\n\n * fix so that getMergePolicy() can now be called more than once\n * added WrapperMergePolicyFactoryTest.testUpgradeIndexMergePolicyFactory()\n * account for overlap between wrapping and wrapped setters (and disallow it)\n** illustration:\n   <mergePolicyFactory class=\"UpgradeMergePolicyFactory\">\n      <int name=\"noCFSRatio\">0.24</int>\n      <str name=\"wrapped.prefix\">mergePolicy</str>\n                      <str name=\"mergePolicy.class\">TieredMergePolicyFactory</str>\n                      <int name=\"mergePolicy.noCFSRatio\">0.42</int>\n   </mergePolicyFactory>\n** implementation details: the wrapping MP's setter calls the wrapped MP's setter and in the current code the wrapping MP's value prevails i.e. the 0.24 value in the illustration since the wrapped MP is constructed before the wrapping MP. an end-user however might reasonably assume that the wrapped MP's 0.42 value will prevail. at best configuring the same setter twice within the same overall <mergePolicyFactory> element is ambiguous and so the code now disallows it.\n","date":"2016-02-11 06:24:15","modifiedFileCount":"2","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2016-02-11 06:19:06","commitOrder":11,"curCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-11 06:24:15","endLine":83,"groupId":"26430","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getWrappedMergePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/088a8dbc0d475a1bb95b5ba8b407c0cf5a6718.src","preCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2017-06-29 17:00:17","commitOrder":11,"curCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","date":"2017-06-29 17:00:17","endLine":282,"groupId":"26430","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMergePolicy","params":"(finalIndexSchemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c6/63783e83cffa3c068e393f79b8fc5ed5a8055d.src","preCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n    if (useMergePolicyInfo()) {\n      return buildMergePolicyFromInfo(schema);\n    }\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-03-20 01:51:44","codes":[{"authorDate":"2016-02-11 06:19:06","commitOrder":12,"curCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","date":"2016-02-11 06:24:15","endLine":83,"groupId":"26430","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getWrappedMergePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/088a8dbc0d475a1bb95b5ba8b407c0cf5a6718.src","preCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2019-03-20 01:51:44","commitOrder":12,"curCode":"  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","date":"2019-03-20 01:51:44","endLine":276,"groupId":"26430","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMergePolicy","params":"(SolrResourceLoaderresourceLoader@IndexSchemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/f893765ea72279e4514fdfd125dcd0531642c2.src","preCode":"  private MergePolicy buildMergePolicy(final IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final SolrResourceLoader resourceLoader = schema.getResourceLoader();\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] { resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"85a702cdff23a6352945dd78eb54ff6db68f6965","commitMessage":"@@@SOLR-13253: avoid using IndexSchema.getResourceLoader for non-schema things.\nFurthermore it's reference to SolrConfig was removed.\n","date":"2019-03-20 01:51:44","modifiedFileCount":"8","status":"M","submitter":"David Smiley"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":13,"curCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class<?>[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","date":"2021-06-03 06:17:26","endLine":83,"groupId":"102006","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"getWrappedMergePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/f36e8185d8d2fe411f6c5ebd1926194f188c9b.src","preCode":"  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":13,"curCode":"  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class<?>[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","date":"2021-06-03 06:17:26","endLine":309,"groupId":"102006","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMergePolicy","params":"(SolrResourceLoaderresourceLoader@IndexSchemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/109033bef4dc6b954223591186557362622898.src","preCode":"  private MergePolicy buildMergePolicy(SolrResourceLoader resourceLoader, IndexSchema schema) {\n\n    final String mpfClassName;\n    final MergePolicyFactoryArgs mpfArgs;\n    if (mergePolicyFactoryInfo == null) {\n      mpfClassName = DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;\n      mpfArgs = new MergePolicyFactoryArgs();\n    } else {\n      mpfClassName = mergePolicyFactoryInfo.className;\n      mpfArgs = new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        mpfClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] { SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class },\n        new Object[] {resourceLoader, mpfArgs, schema });\n\n    return mpf.getMergePolicy();\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
