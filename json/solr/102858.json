[{"authorTime":"2017-03-13 19:25:50","codes":[{"authorDate":"2017-03-13 19:25:50","commitOrder":4,"curCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n    clearIndex();\n    commit();\n  }\n","date":"2017-03-13 19:26:29","endLine":265,"groupId":"53027","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reorderedDBQsSimpleTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/0ab9adeea9e179c57455b50d9f2305db1a83ce.src","preCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n    clearIndex();\n    commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"},{"authorDate":"2017-03-13 19:25:50","commitOrder":4,"curCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    \n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n    clearIndex();\n    commit();\n  }\n","date":"2017-03-13 19:26:29","endLine":666,"groupId":"30879","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"outOfOrderUpdatesIndividualReplicaTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/0ab9adeea9e179c57455b50d9f2305db1a83ce.src","preCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    \n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n    clearIndex();\n    commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"MB"}],"commitId":"d5181ec8e5bbc8932f606caaf281ff6913a1537d","commitMessage":"@@@SOLR-10079: Increasing threadpool termination to 15s.  clearIndex() to do clean replica indexes as well\n","date":"2017-03-13 19:26:29","modifiedFileCount":"1","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2017-03-29 09:09:40","codes":[{"authorDate":"2017-03-29 09:09:40","commitOrder":5,"curCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n  }\n","date":"2017-03-29 09:09:40","endLine":269,"groupId":"53027","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reorderedDBQsSimpleTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/f377cd9e3dbaab84bbb0e8b224fba78995b196.src","preCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n    clearIndex();\n    commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2017-03-29 09:09:40","commitOrder":5,"curCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n  }\n","date":"2017-03-29 09:09:40","endLine":669,"groupId":"30879","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"outOfOrderUpdatesIndividualReplicaTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/f377cd9e3dbaab84bbb0e8b224fba78995b196.src","preCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n    clearIndex();\n    commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"M"}],"commitId":"144091ad2957d59f83d59c7fcb1afeda65b0f914","commitMessage":"@@@SOLR-10079: TestInPlaceUpdates(Distrib|Standalone) failures\n","date":"2017-03-29 09:09:40","modifiedFileCount":"2","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-04-13 10:46:35","codes":[{"authorDate":"2020-04-13 10:46:35","commitOrder":6,"curCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new SolrNamedThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n  }\n","date":"2020-04-13 10:46:35","endLine":328,"groupId":"53027","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"reorderedDBQsSimpleTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/8aead206df58684b813f6d7d9833c7bc744f3f.src","preCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-04-13 10:46:35","commitOrder":6,"curCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new SolrNamedThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n  }\n","date":"2020-04-13 10:46:35","endLine":786,"groupId":"30879","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"outOfOrderUpdatesIndividualReplicaTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/8aead206df58684b813f6d7d9833c7bc744f3f.src","preCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new DefaultSolrThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":720,"status":"M"}],"commitId":"13f19f65559290a860df84fa1b5ac2db903b27ec","commitMessage":"@@@SOLR-9906: SolrjNamedThreadFactory is deprecated in favor of SolrNamedThreadFactory. DefaultSolrThreadFactory is removed from solr-core in favor of SolrNamedThreadFactory in solrj package and all solr-core classes now use SolrNamedThreadFactory\n","date":"2020-04-13 10:46:35","modifiedFileCount":"83","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2020-05-01 07:50:31","commitOrder":7,"curCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Issuing well ordered update: {}\", update.getDocuments());\n      }\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new SolrNamedThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n  }\n","date":"2020-05-01 07:50:31","endLine":330,"groupId":"102858","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"reorderedDBQsSimpleTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/31100e885a3fb07d8a51c2e82d65328357ddf3.src","preCode":"  private void reorderedDBQsSimpleTest() throws Exception {\n    \n    clearIndex();\n    commit();\n    \n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    updates.add(simulatedUpdateRequest(version0 + 1, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + 1, \"_version_\", version0 + 2)); \r\n    updates.add(simulatedDeleteRequest(0, version0 + 3));\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new SolrNamedThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, random());\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n    \n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      SolrDocument doc = client.getById(String.valueOf(0), params(\"distrib\", \"false\"));\n      assertNull(\"This doc was supposed to have been deleted, but was: \" + doc, doc);\n    }\n\n    log.info(\"reorderedDBQsSimpleTest: This test passed fine...\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-05-01 07:50:31","commitOrder":7,"curCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Issuing well ordered update: {}\", update.getDocuments());\n      }\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new SolrNamedThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      if (log.isInfoEnabled()) {\n        log.info(\"Testing client: {}\", ((HttpSolrClient) client).getBaseURL());\n      }\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n  }\n","date":"2020-05-01 07:50:31","endLine":792,"groupId":"102858","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"outOfOrderUpdatesIndividualReplicaTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/31100e885a3fb07d8a51c2e82d65328357ddf3.src","preCode":"  private void outOfOrderUpdatesIndividualReplicaTest() throws Exception {\n    clearIndex();\n    commit();\n\n    buildRandomIndex(0);\n\n    float inplace_updatable_float = 1;\n    \r\n    index(\"id\", 0, \"inplace_updatable_float\", map(\"set\", inplace_updatable_float));\n\n    LEADER.commit();\n    SolrDocument sdoc = LEADER.getById(\"0\");  \r\n    assertEquals(inplace_updatable_float, sdoc.get(\"inplace_updatable_float\"));\n    assertEquals(\"title0\", sdoc.get(\"title_s\"));\n    long version0 = (long) sdoc.get(\"_version_\");\n\n    \r\n    float newinplace_updatable_float = 100;\n    List<UpdateRequest> updates = new ArrayList<>();\n    updates.add(simulatedUpdateRequest(null, \"id\", 0, \"title_s\", \"title0_new\", \"inplace_updatable_float\", newinplace_updatable_float, \"_version_\", version0 + 1)); \r\n    for (int i=1; i<atLeast(3); i++) {\n      updates.add(simulatedUpdateRequest(version0 + i, \"id\", 0, \"inplace_updatable_float\", newinplace_updatable_float + i, \"_version_\", version0 + i + 1));\n    }\n\n    \r\n    for (UpdateRequest update : updates) {\n      log.info(\"Issuing well ordered update: \" + update.getDocuments());\n      NONLEADERS.get(1).request(update);\n    }\n\n    \r\n    \r\n    ExecutorService threadpool = \n        ExecutorUtil.newMDCAwareFixedThreadPool(updates.size() + 1, new SolrNamedThreadFactory(getTestName()));\n\n    \r\n    List<UpdateRequest> reorderedUpdates = new ArrayList<>(updates);\n    Collections.shuffle(reorderedUpdates, r);\n    List<Future<UpdateResponse>> updateResponses = new ArrayList<>();\n    for (UpdateRequest update : reorderedUpdates) {\n      AsyncUpdateWithRandomCommit task = new AsyncUpdateWithRandomCommit(update, NONLEADERS.get(0), random().nextLong());\n      updateResponses.add(threadpool.submit(task));\n      \r\n      \r\n      Thread.sleep(10);\n    }\n    \n    threadpool.shutdown();\n    assertTrue(\"Thread pool didn't terminate within 15 secs\", threadpool.awaitTermination(15, TimeUnit.SECONDS));\n\n    \r\n    for (Future<UpdateResponse> resp: updateResponses) {\n      assertEquals(0, resp.get().getStatus());\n    }\n\n    \r\n    for (SolrClient client : NONLEADERS) { \r\n      log.info(\"Testing client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"inplace_updatable_float\", (newinplace_updatable_float + (float)(updates.size() - 1)), \n          \"inplace_updatable_float didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertReplicaValue(client, 0, \"title_s\", \"title0_new\", \n          \"Title didn't match for replica at client: \" + ((HttpSolrClient)client).getBaseURL());\n      assertEquals(version0 + updates.size(), getReplicaValue(client, 0, \"_version_\"));\n    }\n\n    log.info(\"outOfOrderUpdatesIndividualReplicaTest: This test passed fine...\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"}]
