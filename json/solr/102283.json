[{"authorTime":"2015-12-07 06:41:55","codes":[{"authorDate":"2015-09-07 21:34:46","commitOrder":4,"curCode":"    protected Query newPrefixQuery(String text) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query prefix;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          SchemaField sf = schema.getField(field);\n          prefix = sf.getType().getPrefixQuery(qParser, sf, term);\n        } else {\n          \r\n          SchemaField sf = schema.getField(field);\n          prefix = type.getPrefixQuery(qParser, sf, text);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          prefix = new BoostQuery(prefix, boost);\n        }\n        bq.add(prefix, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","date":"2015-09-07 21:34:46","endLine":217,"groupId":"13290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newPrefixQuery","params":"(Stringtext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/59/60e4fa1f36ba2eb8c0672e28967d9117e1f8e9.src","preCode":"    protected Query newPrefixQuery(String text) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query prefix;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          SchemaField sf = schema.getField(field);\n          prefix = sf.getType().getPrefixQuery(qParser, sf, term);\n        } else {\n          \r\n          SchemaField sf = schema.getField(field);\n          prefix = type.getPrefixQuery(qParser, sf, text);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          prefix = new BoostQuery(prefix, boost);\n        }\n        bq.add(prefix, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"NB"},{"authorDate":"2015-12-07 06:41:55","commitOrder":4,"curCode":"    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          \r\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","date":"2015-12-07 06:41:55","endLine":249,"groupId":"283","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newFuzzyQuery","params":"(Stringtext@intfuzziness)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/97189e2d7c237e4ed74100a048306929588cb3.src","preCode":"    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          \r\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"B"}],"commitId":"ceb66d34c0a6f840ec195f6da85e323de5e9a04d","commitMessage":"@@@SOLR-8318: SimpleQueryParser doesn't use MultiTermAnalysis for Fuzzy Queries. Thanks Tom\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718233 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-07 06:41:55","modifiedFileCount":"2","status":"M","submitter":"Erick Erickson"},{"authorTime":"2016-07-01 01:04:11","codes":[{"authorDate":"2016-07-01 01:04:11","commitOrder":5,"curCode":"    protected Query newPrefixQuery(String text) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query prefix;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          SchemaField sf = schema.getField(field);\n          prefix = sf.getType().getPrefixQuery(qParser, sf, term);\n        } else {\n          \r\n          SchemaField sf = schema.getField(field);\n          prefix = type.getPrefixQuery(qParser, sf, text);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          prefix = new BoostQuery(prefix, boost);\n        }\n        bq.add(prefix, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","date":"2016-07-07 16:02:29","endLine":211,"groupId":"13290","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newPrefixQuery","params":"(Stringtext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/0098f8cbc0b9cf0dad20a31d2bd9978d5f212e.src","preCode":"    protected Query newPrefixQuery(String text) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query prefix;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          SchemaField sf = schema.getField(field);\n          prefix = sf.getType().getPrefixQuery(qParser, sf, term);\n        } else {\n          \r\n          SchemaField sf = schema.getField(field);\n          prefix = type.getPrefixQuery(qParser, sf, text);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          prefix = new BoostQuery(prefix, boost);\n        }\n        bq.add(prefix, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2016-07-01 01:04:11","commitOrder":5,"curCode":"    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          \r\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","date":"2016-07-07 16:02:29","endLine":240,"groupId":"283","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newFuzzyQuery","params":"(Stringtext@intfuzziness)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/0098f8cbc0b9cf0dad20a31d2bd9978d5f212e.src","preCode":"    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(true);\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          \r\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"f1528bf338f42ef0e10f6cf1333286eb05139acd","commitMessage":"@@@LUCENE-7369: Similarity.coord and BooleanQuery.disableCoord are removed.\n","date":"2016-07-07 16:02:29","modifiedFileCount":"70","status":"M","submitter":"Adrien Grand"},{"authorTime":"2020-01-06 21:54:18","codes":[{"authorDate":"2020-01-06 21:54:18","commitOrder":6,"curCode":"    protected Query newPrefixQuery(String text) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query prefix = null;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          BytesRef termBytes = TextField.analyzeMultiTerm(field, text, analyzer);\n          if (termBytes != null) {\n            String term = termBytes.utf8ToString();\n            SchemaField sf = schema.getField(field);\n            prefix = sf.getType().getPrefixQuery(qParser, sf, term);\n          }\n        } else {\n          \r\n          SchemaField sf = schema.getField(field);\n          prefix = type.getPrefixQuery(qParser, sf, text);\n        }\n        if (prefix != null) {\n          float boost = entry.getValue();\n          if (boost != 1f) {\n            prefix = new BoostQuery(prefix, boost);\n          }\n          bq.add(prefix, BooleanClause.Occur.SHOULD);\n        }\n      }\n\n      return simplify(bq.build());\n    }\n","date":"2020-01-10 22:47:00","endLine":216,"groupId":"102283","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"newPrefixQuery","params":"(Stringtext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/96308cc17781041f530ef493813e7c8050b241.src","preCode":"    protected Query newPrefixQuery(String text) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query prefix;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          SchemaField sf = schema.getField(field);\n          prefix = sf.getType().getPrefixQuery(qParser, sf, term);\n        } else {\n          \r\n          SchemaField sf = schema.getField(field);\n          prefix = type.getPrefixQuery(qParser, sf, text);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          prefix = new BoostQuery(prefix, boost);\n        }\n        bq.add(prefix, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-01-06 21:54:18","commitOrder":6,"curCode":"    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy = null;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          BytesRef termBytes = TextField.analyzeMultiTerm(field, text, analyzer);\n          if (termBytes != null) {\n            String term = termBytes.utf8ToString();\n            fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n          }\n        } else {\n          \r\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n        if (fuzzy != null) {\n          float boost = entry.getValue();\n          if (boost != 1f) {\n            fuzzy = new BoostQuery(fuzzy, boost);\n          }\n          bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n        }\n      }\n\n      return simplify(bq.build());\n    }\n","date":"2020-01-10 22:47:00","endLine":249,"groupId":"102283","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"newFuzzyQuery","params":"(Stringtext@intfuzziness)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/96308cc17781041f530ef493813e7c8050b241.src","preCode":"    protected Query newFuzzyQuery(String text, int fuzziness) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n      for (Map.Entry<String, Float> entry : weights.entrySet()) {\n        String field = entry.getKey();\n        FieldType type = schema.getFieldType(field);\n        Query fuzzy;\n\n        if (type instanceof TextField) {\n          \r\n          Analyzer analyzer = ((TextField)type).getMultiTermAnalyzer();\n          String term = TextField.analyzeMultiTerm(field, text, analyzer).utf8ToString();\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), term), fuzziness);\n        } else {\n          \r\n          fuzzy = new FuzzyQuery(new Term(entry.getKey(), text), fuzziness);\n        }\n\n        float boost = entry.getValue();\n        if (boost != 1f) {\n          fuzzy = new BoostQuery(fuzzy, boost);\n        }\n        bq.add(fuzzy, BooleanClause.Occur.SHOULD);\n      }\n\n      return simplify(bq.build());\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/SimpleQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"0b072ecedb93202a132612e72cd880fdcc51ea25","commitMessage":"@@@SOLR-6613: TextField.analyzeMultiTerm does not throw an exception when Analyzer returns no terms. (Bruno Roustant)\n\nCloses #1146\n","date":"2020-01-10 22:47:00","modifiedFileCount":"3","status":"M","submitter":"Bruno Roustant"}]
