[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":528,"groupId":"28103","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocValuesIntegration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/9ea952f6e27496597155605ce2dd009b5af1b3.src","preCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.LEGACY_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n       \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":332,"groupId":"28103","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValuesIntegration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/11/92f4b77c8a5ca7b3b081b3cbb831d5161eaa2c.src","preCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.LEGACY_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n       \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    assertEquals(0, binary.nextDoc());\n    final BytesRef term = binary.binaryValue();\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    assertEquals(0, binary.nextDoc());\n\n    BytesRef scratch = binary.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.nextDoc());\n    assertEquals(0, sorted.ordValue());\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":523,"groupId":"23115","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocValuesIntegration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/2c381f84ee2d3f02403e5f701ee19571254f48.src","preCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n       \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    ir.close();\n    dir.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":327,"groupId":"25242","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValuesIntegration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c047bcb3a10293e0e49cad7c003fe6f6ca2f01.src","preCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.LEGACY_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n       \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.LEGACY_INT_PARSER, false);\n    });\n    \n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2021-03-15 22:15:56","commitOrder":3,"curCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    assertEquals(0, binary.nextDoc());\n    final BytesRef term = binary.binaryValue();\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.nextDoc());\n    assertEquals(0, sorted.ordValue());\n    assertEquals(1, sorted.getValueCount());\n    BytesRef scratch = sorted.lookupOrd(sorted.ordValue());\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n","date":"2021-03-16 00:55:00","endLine":521,"groupId":"103328","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testDocValuesIntegration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/1c69c0ff1e4086335e41957a4d50a63822b232.src","preCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    assertEquals(0, binary.nextDoc());\n    final BytesRef term = binary.binaryValue();\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    assertEquals(0, binary.nextDoc());\n\n    BytesRef scratch = binary.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.nextDoc());\n    assertEquals(0, sorted.ordValue());\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":3,"curCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n       \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    ir.close();\n    dir.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":327,"groupId":"103328","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocValuesIntegration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c047bcb3a10293e0e49cad7c003fe6f6ca2f01.src","preCode":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    \r\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n       \n    \r\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.LEGACY_INT_PARSER);\n    });\n    \n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"5eefa79898f1ed65a7408745b32a85b4ec2efc89","commitMessage":"@@@SOLR-15261: SortedDocValues no longer extends BinaryDocValues.\n","date":"2021-03-16 00:55:00","modifiedFileCount":"15","status":"M","submitter":"Bruno Roustant"}]
