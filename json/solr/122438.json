[{"authorTime":"2021-04-08 18:51:04","codes":[{"authorDate":"2021-07-08 04:15:36","commitOrder":32,"curCode":"    public void call(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results)\n        throws Exception {\n      CollectionHandlingUtils.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP, PROPERTY_VALUE_PROP);\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n      propMap.putAll(message.getProperties());\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.ReplicaAddReplicaProperty, m,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        ccc.offerStateUpdate(Utils.toJSON(m));\n      }\n    }\n","date":"2021-07-08 04:15:36","endLine":236,"groupId":"26946","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"call","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedList<Object>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/00441a0a0998dab4855f9410e59ca58f6969c9.src","preCode":"    public void call(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results)\n        throws Exception {\n      CollectionHandlingUtils.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP, PROPERTY_VALUE_PROP);\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n      propMap.putAll(message.getProperties());\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.ReplicaAddReplicaProperty, m,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        ccc.offerStateUpdate(Utils.toJSON(m));\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollApiCmds.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"},{"authorDate":"2021-04-08 18:51:04","commitOrder":32,"curCode":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results) throws Exception {\n    final String asyncId = message.getStr(ASYNC);\n\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    \r\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t;\n    if (ccc.getCoreContainer().getNodeConfig().getMetricsConfig().isEnabled()) {\n      t = timings.sub(\"checkDiskSpace\");\n      checkDiskSpace(collectionName, slice.get(), parentShardLeader, splitMethod, ccc.getSolrCloudManager());\n      t.stop();\n    }\n\n    \r\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    \r\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      \r\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      \r\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      \r\n      if (!lockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName())) {\n        \r\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      @SuppressWarnings(\"deprecation\")\n      ShardHandler shardHandler = ccc.newShardHandler();\n\n\n      if (message.getBool(CommonAdminParams.SPLIT_BY_PREFIX, false)) {\n        t = timings.sub(\"getRanges\");\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n        params.set(CoreAdminParams.GET_RANGES, \"true\");\n        params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n        params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n        \r\n        \r\n        \r\n\n        {\n          final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n          shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n          SimpleOrderedMap<Object> getRangesResults = new SimpleOrderedMap<>();\n          String msgOnError = \"SPLITSHARD failed to invoke SPLIT.getRanges core admin command\";\n          shardRequestTracker.processResponses(getRangesResults, shardHandler, true, msgOnError);\n\n          \r\n          \r\n          NamedList successes = (NamedList)getRangesResults.get(\"success\");\n          if (successes != null && successes.size() > 0) {\n            NamedList shardRsp = (NamedList)successes.getVal(0);\n            String splits = (String)shardRsp.get(CoreAdminParams.RANGES);\n            if (splits != null) {\n              log.info(\"Resulting split ranges to be used: {} slice={} leader={}\", splits, slice, parentShardLeader);\n              \r\n              message = message.plus(CoreAdminParams.RANGES, splits);\n            }\n          }\n        }\n\n        t.stop();\n      }\n\n\n      t = timings.sub(\"fillRanges\");\n\n      String rangesStr = fillRanges(ccc.getSolrCloudManager(), message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            \r\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, DELETESHARD.toLower());\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              new DeleteShardCmd(ccc).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        \r\n        \r\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice {} of collection {} on {}\", subSlice, collectionName, nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, new ZkNodeProps(propMap),\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n        }\n\n        \r\n        clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, subSlice, ccc.getZkStateReader());\n\n        log.debug(\"Adding first replica {} as part of slice {} of collection {} on {}\"\n            , subShardName, subSlice, collectionName, nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard leaders\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        for (String subShardName : subShardNames) {\n          \r\n          log.debug(\"Asking parent leader to wait for: {} to be alive on: {}\", subShardName, nodeName);\n          String coreNodeName = CollectionHandlingUtils.waitForCoreNodeName(collectionName, nodeName, subShardName, ccc.getZkStateReader());\n          CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n          cmd.setCoreName(subShardName);\n          cmd.setNodeName(nodeName);\n          cmd.setCoreNodeName(coreNodeName);\n          cmd.setState(Replica.State.ACTIVE);\n          cmd.setCheckLive(true);\n          cmd.setOnlyIfLeader(true);\n\n          ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n          shardRequestTracker.sendShardRequest(nodeName, p, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD timed out waiting for subshard leaders to come up\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection {} parent shard: {} on: {}\"\n          , collectionName, slice, parentShardLeader);\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Splitting shard {} as part of slice {} of collection {} on {}\"\n            , parentShardLeader.getName(), slice, collectionName, parentShardLeader);\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n\n        String msgOnError = \"SPLITSHARD failed to invoke SPLIT core admin command\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n      }\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      \r\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n\n        for (int i = 0; i < subShardNames.size(); i++) {\n          String subShardName = subShardNames.get(i);\n\n          log.debug(\"Applying buffered updates on : {}\", subShardName);\n\n          params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n          params.set(CoreAdminParams.NAME, subShardName);\n\n          shardRequestTracker.sendShardRequest(nodeName, params, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD failed while asking sub shard leaders to apply buffered updates\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : {}\", subShardNames);\n\n      \r\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      \r\n      nodeList.remove(nodeName);\n\n      \r\n\n      \r\n      \r\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategy assignStrategy = Assign.createAssignStrategy(\n          ccc.getCoreContainer(),\n          clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ccc.getSolrCloudManager(), assignRequest);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      final DistributedClusterStateUpdater.StateChangeRecorder scr;\n      boolean hasRecordedDistributedUpdate = false;\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        scr = ccc.getDistributedClusterStateUpdater().createStateChangeRecorder(collectionName, false);\n      } else {\n        scr = null;\n      }\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard {} as part of slice {} of collection {} on {}\"\n            , solrCoreName, sliceName, collectionName, subShardNodeName);\n\n        \r\n        \r\n        \r\n        \r\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          hasRecordedDistributedUpdate = true;\n          scr.record(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props);\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        }\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        \r\n        propMap.put(CollectionHandlingUtils.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      if (hasRecordedDistributedUpdate && ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        \r\n        \r\n        \r\n        scr.executeStateUpdates(ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      \r\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        \r\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n\n        if (leaderZnodeStat == null)  {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      \r\n      \r\n      \r\n\n      if (repFactor == 1) {\n        \r\n        \r\n        \r\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n        \r\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      \r\n      for (Map<String, Object> replica : replicas) {\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard replicas\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices {}\", subSlices);\n\n      \r\n      \r\n      if (repFactor > 1) {\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n      }\n\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      \r\n      \r\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: {} parent shard: {}\", collectionName, slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName());\n      }\n    }\n  }\n","date":"2021-04-08 18:51:04","endLine":637,"groupId":"14455","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"split","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedList<Object>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dc/db5ec9e5ea75eaef6316a37fd650d588ccaf78.src","preCode":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results) throws Exception {\n    final String asyncId = message.getStr(ASYNC);\n\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    \r\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t;\n    if (ccc.getCoreContainer().getNodeConfig().getMetricsConfig().isEnabled()) {\n      t = timings.sub(\"checkDiskSpace\");\n      checkDiskSpace(collectionName, slice.get(), parentShardLeader, splitMethod, ccc.getSolrCloudManager());\n      t.stop();\n    }\n\n    \r\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    \r\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      \r\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      \r\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      \r\n      if (!lockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName())) {\n        \r\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      @SuppressWarnings(\"deprecation\")\n      ShardHandler shardHandler = ccc.newShardHandler();\n\n\n      if (message.getBool(CommonAdminParams.SPLIT_BY_PREFIX, false)) {\n        t = timings.sub(\"getRanges\");\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n        params.set(CoreAdminParams.GET_RANGES, \"true\");\n        params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n        params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n        \r\n        \r\n        \r\n\n        {\n          final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n          shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n          SimpleOrderedMap<Object> getRangesResults = new SimpleOrderedMap<>();\n          String msgOnError = \"SPLITSHARD failed to invoke SPLIT.getRanges core admin command\";\n          shardRequestTracker.processResponses(getRangesResults, shardHandler, true, msgOnError);\n\n          \r\n          \r\n          NamedList successes = (NamedList)getRangesResults.get(\"success\");\n          if (successes != null && successes.size() > 0) {\n            NamedList shardRsp = (NamedList)successes.getVal(0);\n            String splits = (String)shardRsp.get(CoreAdminParams.RANGES);\n            if (splits != null) {\n              log.info(\"Resulting split ranges to be used: {} slice={} leader={}\", splits, slice, parentShardLeader);\n              \r\n              message = message.plus(CoreAdminParams.RANGES, splits);\n            }\n          }\n        }\n\n        t.stop();\n      }\n\n\n      t = timings.sub(\"fillRanges\");\n\n      String rangesStr = fillRanges(ccc.getSolrCloudManager(), message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            \r\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, DELETESHARD.toLower());\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              new DeleteShardCmd(ccc).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        \r\n        \r\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice {} of collection {} on {}\", subSlice, collectionName, nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, new ZkNodeProps(propMap),\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n        }\n\n        \r\n        clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, subSlice, ccc.getZkStateReader());\n\n        log.debug(\"Adding first replica {} as part of slice {} of collection {} on {}\"\n            , subShardName, subSlice, collectionName, nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard leaders\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        for (String subShardName : subShardNames) {\n          \r\n          log.debug(\"Asking parent leader to wait for: {} to be alive on: {}\", subShardName, nodeName);\n          String coreNodeName = CollectionHandlingUtils.waitForCoreNodeName(collectionName, nodeName, subShardName, ccc.getZkStateReader());\n          CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n          cmd.setCoreName(subShardName);\n          cmd.setNodeName(nodeName);\n          cmd.setCoreNodeName(coreNodeName);\n          cmd.setState(Replica.State.ACTIVE);\n          cmd.setCheckLive(true);\n          cmd.setOnlyIfLeader(true);\n\n          ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n          shardRequestTracker.sendShardRequest(nodeName, p, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD timed out waiting for subshard leaders to come up\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection {} parent shard: {} on: {}\"\n          , collectionName, slice, parentShardLeader);\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Splitting shard {} as part of slice {} of collection {} on {}\"\n            , parentShardLeader.getName(), slice, collectionName, parentShardLeader);\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n\n        String msgOnError = \"SPLITSHARD failed to invoke SPLIT core admin command\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n      }\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      \r\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n\n        for (int i = 0; i < subShardNames.size(); i++) {\n          String subShardName = subShardNames.get(i);\n\n          log.debug(\"Applying buffered updates on : {}\", subShardName);\n\n          params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n          params.set(CoreAdminParams.NAME, subShardName);\n\n          shardRequestTracker.sendShardRequest(nodeName, params, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD failed while asking sub shard leaders to apply buffered updates\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : {}\", subShardNames);\n\n      \r\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      \r\n      nodeList.remove(nodeName);\n\n      \r\n\n      \r\n      \r\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategy assignStrategy = Assign.createAssignStrategy(\n          ccc.getCoreContainer(),\n          clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ccc.getSolrCloudManager(), assignRequest);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      final DistributedClusterStateUpdater.StateChangeRecorder scr;\n      boolean hasRecordedDistributedUpdate = false;\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        scr = ccc.getDistributedClusterStateUpdater().createStateChangeRecorder(collectionName, false);\n      } else {\n        scr = null;\n      }\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard {} as part of slice {} of collection {} on {}\"\n            , solrCoreName, sliceName, collectionName, subShardNodeName);\n\n        \r\n        \r\n        \r\n        \r\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          hasRecordedDistributedUpdate = true;\n          scr.record(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props);\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        }\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        \r\n        propMap.put(CollectionHandlingUtils.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      if (hasRecordedDistributedUpdate && ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        \r\n        \r\n        \r\n        scr.executeStateUpdates(ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      \r\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        \r\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n\n        if (leaderZnodeStat == null)  {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      \r\n      \r\n      \r\n\n      if (repFactor == 1) {\n        \r\n        \r\n        \r\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n        \r\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      \r\n      for (Map<String, Object> replica : replicas) {\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard replicas\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices {}\", subSlices);\n\n      \r\n      \r\n      if (repFactor > 1) {\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n      }\n\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      \r\n      \r\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: {} parent shard: {}\", collectionName, slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName());\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-07-08 04:15:36","commitOrder":33,"curCode":"    public void call(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results)\n        throws Exception {\n      CollectionHandlingUtils.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP, PROPERTY_VALUE_PROP);\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n      propMap.putAll(message.getProperties());\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.ReplicaAddReplicaProperty, m,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        ccc.offerStateUpdate(Utils.toJSON(m));\n      }\n    }\n","date":"2021-07-08 04:15:36","endLine":236,"groupId":"122438","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"call","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedList<Object>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/00441a0a0998dab4855f9410e59ca58f6969c9.src","preCode":"    public void call(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results)\n        throws Exception {\n      CollectionHandlingUtils.checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP, PROPERTY_VALUE_PROP);\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());\n      propMap.putAll(message.getProperties());\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.ReplicaAddReplicaProperty, m,\n            ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      } else {\n        ccc.offerStateUpdate(Utils.toJSON(m));\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollApiCmds.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"},{"authorDate":"2021-07-13 23:49:56","commitOrder":33,"curCode":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results) throws Exception {\n    final String asyncId = message.getStr(ASYNC);\n\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    \r\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t;\n    if (ccc.getCoreContainer().getNodeConfig().getMetricsConfig().isEnabled()) {\n      t = timings.sub(\"checkDiskSpace\");\n      checkDiskSpace(collectionName, slice.get(), parentShardLeader, splitMethod, ccc.getSolrCloudManager());\n      t.stop();\n    }\n\n    \r\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    \r\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      \r\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      \r\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      \r\n      if (!lockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName())) {\n        \r\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      ShardHandler shardHandler = ccc.newShardHandler();\n\n\n      if (message.getBool(CommonAdminParams.SPLIT_BY_PREFIX, false)) {\n        t = timings.sub(\"getRanges\");\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n        params.set(CoreAdminParams.GET_RANGES, \"true\");\n        params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n        params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n        \r\n        \r\n        \r\n\n        {\n          final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n          shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n          SimpleOrderedMap<Object> getRangesResults = new SimpleOrderedMap<>();\n          String msgOnError = \"SPLITSHARD failed to invoke SPLIT.getRanges core admin command\";\n          shardRequestTracker.processResponses(getRangesResults, shardHandler, true, msgOnError);\n\n          \r\n          \r\n          NamedList<?> successes = (NamedList<?>)getRangesResults.get(\"success\");\n          if (successes != null && successes.size() > 0) {\n            NamedList<?> shardRsp = (NamedList<?>)successes.getVal(0);\n            String splits = (String)shardRsp.get(CoreAdminParams.RANGES);\n            if (splits != null) {\n              log.info(\"Resulting split ranges to be used: {} slice={} leader={}\", splits, slice, parentShardLeader);\n              \r\n              message = message.plus(CoreAdminParams.RANGES, splits);\n            }\n          }\n        }\n\n        t.stop();\n      }\n\n\n      t = timings.sub(\"fillRanges\");\n\n      String rangesStr = fillRanges(ccc.getSolrCloudManager(), message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            \r\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, DELETESHARD.toLower());\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              new DeleteShardCmd(ccc).call(clusterState, m, new NamedList<>());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        \r\n        \r\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice {} of collection {} on {}\", subSlice, collectionName, nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, new ZkNodeProps(propMap),\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n        }\n\n        \r\n        clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, subSlice, ccc.getZkStateReader());\n\n        log.debug(\"Adding first replica {} as part of slice {} of collection {} on {}\"\n            , subShardName, subSlice, collectionName, nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard leaders\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        for (String subShardName : subShardNames) {\n          \r\n          log.debug(\"Asking parent leader to wait for: {} to be alive on: {}\", subShardName, nodeName);\n          String coreNodeName = CollectionHandlingUtils.waitForCoreNodeName(collectionName, nodeName, subShardName, ccc.getZkStateReader());\n          CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n          cmd.setCoreName(subShardName);\n          cmd.setNodeName(nodeName);\n          cmd.setCoreNodeName(coreNodeName);\n          cmd.setState(Replica.State.ACTIVE);\n          cmd.setCheckLive(true);\n          cmd.setOnlyIfLeader(true);\n\n          ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n          shardRequestTracker.sendShardRequest(nodeName, p, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD timed out waiting for subshard leaders to come up\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection {} parent shard: {} on: {}\"\n          , collectionName, slice, parentShardLeader);\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Splitting shard {} as part of slice {} of collection {} on {}\"\n            , parentShardLeader.getName(), slice, collectionName, parentShardLeader);\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n\n        String msgOnError = \"SPLITSHARD failed to invoke SPLIT core admin command\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n      }\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      \r\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n\n        for (int i = 0; i < subShardNames.size(); i++) {\n          String subShardName = subShardNames.get(i);\n\n          log.debug(\"Applying buffered updates on : {}\", subShardName);\n\n          params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n          params.set(CoreAdminParams.NAME, subShardName);\n\n          shardRequestTracker.sendShardRequest(nodeName, params, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD failed while asking sub shard leaders to apply buffered updates\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : {}\", subShardNames);\n\n      \r\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      \r\n      nodeList.remove(nodeName);\n\n      \r\n\n      \r\n      \r\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategy assignStrategy = Assign.createAssignStrategy(\n          ccc.getCoreContainer(),\n          clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ccc.getSolrCloudManager(), assignRequest);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      final DistributedClusterStateUpdater.StateChangeRecorder scr;\n      boolean hasRecordedDistributedUpdate = false;\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        scr = ccc.getDistributedClusterStateUpdater().createStateChangeRecorder(collectionName, false);\n      } else {\n        scr = null;\n      }\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard {} as part of slice {} of collection {} on {}\"\n            , solrCoreName, sliceName, collectionName, subShardNodeName);\n\n        \r\n        \r\n        \r\n        \r\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          hasRecordedDistributedUpdate = true;\n          scr.record(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props);\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        }\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        \r\n        propMap.put(CollectionHandlingUtils.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      if (hasRecordedDistributedUpdate && ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        \r\n        \r\n        \r\n        scr.executeStateUpdates(ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      \r\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        \r\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n\n        if (leaderZnodeStat == null)  {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      \r\n      \r\n      \r\n\n      if (repFactor == 1) {\n        \r\n        \r\n        \r\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n        \r\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      \r\n      for (Map<String, Object> replica : replicas) {\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard replicas\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices {}\", subSlices);\n\n      \r\n      \r\n      if (repFactor > 1) {\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n      }\n\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      \r\n      \r\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: {} parent shard: {}\", collectionName, slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName());\n      }\n    }\n  }\n","date":"2021-07-13 23:49:56","endLine":634,"groupId":"122438","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"split","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedList<Object>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/2167a4c6a68e17368f40649cd2c1e94d5546a1.src","preCode":"  public boolean split(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results) throws Exception {\n    final String asyncId = message.getStr(ASYNC);\n\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n    String methodStr = message.getStr(CommonAdminParams.SPLIT_METHOD, SolrIndexSplitter.SplitMethod.REWRITE.toLower());\n    SolrIndexSplitter.SplitMethod splitMethod = SolrIndexSplitter.SplitMethod.get(methodStr);\n    if (splitMethod == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown value '\" + CommonAdminParams.SPLIT_METHOD +\n          \": \" + methodStr);\n    }\n    boolean withTiming = message.getBool(CommonParams.TIMING, false);\n\n    String extCollectionName = message.getStr(CoreAdminParams.COLLECTION);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.debug(\"Split shard invoked: {}\", message);\n    ZkStateReader zkStateReader = ccc.getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    AtomicReference<String> slice = new AtomicReference<>();\n    slice.set(message.getStr(ZkStateReader.SHARD_ID_PROP));\n    Set<String> offlineSlices = new HashSet<>();\n    RTimerTree timings = new RTimerTree();\n\n    String splitKey = message.getStr(\"split.key\");\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n\n    Slice parentSlice = getParentSlice(clusterState, collectionName, slice, splitKey);\n    if (parentSlice.getState() != Slice.State.ACTIVE) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Parent slice is not active: \" +\n          collectionName + \"/ \" + parentSlice.getName() + \", state=\" + parentSlice.getState());\n    }\n\n    \r\n    Replica parentShardLeader;\n    try {\n      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice.get(), 10000);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted.\");\n    }\n\n    RTimerTree t;\n    if (ccc.getCoreContainer().getNodeConfig().getMetricsConfig().isEnabled()) {\n      t = timings.sub(\"checkDiskSpace\");\n      checkDiskSpace(collectionName, slice.get(), parentShardLeader, splitMethod, ccc.getSolrCloudManager());\n      t.stop();\n    }\n\n    \r\n    Stat leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n    if (leaderZnodeStat == null)  {\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n    }\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<String> subSlices = new ArrayList<>();\n    List<String> subShardNames = new ArrayList<>();\n\n    \r\n    AtomicInteger numNrt = new AtomicInteger();\n    AtomicInteger numTlog = new AtomicInteger();\n    AtomicInteger numPull = new AtomicInteger();\n    parentSlice.getReplicas().forEach(r -> {\n      switch (r.getType()) {\n        case NRT:\n          numNrt.incrementAndGet();\n          break;\n        case TLOG:\n          numTlog.incrementAndGet();\n          break;\n        case PULL:\n          numPull.incrementAndGet();\n      }\n    });\n    int repFactor = numNrt.get() + numTlog.get() + numPull.get();\n\n    boolean success = false;\n    try {\n      \r\n      boolean firstNrtReplica = parentShardLeader.getType() == Replica.Type.NRT;\n      \r\n      if ((firstNrtReplica && numNrt.get() < 1) || (!firstNrtReplica && numTlog.get() < 1)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"aborting split - inconsistent replica types in collection \" + collectionName +\n            \": nrt=\" + numNrt.get() + \", tlog=\" + numTlog.get() + \", pull=\" + numPull.get() + \", shard leader type is \" +\n            parentShardLeader.getType());\n      }\n\n      \r\n      if (!lockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName())) {\n        \r\n        success = true;\n        throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Can't lock parent slice for splitting (another split operation running?): \" +\n            collectionName + \"/\" + parentSlice.getName());\n      }\n\n      List<Map<String, Object>> replicas = new ArrayList<>((repFactor - 1) * 2);\n\n      @SuppressWarnings(\"deprecation\")\n      ShardHandler shardHandler = ccc.newShardHandler();\n\n\n      if (message.getBool(CommonAdminParams.SPLIT_BY_PREFIX, false)) {\n        t = timings.sub(\"getRanges\");\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n        params.set(CoreAdminParams.GET_RANGES, \"true\");\n        params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n        params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n        \r\n        \r\n        \r\n\n        {\n          final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n          shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n          SimpleOrderedMap<Object> getRangesResults = new SimpleOrderedMap<>();\n          String msgOnError = \"SPLITSHARD failed to invoke SPLIT.getRanges core admin command\";\n          shardRequestTracker.processResponses(getRangesResults, shardHandler, true, msgOnError);\n\n          \r\n          \r\n          NamedList successes = (NamedList)getRangesResults.get(\"success\");\n          if (successes != null && successes.size() > 0) {\n            NamedList shardRsp = (NamedList)successes.getVal(0);\n            String splits = (String)shardRsp.get(CoreAdminParams.RANGES);\n            if (splits != null) {\n              log.info(\"Resulting split ranges to be used: {} slice={} leader={}\", splits, slice, parentShardLeader);\n              \r\n              message = message.plus(CoreAdminParams.RANGES, splits);\n            }\n          }\n        }\n\n        t.stop();\n      }\n\n\n      t = timings.sub(\"fillRanges\");\n\n      String rangesStr = fillRanges(ccc.getSolrCloudManager(), message, collection, parentSlice, subRanges, subSlices, subShardNames, firstNrtReplica);\n      t.stop();\n\n      boolean oldShardsDeleted = false;\n      for (String subSlice : subSlices) {\n        Slice oSlice = collection.getSlice(subSlice);\n        if (oSlice != null) {\n          final Slice.State state = oSlice.getState();\n          if (state == Slice.State.ACTIVE) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Sub-shard: \" + subSlice + \" exists in active state. Aborting split shard.\");\n          } else {\n            \r\n            log.info(\"Sub-shard: {} already exists therefore requesting its deletion\", subSlice);\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, DELETESHARD.toLower());\n            propMap.put(COLLECTION_PROP, collectionName);\n            propMap.put(SHARD_ID_PROP, subSlice);\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            try {\n              new DeleteShardCmd(ccc).call(clusterState, m, new NamedList());\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n                  e);\n            }\n\n            oldShardsDeleted = true;\n          }\n        }\n      }\n\n      if (oldShardsDeleted) {\n        \r\n        \r\n        clusterState = zkStateReader.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n      }\n\n      String nodeName = parentShardLeader.getNodeName();\n\n      t = timings.sub(\"createSubSlicesAndLeadersInState\");\n      for (int i = 0; i < subRanges.size(); i++) {\n        String subSlice = subSlices.get(i);\n        String subShardName = subShardNames.get(i);\n        DocRouter.Range subRange = subRanges.get(i);\n\n        log.debug(\"Creating slice {} of collection {} on {}\", subSlice, collectionName, nodeName);\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD.toLower());\n        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());\n        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.State.CONSTRUCTION.toString());\n        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());\n        propMap.put(\"shard_parent_node\", nodeName);\n        propMap.put(\"shard_parent_zk_session\", leaderZnodeStat.getEphemeralOwner());\n\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, new ZkNodeProps(propMap),\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(new ZkNodeProps(propMap)));\n        }\n\n        \r\n        clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, subSlice, ccc.getZkStateReader());\n\n        log.debug(\"Adding first replica {} as part of slice {} of collection {} on {}\"\n            , subShardName, subSlice, collectionName, nodeName);\n        propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, subSlice);\n        propMap.put(REPLICA_TYPE, firstNrtReplica ? Replica.Type.NRT.toString() : Replica.Type.TLOG.toString());\n        propMap.put(\"node\", nodeName);\n        propMap.put(CoreAdminParams.NAME, subShardName);\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), results, null);\n      }\n\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard leaders\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n      t = timings.sub(\"waitForSubSliceLeadersAlive\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        for (String subShardName : subShardNames) {\n          \r\n          log.debug(\"Asking parent leader to wait for: {} to be alive on: {}\", subShardName, nodeName);\n          String coreNodeName = CollectionHandlingUtils.waitForCoreNodeName(collectionName, nodeName, subShardName, ccc.getZkStateReader());\n          CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n          cmd.setCoreName(subShardName);\n          cmd.setNodeName(nodeName);\n          cmd.setCoreNodeName(coreNodeName);\n          cmd.setState(Replica.State.ACTIVE);\n          cmd.setCheckLive(true);\n          cmd.setOnlyIfLeader(true);\n\n          ModifiableSolrParams p = new ModifiableSolrParams(cmd.getParams());\n          shardRequestTracker.sendShardRequest(nodeName, p, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD timed out waiting for subshard leaders to come up\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully created all sub-shards for collection {} parent shard: {} on: {}\"\n          , collectionName, slice, parentShardLeader);\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Splitting shard {} as part of slice {} of collection {} on {}\"\n            , parentShardLeader.getName(), slice, collectionName, parentShardLeader);\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n      params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());\n      params.set(CoreAdminParams.CORE, parentShardLeader.getStr(\"core\"));\n      for (int i = 0; i < subShardNames.size(); i++) {\n        String subShardName = subShardNames.get(i);\n        params.add(CoreAdminParams.TARGET_CORE, subShardName);\n      }\n      params.set(CoreAdminParams.RANGES, rangesStr);\n\n      t = timings.sub(\"splitParentCore\");\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n        shardRequestTracker.sendShardRequest(parentShardLeader.getNodeName(), params, shardHandler);\n\n        String msgOnError = \"SPLITSHARD failed to invoke SPLIT core admin command\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"Index on shard: {} split into {} successfully\", nodeName, subShardNames.size());\n      }\n\n      t = timings.sub(\"applyBufferedUpdates\");\n      \r\n      {\n        final ShardRequestTracker shardRequestTracker = CollectionHandlingUtils.asyncRequestTracker(asyncId, ccc);\n\n        for (int i = 0; i < subShardNames.size(); i++) {\n          String subShardName = subShardNames.get(i);\n\n          log.debug(\"Applying buffered updates on : {}\", subShardName);\n\n          params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n          params.set(CoreAdminParams.NAME, subShardName);\n\n          shardRequestTracker.sendShardRequest(nodeName, params, shardHandler);\n        }\n\n        String msgOnError = \"SPLITSHARD failed while asking sub shard leaders to apply buffered updates\";\n        shardRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.debug(\"Successfully applied buffered updates on : {}\", subShardNames);\n\n      \r\n\n      Set<String> nodes = clusterState.getLiveNodes();\n      List<String> nodeList = new ArrayList<>(nodes.size());\n      nodeList.addAll(nodes);\n\n      \r\n      nodeList.remove(nodeName);\n\n      \r\n\n      \r\n      \r\n      if (firstNrtReplica) {\n        numNrt.decrementAndGet();\n      } else {\n        numTlog.decrementAndGet();\n      }\n\n      t = timings.sub(\"identifyNodesForReplicas\");\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(subSlices)\n          .assignNrtReplicas(numNrt.get())\n          .assignTlogReplicas(numTlog.get())\n          .assignPullReplicas(numPull.get())\n          .onNodes(new ArrayList<>(clusterState.getLiveNodes()))\n          .build();\n      Assign.AssignStrategy assignStrategy = Assign.createAssignStrategy(\n          ccc.getCoreContainer(),\n          clusterState, collection);\n      List<ReplicaPosition> replicaPositions = assignStrategy.assign(ccc.getSolrCloudManager(), assignRequest);\n      t.stop();\n\n      t = timings.sub(\"createReplicaPlaceholders\");\n      final DistributedClusterStateUpdater.StateChangeRecorder scr;\n      boolean hasRecordedDistributedUpdate = false;\n      if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        scr = ccc.getDistributedClusterStateUpdater().createStateChangeRecorder(collectionName, false);\n      } else {\n        scr = null;\n      }\n      for (ReplicaPosition replicaPosition : replicaPositions) {\n        String sliceName = replicaPosition.shard;\n        String subShardNodeName = replicaPosition.node;\n        String solrCoreName = Assign.buildSolrCoreName(collectionName, sliceName, replicaPosition.type, replicaPosition.index);\n\n        log.debug(\"Creating replica shard {} as part of slice {} of collection {} on {}\"\n            , solrCoreName, sliceName, collectionName, subShardNodeName);\n\n        \r\n        \r\n        \r\n        \r\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collectionName,\n            ZkStateReader.SHARD_ID_PROP, sliceName,\n            ZkStateReader.CORE_NAME_PROP, solrCoreName,\n            ZkStateReader.REPLICA_TYPE, replicaPosition.type.name(),\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.NODE_NAME_PROP, subShardNodeName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          hasRecordedDistributedUpdate = true;\n          scr.record(DistributedClusterStateUpdater.MutatingCommand.SliceAddReplica, props);\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(props));\n        }\n\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n        propMap.put(COLLECTION_PROP, collectionName);\n        propMap.put(SHARD_ID_PROP, sliceName);\n        propMap.put(REPLICA_TYPE, replicaPosition.type.name());\n        propMap.put(\"node\", subShardNodeName);\n        propMap.put(CoreAdminParams.NAME, solrCoreName);\n        \r\n        for (String key : message.keySet()) {\n          if (key.startsWith(CollectionAdminParams.PROPERTY_PREFIX)) {\n            propMap.put(key, message.getStr(key));\n          }\n        }\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        \r\n        propMap.put(CollectionHandlingUtils.SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, \"true\");\n\n        propMap.put(CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n        replicas.add(propMap);\n      }\n      if (hasRecordedDistributedUpdate && ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n        \r\n        \r\n        \r\n        scr.executeStateUpdates(ccc.getSolrCloudManager(), ccc.getZkStateReader());\n      }\n      t.stop();\n      assert TestInjection.injectSplitFailureBeforeReplicaCreation();\n\n      long ephemeralOwner = leaderZnodeStat.getEphemeralOwner();\n      \r\n      leaderZnodeStat = zkStateReader.getZkClient().exists(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + parentShardLeader.getNodeName(), null, true);\n      if (leaderZnodeStat == null || ephemeralOwner != leaderZnodeStat.getEphemeralOwner()) {\n        \r\n\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY_FAILED.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n\n        if (leaderZnodeStat == null)  {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"The shard leader node: \" + parentShardLeader.getNodeName() + \" is not live anymore!\");\n        } else {\n          \r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"The zk session id for the shard leader node: \" + parentShardLeader.getNodeName() + \" has changed from \"\n                  + ephemeralOwner + \" to \" + leaderZnodeStat.getEphemeralOwner() + \". This can cause data loss so we must abort the split\");\n        }\n      }\n\n      \r\n      \r\n      \r\n\n      if (repFactor == 1) {\n        \r\n        \r\n        \r\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n        \r\n        log.info(\"Replication factor is 1 so switching shard states\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        propMap.put(slice.get(), Slice.State.INACTIVE.toString());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.ACTIVE.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      } else {\n        log.info(\"Requesting shard state be set to 'recovery'\");\n        Map<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n        for (String subSlice : subSlices) {\n          propMap.put(subSlice, Slice.State.RECOVERY.toString());\n        }\n        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n        ZkNodeProps m = new ZkNodeProps(propMap);\n        if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n          ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.SliceUpdateShardState, m,\n              ccc.getSolrCloudManager(), ccc.getZkStateReader());\n        } else {\n          ccc.offerStateUpdate(Utils.toJSON(m));\n        }\n      }\n\n      t = timings.sub(\"createCoresForReplicas\");\n      \r\n      for (Map<String, Object> replica : replicas) {\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(replica), results, null);\n      }\n\n      assert TestInjection.injectSplitFailureAfterReplicaCreation();\n\n      {\n        final ShardRequestTracker syncRequestTracker = CollectionHandlingUtils.syncRequestTracker(ccc);\n        String msgOnError = \"SPLITSHARD failed to create subshard replicas\";\n        syncRequestTracker.processResponses(results, shardHandler, true, msgOnError);\n        handleFailureOnAsyncRequest(results, msgOnError);\n      }\n      t.stop();\n\n      log.info(\"Successfully created all replica shards for all sub-slices {}\", subSlices);\n\n      \r\n      \r\n      if (repFactor > 1) {\n        t = timings.sub(\"finalCommit\");\n        CollectionHandlingUtils.commit(results, slice.get(), parentShardLeader);\n        t.stop();\n      }\n\n      if (withTiming) {\n        results.add(CommonParams.TIMING, timings.asNamedList());\n      }\n      success = true;\n      \r\n      \r\n      return true;\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      log.error(\"Error executing split operation for collection: {} parent shard: {}\", collectionName, slice, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, null, e);\n    } finally {\n      if (!success) {\n        cleanupAfterFailure(zkStateReader, collectionName, parentSlice.getName(), subSlices, offlineSlices);\n        unlockForSplit(ccc.getSolrCloudManager(), collectionName, parentSlice.getName());\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
