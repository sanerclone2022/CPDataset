[{"authorTime":"2019-06-18 00:59:43","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":3,"curCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1).process(client);\n      \n    client.waitForState(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n   \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(client);\n\n    assertTrue(\"DocCollectionWatcher not notified of delete call\", future.get());\n  }\n","date":"2019-06-18 00:59:43","endLine":264,"groupId":"24698","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletionsTriggerWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/24a1c929c47e061b241a2536395e4a77cec598.src","preCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1).process(client);\n      \n    client.waitForState(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n   \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(client);\n\n    assertTrue(\"DocCollectionWatcher not notified of delete call\", future.get());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"},{"authorDate":"2019-06-18 00:59:43","commitOrder":3,"curCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1)\n      .process(cluster.getSolrClient());\n    \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (l, c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(cluster.getSolrClient());\n\n    assertTrue(\"CollectionStateWatcher not notified of delete call\", future.get());\n  }\n","date":"2019-06-18 00:59:43","endLine":310,"groupId":"57244","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletionsTriggerWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f9/7b537e64883c945844f08e3dd57dedafd207cc.src","preCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1)\n      .process(cluster.getSolrClient());\n    \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (l, c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(cluster.getSolrClient());\n\n    assertTrue(\"CollectionStateWatcher not notified of delete call\", future.get());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"MB"}],"commitId":"5a974860fa83408a86ca64b417f3111b037da7eb","commitMessage":"@@@SOLR-13490: Fix CollectionStateWatcher/CollectionStatePredicate based APIs in ZkStateReader and CloudSolrClient to be triggered on liveNode changes.\n\nAlso add Predicate<DocCollection> equivilents for callers that don't care about liveNodes.\n","date":"2019-06-18 00:59:43","modifiedFileCount":"15","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":4,"curCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1).process(client);\n      \n    client.waitForState(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n   \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(client);\n\n    assertTrue(\"DocCollectionWatcher not notified of delete call\", future.get());\n  }\n","date":"2019-06-18 00:59:43","endLine":264,"groupId":"10400","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeletionsTriggerWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/24a1c929c47e061b241a2536395e4a77cec598.src","preCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    final CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1).process(client);\n      \n    client.waitForState(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n   \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(client);\n\n    assertTrue(\"DocCollectionWatcher not notified of delete call\", future.get());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"N"},{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (l, c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(cluster.getSolrClient());\n\n    assertTrue(\"CollectionStateWatcher not notified of delete call\", future.get());\n  }\n","date":"2021-01-18 23:59:41","endLine":319,"groupId":"10400","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeletionsTriggerWatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/eae27b05c2869601c305c17d036f1058236bd1.src","preCode":"  public void testDeletionsTriggerWatches() throws Exception {\n    CollectionAdminRequest.createCollection(\"tobedeleted\", \"config\", 1, 1)\n      .process(cluster.getSolrClient());\n    \n    Future<Boolean> future = waitInBackground(\"tobedeleted\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (l, c) -> c == null);\n\n    CollectionAdminRequest.deleteCollection(\"tobedeleted\").process(cluster.getSolrClient());\n\n    assertTrue(\"CollectionStateWatcher not notified of delete call\", future.get());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
