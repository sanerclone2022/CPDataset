[{"authorTime":"2015-07-04 00:32:07","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"NB"},{"authorDate":"2015-07-04 00:32:07","commitOrder":2,"curCode":"  private void testExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"An exception has occurred on the server, refer to server log for details.\"));\n\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","date":"2015-07-04 00:32:07","endLine":550,"groupId":"20311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/a86103d081bf0887a46d7a57f8435785d44b71.src","preCode":"  private void testExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"An exception has occurred on the server, refer to server log for details.\"));\n\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"B"}],"commitId":"a4e7ab3796c30d9f0d3eea7553b89de32902df27","commitMessage":"@@@SOLR-7441.  SOLR-7647: Improve overall robustness of the Streaming stack: Streaming API.  Streaming Expressions.  Parallel SQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689045 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-04 00:32:07","modifiedFileCount":"9","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-22 04:28:35","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":3,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"},{"authorDate":"2015-07-22 04:28:35","commitOrder":3,"curCode":"  private void testExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","date":"2015-07-22 04:28:35","endLine":525,"groupId":"20311","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/45/647f492adaa1d56b54f1c25a1666fc6d5fd765.src","preCode":"  private void testExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"An exception has occurred on the server, refer to server log for details.\"));\n\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"}],"commitId":"129a83b198e805392279208e647c23b4659a0ee0","commitMessage":"@@@SOLR-7441:Improve overall robustness of the Streaming stack: Streaming API.  Streaming Expressions.  Parallel SQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1692193 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-22 04:28:35","modifiedFileCount":"15","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":4,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","date":"2016-05-05 15:05:25","endLine":264,"groupId":"10306","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":4,"curCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","date":"2016-05-05 15:05:25","endLine":467,"groupId":"10310","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","date":"2016-05-23 14:35:53","endLine":290,"groupId":"32952","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","date":"2016-05-23 14:35:53","endLine":493,"groupId":"32954","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-11-14 15:03:37","codes":[{"authorDate":"2016-11-14 15:03:37","commitOrder":6,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTION, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","date":"2016-11-14 15:03:37","endLine":296,"groupId":"32952","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2016-11-14 15:03:37","commitOrder":6,"curCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    \r\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n","date":"2016-11-14 15:03:37","endLine":495,"groupId":"32954","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    \r\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":7,"curCode":"public void testTrace() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  \r\n  SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n  stream.setTrace(true);\n  List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","date":"2016-11-16 10:33:58","endLine":310,"groupId":"27698","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTION, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":7,"curCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    \r\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n","date":"2016-11-16 10:33:58","endLine":509,"groupId":"27702","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    \r\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":8,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      stream.setTrace(true);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":367,"groupId":"10857","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"public void testTrace() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  \r\n  SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n  stream.setTrace(true);\n  List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":8,"curCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \r\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ExceptionStream estream = new ExceptionStream(stream);\n      estream.setStreamContext(streamContext);\n      Tuple t = getTuple(estream);\n      assertTrue(t.EOF);\n      assertTrue(t.EXCEPTION);\n      assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n      \r\n      sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      estream = new ExceptionStream(stream);\n      estream.setStreamContext(streamContext);\n      t = getTuple(estream);\n      assertTrue(t.EOF);\n      assertTrue(t.EXCEPTION);\n      \r\n      assertTrue(t.getException().contains(\"undefined field:\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":599,"groupId":"10857","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ExceptionStream estream = new ExceptionStream(stream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    estream = new ExceptionStream(stream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    \r\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"}]
