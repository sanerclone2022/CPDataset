[{"authorTime":"2014-07-05 01:54:53","codes":[{"authorDate":"2014-07-05 01:54:53","commitOrder":1,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2014-07-05 01:54:53","endLine":154,"groupId":"27171","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/f65ad55dae82e823a9c4f77f683cc091eb51c6.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"},{"authorDate":"2014-07-05 01:54:53","commitOrder":1,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2014-07-05 01:54:53","endLine":203,"groupId":"27171","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/f65ad55dae82e823a9c4f77f683cc091eb51c6.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"271576ed0f81421b0717f6da23bf3371c6c1bd87","commitMessage":"@@@SOLR-6223: SearchComponents may throw NPE when using shards.tolerant and there is a failure in the 'GET_FIELDS/GET_HIGHLIGHTS/GET_DEBUG' phase\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1607897 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-05 01:54:53","modifiedFileCount":"6","status":"B","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-02-27 20:17:51","codes":[{"authorDate":"2015-02-27 20:17:51","commitOrder":2,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2015-02-27 20:17:51","endLine":157,"groupId":"27171","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/0e270d77b369b5e98c54791ae0aeab31ce797d.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2015-02-27 20:17:51","commitOrder":2,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2015-02-27 20:17:51","endLine":206,"groupId":"27171","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/0e270d77b369b5e98c54791ae0aeab31ce797d.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"d7eefdd7a7dd174f244fdc6e1250249ce1e45dde","commitMessage":"@@@SOLR-7151: SolrClient query methods throw IOException\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1662670 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-27 20:17:51","modifiedFileCount":"24","status":"M","submitter":"Alan Woodward"},{"authorTime":"2015-06-29 01:18:04","codes":[{"authorDate":"2015-06-29 01:18:04","commitOrder":3,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2015-06-29 01:18:04","endLine":157,"groupId":"32204","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/41861adfd84184eaa6be141f57cc152cb87ea7.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2015-06-29 01:18:04","commitOrder":3,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2015-06-29 01:18:04","endLine":206,"groupId":"32204","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/41861adfd84184eaa6be141f57cc152cb87ea7.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(\"shards.info\"));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"b9854071cf13004aeca5b8541bee123026790126","commitMessage":"@@@SOLR-7485: Replace shards.info occurrences with ShardParams.SHARDS_INFO\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1688025 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-29 01:18:04","modifiedFileCount":"3","status":"M","submitter":"Ramkumar Aiyengar"},{"authorTime":"2015-12-23 03:28:15","codes":[{"authorDate":"2015-12-23 03:28:15","commitOrder":4,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2015-12-23 03:28:15","endLine":157,"groupId":"54191","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/c692132dc27ecb8ac322d97306575f2fbe3124.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2015-12-23 03:28:15","commitOrder":4,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2015-12-23 03:28:15","endLine":206,"groupId":"54191","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/c692132dc27ecb8ac322d97306575f2fbe3124.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(\"partialResults\"));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"c4b6008e38337f995544fb5138265eb07a5fb8fc","commitMessage":"@@@SOLR-8452: replace \"partialResults\" occurrences with SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1721450 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-23 03:28:15","modifiedFileCount":"14","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":5,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2017-06-29 17:00:17","endLine":156,"groupId":"54191","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/1f16c09ade96092a0848b168dff25a20816e65.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":5,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2017-06-29 17:00:17","endLine":205,"groupId":"54191","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/1f16c09ade96092a0848b168dff25a20816e65.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(1, response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-08-10 03:42:17","codes":[{"authorDate":"2018-08-10 03:42:17","commitOrder":6,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2018-08-10 03:46:50","endLine":153,"groupId":"49003","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/a11f0b1a7b524dea95e62dcf594636a33b108b.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-08-10 03:42:17","commitOrder":6,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(Exception.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2018-08-10 03:46:50","endLine":199,"groupId":"49003","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/a11f0b1a7b524dea95e62dcf594636a33b108b.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n    try {\n      collection1.query(query);\n      fail(\"Should get an exception\");\n    } catch (Exception e) {\n      \r\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"00aeb64c10290780256476de2266a9bb600c336d","commitMessage":"@@@SOLR-12555: Use `expectThrows` for expected exceptions\n\nThis commit replaces the `try { doX(); fail(); }` pattern with the\n`expectThrows` test helper.  which was created for this purpose.  This\ncommit makes these changes in the core package: `o.a.solr.cloud`.\n\nCloses #425\n","date":"2018-08-10 03:46:50","modifiedFileCount":"27","status":"M","submitter":"Jason Gerlowski"},{"authorTime":"2019-03-06 04:21:12","codes":[{"authorDate":"2018-08-10 03:42:17","commitOrder":7,"curCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2018-08-10 03:46:50","endLine":153,"groupId":"102751","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFieldsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/a11f0b1a7b524dea95e62dcf594636a33b108b.src","preCode":"  public void testGetFieldsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetFields = true;\n    BadResponseWriter.failOnGetTopIds = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2019-03-06 04:21:12","commitOrder":7,"curCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(Exception.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    assertFalse(\"\"+response, response.getResults().isEmpty());\n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","date":"2019-03-06 04:26:47","endLine":201,"groupId":"102751","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTopIdsPhaseError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/de390de5daa9823f1dd15d385036d77e1eb9df.src","preCode":"  public void testGetTopIdsPhaseError() throws SolrServerException, IOException {\n    BadResponseWriter.failOnGetTopIds = true;\n    BadResponseWriter.failOnGetFields = false;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"subject:batman OR subject:superman\");\n    query.addField(\"id\");\n    query.addField(\"subject\");\n    query.set(\"distrib\", \"true\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    query.set(ShardParams.SHARDS_INFO, \"true\");\n    query.set(\"debug\", \"true\");\n    query.set(\"stats\", \"true\");\n    query.set(\"stats.field\", \"id\");\n    query.set(\"mlt\", \"true\");\n    query.set(\"mlt.fl\", \"title\");\n    query.set(\"mlt.count\", \"1\");\n    query.set(\"mlt.mintf\", \"0\");\n    query.set(\"mlt.mindf\", \"0\");\n    query.setHighlight(true);\n    query.addFacetField(\"id\");\n    query.setFacet(true);\n    \n    ignoreException(\"Dummy exception in BadResponseWriter\");\n\n    expectThrows(Exception.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue(response.getResponseHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    NamedList<Object> shardsInfo = ((NamedList<Object>)response.getResponse().get(ShardParams.SHARDS_INFO));\n    boolean foundError = false;\n    for (int i = 0; i < shardsInfo.size(); i++) {\n      if (shardsInfo.getName(i).contains(\"collection2\")) {\n        assertNotNull(((NamedList<Object>)shardsInfo.getVal(i)).get(\"error\"));\n        foundError = true;\n        break;\n      }\n    }\n    assertTrue(foundError);\n    \n    assertEquals(\"1\", response.getResults().get(0).getFieldValue(\"id\"));\n    assertEquals(\"batman\", response.getResults().get(0).getFirstValue(\"subject\"));\n    unIgnoreException(\"Dummy exception in BadResponseWriter\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/TestTolerantSearch.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"de030178b5e59a263ad1e93606b9d8a00ba7d897","commitMessage":"@@@SOLR-9882: picking results for mergeIds even after partial ones occurred\n","date":"2019-03-06 04:26:47","modifiedFileCount":"2","status":"M","submitter":"Mikhail Khludnev"}]
