[{"authorTime":"2017-01-03 18:22:01","codes":[{"authorDate":"2017-01-03 18:22:01","commitOrder":1,"curCode":"  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", scope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n","date":"2017-01-03 18:22:01","endLine":113,"groupId":"6088","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/230bcd57d38cd100dd7cdae5631928a51f26ed.src","preCode":"  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", scope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2017-01-03 18:22:01","commitOrder":1,"curCode":"  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n","date":"2017-01-03 18:22:01","endLine":386,"groupId":"6088","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d1/90ce03f1f4a393463b76f515101cac8ba28a70.src","preCode":"  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"B"}],"commitId":"3c963967242aed73a906b7bc17c26a4b8b07083c","commitMessage":"@@@SOLR-9896: Instrument and collect metrics from query.  update.  core admin and core load thread pools\n","date":"2017-01-03 18:22:01","modifiedFileCount":"5","status":"B","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2017-01-04 22:31:31","codes":[{"authorDate":"2017-01-04 22:31:31","commitOrder":2,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    clientConnectionManager.initializeMetrics(manager, registry, scope);\n    httpRequestExecutor.initializeMetrics(manager, registry, scope);\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", scope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", scope, \"threadPool\"));\n  }\n","date":"2017-01-04 22:31:31","endLine":109,"groupId":"6088","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/13f3e9898ba587eafda969060522410ed79f54.src","preCode":"  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", scope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2017-01-04 22:31:31","commitOrder":2,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    clientConnectionManager.initializeMetrics(manager, registry, scope);\n    httpRequestExecutor.initializeMetrics(manager, registry, scope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n  }\n","date":"2017-01-04 22:31:31","endLine":371,"groupId":"6088","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/af88aefd1bec7638250f74ac1f5eaff908f2ec.src","preCode":"  public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    List<String> metricNames = new ArrayList<>(4);\n    metricNames.addAll(clientConnectionManager.initializeMetrics(manager, registry, scope));\n    metricNames.addAll(httpRequestExecutor.initializeMetrics(manager, registry, scope));\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n    return metricNames;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"12d849221727d3294429397a456adebf583defbc","commitMessage":"@@@SOLR-9921 Separate SolrMetricProducer from SolrInfoMBean.\n","date":"2017-01-04 22:31:31","modifiedFileCount":"10","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-01-05 22:55:23","codes":[{"authorDate":"2017-01-05 22:55:23","commitOrder":3,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2017-01-05 22:55:23","endLine":110,"groupId":"6088","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f1/3cfb501500c411242cc310cfd25a9c2b5977c6.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    clientConnectionManager.initializeMetrics(manager, registry, scope);\n    httpRequestExecutor.initializeMetrics(manager, registry, scope);\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", scope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", scope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2017-01-05 22:55:23","commitOrder":3,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.HTTP.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2017-01-05 22:55:23","endLine":373,"groupId":"6088","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/8be9748bc18fddbb5a8b6d268879aea744b217.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    clientConnectionManager.initializeMetrics(manager, registry, scope);\n    httpRequestExecutor.initializeMetrics(manager, registry, scope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", scope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"e5d28848d7d98d52b378b2be18203f058a48a2cc","commitMessage":"@@@SOLR-9923: Remove solr.http metric group and merge its metrics to solr.node group\n","date":"2017-01-05 22:55:23","modifiedFileCount":"6","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2017-01-12 20:14:12","codes":[{"authorDate":"2017-01-05 22:55:23","commitOrder":4,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2017-01-05 22:55:23","endLine":110,"groupId":"6088","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f1/3cfb501500c411242cc310cfd25a9c2b5977c6.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2017-01-12 20:14:12","commitOrder":4,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2017-01-12 20:14:12","endLine":386,"groupId":"6088","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/d5c3da50fb7a8cb097b0dfc99af06d109ec77c.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.HTTP.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"6c6c077435bcc5bd3f4520a70a4c678d4b3f7661","commitMessage":"@@@SOLR-9947 Clean up metrics and SolrInfoMBean categories. Add a hierarhical view of\nSolrInfoMBeans in JMX.\n","date":"2017-01-12 20:14:12","modifiedFileCount":"54","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-04-12 01:22:23","codes":[{"authorDate":"2017-04-12 01:22:23","commitOrder":5,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2017-04-12 01:22:23","endLine":120,"groupId":"62484","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@StringregistryName@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/8cea5a1622519c983314bd97696f4b33738fba.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    updateExecutor = new InstrumentedExecutorService(updateExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = new InstrumentedExecutorService(recoveryExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2017-04-12 01:22:23","commitOrder":5,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2017-04-12 01:22:23","endLine":382,"groupId":"6088","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/1ce5ef8303638721d0690d528be0d3d3020680.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoMBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"}],"commitId":"e30cc70fddcdd6fddb5eedf9f38e77fcb3f33bd1","commitMessage":"@@@SOLR-9959: SolrInfoMBean-s category and hierarchy cleanup.\n","date":"2017-04-12 01:22:23","modifiedFileCount":"132","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2018-03-29 22:37:45","codes":[{"authorDate":"2018-03-29 22:37:45","commitOrder":6,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-03-29 22:37:45","endLine":129,"groupId":"62484","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@StringregistryName@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/752a014c4a8fb76cc636425a64c589d0841662.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2018-03-29 22:37:45","commitOrder":6,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricTag = tag;\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-03-29 22:37:45","endLine":411,"groupId":"26272","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/ff025ca21e9205b1ae6a91f71ed528fa001459.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"M"}],"commitId":"358e59596d17ba34452ea923e048afee6233d597","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-03-29 22:37:45","modifiedFileCount":"62","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-03-29 22:37:45","codes":[{"authorDate":"2018-05-05 09:02:56","commitOrder":7,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateOnlyConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-05-05 09:02:56","endLine":137,"groupId":"43048","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@StringregistryName@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/c843fc451f55eb5e8f7a01699af0af38f20c70.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    clientConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2018-03-29 22:37:45","commitOrder":7,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricTag = tag;\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-03-29 22:37:45","endLine":411,"groupId":"26272","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/ff025ca21e9205b1ae6a91f71ed528fa001459.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricTag = tag;\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"N"}],"commitId":"3a2572db793b47a6648fae8288a5c8815b689cd1","commitMessage":"@@@SOLR-12293: Updates need to use their own connection pool to maintain connection reuse and prevent spurious recoveries.\n","date":"2018-05-05 09:02:56","modifiedFileCount":"14","status":"M","submitter":"Mark Miller"},{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":8,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-12-17 00:58:20","endLine":191,"groupId":"43048","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@StringregistryName@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/3486be29628b445323fc4956fa58fe23bd71ef.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateOnlyConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2018-12-17 00:58:20","commitOrder":8,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    httpListenerFactory.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-12-17 00:58:20","endLine":474,"groupId":"20436","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6c/37e803145c3224e56e4b60de6118cbed60954d.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricTag = tag;\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    clientConnectionManager.initializeMetrics(manager, registry, tag, expandedScope);\n    httpRequestExecutor.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":468,"status":"M"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2019-10-18 23:13:30","commitOrder":9,"curCode":"  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(solrMetricsContext, expandedScope);\n    defaultConnectionManager.initializeMetrics(solrMetricsContext, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2019-10-18 23:15:04","endLine":191,"groupId":"60269","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricsContextparentContext@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fe/966cbc929633387fc84281c097ec535880e4ee.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(manager, registryName, tag, expandedScope);\n    defaultConnectionManager.initializeMetrics(manager, registryName, tag, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, registry,\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, registry,\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2018-12-17 00:58:20","commitOrder":9,"curCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    httpListenerFactory.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2018-12-17 00:58:20","endLine":474,"groupId":"20436","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricManagermanager@Stringregistry@Stringtag@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6c/37e803145c3224e56e4b60de6118cbed60954d.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    httpListenerFactory.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":468,"status":"N"}],"commitId":"f07998fc234c81ff956a84ee508b85f8d573ef38","commitMessage":"@@@SOLR-13677: All Metrics Gauges should be unregistered by components that registered them.\n","date":"2019-10-18 23:15:04","modifiedFileCount":"40","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2019-10-23 03:23:48","codes":[{"authorDate":"2019-10-18 23:13:30","commitOrder":10,"curCode":"  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(solrMetricsContext, expandedScope);\n    defaultConnectionManager.initializeMetrics(solrMetricsContext, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2019-10-18 23:15:04","endLine":191,"groupId":"102067","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricsContextparentContext@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fe/966cbc929633387fc84281c097ec535880e4ee.src","preCode":"  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String expandedScope = SolrMetricManager.mkName(scope, getCategory().name());\n    updateHttpListenerFactory.initializeMetrics(solrMetricsContext, expandedScope);\n    defaultConnectionManager.initializeMetrics(solrMetricsContext, expandedScope);\n    updateExecutor = MetricUtils.instrumentedExecutorService(updateExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"updateOnlyExecutor\", expandedScope, \"threadPool\"));\n    recoveryExecutor = MetricUtils.instrumentedExecutorService(recoveryExecutor, this, solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"recoveryExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/UpdateShardHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"},{"authorDate":"2019-10-23 03:23:48","commitOrder":10,"curCode":"  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    httpListenerFactory.initializeMetrics(solrMetricsContext, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        solrMetricsContext.getMetricRegistry(),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","date":"2019-10-23 03:23:48","endLine":718,"groupId":"102067","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeMetrics","params":"(SolrMetricsContextparentContext@Stringscope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/bcee57cd1a2f278ba8a8247c0e19ad22f72bf2.src","preCode":"  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    String expandedScope = SolrMetricManager.mkName(scope, SolrInfoBean.Category.QUERY.name());\n    httpListenerFactory.initializeMetrics(manager, registry, tag, expandedScope);\n    commExecutor = MetricUtils.instrumentedExecutorService(commExecutor, null,\n        manager.registry(registry),\n        SolrMetricManager.mkName(\"httpShardExecutor\", expandedScope, \"threadPool\"));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"M"}],"commitId":"1d7cd6157570ca12ba3480b082479a21dd5aa660","commitMessage":"@@@SOLR-13854: Remove deprecated SolrMetricProducer.initializeMetrics API.\n","date":"2019-10-23 03:23:48","modifiedFileCount":"27","status":"M","submitter":"Andrzej Bialecki"}]
