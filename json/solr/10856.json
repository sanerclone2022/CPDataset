[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":382,"groupId":"48432","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"B"}],"commitId":"e50f4d94c74560d863df197f21bc87d21c212f8c","commitMessage":"@@@SOLR-7377: Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1678743 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-11 20:37:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2015-06-20 02:53:57","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"},{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new StreamComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-20 02:53:57","endLine":380,"groupId":"48432","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/ef764448d34c5703ed5e7327acd3b09e6563ec.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"1ff66e90f1a5c209130bc39095f2f57107ee30d4","commitMessage":"@@@SOLR-7513.  SOLR-7528: Add Equalitors to Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686481 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-20 02:53:57","modifiedFileCount":"16","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":3,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"},{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    try {\n\n      paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_i asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n      rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n      throw new Exception(\"Sorts did not match up and Exception was not not thrown.\");\n    } catch (Exception e) {\n      if(!e.getMessage().equals(\"Invalid ReducerStream - substream comparator (sort) must be a superset of this stream's comparator.\")) {\n        throw e;\n      }\n    }\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":404,"groupId":"48432","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new StreamComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"}],"commitId":"33a4099b9850b4f5ee8f6fe237d07060a4272704","commitMessage":"@@@SOLR-7554: Add checks in Streams for incoming stream order\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1687258 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-24 21:07:09","modifiedFileCount":"18","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":4,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"},{"authorDate":"2015-07-04 22:24:35","commitOrder":4,"curCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-07-04 22:24:35","endLine":381,"groupId":"48432","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/39b77576511aa84119410f06c2759a190fd198.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    try {\n\n      paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_i asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n      rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n      throw new Exception(\"Sorts did not match up and Exception was not not thrown.\");\n    } catch (Exception e) {\n      if(!e.getMessage().equals(\"Invalid ReducerStream - substream comparator (sort) must be a superset of this stream's comparator.\")) {\n        throw e;\n      }\n    }\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"b22f711b6316df59789ac7421e972c0530cc0aef","commitMessage":"@@@SOLR-7707: Add StreamExpression Support to RollupStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689168 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-04 22:24:35","modifiedFileCount":"17","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-11-08 11:05:13","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":5,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"},{"authorDate":"2015-11-08 11:05:13","commitOrder":5,"curCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldEqualitor(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    \r\n    paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    rstream = new ReducerStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-11-08 11:05:13","endLine":402,"groupId":"54189","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/bccbbcfc65968a8c758152ea2b5c51f3e73a48.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"4f00eb8300c1d7427c588def41bc6945bfa5ea01","commitMessage":"@@@SOLR-8198: Change ReducerStream to use StreamEqualitor instead of StreamComparator\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713204 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-08 11:05:13","modifiedFileCount":"4","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-12-11 10:28:25","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":6,"curCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":333,"groupId":"54189","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"},{"authorDate":"2015-12-11 10:28:25","commitOrder":6,"curCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    stream  = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-12-11 10:28:25","endLine":405,"groupId":"54189","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/6d3bf1f6bc4d3e38076f5720d19cff1c936daf.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldEqualitor(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    \r\n    paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    rstream = new ReducerStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"}],"commitId":"60dca1b4f988e0a839ceb5e54ad85df70cc1f1f9","commitMessage":"@@@SOLR-8337: Add ReduceOperation and wire it into the ReducerStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719246 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-11 10:28:25","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":7,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","date":"2016-05-05 15:05:25","endLine":264,"groupId":"10306","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testTrace() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(\"collection1\"));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(\"collection1\"));\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":7,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    stream  = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":328,"groupId":"10306","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    stream  = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":8,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","date":"2016-05-23 14:35:53","endLine":290,"groupId":"32952","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":8,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":354,"groupId":"32952","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s, a_i,  a_f\",\"sort\", \"a_s asc  ,  a_f   asc\");\n    stream  = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-11-14 15:03:37","codes":[{"authorDate":"2016-11-14 15:03:37","commitOrder":9,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTION, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","date":"2016-11-14 15:03:37","endLine":296,"groupId":"32952","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assert(tuples.get(0).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(1).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(2).get(\"_COLLECTION_\").equals(COLLECTION));\n    assert(tuples.get(3).get(\"_COLLECTION_\").equals(COLLECTION));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2016-11-14 15:03:37","commitOrder":9,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":360,"groupId":"32952","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":10,"curCode":"public void testTrace() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  \r\n  SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n  stream.setTrace(true);\n  List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","date":"2016-11-16 10:33:58","endLine":310,"groupId":"27698","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    stream.setTrace(true);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTION, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTION, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":10,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":374,"groupId":"27698","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":11,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      stream.setTrace(true);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":367,"groupId":"59305","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"public void testTrace() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  \r\n  SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n  stream.setTrace(true);\n  List<Tuple> tuples = getTuples(stream);\n    assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n    assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":11,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n      rstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      Tuple t0 = tuples.get(0);\n      List<Map> maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 0, 2, 1, 9);\n\n      Tuple t1 = tuples.get(1);\n      List<Map> maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5, 7, 8);\n\n      Tuple t2 = tuples.get(2);\n      List<Map> maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n\n      \r\n      sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      rstream = new ReducerStream(stream,\n          new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n      rstream.setStreamContext(streamContext);\n      tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":439,"groupId":"59305","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ReducerStream rstream  = new ReducerStream(stream,\n                                               new FieldEqualitor(\"a_s\"),\n                                               new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    Tuple t0 = tuples.get(0);\n    List<Map> maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 0, 2, 1, 9);\n\n    Tuple t1 = tuples.get(1);\n    List<Map> maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    Tuple t2 = tuples.get(2);\n    List<Map> maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    \r\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    rstream = new ReducerStream(stream,\n                                new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n                                new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n\n    tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":12,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      stream.setTrace(true);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":367,"groupId":"59305","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      stream.setTrace(true);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"N"},{"authorDate":"2020-06-17 01:27:53","commitOrder":12,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n      rstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      Tuple t0 = tuples.get(0);\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 0, 2, 1, 9);\n\n      Tuple t1 = tuples.get(1);\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5, 7, 8);\n\n      Tuple t2 = tuples.get(2);\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n\n      \r\n      sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      rstream = new ReducerStream(stream,\n          new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n      rstream.setStreamContext(streamContext);\n      tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":464,"groupId":"59305","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/3c6093e7bb768805dae8ab64a943da272ac268.src","preCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n      rstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      Tuple t0 = tuples.get(0);\n      List<Map> maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 0, 2, 1, 9);\n\n      Tuple t1 = tuples.get(1);\n      List<Map> maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5, 7, 8);\n\n      Tuple t2 = tuples.get(2);\n      List<Map> maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n\n      \r\n      sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      rstream = new ReducerStream(stream,\n          new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n      rstream.setStreamContext(streamContext);\n      tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":13,"curCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      stream.setTrace(true);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":367,"groupId":"10856","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testTrace() throws Exception {\n\n    new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,a_f\", \"sort\", \"a_s asc,a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      stream.setTrace(true);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      assertEquals(COLLECTIONORALIAS, tuples.get(0).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(1).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(2).get(\"_COLLECTION_\"));\n      assertEquals(COLLECTIONORALIAS, tuples.get(3).get(\"_COLLECTION_\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"N"},{"authorDate":"2021-06-22 00:19:37","commitOrder":13,"curCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n      rstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      Tuple t0 = tuples.get(0);\n      List<Map<?,?>> maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 0, 2, 1, 9);\n\n      Tuple t1 = tuples.get(1);\n      List<Map<?,?>> maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5, 7, 8);\n\n      Tuple t2 = tuples.get(2);\n      List<Map<?,?>> maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n\n      \r\n      sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      rstream = new ReducerStream(stream,\n          new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n      rstream.setStreamContext(streamContext);\n      tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":466,"groupId":"10856","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/8f055073653d6f057315f7ba31994fc08677af.src","preCode":"  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), 5));\n\n      rstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      Tuple t0 = tuples.get(0);\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 0, 2, 1, 9);\n\n      Tuple t1 = tuples.get(1);\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5, 7, 8);\n\n      Tuple t2 = tuples.get(2);\n      @SuppressWarnings({\"rawtypes\"})\n      List<Map> maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n\n      \r\n      sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s, a_i,  a_f\", \"sort\", \"a_s asc  ,  a_f   asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      rstream = new ReducerStream(stream,\n          new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING),\n          new GroupOperation(new FieldComparator(\"a_f\", ComparatorOrder.DESCENDING), 5));\n      rstream.setStreamContext(streamContext);\n      tuples = getTuples(rstream);\n\n      assertEquals(3, tuples.size());\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
