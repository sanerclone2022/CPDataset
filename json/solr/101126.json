[{"authorTime":"2019-02-07 08:52:22","codes":[{"authorDate":"2019-02-07 08:52:22","commitOrder":1,"curCode":"  public void testStatFacet1() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"memory\")\n        .withFilter(\"inStock:true\")\n        .withStatFacet(\"avg_price\", \"avg(price)\")\n        .withStatFacet(\"num_suppliers\", \"unique(manu_exact)\")\n        .withStatFacet(\"median_weight\", \"percentile(weight,50)\");\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(4, queryResponse.getResults().getNumFound());\n    assertEquals(4, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(146.66, (double) topLevelFacetingData.getStatFacetValue(\"avg_price\"), 0.5);\n    assertEquals(3, topLevelFacetingData.getStatFacetValue(\"num_suppliers\"));\n    assertEquals(352.0, (double) topLevelFacetingData.getStatFacetValue(\"median_weight\"), 0.5);\n  }\n","date":"2019-02-07 10:09:13","endLine":470,"groupId":"18352","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStatFacet1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/64c3f0f6e9a23454cf8ba2fa8ecbe1b6e2862e.src","preCode":"  public void testStatFacet1() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"memory\")\n        .withFilter(\"inStock:true\")\n        .withStatFacet(\"avg_price\", \"avg(price)\")\n        .withStatFacet(\"num_suppliers\", \"unique(manu_exact)\")\n        .withStatFacet(\"median_weight\", \"percentile(weight,50)\");\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(4, queryResponse.getResults().getNumFound());\n    assertEquals(4, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(146.66, (double) topLevelFacetingData.getStatFacetValue(\"avg_price\"), 0.5);\n    assertEquals(3, topLevelFacetingData.getStatFacetValue(\"num_suppliers\"));\n    assertEquals(352.0, (double) topLevelFacetingData.getStatFacetValue(\"median_weight\"), 0.5);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"B"},{"authorDate":"2019-02-07 08:52:22","commitOrder":1,"curCode":"  public void testStatFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final  Map<String, Object> expandedStatFacet = new HashMap<>();\n    expandedStatFacet.put(\"type\", \"func\");\n    expandedStatFacet.put(\"func\", \"avg(div($numer,$denom))\");\n    expandedStatFacet.put(\"numer\", \"mul(popularity,3.0)\");\n    expandedStatFacet.put(\"denom\", \"price\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFilter(\"price:[1.0 TO *]\")\n        .withFilter(\"popularity:[0 TO 10]\")\n        .withFacet(\"avg_value\", expandedStatFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(13, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(0.108, (double) topLevelFacetingData.getStatFacetValue(\"avg_value\"), 0.1);\n  }\n","date":"2019-02-07 10:09:13","endLine":515,"groupId":"7013","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatFacetExpanded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/64c3f0f6e9a23454cf8ba2fa8ecbe1b6e2862e.src","preCode":"  public void testStatFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final  Map<String, Object> expandedStatFacet = new HashMap<>();\n    expandedStatFacet.put(\"type\", \"func\");\n    expandedStatFacet.put(\"func\", \"avg(div($numer,$denom))\");\n    expandedStatFacet.put(\"numer\", \"mul(popularity,3.0)\");\n    expandedStatFacet.put(\"denom\", \"price\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFilter(\"price:[1.0 TO *]\")\n        .withFilter(\"popularity:[0 TO 10]\")\n        .withFacet(\"avg_value\", expandedStatFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(13, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(0.108, (double) topLevelFacetingData.getStatFacetValue(\"avg_value\"), 0.1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"B"}],"commitId":"f30f9b49bfe9bcf745886e045cc53d6aa111a15c","commitMessage":"@@@SOLR-13042: Miscellaneous JSON Faceting ref-guide improvements\n","date":"2019-02-07 10:09:13","modifiedFileCount":"1","status":"B","submitter":"Jason Gerlowski"},{"authorTime":"2019-09-28 14:21:34","codes":[{"authorDate":"2019-09-28 14:21:34","commitOrder":2,"curCode":"  public void testStatFacet1() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"memory\")\n        .withFilter(\"inStock:true\")\n        .withStatFacet(\"avg_price\", \"avg(price)\")\n        .withStatFacet(\"min_manufacturedate_dt\", \"min(manufacturedate_dt)\")\n        .withStatFacet(\"num_suppliers\", \"unique(manu_exact)\")\n        .withStatFacet(\"median_weight\", \"percentile(weight,50)\");\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(4, queryResponse.getResults().getNumFound());\n    assertEquals(4, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(146.66, (double) topLevelFacetingData.getStatValue(\"avg_price\"), 0.5);\n    assertEquals(3, topLevelFacetingData.getStatValue(\"num_suppliers\"));\n    assertEquals(352.0, (double) topLevelFacetingData.getStatValue(\"median_weight\"), 0.5);\n\n    Object val = topLevelFacetingData.getStatValue(\"min_manufacturedate_dt\");\n    assertTrue(val instanceof Date);\n    assertEquals(\"2006-02-13T15:26:37Z\", ((Date)val).toInstant().toString());\n  }\n","date":"2019-09-28 14:38:55","endLine":476,"groupId":"18352","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStatFacet1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/78d069a31e9ab7fdba2f4d428bfdd1baa22bf3.src","preCode":"  public void testStatFacet1() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"memory\")\n        .withFilter(\"inStock:true\")\n        .withStatFacet(\"avg_price\", \"avg(price)\")\n        .withStatFacet(\"num_suppliers\", \"unique(manu_exact)\")\n        .withStatFacet(\"median_weight\", \"percentile(weight,50)\");\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(4, queryResponse.getResults().getNumFound());\n    assertEquals(4, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(146.66, (double) topLevelFacetingData.getStatFacetValue(\"avg_price\"), 0.5);\n    assertEquals(3, topLevelFacetingData.getStatFacetValue(\"num_suppliers\"));\n    assertEquals(352.0, (double) topLevelFacetingData.getStatFacetValue(\"median_weight\"), 0.5);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"},{"authorDate":"2019-09-28 14:21:34","commitOrder":2,"curCode":"  public void testStatFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final  Map<String, Object> expandedStatFacet = new HashMap<>();\n    expandedStatFacet.put(\"type\", \"func\");\n    expandedStatFacet.put(\"func\", \"avg(div($numer,$denom))\");\n    expandedStatFacet.put(\"numer\", \"mul(popularity,3.0)\");\n    expandedStatFacet.put(\"denom\", \"price\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFilter(\"price:[1.0 TO *]\")\n        .withFilter(\"popularity:[0 TO 10]\")\n        .withFacet(\"avg_value\", expandedStatFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(13, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(0.108, (double) topLevelFacetingData.getStatValue(\"avg_value\"), 0.1);\n  }\n","date":"2019-09-28 14:38:55","endLine":525,"groupId":"7013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatFacetExpanded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/78d069a31e9ab7fdba2f4d428bfdd1baa22bf3.src","preCode":"  public void testStatFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final  Map<String, Object> expandedStatFacet = new HashMap<>();\n    expandedStatFacet.put(\"type\", \"func\");\n    expandedStatFacet.put(\"func\", \"avg(div($numer,$denom))\");\n    expandedStatFacet.put(\"numer\", \"mul(popularity,3.0)\");\n    expandedStatFacet.put(\"denom\", \"price\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFilter(\"price:[1.0 TO *]\")\n        .withFilter(\"popularity:[0 TO 10]\")\n        .withFacet(\"avg_value\", expandedStatFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(13, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(0.108, (double) topLevelFacetingData.getStatFacetValue(\"avg_value\"), 0.1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"}],"commitId":"e5d95011f06ba6a1daa986e95762cbcfc79d8f98","commitMessage":"@@@SOLR-13417: handle stats on date/str fields in solrj's JSON facet resp\n\n* Except for min/max aggregation in all other cases values woudl be\n  number. As for same data/string field.  value can vary based on\n  aggregation used.  capture response in Map<String.  Object>\n","date":"2019-09-28 14:38:55","modifiedFileCount":"4","status":"M","submitter":"Munendra S N"},{"authorTime":"2019-09-28 14:21:34","codes":[{"authorDate":"2020-03-20 01:13:29","commitOrder":3,"curCode":"  public void testStatFacet1() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"memory\")\n        .withFilter(\"inStock:true\")\n        .withStatFacet(\"avg_price\", \"avg(price)\")\n        .withStatFacet(\"min_manufacturedate_dt\", \"min(manufacturedate_dt)\")\n        .withStatFacet(\"num_suppliers\", \"unique(manu_exact)\")\n        .withStatFacet(\"median_weight\", \"percentile(weight,50)\");\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(4, queryResponse.getResults().getNumFound());\n    assertEquals(4, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(146.66, (double) topLevelFacetingData.getStatValue(\"avg_price\"), 0.5);\n    assertEquals(3L, topLevelFacetingData.getStatValue(\"num_suppliers\"));\n    assertEquals(352.0, (double) topLevelFacetingData.getStatValue(\"median_weight\"), 0.5);\n\n    Object val = topLevelFacetingData.getStatValue(\"min_manufacturedate_dt\");\n    assertTrue(val instanceof Date);\n    assertEquals(\"2006-02-13T15:26:37Z\", ((Date)val).toInstant().toString());\n  }\n","date":"2020-03-20 01:13:29","endLine":476,"groupId":"101126","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStatFacet1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/e452f67c5bd0c226a7f53b3becafe2b4622298.src","preCode":"  public void testStatFacet1() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"memory\")\n        .withFilter(\"inStock:true\")\n        .withStatFacet(\"avg_price\", \"avg(price)\")\n        .withStatFacet(\"min_manufacturedate_dt\", \"min(manufacturedate_dt)\")\n        .withStatFacet(\"num_suppliers\", \"unique(manu_exact)\")\n        .withStatFacet(\"median_weight\", \"percentile(weight,50)\");\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(4, queryResponse.getResults().getNumFound());\n    assertEquals(4, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(146.66, (double) topLevelFacetingData.getStatValue(\"avg_price\"), 0.5);\n    assertEquals(3, topLevelFacetingData.getStatValue(\"num_suppliers\"));\n    assertEquals(352.0, (double) topLevelFacetingData.getStatValue(\"median_weight\"), 0.5);\n\n    Object val = topLevelFacetingData.getStatValue(\"min_manufacturedate_dt\");\n    assertTrue(val instanceof Date);\n    assertEquals(\"2006-02-13T15:26:37Z\", ((Date)val).toInstant().toString());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"},{"authorDate":"2019-09-28 14:21:34","commitOrder":3,"curCode":"  public void testStatFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final  Map<String, Object> expandedStatFacet = new HashMap<>();\n    expandedStatFacet.put(\"type\", \"func\");\n    expandedStatFacet.put(\"func\", \"avg(div($numer,$denom))\");\n    expandedStatFacet.put(\"numer\", \"mul(popularity,3.0)\");\n    expandedStatFacet.put(\"denom\", \"price\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFilter(\"price:[1.0 TO *]\")\n        .withFilter(\"popularity:[0 TO 10]\")\n        .withFacet(\"avg_value\", expandedStatFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(13, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(0.108, (double) topLevelFacetingData.getStatValue(\"avg_value\"), 0.1);\n  }\n","date":"2019-09-28 14:38:55","endLine":525,"groupId":"101126","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatFacetExpanded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/78d069a31e9ab7fdba2f4d428bfdd1baa22bf3.src","preCode":"  public void testStatFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    final  Map<String, Object> expandedStatFacet = new HashMap<>();\n    expandedStatFacet.put(\"type\", \"func\");\n    expandedStatFacet.put(\"func\", \"avg(div($numer,$denom))\");\n    expandedStatFacet.put(\"numer\", \"mul(popularity,3.0)\");\n    expandedStatFacet.put(\"denom\", \"price\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFilter(\"price:[1.0 TO *]\")\n        .withFilter(\"popularity:[0 TO 10]\")\n        .withFacet(\"avg_value\", expandedStatFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(13, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(0.108, (double) topLevelFacetingData.getStatValue(\"avg_value\"), 0.1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"N"}],"commitId":"e36733d01d0b98d40dfbf9b80e8823bfc33d2c30","commitMessage":"@@@SOLR-14350: fix test failure due to SOLR-14012\n","date":"2020-03-20 01:13:29","modifiedFileCount":"1","status":"M","submitter":"Munendra S N"}]
