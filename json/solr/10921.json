[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testExponentialMovingAverage() throws Exception {\n    String cexpr = \"expMovingAvg(array(22.27, 22.19, 22.08, 22.17, 22.18, 22.13, 22.23, 22.43, 22.24, 22.29, \" +\n                   \"22.15, 22.39, 22.38, 22.61, 23.36, 24.05, 23.75, 23.83, 23.95, 23.63, 23.82, 23.87, 23.65, 23.19,\"+\n                   \"23.10, 23.33, 22.68, 23.10, 22.40, 22.17), 10)\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 21);\n    assertEquals((double) out.get(0), 22.22, 0.009);\n    assertEquals((double) out.get(1), 22.21, 0.009);\n    assertEquals((double)out.get(2), 22.24, 0.009);\n    assertEquals((double)out.get(3), 22.27, 0.009);\n    assertEquals((double)out.get(4), 22.33, 0.009);\n    assertEquals((double)out.get(5), 22.52, 0.009);\n    assertEquals((double)out.get(6), 22.80, 0.009);\n    assertEquals((double)out.get(7), 22.97, 0.009);\n    assertEquals((double)out.get(8), 23.13, 0.009);\n    assertEquals((double)out.get(9), 23.28, 0.009);\n    assertEquals((double)out.get(10), 23.34, 0.009);\n    assertEquals((double)out.get(11), 23.43, 0.009);\n    assertEquals((double)out.get(12), 23.51, 0.009);\n    assertEquals((double)out.get(13), 23.54, 0.009);\n    assertEquals((double)out.get(14), 23.47, 0.009);\n    assertEquals((double)out.get(15), 23.40, 0.009);\n    assertEquals((double)out.get(16), 23.39, 0.009);\n    assertEquals((double)out.get(17), 23.26, 0.009);\n    assertEquals((double)out.get(18), 23.23, 0.009);\n    assertEquals((double)out.get(19), 23.08, 0.009);\n    assertEquals((double)out.get(20), 22.92, 0.009);\n  }\n","date":"2018-04-06 02:00:07","endLine":2504,"groupId":"19533","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExponentialMovingAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testExponentialMovingAverage() throws Exception {\n    String cexpr = \"expMovingAvg(array(22.27, 22.19, 22.08, 22.17, 22.18, 22.13, 22.23, 22.43, 22.24, 22.29, \" +\n                   \"22.15, 22.39, 22.38, 22.61, 23.36, 24.05, 23.75, 23.83, 23.95, 23.63, 23.82, 23.87, 23.65, 23.19,\"+\n                   \"23.10, 23.33, 22.68, 23.10, 22.40, 22.17), 10)\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 21);\n    assertEquals((double) out.get(0), 22.22, 0.009);\n    assertEquals((double) out.get(1), 22.21, 0.009);\n    assertEquals((double)out.get(2), 22.24, 0.009);\n    assertEquals((double)out.get(3), 22.27, 0.009);\n    assertEquals((double)out.get(4), 22.33, 0.009);\n    assertEquals((double)out.get(5), 22.52, 0.009);\n    assertEquals((double)out.get(6), 22.80, 0.009);\n    assertEquals((double)out.get(7), 22.97, 0.009);\n    assertEquals((double)out.get(8), 23.13, 0.009);\n    assertEquals((double)out.get(9), 23.28, 0.009);\n    assertEquals((double)out.get(10), 23.34, 0.009);\n    assertEquals((double)out.get(11), 23.43, 0.009);\n    assertEquals((double)out.get(12), 23.51, 0.009);\n    assertEquals((double)out.get(13), 23.54, 0.009);\n    assertEquals((double)out.get(14), 23.47, 0.009);\n    assertEquals((double)out.get(15), 23.40, 0.009);\n    assertEquals((double)out.get(16), 23.39, 0.009);\n    assertEquals((double)out.get(17), 23.26, 0.009);\n    assertEquals((double)out.get(18), 23.23, 0.009);\n    assertEquals((double)out.get(19), 23.08, 0.009);\n    assertEquals((double)out.get(20), 22.92, 0.009);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2467,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n","date":"2018-04-06 02:00:07","endLine":3162,"groupId":"38205","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMovingAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3145,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  public void testExponentialMovingAverage() throws Exception {\n    String cexpr = \"expMovingAvg(array(22.27, 22.19, 22.08, 22.17, 22.18, 22.13, 22.23, 22.43, 22.24, 22.29, \" +\n                   \"22.15, 22.39, 22.38, 22.61, 23.36, 24.05, 23.75, 23.83, 23.95, 23.63, 23.82, 23.87, 23.65, 23.19,\"+\n                   \"23.10, 23.33, 22.68, 23.10, 22.40, 22.17), 10)\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 21);\n    assertEquals((double) out.get(0), 22.22, 0.009);\n    assertEquals((double) out.get(1), 22.21, 0.009);\n    assertEquals((double)out.get(2), 22.24, 0.009);\n    assertEquals((double)out.get(3), 22.27, 0.009);\n    assertEquals((double)out.get(4), 22.33, 0.009);\n    assertEquals((double)out.get(5), 22.52, 0.009);\n    assertEquals((double)out.get(6), 22.80, 0.009);\n    assertEquals((double)out.get(7), 22.97, 0.009);\n    assertEquals((double)out.get(8), 23.13, 0.009);\n    assertEquals((double)out.get(9), 23.28, 0.009);\n    assertEquals((double)out.get(10), 23.34, 0.009);\n    assertEquals((double)out.get(11), 23.43, 0.009);\n    assertEquals((double)out.get(12), 23.51, 0.009);\n    assertEquals((double)out.get(13), 23.54, 0.009);\n    assertEquals((double)out.get(14), 23.47, 0.009);\n    assertEquals((double)out.get(15), 23.40, 0.009);\n    assertEquals((double)out.get(16), 23.39, 0.009);\n    assertEquals((double)out.get(17), 23.26, 0.009);\n    assertEquals((double)out.get(18), 23.23, 0.009);\n    assertEquals((double)out.get(19), 23.08, 0.009);\n    assertEquals((double)out.get(20), 22.92, 0.009);\n  }\n","date":"2020-06-17 01:27:53","endLine":4170,"groupId":"10921","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExponentialMovingAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testExponentialMovingAverage() throws Exception {\n    String cexpr = \"expMovingAvg(array(22.27, 22.19, 22.08, 22.17, 22.18, 22.13, 22.23, 22.43, 22.24, 22.29, \" +\n                   \"22.15, 22.39, 22.38, 22.61, 23.36, 24.05, 23.75, 23.83, 23.95, 23.63, 23.82, 23.87, 23.65, 23.19,\"+\n                   \"23.10, 23.33, 22.68, 23.10, 22.40, 22.17), 10)\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 21);\n    assertEquals((double) out.get(0), 22.22, 0.009);\n    assertEquals((double) out.get(1), 22.21, 0.009);\n    assertEquals((double)out.get(2), 22.24, 0.009);\n    assertEquals((double)out.get(3), 22.27, 0.009);\n    assertEquals((double)out.get(4), 22.33, 0.009);\n    assertEquals((double)out.get(5), 22.52, 0.009);\n    assertEquals((double)out.get(6), 22.80, 0.009);\n    assertEquals((double)out.get(7), 22.97, 0.009);\n    assertEquals((double)out.get(8), 23.13, 0.009);\n    assertEquals((double)out.get(9), 23.28, 0.009);\n    assertEquals((double)out.get(10), 23.34, 0.009);\n    assertEquals((double)out.get(11), 23.43, 0.009);\n    assertEquals((double)out.get(12), 23.51, 0.009);\n    assertEquals((double)out.get(13), 23.54, 0.009);\n    assertEquals((double)out.get(14), 23.47, 0.009);\n    assertEquals((double)out.get(15), 23.40, 0.009);\n    assertEquals((double)out.get(16), 23.39, 0.009);\n    assertEquals((double)out.get(17), 23.26, 0.009);\n    assertEquals((double)out.get(18), 23.23, 0.009);\n    assertEquals((double)out.get(19), 23.08, 0.009);\n    assertEquals((double)out.get(20), 22.92, 0.009);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4132,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n","date":"2020-06-17 01:27:53","endLine":5223,"groupId":"10921","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMovingAverage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testMovingAverage() throws Exception {\n    String cexpr = \"movingAvg(array(1,2,3,4,5,6,7), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0), 2.5, .0);\n    assertEquals((double) out.get(1), 3.5, .0);\n    assertEquals((double) out.get(2), 4.5, .0);\n    assertEquals((double) out.get(3), 5.5, .0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":5205,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
