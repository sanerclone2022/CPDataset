[{"authorTime":"2011-09-17 20:48:27","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  DocSet getPositiveDocSet(Query q) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = filterCache.get(q);\n      if (answer!=null) return answer;\n    }\n    answer = getDocSetNC(q,null);\n    if (filterCache != null) filterCache.put(\n        q,answer);\n    return answer;\n  }\n","date":"2011-07-10 07:01:53","endLine":591,"groupId":"27354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getPositiveDocSet","params":"(Queryq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/3fcab7b095844cb2731097ff0c683873643a68.src","preCode":"  DocSet getPositiveDocSet(Query q) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = filterCache.get(q);\n      if (answer!=null) return answer;\n    }\n    answer = getDocSetNC(q,null);\n    if (filterCache != null) filterCache.put(\n        q,answer);\n    return answer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"NB"},{"authorDate":"2011-09-17 20:48:27","commitOrder":2,"curCode":"  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    \r\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    \r\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n","date":"2011-09-17 20:48:27","endLine":953,"groupId":"19928","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDocSet","params":"(Queryquery@DocSetfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/d1db15491c60659aca9741e7f7f6f123769fdb.src","preCode":"  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    \r\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    \r\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":923,"status":"B"}],"commitId":"96c4bb7074546cb87885bba5a7eaa1dea36d7c33","commitMessage":"@@@SOLR-2066: Added support for distributed grouping.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1171970 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-17 20:48:27","modifiedFileCount":"12","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-05-02 06:48:52","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":3,"curCode":"  DocSet getPositiveDocSet(Query q) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = filterCache.get(q);\n      if (answer!=null) return answer;\n    }\n    answer = getDocSetNC(q,null);\n    if (filterCache != null) filterCache.put(\n        q,answer);\n    return answer;\n  }\n","date":"2011-07-10 07:01:53","endLine":591,"groupId":"27354","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getPositiveDocSet","params":"(Queryq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/3fcab7b095844cb2731097ff0c683873643a68.src","preCode":"  DocSet getPositiveDocSet(Query q) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = filterCache.get(q);\n      if (answer!=null) return answer;\n    }\n    answer = getDocSetNC(q,null);\n    if (filterCache != null) filterCache.put(\n        q,answer);\n    return answer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"N"},{"authorDate":"2021-05-02 06:48:52","commitOrder":3,"curCode":"  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    boolean doCache = filterCache != null;\n    if (query instanceof ExtendedQuery) {\n      if (!((ExtendedQuery) query).getCache()) {\n        doCache = false;\n      }\n      if (query instanceof WrappedQuery) {\n        query = ((WrappedQuery) query).getWrappedQuery();\n      }\n    }\n\n    if (!doCache) {\n      query = QueryUtils.makeQueryable(query);\n      return getDocSetNC(query, filter);\n    }\n\n    \r\n    \r\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ == query;\n\n    \r\n    DocSet absAnswer = filterCache.get(absQ);\n    if (absAnswer == null) {\n      absAnswer = getDocSetNC(absQ, null);\n      filterCache.put(absQ, absAnswer);\n    }\n\n    if (filter == null) {\n      return positive ? absAnswer : getLiveDocSet().andNot(absAnswer);\n    } else {\n      return positive ? absAnswer.intersection(filter) : filter.andNot(absAnswer);\n    }\n  }\n","date":"2021-05-02 06:48:52","endLine":1201,"groupId":"26340","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDocSet","params":"(Queryquery@DocSetfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/fc3bcb3e4c0c35955897c61780fa71ebc25ce5.src","preCode":"  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter == null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery) query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery) query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    \r\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ == query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first == null) {\n        first = getDocSetNC(absQ, null);\n        filterCache.put(absQ, first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    \r\n    return positive ? getDocSetNC(absQ, filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1168,"status":"M"}],"commitId":"b27b58704c84b67375080a6e9f818fb7987c203b","commitMessage":"@@@SOLR-14166 fq cache=false should use TwoPhaseIterator (#57)\n\ninstead of custom leapfrogging iterator thing.  FilterImpl.\n\n* Simplify SolrIndexSearcher.getDocSet and makeBitDocSet\n* ExtendedQuery: remove getCacheSep & setCacheSep which never did anything\n* Javadocs: Clarify ExtendedQuery vs PostFilter\n* Add MatchCostQuery wrapper so that the cost local-param to \"fq\" is used for TPI.matchCost","date":"2021-05-02 06:48:52","modifiedFileCount":"10","status":"M","submitter":"David Smiley"},{"authorTime":"2021-09-14 08:56:31","codes":[{"authorDate":"2021-09-14 08:56:31","commitOrder":4,"curCode":"  DocSet getPositiveDocSet(Query query) throws IOException {\n    \r\n    boolean doCache = filterCache != null;\n    if (query instanceof ExtendedQuery) {\n      if (!((ExtendedQuery) query).getCache()) {\n        doCache = false;\n      }\n      if (query instanceof WrappedQuery) {\n        query = ((WrappedQuery) query).getWrappedQuery();\n      }\n    }\n\n    if (doCache) {\n      return getAndCacheDocSet(query);\n    }\n\n    return getDocSetNC(query, null);\n  }\n","date":"2021-09-14 08:56:31","endLine":826,"groupId":"122096","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getPositiveDocSet","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/6e33683532c087b3cdf0b87c85a5e5b2c163c3.src","preCode":"  DocSet getPositiveDocSet(Query q) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = filterCache.get(q);\n      if (answer != null) return answer;\n    }\n    answer = getDocSetNC(q, null);\n    if (filterCache != null) filterCache.put(q, answer);\n    return answer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":809,"status":"M"},{"authorDate":"2021-09-14 08:56:31","commitOrder":4,"curCode":"  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    boolean doCache = filterCache != null;\n    if (query instanceof ExtendedQuery) {\n      if (!((ExtendedQuery) query).getCache()) {\n        doCache = false;\n      }\n      if (query instanceof WrappedQuery) {\n        query = ((WrappedQuery) query).getWrappedQuery();\n      }\n    }\n\n    if (!doCache) {\n      query = QueryUtils.makeQueryable(query);\n      return getDocSetNC(query, filter);\n    }\n\n    \r\n    \r\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ == query;\n\n    DocSet absAnswer = getAndCacheDocSet(absQ);\n\n    if (filter == null) {\n      return positive ? absAnswer : getLiveDocSet().andNot(absAnswer);\n    } else {\n      return positive ? absAnswer.intersection(filter) : filter.andNot(absAnswer);\n    }\n  }\n","date":"2021-09-14 08:56:31","endLine":1224,"groupId":"122096","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getDocSet","params":"(Queryquery@DocSetfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/6e33683532c087b3cdf0b87c85a5e5b2c163c3.src","preCode":"  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    boolean doCache = filterCache != null;\n    if (query instanceof ExtendedQuery) {\n      if (!((ExtendedQuery) query).getCache()) {\n        doCache = false;\n      }\n      if (query instanceof WrappedQuery) {\n        query = ((WrappedQuery) query).getWrappedQuery();\n      }\n    }\n\n    if (!doCache) {\n      query = QueryUtils.makeQueryable(query);\n      return getDocSetNC(query, filter);\n    }\n\n    \r\n    \r\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ == query;\n\n    \r\n    DocSet absAnswer = filterCache.get(absQ);\n    if (absAnswer == null) {\n      absAnswer = getDocSetNC(absQ, null);\n      filterCache.put(absQ, absAnswer);\n    }\n\n    if (filter == null) {\n      return positive ? absAnswer : getLiveDocSet().andNot(absAnswer);\n    } else {\n      return positive ? absAnswer.intersection(filter) : filter.andNot(absAnswer);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1196,"status":"M"}],"commitId":"f68bfad4c45df8bdb5b3eb15a65097f388c8f5cc","commitMessage":"@@@SOLR-15555 Improved caching on FilterQuery (#230)\n\nCreate a new cache mode for CaffeineCache where we can optionally use an\nasync cache instead of the synchronous implementation. This is useful\nfor cases (esp FilterQuery) where many identical requests come in near\nthe same time and they would otherwise race to fill the same cache slot.\n\nCaffeineCache computeIfAbsent now accepts an IOFunction instead of\nthe non-throwing java.util.Function interface.\n\nThis required an update to CaffeineCache 2.9.  which updates putIfAbsent\nwith an optimistic get.\n\nAlso incidentally fixes a rare bug where cache ramBytesUsed would be\nincorrectly reported under heavy cache contention/eviction loads.","date":"2021-09-14 08:56:31","modifiedFileCount":"18","status":"M","submitter":"Mike Drob"}]
