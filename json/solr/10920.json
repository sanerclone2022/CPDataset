[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1959,"groupId":"24617","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiKmeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1883,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testFuzzyKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=fuzzyKmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h),\" +\n        \"               l=getMembershipMatrix(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<List<Number>> membership = (List<List<Number>>)tuples.get(0).get(\"l\");\n\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 1.0, 0.001);\n\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 0.0, 0.001);\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":2063,"groupId":"24617","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyKmeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testFuzzyKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=fuzzyKmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h),\" +\n        \"               l=getMembershipMatrix(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<List<Number>> membership = (List<List<Number>>)tuples.get(0).get(\"l\");\n\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 1.0, 0.001);\n\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 0.0, 0.001);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1962,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2019-08-03 03:25:34","codes":[{"authorDate":"2019-08-03 03:25:34","commitOrder":2,"curCode":"  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n","date":"2019-08-03 03:38:26","endLine":2959,"groupId":"24617","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiKmeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/0d0d33b33ec86567bafecd88b8e194b251745e.src","preCode":"  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2883,"status":"M"},{"authorDate":"2019-08-03 03:25:34","commitOrder":2,"curCode":"  public void testFuzzyKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=fuzzyKmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h),\" +\n        \"               l=getMembershipMatrix(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<List<Number>> membership = (List<List<Number>>)tuples.get(0).get(\"l\");\n\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 1.0, 0.001);\n\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 0.0, 0.001);\n    }\n  }\n","date":"2019-08-03 03:38:26","endLine":3063,"groupId":"24617","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyKmeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/0d0d33b33ec86567bafecd88b8e194b251745e.src","preCode":"  public void testFuzzyKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=fuzzyKmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h),\" +\n        \"               l=getMembershipMatrix(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<List<Number>> membership = (List<List<Number>>)tuples.get(0).get(\"l\");\n\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 1.0, 0.001);\n\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 0.0, 0.001);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2962,"status":"M"}],"commitId":"03a39666c0bd7969e267332fb282f1ba5f7a0866","commitMessage":"@@@SOLR-13667: Add upper.  lower.  trim and split Stream Evaluators\n","date":"2019-08-03 03:38:26","modifiedFileCount":"30","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":3303,"groupId":"10920","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiKmeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3222,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testFuzzyKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=fuzzyKmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h),\" +\n        \"               l=getMembershipMatrix(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> membership = (List<List<Number>>)tuples.get(0).get(\"l\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 1.0, 0.001);\n\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 0.0, 0.001);\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":3413,"groupId":"10920","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyKmeans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testFuzzyKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=fuzzyKmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h),\" +\n        \"               l=getMembershipMatrix(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<List<Number>> membership = (List<List<Number>>)tuples.get(0).get(\"l\");\n\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    \r\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    \r\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    \r\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 1.0, 0.001);\n\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.001);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.001);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.001);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.001);\n\n      \r\n      assertEquals(membership.get(0).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(0).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(1).get(0).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(1).get(1).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(2).get(1).doubleValue(), 0.0, 0.001);\n      assertEquals(membership.get(3).get(0).doubleValue(), 1.0, 0.001);\n      assertEquals(membership.get(3).get(1).doubleValue(), 0.0, 0.001);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3306,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
