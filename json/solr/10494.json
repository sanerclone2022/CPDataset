[{"authorTime":"2019-12-10 06:11:58","codes":[{"authorDate":"2019-12-10 06:11:58","commitOrder":1,"curCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","date":"2019-12-10 06:11:58","endLine":506,"groupId":"35880","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"singleShardedPreferenceRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/050ce2e4389009ec369e48da5fbb38e8bc2889.src","preCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"B"},{"authorDate":"2019-12-10 06:11:58","commitOrder":1,"curCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","date":"2019-12-10 06:11:58","endLine":520,"groupId":"35880","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"singleShardedPreferenceRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/b02cb4da794bce0ef4bd7d95af0b7b7cf43480.src","preCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":498,"status":"B"}],"commitId":"1c78d2c63731d8b4b3b7ec313ac65ddd55761f6a","commitMessage":"@@@SOLR-12217: Support shards.preference in SolrJ for individual shard requests (#984)\n\n","date":"2019-12-10 06:11:58","modifiedFileCount":"13","status":"B","submitter":"Houston Putman"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":2,"curCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","date":"2020-07-08 23:57:24","endLine":509,"groupId":"35880","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"singleShardedPreferenceRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/f606a739ea126023992cadef5a438c3299bdf3.src","preCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"},{"authorDate":"2020-07-08 23:57:24","commitOrder":2,"curCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","date":"2020-07-08 23:57:24","endLine":525,"groupId":"35880","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"singleShardedPreferenceRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/073d9caacb5c84836db42f389f230cff1bc7f5.src","preCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":3,"curCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes / 3, liveNodes / 3, liveNodes / 3)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","date":"2021-01-18 23:59:41","endLine":518,"groupId":"10494","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"singleShardedPreferenceRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"},{"authorDate":"2020-07-08 23:57:24","commitOrder":3,"curCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","date":"2020-07-08 23:57:24","endLine":525,"groupId":"10494","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"singleShardedPreferenceRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/073d9caacb5c84836db42f389f230cff1bc7f5.src","preCode":"  public void singleShardedPreferenceRules() throws Exception {\n    String collectionName = \"singleShardPreferenceTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, liveNodes/3, liveNodes/3, liveNodes/3)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, 1, liveNodes);\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    \r\n    queryReplicaType(getRandomClient(), Replica.Type.PULL, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.TLOG, collectionName);\n    queryReplicaType(getRandomClient(), Replica.Type.NRT, collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
