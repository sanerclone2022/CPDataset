[{"authorTime":"2019-01-23 20:03:01","codes":[{"authorDate":"2019-01-23 20:03:01","commitOrder":1,"curCode":"  public void authFailedMissingSubject() {\n    testConfig.put(\"iss\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"iss\", \"IDServer\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","date":"2019-01-23 20:03:01","endLine":212,"groupId":"62662","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"authFailedMissingSubject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/a908edbb3298a1e8a5f94091b7ffebb17a7a2d.src","preCode":"  public void authFailedMissingSubject() {\n    testConfig.put(\"iss\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"iss\", \"IDServer\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"},{"authorDate":"2019-01-23 20:03:01","commitOrder":1,"curCode":"  public void authFailedMissingAudience() {\n    testConfig.put(\"aud\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"aud\", \"Solr\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","date":"2019-01-23 20:03:01","endLine":226,"groupId":"54149","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"authFailedMissingAudience","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/a908edbb3298a1e8a5f94091b7ffebb17a7a2d.src","preCode":"  public void authFailedMissingAudience() {\n    testConfig.put(\"aud\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"aud\", \"Solr\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"ea2c8ba38e32a9f1e7d11cf3687c5469bfd6414c","commitMessage":"@@@SOLR-12121: JWT Token authentication plugin with OpenID Connect implicit flow login through Admin UI\n","date":"2019-01-23 20:03:01","modifiedFileCount":"5","status":"B","submitter":"Jan H?ydahl"},{"authorTime":"2019-01-23 20:03:01","codes":[{"authorDate":"2020-09-17 07:06:48","commitOrder":2,"curCode":"  public void authFailedMissingSubject() {\n    minimalConfig.put(\"principalClaim\",\"sub\");  \r\n    plugin.init(minimalConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"principalClaim\",\"sub\");  \r\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","date":"2020-09-17 07:06:48","endLine":236,"groupId":"102821","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"authFailedMissingSubject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/90/713417022f8f9dce3d37f1c5966b8af4dba903.src","preCode":"  public void authFailedMissingSubject() {\n    testConfig.put(\"iss\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"iss\", \"IDServer\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2019-01-23 20:03:01","commitOrder":2,"curCode":"  public void authFailedMissingAudience() {\n    testConfig.put(\"aud\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"aud\", \"Solr\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","date":"2019-01-23 20:03:01","endLine":226,"groupId":"102821","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"authFailedMissingAudience","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/a908edbb3298a1e8a5f94091b7ffebb17a7a2d.src","preCode":"  public void authFailedMissingAudience() {\n    testConfig.put(\"aud\", \"NA\");\n    plugin.init(testConfig);\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertFalse(resp.isAuthenticated());\n    assertEquals(JWTAuthPlugin.JWTAuthenticationResponse.AuthCode.JWT_VALIDATION_EXCEPTION, resp.getAuthCode());\n\n    testConfig.put(\"aud\", \"Solr\");\n    plugin.init(testConfig);\n    resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"}],"commitId":"e5d3e4d56744521ca0b9d2f2cd7c6161483fde31","commitMessage":"@@@Merge branch 'master' of github.com:apache/lucene-solr\n","date":"2020-09-17 07:06:48","modifiedFileCount":"16","status":"M","submitter":"noblepaul"}]
