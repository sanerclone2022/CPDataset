[{"authorTime":"2018-08-15 12:25:17","codes":[{"authorDate":"2018-08-15 12:25:17","commitOrder":1,"curCode":"  public void testISO8601() throws IOException {\n    \r\n    \r\n\n    String[] dateStrings = {\n        \"0001-01-01T01:01:01Z\", \"+12021-12-01T03:03:03Z\",\n        \"0000-04-04T04:04:04Z\", \"-0005-05-05T05:05:05Z\",\n        \"-2021-12-01T04:04:04Z\", \"-12021-12-01T02:02:02Z\"\n    };\n\n    int id = 1;\n\n    \r\n    for(String notInFormatDateString: dateStrings) {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-from-extract-contrib\", doc(f(\"id\", id), f(\"date_dt\", notInFormatDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + notInFormatDateString + \" was not parsed as a date\", d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(notInFormatDateString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      assertU(commit());\n      assertQ(req(\"id:\" + id), \"//date[@name='date_dt'][.='\" + notInFormatDateString + \"']\");\n      ++id;\n    }\n\n    \r\n    String[] lenientDateStrings = {\n        \"10995-12-31T23:59:59.990Z\", \"+10995-12-31T23:59:59.990Z\",\n        \"995-1-2T3:4:5Z\", \"0995-01-02T03:04:05Z\",\n        \"2021-01-01t03:04:05\", \"2021-01-01T03:04:05Z\",\n        \"2021-12-01 04:04:04\", \"2021-12-01T04:04:04Z\"\n    };\n\n    \r\n    for(int i = 0; i < lenientDateStrings.length; ++i) {\n      String lenientDateString = lenientDateStrings[i];\n      String expectedString = lenientDateStrings[++i];\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-from-extract-contrib\", doc(f(\"id\", id), f(\"date_dt\", lenientDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + lenientDateString + \" was not parsed as a date\",\n          d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(expectedString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      ++id;\n    }\n  }\n","date":"2018-08-15 12:25:17","endLine":946,"groupId":"26660","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testISO8601","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/4b14a628f5acd15674709150b9ef359be32875.src","preCode":"  public void testISO8601() throws IOException {\n    \r\n    \r\n\n    String[] dateStrings = {\n        \"0001-01-01T01:01:01Z\", \"+12021-12-01T03:03:03Z\",\n        \"0000-04-04T04:04:04Z\", \"-0005-05-05T05:05:05Z\",\n        \"-2021-12-01T04:04:04Z\", \"-12021-12-01T02:02:02Z\"\n    };\n\n    int id = 1;\n\n    \r\n    for(String notInFormatDateString: dateStrings) {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-from-extract-contrib\", doc(f(\"id\", id), f(\"date_dt\", notInFormatDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + notInFormatDateString + \" was not parsed as a date\", d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(notInFormatDateString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      assertU(commit());\n      assertQ(req(\"id:\" + id), \"//date[@name='date_dt'][.='\" + notInFormatDateString + \"']\");\n      ++id;\n    }\n\n    \r\n    String[] lenientDateStrings = {\n        \"10995-12-31T23:59:59.990Z\", \"+10995-12-31T23:59:59.990Z\",\n        \"995-1-2T3:4:5Z\", \"0995-01-02T03:04:05Z\",\n        \"2021-01-01t03:04:05\", \"2021-01-01T03:04:05Z\",\n        \"2021-12-01 04:04:04\", \"2021-12-01T04:04:04Z\"\n    };\n\n    \r\n    for(int i = 0; i < lenientDateStrings.length; ++i) {\n      String lenientDateString = lenientDateStrings[i];\n      String expectedString = lenientDateStrings[++i];\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-from-extract-contrib\", doc(f(\"id\", id), f(\"date_dt\", lenientDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + lenientDateString + \" was not parsed as a date\",\n          d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(expectedString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      ++id;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":900,"status":"B"},{"authorDate":"2018-08-15 12:25:17","commitOrder":1,"curCode":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n","date":"2018-08-15 12:25:17","endLine":1008,"groupId":"9029","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertParsedDate","params":"(StringinputDateString@DateexpectedDate@Stringchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/4b14a628f5acd15674709150b9ef359be32875.src","preCode":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"B"}],"commitId":"4f1c0aab1cd7775c61dffeab3dc588e8dcf65706","commitMessage":"@@@SOLR-12028: BadApple and AwaitsFix annotations usage\n","date":"2018-08-15 12:25:17","modifiedFileCount":"2","status":"B","submitter":"Erick Erickson"},{"authorTime":"2018-08-15 12:25:17","codes":[{"authorDate":"2018-08-30 02:17:44","commitOrder":2,"curCode":"  public void testISO8601() throws IOException {\n    \r\n    \r\n\n    String[] dateStrings = {\n        \"0001-01-01T01:01:01Z\", \"+12021-12-01T03:03:03Z\",\n        \"0000-04-04T04:04:04Z\", \"-0005-05-05T05:05:05Z\",\n        \"-2021-12-01T04:04:04Z\", \"-12021-12-01T02:02:02Z\"\n    };\n\n    int id = 1;\n\n    \r\n    for(String notInFormatDateString: dateStrings) {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-default-config\", doc(f(\"id\", id), f(\"date_dt\", notInFormatDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + notInFormatDateString + \" was not parsed as a date\", d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(notInFormatDateString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      assertU(commit());\n      assertQ(req(\"id:\" + id), \"//date[@name='date_dt'][.='\" + notInFormatDateString + \"']\");\n      ++id;\n    }\n\n    \r\n    String[] lenientDateStrings = {\n        \"10995-12-31T23:59:59.990Z\", \"+10995-12-31T23:59:59.990Z\",\n        \"995-1-2T3:4:5Z\", \"0995-01-02T03:04:05Z\",\n        \"2021-01-01t03:04:05\", \"2021-01-01T03:04:05Z\",\n        \"2021-12-01 04:04:04\", \"2021-12-01T04:04:04Z\"\n    };\n\n    \r\n    for(int i = 0; i < lenientDateStrings.length; ++i) {\n      String lenientDateString = lenientDateStrings[i];\n      String expectedString = lenientDateStrings[++i];\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-default-config\", doc(f(\"id\", id), f(\"date_dt\", lenientDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + lenientDateString + \" was not parsed as a date\",\n          d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(expectedString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      ++id;\n    }\n  }\n","date":"2018-08-30 02:17:44","endLine":946,"groupId":"26660","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testISO8601","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/48f925644e942b1381adf0c1049eaedc45089d.src","preCode":"  public void testISO8601() throws IOException {\n    \r\n    \r\n\n    String[] dateStrings = {\n        \"0001-01-01T01:01:01Z\", \"+12021-12-01T03:03:03Z\",\n        \"0000-04-04T04:04:04Z\", \"-0005-05-05T05:05:05Z\",\n        \"-2021-12-01T04:04:04Z\", \"-12021-12-01T02:02:02Z\"\n    };\n\n    int id = 1;\n\n    \r\n    for(String notInFormatDateString: dateStrings) {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-from-extract-contrib\", doc(f(\"id\", id), f(\"date_dt\", notInFormatDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + notInFormatDateString + \" was not parsed as a date\", d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(notInFormatDateString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      assertU(commit());\n      assertQ(req(\"id:\" + id), \"//date[@name='date_dt'][.='\" + notInFormatDateString + \"']\");\n      ++id;\n    }\n\n    \r\n    String[] lenientDateStrings = {\n        \"10995-12-31T23:59:59.990Z\", \"+10995-12-31T23:59:59.990Z\",\n        \"995-1-2T3:4:5Z\", \"0995-01-02T03:04:05Z\",\n        \"2021-01-01t03:04:05\", \"2021-01-01T03:04:05Z\",\n        \"2021-12-01 04:04:04\", \"2021-12-01T04:04:04Z\"\n    };\n\n    \r\n    for(int i = 0; i < lenientDateStrings.length; ++i) {\n      String lenientDateString = lenientDateStrings[i];\n      String expectedString = lenientDateStrings[++i];\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-from-extract-contrib\", doc(f(\"id\", id), f(\"date_dt\", lenientDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + lenientDateString + \" was not parsed as a date\",\n          d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(expectedString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      ++id;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":900,"status":"M"},{"authorDate":"2018-08-15 12:25:17","commitOrder":2,"curCode":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n","date":"2018-08-15 12:25:17","endLine":1008,"groupId":"9029","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertParsedDate","params":"(StringinputDateString@DateexpectedDate@Stringchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/4b14a628f5acd15674709150b9ef359be32875.src","preCode":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"N"}],"commitId":"18874a6e36b1930bc7437ee3f1095912b1d20a95","commitMessage":"@@@SOLR-12591: Expand default configSet's date patterns to subsume those of extract contrib\n","date":"2018-08-30 02:17:44","modifiedFileCount":"1","status":"M","submitter":"David Smiley"},{"authorTime":"2019-06-26 07:26:03","codes":[{"authorDate":"2019-06-26 07:26:03","commitOrder":3,"curCode":"  public void testISO8601() throws IOException {\n    \r\n    \r\n\n    String[] dateStrings = {\n        \"0001-01-01T01:01:01Z\", \"+12021-12-01T03:03:03Z\",\n        \"0000-04-04T04:04:04Z\", \"-0005-05-05T05:05:05Z\",\n        \"-2021-12-01T04:04:04Z\", \"-12021-12-01T02:02:02Z\"\n    };\n\n    int id = 1;\n\n    \r\n    for(String notInFormatDateString: dateStrings) {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-default-config\", doc(f(\"id\", id), f(\"date_dt\", notInFormatDateString)));\n      assertNotNull(d);\n      assertThat(\"Date string: \" + notInFormatDateString + \" was not parsed as a date\", d.getFieldValue(\"date_dt\"), IS_DATE);\n      assertEquals(notInFormatDateString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      assertU(commit());\n      assertQ(req(\"id:\" + id), \"//date[@name='date_dt'][.='\" + notInFormatDateString + \"']\");\n      ++id;\n    }\n\n    \r\n    String[] lenientDateStrings = {\n        \"10995-12-31T23:59:59.990Z\", \"+10995-12-31T23:59:59.990Z\",\n        \"995-1-2T3:4:5Z\", \"0995-01-02T03:04:05Z\",\n        \"2021-01-01t03:04:05\", \"2021-01-01T03:04:05Z\",\n        \"2021-12-01 04:04:04\", \"2021-12-01T04:04:04Z\"\n    };\n\n    \r\n    for(int i = 0; i < lenientDateStrings.length; ++i) {\n      String lenientDateString = lenientDateStrings[i];\n      String expectedString = lenientDateStrings[++i];\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-default-config\", doc(f(\"id\", id), f(\"date_dt\", lenientDateString)));\n      assertNotNull(d);\n      assertThat(\"Date string: \" + lenientDateString + \" was not parsed as a date\",\n          d.getFieldValue(\"date_dt\"), IS_DATE);\n      assertEquals(expectedString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      ++id;\n    }\n  }\n","date":"2019-06-26 07:26:03","endLine":985,"groupId":"102918","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testISO8601","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/978c83e26b147be8a7b06765e593d9eddf99e9.src","preCode":"  public void testISO8601() throws IOException {\n    \r\n    \r\n\n    String[] dateStrings = {\n        \"0001-01-01T01:01:01Z\", \"+12021-12-01T03:03:03Z\",\n        \"0000-04-04T04:04:04Z\", \"-0005-05-05T05:05:05Z\",\n        \"-2021-12-01T04:04:04Z\", \"-12021-12-01T02:02:02Z\"\n    };\n\n    int id = 1;\n\n    \r\n    for(String notInFormatDateString: dateStrings) {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-default-config\", doc(f(\"id\", id), f(\"date_dt\", notInFormatDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + notInFormatDateString + \" was not parsed as a date\", d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(notInFormatDateString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      assertU(commit());\n      assertQ(req(\"id:\" + id), \"//date[@name='date_dt'][.='\" + notInFormatDateString + \"']\");\n      ++id;\n    }\n\n    \r\n    String[] lenientDateStrings = {\n        \"10995-12-31T23:59:59.990Z\", \"+10995-12-31T23:59:59.990Z\",\n        \"995-1-2T3:4:5Z\", \"0995-01-02T03:04:05Z\",\n        \"2021-01-01t03:04:05\", \"2021-01-01T03:04:05Z\",\n        \"2021-12-01 04:04:04\", \"2021-12-01T04:04:04Z\"\n    };\n\n    \r\n    for(int i = 0; i < lenientDateStrings.length; ++i) {\n      String lenientDateString = lenientDateStrings[i];\n      String expectedString = lenientDateStrings[++i];\n      IndexSchema schema = h.getCore().getLatestSchema();\n      assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n      SolrInputDocument d = processAdd(\"parse-date-patterns-default-config\", doc(f(\"id\", id), f(\"date_dt\", lenientDateString)));\n      assertNotNull(d);\n      assertTrue(\"Date string: \" + lenientDateString + \" was not parsed as a date\",\n          d.getFieldValue(\"date_dt\") instanceof Date);\n      assertEquals(expectedString, ((Date) d.getField(\"date_dt\").getFirstValue()).toInstant().toString());\n      ++id;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":939,"status":"M"},{"authorDate":"2019-06-26 07:26:03","commitOrder":3,"curCode":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertThat(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\"), IS_DATE);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n","date":"2019-06-26 07:26:03","endLine":1071,"groupId":"102918","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertParsedDate","params":"(StringinputDateString@DateexpectedDate@Stringchain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/978c83e26b147be8a7b06765e593d9eddf99e9.src","preCode":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); \r\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1063,"status":"M"}],"commitId":"583c219183b2bca85936a095727d287c5c28526b","commitMessage":"@@@SOLR-13580: add assumeThat calls to ParsingFieldUpdateProcessorsTest to skip test methods impacted by java 13-ea bug in NumberFormat.parse()\n","date":"2019-06-26 07:26:03","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"}]
