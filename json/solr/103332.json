[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusterms\", \"bogus\"));\n    doc.add(new StoredField(\"bogustermsindex\", \"bogus\"));\n    doc.add(new StoredField(\"bogusmultivalued\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":634,"groupId":"60033","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonIndexedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/9ea952f6e27496597155605ce2dd009b5af1b3.src","preCode":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusterms\", \"bogus\"));\n    doc.add(new StoredField(\"bogustermsindex\", \"bogus\"));\n    doc.add(new StoredField(\"bogusmultivalued\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":364,"groupId":"60033","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonexistantFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/11/92f4b77c8a5ca7b3b081b3cbb831d5161eaa2c.src","preCode":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusterms\", \"bogus\"));\n    doc.add(new StoredField(\"bogustermsindex\", \"bogus\"));\n    doc.add(new StoredField(\"bogusmultivalued\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER);\n    assertEquals(NO_MORE_DOCS, ints.nextDoc());\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER);\n    assertEquals(NO_MORE_DOCS, longs.nextDoc());\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER);\n    assertEquals(NO_MORE_DOCS, floats.nextDoc());\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER);\n    assertEquals(NO_MORE_DOCS, doubles.nextDoc());\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    assertEquals(NO_MORE_DOCS, binaries.nextDoc());\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(NO_MORE_DOCS, sorted.nextDoc());\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    assertEquals(NO_MORE_DOCS, sortedSet.nextDoc());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":621,"groupId":"103332","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonIndexedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/2c381f84ee2d3f02403e5f701ee19571254f48.src","preCode":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusterms\", \"bogus\"));\n    doc.add(new StoredField(\"bogustermsindex\", \"bogus\"));\n    doc.add(new StoredField(\"bogusmultivalued\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":569,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(NO_MORE_DOCS, ints.nextDoc());\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER);\n    assertEquals(NO_MORE_DOCS, longs.nextDoc());\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER);\n    assertEquals(NO_MORE_DOCS, floats.nextDoc());\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER);\n    assertEquals(NO_MORE_DOCS, doubles.nextDoc());\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-10-03 03:18:22","endLine":359,"groupId":"103332","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonexistantFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c047bcb3a10293e0e49cad7c003fe6f6ca2f01.src","preCode":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    \r\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"}]
