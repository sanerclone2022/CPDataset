[{"authorTime":"2020-05-22 08:29:24","codes":[{"authorDate":"2020-05-22 08:29:24","commitOrder":1,"curCode":"  public void testMinExactWithPostFilters() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      \r\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(1, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(1, searcher, cmd);\n      return null;\n    });\n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(100, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n  }\n","date":"2020-05-22 08:29:24","endLine":237,"groupId":"56195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinExactWithPostFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d1/f557e0a833002e2d7fd7862093ab688604b16d.src","preCode":"  public void testMinExactWithPostFilters() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      \r\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(1, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(1, searcher, cmd);\n      return null;\n    });\n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(100, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"},{"authorDate":"2020-05-22 08:29:24","commitOrder":1,"curCode":"  public void testMinExactWithPostFilterThatChangesScoreMode() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      \r\n      MockPostFilter filterQuery = new MockPostFilter(100, 101, ScoreMode.COMPLETE);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n  }\n","date":"2020-05-22 08:29:24","endLine":249,"groupId":"42568","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinExactWithPostFilterThatChangesScoreMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d1/f557e0a833002e2d7fd7862093ab688604b16d.src","preCode":"  public void testMinExactWithPostFilterThatChangesScoreMode() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      \r\n      MockPostFilter filterQuery = new MockPostFilter(100, 101, ScoreMode.COMPLETE);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"}],"commitId":"3db79ed9ff600381277367b94b875467aac60d93","commitMessage":"@@@Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr\n","date":"2020-05-22 08:29:24","modifiedFileCount":"13","status":"B","submitter":"Erick Erickson"},{"authorTime":"2020-06-23 07:50:54","codes":[{"authorDate":"2020-05-22 08:29:24","commitOrder":2,"curCode":"  public void testMinExactWithPostFilters() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      \r\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(1, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(1, searcher, cmd);\n      return null;\n    });\n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(100, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n  }\n","date":"2020-05-22 08:29:24","endLine":237,"groupId":"103099","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinExactWithPostFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d1/f557e0a833002e2d7fd7862093ab688604b16d.src","preCode":"  public void testMinExactWithPostFilters() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      \r\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(1, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(1, searcher, cmd);\n      return null;\n    });\n    \n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      MockPostFilter filterQuery = new MockPostFilter(100, 101);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesGreaterThan(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"},{"authorDate":"2020-06-23 07:50:54","commitOrder":2,"curCode":"  public void testMinExactWithPostFilterThatChangesScoreMode() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      \r\n      MockPostFilter filterQuery = new MockPostFilter(NUM_DOCS * 10, 101, ScoreMode.COMPLETE);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n  }\n","date":"2020-06-23 07:50:54","endLine":249,"groupId":"103099","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinExactWithPostFilterThatChangesScoreMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/418e64a7a95a89f0d0349596f0556989cb794c.src","preCode":"  public void testMinExactWithPostFilterThatChangesScoreMode() throws Exception {\n    h.getCore().withSearcher(searcher -> {\n      QueryCommand cmd = createBasicQueryCommand(1, 1, \"field4_t\", \"0\");\n      \r\n      MockPostFilter filterQuery = new MockPostFilter(100, 101, ScoreMode.COMPLETE);\n      cmd.setFilterList(filterQuery);\n      assertNotNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n      assertMatchesEqual(NUM_DOCS, searcher, cmd);\n      return null;\n    });\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"a1be1de67e641229236dfd4648a71030b8a86fc7","commitMessage":"@@@SOLR-14554: Let Solr use WAND algorithm when scores are requested (#1566)\n\nMake MaxScoreCollector set minCompetitiveScore","date":"2020-06-23 07:50:54","modifiedFileCount":"2","status":"M","submitter":"Tomas Fernandez Lobbe"}]
