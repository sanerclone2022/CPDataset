[{"authorTime":"2018-04-20 23:11:28","codes":[{"authorDate":"2018-04-20 23:11:28","commitOrder":1,"curCode":"  public void testMemset() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\"),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 3, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 30, 0.0);\n  }\n","date":"2018-04-20 23:11:48","endLine":233,"groupId":"13634","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMemset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/f48844a0feadd812e898fc6b9a32484883333c.src","preCode":"  public void testMemset() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\"),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 3, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 30, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"},{"authorDate":"2018-04-20 23:11:28","commitOrder":1,"curCode":"  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n","date":"2018-04-20 23:11:48","endLine":260,"groupId":"13634","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMemsetSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/f48844a0feadd812e898fc6b9a32484883333c.src","preCode":"  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"f0d1e11796419d45051f4384f47cf83b0fb8044b","commitMessage":"@@@SOLR-12159: Add memset Stream Evaluator\n","date":"2018-04-20 23:11:48","modifiedFileCount":"4","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2018-10-23 03:20:13","codes":[{"authorDate":"2018-04-20 23:11:28","commitOrder":2,"curCode":"  public void testMemset() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\"),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 3, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 30, 0.0);\n  }\n","date":"2018-04-20 23:11:48","endLine":233,"groupId":"10885","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMemset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/f48844a0feadd812e898fc6b9a32484883333c.src","preCode":"  public void testMemset() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\"),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 3, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 30, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"},{"authorDate":"2018-10-23 03:20:13","commitOrder":2,"curCode":"  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(plist(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n","date":"2018-10-23 03:20:13","endLine":260,"groupId":"10885","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMemsetSize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/ff1ab5cf1fa592aa053abeaa4126877601cb15.src","preCode":"  public void testMemsetSize() throws Exception {\n    String expr = \"let(echo=\\\"b, c\\\",\" +\n        \"              a=memset(list(tuple(field1=val(1), field2=val(10)), tuple(field1=val(2), field2=val(20))), \" +\n        \"                       cols=\\\"field1, field2\\\", \" +\n        \"                       vars=\\\"f1, f2\\\",\" +\n        \"                       size=1),\" +\n        \"              b=add(f1),\" +\n        \"              c=add(f2))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    Number f1 = (Number)tuples.get(0).get(\"b\");\n    assertEquals(f1.doubleValue(), 1, 0.0);\n\n    Number f2 = (Number)tuples.get(0).get(\"c\");\n    assertEquals(f2.doubleValue(), 10, 0.0);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"fcaea07f3c8cba34906ca02f40fb1d2c40badc08","commitMessage":"@@@SOLR-12829: Add plist (parallel list) Streaming Expression\n","date":"2018-10-23 03:20:13","modifiedFileCount":"5","status":"M","submitter":"Joel Bernstein"}]
