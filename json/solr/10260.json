[{"authorTime":"2015-11-12 08:08:45","codes":[{"authorDate":"2015-11-12 08:08:45","commitOrder":1,"curCode":"  public Tuple read() throws IOException {\n    \n    if(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        return fullTuple.clone();\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n  \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","date":"2015-11-12 08:08:45","endLine":119,"groupId":"34767","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/b83bfe049c05386170eba163e4163b6af68189.src","preCode":"  public Tuple read() throws IOException {\n    \n    if(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        return fullTuple.clone();\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n  \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/OuterHashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2015-11-12 08:08:45","commitOrder":1,"curCode":"  public Tuple read() throws IOException {\n    \n    findNextWorkingFullTuple:\n    while(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        continue findNextWorkingFullTuple;\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n    \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","date":"2015-11-12 08:08:45","endLine":220,"groupId":"34767","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/8a09166844b09a80f1248af991542529be8235.src","preCode":"  public Tuple read() throws IOException {\n    \n    findNextWorkingFullTuple:\n    while(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        continue findNextWorkingFullTuple;\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n    \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"19715d10ef7e1fcee5a8f7de43b230e38d9b22c5","commitMessage":"@@@SOLR-8188: Adds Hash and OuterHash Joins to the Streaming API and Streaming Expressions\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713950 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-12 08:08:45","modifiedFileCount":"2","status":"B","submitter":"Dennis Gove"},{"authorTime":"2016-05-06 19:40:52","codes":[{"authorDate":"2016-05-06 19:40:52","commitOrder":2,"curCode":"  public Tuple read() throws IOException {\n    \n    if(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple, leftHashOn);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        return fullTuple.clone();\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n  \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","date":"2016-05-06 19:40:52","endLine":130,"groupId":"34767","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9e/8233492dc60bb8b2c7df4a24c083070c52b798.src","preCode":"  public Tuple read() throws IOException {\n    \n    if(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        return fullTuple.clone();\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n  \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/OuterHashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2016-05-06 19:40:52","commitOrder":2,"curCode":"  public Tuple read() throws IOException {\n    \n    findNextWorkingFullTuple:\n    while(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple, leftHashOn);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        continue findNextWorkingFullTuple;\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n    \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","date":"2016-05-06 19:40:52","endLine":276,"groupId":"34767","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fe/ff591fbf2a4389526bd875a85e2715d2f861aa.src","preCode":"  public Tuple read() throws IOException {\n    \n    findNextWorkingFullTuple:\n    while(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        continue findNextWorkingFullTuple;\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n    \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"a531323b19125266289c7cafacbf5f6ea41cc84d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-06 19:40:52","modifiedFileCount":"5","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-05-15 22:23:25","codes":[{"authorDate":"2018-05-15 22:23:25","commitOrder":3,"curCode":"  public Tuple read() throws IOException {\n    \n    if(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      \r\n      String fullHash = computeHash(fullTuple, leftHashOn);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        return fullTuple.clone();\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n  \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","date":"2018-05-19 05:14:39","endLine":131,"groupId":"10260","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/ec11115817953f0c58ecdedd31fb9b5a9b7e24.src","preCode":"  public Tuple read() throws IOException {\n    \n    if(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple, leftHashOn);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        return fullTuple.clone();\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n  \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/OuterHashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-05-15 22:23:25","commitOrder":3,"curCode":"  public Tuple read() throws IOException {\n    \n    findNextWorkingFullTuple:\n    while(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      String fullHash = computeHash(fullTuple, leftHashOn);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        continue findNextWorkingFullTuple;\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n    \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","date":"2018-05-19 05:14:39","endLine":277,"groupId":"10260","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/534df33b7362c33892998648e776d3cee49ee2.src","preCode":"  public Tuple read() throws IOException {\n    \n    findNextWorkingFullTuple:\n    while(null == workingFullTuple){\n      Tuple fullTuple = fullStream.read();\n      \n      \r\n      if(fullTuple.EOF){\n        return fullTuple;\n      }\n      \n      \r\n      \r\n      Integer fullHash = calculateHash(fullTuple, leftHashOn);\n      if(null == fullHash || !hashedTuples.containsKey(fullHash)){\n        continue findNextWorkingFullTuple;\n      }\n      \n      workingFullTuple = fullTuple;\n      workingFullHash = fullHash;\n      workngHashSetIdx = 0;      \n    }\n    \n    \r\n    \r\n    List<Tuple> matches = hashedTuples.get(workingFullHash);\n    Tuple returnTuple = workingFullTuple.clone();\n    returnTuple.merge(matches.get(workngHashSetIdx));\n    \n    \r\n    workngHashSetIdx++;\n    \n    if(workngHashSetIdx >= matches.size()){\n      \r\n      workingFullTuple = null;\n      workingFullHash = null;\n      workngHashSetIdx = 0;\n    }\n    \n    return returnTuple;\n    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"f506bc9cb7f1e82295c9c367487d49a80e767731","commitMessage":"@@@SOLR-12355: Fixes hash conflict in HashJoinStream and OuterHashJoinStream\n","date":"2018-05-19 05:14:39","modifiedFileCount":"3","status":"M","submitter":"Dennis Gove"}]
