[{"authorTime":"2018-05-15 22:23:25","codes":[{"authorDate":"2018-05-15 22:23:25","commitOrder":1,"curCode":"  public void testHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(0, tuples.size());\n    \n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-05-19 05:14:39","endLine":1982,"groupId":"34120","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashJoinStreamWithKnownConflict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/412dfa20e978bed129efca2e9cbe22136bcc5a.src","preCode":"  public void testHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(0, tuples.size());\n    \n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1947,"status":"B"},{"authorDate":"2018-05-15 22:23:25","commitOrder":1,"curCode":"  public void testOuterHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\", \"extra_s\", \"foo\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"outerHashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s,extra_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new OuterHashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(1, tuples.size());\n      assertFalse(tuples.get(0).fields.containsKey(\"extra_s\"));\n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-05-19 05:14:39","endLine":2020,"groupId":"34120","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuterHashJoinStreamWithKnownConflict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/412dfa20e978bed129efca2e9cbe22136bcc5a.src","preCode":"  public void testOuterHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\", \"extra_s\", \"foo\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"outerHashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s,extra_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new OuterHashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(1, tuples.size());\n      assertFalse(tuples.get(0).fields.containsKey(\"extra_s\"));\n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1985,"status":"B"}],"commitId":"f506bc9cb7f1e82295c9c367487d49a80e767731","commitMessage":"@@@SOLR-12355: Fixes hash conflict in HashJoinStream and OuterHashJoinStream\n","date":"2018-05-19 05:14:39","modifiedFileCount":"3","status":"B","submitter":"Dennis Gove"},{"authorTime":"2020-06-08 22:03:07","codes":[{"authorDate":"2018-05-15 22:23:25","commitOrder":2,"curCode":"  public void testHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(0, tuples.size());\n    \n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-05-19 05:14:39","endLine":1982,"groupId":"10685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashJoinStreamWithKnownConflict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/412dfa20e978bed129efca2e9cbe22136bcc5a.src","preCode":"  public void testHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(0, tuples.size());\n    \n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1947,"status":"N"},{"authorDate":"2020-06-08 22:03:07","commitOrder":2,"curCode":"  public void testOuterHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\", \"extra_s\", \"foo\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"outerHashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s,extra_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new OuterHashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(1, tuples.size());\n      assertFalse(tuples.get(0).getFields().containsKey(\"extra_s\"));\n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":2304,"groupId":"10685","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuterHashJoinStreamWithKnownConflict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/7f655a45f5331632789482c7271d6d237ea9d3.src","preCode":"  public void testOuterHashJoinStreamWithKnownConflict() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"type_s\",\"left\", \"bbid_s\", \"MG!!00TNH1\", \"ykey_s\", \"Mtge\")\n        .add(id, \"2\", \"type_s\",\"right\", \"bbid_s\", \"MG!!00TNGP\", \"ykey_s\", \"Mtge\", \"extra_s\", \"foo\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class);\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"outerHashJoin(\"\n          + \"  search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s\\\", fq=\\\"type_s:left\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  hashed=search(collection1, q=*:*, fl=\\\"bbid_s,ykey_s,extra_s\\\", fq=\\\"type_s:right\\\", sort=\\\"bbid_s asc, ykey_s asc\\\"),\"\n          + \"  on=\\\"bbid_s,ykey_s\\\"\"\n          + \")\");\n      stream = new OuterHashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      \n      assertEquals(1, tuples.size());\n      assertFalse(tuples.get(0).fields.containsKey(\"extra_s\"));\n    \n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2269,"status":"M"}],"commitId":"30924f23d6834605b9bf2d24509755ff61c4e878","commitMessage":"@@@SOLR-14470: Add streaming expressions to /export handler.\n","date":"2020-06-08 22:03:07","modifiedFileCount":"75","status":"M","submitter":"Andrzej Bialecki"}]
