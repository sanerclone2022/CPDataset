[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals1 = p1.getValues(context, readerContext);\n\n    final DocValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2011-07-10 07:01:53","endLine":117,"groupId":"63092","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1f/ebdaf19f164b764927be149a03566d099c6692.src","preCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals1 = p1.getValues(context, readerContext);\n\n    final DocValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, readerContext);\n\n    final DocValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2011-07-10 07:01:53","endLine":107,"groupId":"29197","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/50577ef508627ab6aea4b3c893fc4fdf3db4a1.src","preCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, readerContext);\n\n    final DocValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2011-12-14 02:39:06","commitOrder":2,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2011-12-14 02:39:06","endLine":117,"groupId":"63092","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/45/aeb5eae0054b7c49654f0fed0e49bf4979a263.src","preCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues vals1 = p1.getValues(context, readerContext);\n\n    final DocValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":2,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2011-12-14 02:39:06","endLine":107,"groupId":"29197","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/1fa9ae54a6143c4f9fb5d7afc533b77d7ce286.src","preCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, readerContext);\n\n    final DocValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"8d7749ea4fc55e54f4d7ead438c24f327ceb8358","commitMessage":"@@@LUCENE-3622: separate IndexDocValues interface from implementation (phase 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1213844 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-12-14 02:39:06","modifiedFileCount":"136","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":3,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":115,"groupId":"63092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/6683ad72fc0b8af609ca00a582ac712fcd9eb0.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2014-09-24 07:51:55","commitOrder":3,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":178,"groupId":"29197","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/67/0b896bdac774f129e328e7dd9505e1266e3a47.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":4,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":114,"groupId":"63092","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/97f2b9c685b7fa4d3b33b1e6a2a8f74f470bbb.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":4,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":177,"groupId":"29197","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/47/4ece3de7fefc03971dc3e14066107d55a67d5c.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-06-13 23:00:58","codes":[{"authorDate":"2020-06-13 23:00:58","commitOrder":5,"curCode":"  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2020-06-13 23:00:58","endLine":116,"groupId":"63092","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(@SuppressWarnings({\"rawtypes\"})Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/e0ed43daf70a080c9f26265fbbc7de50ef7f2d.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-06-13 23:00:58","commitOrder":5,"curCode":"  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2020-06-13 23:00:58","endLine":179,"groupId":"29197","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(@SuppressWarnings({\"rawtypes\"})Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/e7e6d7cd30b798331454d8a7f55642acc245bd.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"a41aa20b0afaadf47ec6e58476a947c6936c1921","commitMessage":"@@@SOLR-14564: Fix or suppress remaining warnings in solr/core\n","date":"2020-06-13 23:00:58","modifiedFileCount":"91","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":6,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":114,"groupId":"102082","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/bfaae8897abbe9e23882f37319ef356185e8be.src","preCode":"  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals1 = p1.getValues(context, readerContext);\n\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals2 = p2.getValues(context, readerContext);\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        sb.append(vals1.toString(doc)).append(',').append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":6,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":177,"groupId":"102082","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/b9fc2d5073af1116bd8f76d4b8a8f9b96f8aa7.src","preCode":"  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals1 = source1.getValues(context, readerContext);\n\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues vals2 = source2.getValues(context, readerContext);\n\n\n    return new DoubleDocValues(this) {\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        return distance(doc, vals1, vals2);\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
