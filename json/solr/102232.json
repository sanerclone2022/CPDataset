[{"authorTime":"2019-11-22 20:46:20","codes":[{"authorDate":"2017-09-08 13:20:00","commitOrder":3,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","date":"2017-09-08 13:20:00","endLine":82,"groupId":"21377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/8d0fd44451f8aa7cc6fa39439a274b154f5949.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2019-11-22 20:46:20","commitOrder":3,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-11-22 20:46:20","endLine":62,"groupId":"13615","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/be9fc9909439a91c09b0bdb2adc2eb3593e84d.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"2740d90dee8aef81d98afd63a53ac06320b7e73e","commitMessage":"@@@SOLR-13912: add support for countvals aggregation in JSON facet module\n\n* This aggregation is equivalent to StatsComponent's count\n","date":"2019-11-22 20:46:20","modifiedFileCount":"6","status":"M","submitter":"Munendra S N"},{"authorTime":"2019-11-22 20:46:20","codes":[{"authorDate":"2019-12-05 13:18:22","commitOrder":4,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if(sf.getType().getNumberType() != null) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            \r\n            return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-12-05 13:18:22","endLine":100,"groupId":"32355","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/7d86383c202623edcaab6a1cac6984b2ab6d10.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-11-22 20:46:20","commitOrder":4,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-11-22 20:46:20","endLine":62,"groupId":"13615","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/be9fc9909439a91c09b0bdb2adc2eb3593e84d.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"12e8cca6442e6c64a414d832b3982cc77354c6ad","commitMessage":"@@@SOLR-11706: add support for aggregation on multivalued fields\n\n* min.  max.  sum.  sumsq.  avg.  stddev.  variance.  percentile aggregations\n  in JSON facets now supports multivalued fields\n","date":"2019-12-05 13:18:22","modifiedFileCount":"14","status":"M","submitter":"Munendra S N"},{"authorTime":"2019-11-22 20:46:20","codes":[{"authorDate":"2019-12-08 13:19:37","commitOrder":5,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-12-08 13:19:37","endLine":105,"groupId":"49319","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/69226e6162871792e4613b856572b5edfa0234.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if(sf.getType().getNumberType() != null) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            \r\n            return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-11-22 20:46:20","commitOrder":5,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-11-22 20:46:20","endLine":62,"groupId":"13615","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/be9fc9909439a91c09b0bdb2adc2eb3593e84d.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"df508ffe0149ebbc90b42bb316975318f613d910","commitMessage":"@@@SOLR-11706: fix for multivalued trie date in min/max and more tests\n\n* selecting single value for multivalued trie date field is not\n  supported.\n* add additional tests for variance.  unique.  hll aggregations\n","date":"2019-12-08 13:19:37","modifiedFileCount":"3","status":"M","submitter":"Munendra S N"},{"authorTime":"2020-04-10 21:46:54","codes":[{"authorDate":"2020-04-10 21:46:54","commitOrder":6,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-04-10 22:00:20","endLine":105,"groupId":"49319","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/36ee1c362226268e8470f12e14f08ea37b0131.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-04-10 21:46:54","commitOrder":6,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-04-10 22:00:20","endLine":62,"groupId":"13615","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/fa983b926c98c81e123977142b7c84e521a043.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"36b280bd0a21952ea54c7567f037eb48dc93205a","commitMessage":"@@@SOLR-11775: return long val for facet count in json facet\n\n* Long value is returned for any count related to json facets\n  irrespective of number of shards\n","date":"2020-04-10 22:00:20","modifiedFileCount":"33","status":"M","submitter":"Munendra S N"},{"authorTime":"2020-05-07 23:04:06","codes":[{"authorDate":"2020-05-07 23:04:06","commitOrder":7,"curCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-07 23:04:06","endLine":105,"groupId":"49319","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetRequest.FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0f/f3ea746c2b3e0cc0e5a0e227345f14987c93fd.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-05-07 23:04:06","commitOrder":7,"curCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-07 23:04:06","endLine":62,"groupId":"13615","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetRequest.FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/35c0fdb2387ebb721ef30687adce3a151e80df.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"31b350e8040cbe30c4e85b7fb82eab4b6afd81c7","commitMessage":"@@@SOLR-14426 Move auxiliary classes to nested classes (#1487)\n\n","date":"2020-05-07 23:04:06","modifiedFileCount":"67","status":"M","submitter":"Mike Drob"},{"authorTime":"2020-05-21 20:59:32","codes":[{"authorDate":"2020-05-21 20:59:32","commitOrder":8,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-21 20:59:32","endLine":105,"groupId":"102232","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/82/8fbe60623d5a9e933ef90c01bddd9cdc551409.src","preCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              \r\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    \r\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    \r\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-05-21 20:59:32","commitOrder":8,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-21 20:59:32","endLine":62,"groupId":"102232","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/15ff6352914f06594dc73e0f4b7c5ffe0ae4e9.src","preCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new CountSortedNumericDVAcc(fcontext, sf, numSlots);\n          }\n          return new CountSortedSetDVAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"'countvals' aggregation not supported for PointField without docValues\");\n        }\n        return new CountMultiValuedAcc(fcontext, sf, numSlots);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n    return new CountValSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/CountValsAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"9c066f60f1804c26db8be226429a0be046c5a4db","commitMessage":"@@@SOLR-14482: Fix or suppress warnings in solr/search/facet\n","date":"2020-05-21 20:59:32","modifiedFileCount":"57","status":"M","submitter":"Erick Erickson"}]
