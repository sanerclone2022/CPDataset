[{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  protected Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        try {\n          final LTRScoringModel algo = fromLTRScoringModelMap(solrResourceLoader, u, managedFeatureStore);\n          addModel(algo);\n        } catch (final ModelException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n\n    if (updates instanceof Map) {\n      final Map<String,Object> map = (Map<String,Object>) updates;\n      try {\n        final LTRScoringModel algo = fromLTRScoringModelMap(solrResourceLoader, map, managedFeatureStore);\n        addModel(algo);\n      } catch (final ModelException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    return modelsAsManagedResources(store.getModels());\n  }\n","date":"2016-11-02 01:50:14","endLine":172,"groupId":"27739","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"applyUpdatesToManagedData","params":"(Objectupdates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/97/aaa4004ad8338024602a5622fe1dc4506af42b.src","preCode":"  protected Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        try {\n          final LTRScoringModel algo = fromLTRScoringModelMap(solrResourceLoader, u, managedFeatureStore);\n          addModel(algo);\n        } catch (final ModelException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n\n    if (updates instanceof Map) {\n      final Map<String,Object> map = (Map<String,Object>) updates;\n      try {\n        final LTRScoringModel algo = fromLTRScoringModelMap(solrResourceLoader, map, managedFeatureStore);\n        addModel(algo);\n      } catch (final ModelException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    return modelsAsManagedResources(store.getModels());\n  }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"},{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        final String featureStore = (String) u.get(FEATURE_STORE_NAME_KEY);\n        addFeature(u, featureStore);\n      }\n    }\n\n    if (updates instanceof Map) {\n      \r\n      Map<String,Object> updatesMap = (Map<String,Object>) updates;\n      final String featureStore = (String) updatesMap.get(FEATURE_STORE_NAME_KEY);\n      addFeature(updatesMap, featureStore);\n    }\n\n    final List<Object> features = new ArrayList<>();\n    for (final FeatureStore fs : stores.values()) {\n      features.addAll(featuresAsManagedResources(fs));\n    }\n    return features;\n  }\n","date":"2016-11-02 01:50:14","endLine":149,"groupId":"838","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"applyUpdatesToManagedData","params":"(Objectupdates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/b217c5c37b6c710930686131c7a90ad3365f1e.src","preCode":"  public Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        final String featureStore = (String) u.get(FEATURE_STORE_NAME_KEY);\n        addFeature(u, featureStore);\n      }\n    }\n\n    if (updates instanceof Map) {\n      \r\n      Map<String,Object> updatesMap = (Map<String,Object>) updates;\n      final String featureStore = (String) updatesMap.get(FEATURE_STORE_NAME_KEY);\n      addFeature(updatesMap, featureStore);\n    }\n\n    final List<Object> features = new ArrayList<>();\n    for (final FeatureStore fs : stores.values()) {\n      features.addAll(featuresAsManagedResources(fs));\n    }\n    return features;\n  }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedFeatureStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"5a66b3bc089e4b3e73b1c41c4cdcd89b183b85e7","commitMessage":"@@@SOLR-8542: Adds Solr Learning to Rank (LTR) plugin for reranking results with machine learning models. (Michael Nilsson.  Diego Ceccarelli.  Joshua Pantony.  Jon Dorando.  Naveen Santhapuri.  Alessandro Benedetti.  David Grohmann.  Christine Poerschke)\n","date":"2016-11-02 01:50:14","modifiedFileCount":"0","status":"B","submitter":"Christine Poerschke"},{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2016-12-08 04:43:49","commitOrder":2,"curCode":"  protected Object applyUpdatesToManagedData(Object updates) {\n\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        addModelFromMap(u);\n      }\n    }\n\n    if (updates instanceof Map) {\n      final Map<String,Object> map = (Map<String,Object>) updates;\n      addModelFromMap(map);\n    }\n\n    return modelsAsManagedResources(store.getModels());\n  }\n","date":"2016-12-08 04:46:42","endLine":166,"groupId":"101213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"applyUpdatesToManagedData","params":"(Objectupdates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9c/19b0a7c26006b461973bb25e4aff0601c64b07.src","preCode":"  protected Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        try {\n          final LTRScoringModel algo = fromLTRScoringModelMap(solrResourceLoader, u, managedFeatureStore);\n          addModel(algo);\n        } catch (final ModelException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n    }\n\n    if (updates instanceof Map) {\n      final Map<String,Object> map = (Map<String,Object>) updates;\n      try {\n        final LTRScoringModel algo = fromLTRScoringModelMap(solrResourceLoader, map, managedFeatureStore);\n        addModel(algo);\n      } catch (final ModelException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n    return modelsAsManagedResources(store.getModels());\n  }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2016-11-02 01:50:14","commitOrder":2,"curCode":"  public Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        final String featureStore = (String) u.get(FEATURE_STORE_NAME_KEY);\n        addFeature(u, featureStore);\n      }\n    }\n\n    if (updates instanceof Map) {\n      \r\n      Map<String,Object> updatesMap = (Map<String,Object>) updates;\n      final String featureStore = (String) updatesMap.get(FEATURE_STORE_NAME_KEY);\n      addFeature(updatesMap, featureStore);\n    }\n\n    final List<Object> features = new ArrayList<>();\n    for (final FeatureStore fs : stores.values()) {\n      features.addAll(featuresAsManagedResources(fs));\n    }\n    return features;\n  }\n","date":"2016-11-02 01:50:14","endLine":149,"groupId":"101213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"applyUpdatesToManagedData","params":"(Objectupdates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/b217c5c37b6c710930686131c7a90ad3365f1e.src","preCode":"  public Object applyUpdatesToManagedData(Object updates) {\n    if (updates instanceof List) {\n      final List<Map<String,Object>> up = (List<Map<String,Object>>) updates;\n      for (final Map<String,Object> u : up) {\n        final String featureStore = (String) u.get(FEATURE_STORE_NAME_KEY);\n        addFeature(u, featureStore);\n      }\n    }\n\n    if (updates instanceof Map) {\n      \r\n      Map<String,Object> updatesMap = (Map<String,Object>) updates;\n      final String featureStore = (String) updatesMap.get(FEATURE_STORE_NAME_KEY);\n      addFeature(updatesMap, featureStore);\n    }\n\n    final List<Object> features = new ArrayList<>();\n    for (final FeatureStore fs : stores.values()) {\n      features.addAll(featuresAsManagedResources(fs));\n    }\n    return features;\n  }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedFeatureStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"}],"commitId":"bfc3690d5203cee20550450bac3771e5c2b85cbf","commitMessage":"@@@SOLR-8542: couple of tweaks (Michael Nilsson.  Diego Ceccarelli.  Christine Poerschke)\n\n* removed code triplication in ManagedModelStore\n* LTRScoringQuery.java tweaks\n* FeatureLogger.makeFeatureVector(...) can now safely be called repeatedly (though that doesn't happen at present)\n* make Feature.FeatureWeight.extractTerms a no-op; (OriginalScore|SolrFeature)Weight now implement extractTerms\n\n* LTRThreadModule javadocs and README.md tweaks\n\n* add TestFieldValueFeature.testBooleanValue test; replace \"T\"/\"F\" magic string use in FieldValueFeature\n* add TestOriginalScoreScorer test; add OriginalScoreScorer.freq() method\n* in TestMultipleAdditiveTreesModel revive dead explain test\n","date":"2016-12-08 04:46:42","modifiedFileCount":"12","status":"M","submitter":"Christine Poerschke"}]
