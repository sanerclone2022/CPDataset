[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues aVals, DocValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"max\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.max(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"min\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.min(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (DocValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2011-07-10 07:01:53","endLine":734,"groupId":"14985","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/99ac8b7dc62696a0d0fe64e6e67e7483a92e09.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues aVals, DocValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"max\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.max(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"min\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.min(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (DocValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, DocValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-07-10 07:01:53","endLine":69,"groupId":"12256","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/6c548a7c603a945423a98a664da063a9d190a7.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, DocValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-09-27 06:03:31","commitOrder":2,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues aVals, DocValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (DocValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2011-09-27 06:03:31","endLine":735,"groupId":"10379","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/62a2d26cce95762468c240a02d2c41e90d0fcc.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues aVals, DocValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"max\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.max(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"min\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.min(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (DocValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, DocValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-07-10 07:01:53","endLine":69,"groupId":"12256","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/6c548a7c603a945423a98a664da063a9d190a7.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, DocValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"9bdaa028d668f3c89c764a14ca83642b176f7a2e","commitMessage":"@@@SOLR-2757: min/max functions now take unlimited number of arguments\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1176097 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-27 06:03:31","modifiedFileCount":"2","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2011-12-14 02:39:06","commitOrder":3,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2011-12-14 02:39:06","endLine":735,"groupId":"10379","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/5dea209e7296e5f4881afedeb6b337a5e8c2af.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, DocValues aVals, DocValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, DocValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, DocValues a, DocValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, DocValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            for (DocValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, DocValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (DocValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":3,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, DocValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"8d7749ea4fc55e54f4d7ead438c24f327ceb8358","commitMessage":"@@@LUCENE-3622: separate IndexDocValues interface from implementation (phase 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1213844 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-12-14 02:39:06","modifiedFileCount":"136","status":"M","submitter":"Robert Muir"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-02-10 08:22:01","commitOrder":4,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-02-10 08:22:01","endLine":745,"groupId":"10379","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/47/887bb4c03bdefea6bb0ec285a0d4c618e5cceb.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":4,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"6c4139a62b677d72de695ea98967a19aad8c2901","commitMessage":"@@@tests: add testfunc to ensure weighting occurs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1242617 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-10 08:22:01","modifiedFileCount":"3","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-03-14 07:28:17","commitOrder":5,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.toRadians(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.toDegrees(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-03-14 07:28:17","endLine":743,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/c21be73b0bc5862a7ae53c03e8c605f504c72f.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":5,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"2ac613aef9ba5e329b99d0e2a83ad5661df3b45d","commitMessage":"@@@LUCENE-3795: Replace contrib/spatial with modules/spatial  (merge from branch)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1300409 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-14 07:28:17","modifiedFileCount":"13","status":"M","submitter":"Ryan McKinley"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-03-14 12:05:51","commitOrder":6,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-03-14 12:05:51","endLine":743,"groupId":"10379","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/051ed848384e085b4591c49ec2c39bea59db56.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.toRadians(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.toDegrees(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":6,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"d8fff9b873687b452fd3575c15a2e4dc75a08f5b","commitMessage":"@@@LUCENE-3795: re-optimize degrees-radians conversions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1300457 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-14 12:05:51","modifiedFileCount":"5","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-04-17 10:03:05","commitOrder":7,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-04-17 10:03:05","endLine":743,"groupId":"10379","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/35f28e072da77bbc603648aa8b24f98add0c85.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = (StringDistance) fp.req.getCore().getResourceLoader().newInstance(distClass);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":7,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"a4cbd8a6051e3ead0b576bdf6ab2f8ec57745aff","commitMessage":"@@@SOLR-3357: Added expected Class type to ResourceLoader.newInstance\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1326879 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-17 10:03:05","modifiedFileCount":"32","status":"M","submitter":"Christopher John Male"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-06-19 03:03:21","commitOrder":8,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-06-19 03:03:21","endLine":743,"groupId":"10379","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/75/ade0dcd3f5266b362ea7290570415984f35c58.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.getString());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":8,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"f6bd05ca2fd9728523a847b6562920a72488d6d9","commitMessage":"@@@SOLR-3522: fixed parsing of the 'literal()' function\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1351460 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-19 03:03:21","modifiedFileCount":"2","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-06-29 00:39:25","commitOrder":9,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-06-29 00:39:25","endLine":743,"groupId":"10379","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/ee84742d418f95efa087453c8bc6bb376134b1.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":9,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"fd16190940d7495e985f44ce7504562c8bbc91e6","commitMessage":"@@@LUCENE-4172: clean up redundant throws clauses\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1355069 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-29 00:39:25","modifiedFileCount":"402","status":"M","submitter":"Steven Rowe"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-08-07 23:00:19","commitOrder":10,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-08-07 23:00:19","endLine":762,"groupId":"10379","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/28e3decdb10b7d5af6a53f9631050563c03122.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":10,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"8da8c7801594cc86bf8c594dc658ad5be1194572","commitMessage":"@@@SOLR-3685: cloud sometimes skipped peersync attempt due to flags not being cleared when no updates were buffered during replication\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1370297 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-07 23:00:19","modifiedFileCount":"4","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-08-31 07:29:00","commitOrder":11,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-08-31 07:29:00","endLine":779,"groupId":"10379","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/78eccc4296f13ad35747e2d45e871dd4c296ed.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":11,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"59847bd6d2d19325a7acefa7e4bc15509c524088","commitMessage":"@@@SOLR-2768: new \"mod(x. y)\" function for computing the modulus of two value sources\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1379225 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-31 07:29:00","modifiedFileCount":"2","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2012-09-05 23:37:11","commitOrder":12,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-09-05 23:37:11","endLine":780,"groupId":"10379","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/e7a882188cea2e835beeb6fcaee6af59c4a6bb.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * HaversineConstFunction.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2011-12-14 02:39:06","commitOrder":12,"curCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","date":"2011-12-14 02:39:06","endLine":69,"groupId":"12256","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/c8d90b7f331508e345899de04d6f9e6e89b7f5.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n\tValueSource source = fp.parseValueSource();\n\tfinal float nvl = fp.parseFloat();\n\n\treturn new SimpleFloatFunction(source) {\n\t    @Override\n      protected String name() {\n\t\treturn \"nvl\";\n\t    }\n\n\t    @Override\n      protected float func(int doc, FunctionValues vals) {\n\t\tfloat v = vals.floatVal(doc);\n\t\tif (v == nvlFloatValue) {\n\t\t    return nvl;\n\t\t} else {\n\t\t    return v;\n\t\t}\n\t    }\n\t};\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"1db287ce64036c6a1fe03b4e9e110fd798baeed3","commitMessage":"@@@LUCENE-4351 update to Spatial4j 0.3.  Lucene spatial distances are now all degrees based (0-180).  Also.  improved TestRecursivePrefixTreeStrategy.geohashRecursiveRandom() to use circle index clusters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1381230 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-05 23:37:11","modifiedFileCount":"34","status":"M","submitter":"David Wayne Smiley"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2012-11-24 03:45:50","commitOrder":13,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2012-11-24 03:45:50","endLine":776,"groupId":"34405","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3a/935f7166cff63e0c572c4384a36a6cf1414a0e.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException{\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws ParseException {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":13,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws ParseException {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"2d4e789d00ecb5dfaf73e7df01a7da4502c404a9","commitMessage":"@@@SOLR-4093: solr specific parser + localParams syntax\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1413042 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-11-24 03:45:50","modifiedFileCount":"35","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-03-05 04:25:37","commitOrder":14,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2013-03-05 04:25:37","endLine":792,"groupId":"34405","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/d7841e5838af9d95d8d3e7c3dcf66a0d17b372.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":14,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"a28589d2c3cb649ce6306e6fa2100aea7002d509","commitMessage":"@@@SOLR-4138: CurrencyField fields can now be used in a ValueSources. There is also a new currency(field. [CODE]) function\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1452483 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-05 04:25:37","modifiedFileCount":"4","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-06-26 12:44:26","commitOrder":15,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2013-06-26 12:44:26","endLine":782,"groupId":"34405","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/26b8b8fac4eadc7f8e218bcbfad943d7ab909b.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", HaversineConstFunction.parser);\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n\n\n          List<ValueSource> s1 = new ArrayList<ValueSource>();\n          s1.add(one);\n          s1.add(two);\n          pv1 = new VectorValueSource(s1);\n          ValueSource x2 = fp.parseValueSource();\n          ValueSource y2 = fp.parseValueSource();\n          List<ValueSource> s2 = new ArrayList<ValueSource>();\n          s2.add(x2);\n          s2.add(y2);\n          pv2 = new VectorValueSource(s2);\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":15,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"2239a52453811b01459f9959ddf05155723ad3fb","commitMessage":"@@@SOLR-2345: refactor out GeoDistValueSourceParser from HaversineConstFunction\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1496731 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-26 12:44:26","modifiedFileCount":"2","status":"M","submitter":"David Wayne Smiley"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-12-02 16:33:33","commitOrder":16,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2013-12-02 16:33:33","endLine":782,"groupId":"34405","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/6cb941a3b1a83791dbfb320d76653156f3918d.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        float target = fp.parseFloat();\n        Float def = fp.hasMoreArguments() ? fp.parseFloat() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":16,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"4109c6db3365a901de47c97dcb41e673ee62ec95","commitMessage":"@@@SOLR-1871: The 'map' function query accepts a ValueSource as target and default value\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1546926 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-02 16:33:33","modifiedFileCount":"4","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-12-13 14:40:01","commitOrder":17,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new ConcatenateFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2013-12-13 14:40:01","endLine":789,"groupId":"34405","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/c52489249bb5248637939391996aef95004bbd.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":17,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"78d8d0c53552473f52c60cf098ce2fc6d6658365","commitMessage":"@@@SOLR-3702: A 'concat' function query to support concatenation of Strings\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1550656 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-13 14:40:01","modifiedFileCount":"2","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-12-13 18:25:43","commitOrder":18,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2013-12-13 18:25:43","endLine":782,"groupId":"34405","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/6cb941a3b1a83791dbfb320d76653156f3918d.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new ConcatenateFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":18,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"f590fe62a618810a0528d791911220290452ac29","commitMessage":"@@@SOLR-3702: Reverting commit because it breaks QueryEqualityTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1550676 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-13 18:25:43","modifiedFileCount":"2","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2013-12-31 22:35:48","commitOrder":19,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2013-12-31 22:35:48","endLine":789,"groupId":"34405","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/86968f5f517781c8bd4942dc9903a74f3ba082.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":19,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"43535fecb8455b3f9364f447e129ae05f79697e2","commitMessage":"@@@SOLR-5536: Add ValueSource collapse criteria to CollapsingQParserPlugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1554523 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-31 22:35:48","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2014-08-12 22:46:45","commitOrder":20,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","date":"2014-08-12 22:46:45","endLine":792,"groupId":"34405","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/c1a42e2430178eb9576441c9e22137cc200c49.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":20,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"94d1b7f5a6489658f679790a46f5330f346f2e78","commitMessage":"@@@LUCENE-5864: Split BytesRef into BytesRef and BytesRefBuilder.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1617493 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-08-12 22:46:45","modifiedFileCount":"191","status":"M","submitter":"Adrien Grand"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2015-03-16 12:40:23","commitOrder":21,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n\n\n  }\n","date":"2015-03-16 12:40:23","endLine":873,"groupId":"34405","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/91d8d5a19570d23a01a2994f10a8e223161da8.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":21,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"3dc5ed33c5f13309c22716c7d18b726d8a093622","commitMessage":"@@@SOLR-7214: JSON Facet API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1666856 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-16 12:40:23","modifiedFileCount":"20","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2015-03-26 02:02:26","commitOrder":22,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2015-03-26 02:02:26","endLine":874,"groupId":"34405","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/1f83b3eb720a0e3a110bee5eee3b5c039d31b7.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":22,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"3a8d0c2f38d98c99b6943e32100b6879b339e148","commitMessage":"@@@SOLR-7306: percentiles for new facet module\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1669189 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-26 02:02:26","modifiedFileCount":"3","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2015-05-18 00:07:33","commitOrder":23,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2015-05-18 00:07:33","endLine":882,"groupId":"34405","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/c9fb2ca101c1618e6f402702f588dd0ce78b55.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":23,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"b1b8169c91b1c0231d6e08fd857d2772a0e90605","commitMessage":"@@@SOLR-7553: hll function for hyperloglog\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1679876 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-18 00:07:33","modifiedFileCount":"5","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2015-08-01 00:21:44","commitOrder":24,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not spported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2015-08-01 00:21:44","endLine":895,"groupId":"957","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/05f33c3e8fa8b43100d5f646ae34dc686db77f.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":24,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"5f5ab2a79fb643ee69b6a654d9664f9dd5898411","commitMessage":"@@@SOLR-2522: new two argument option for the existing field() function; picks the min/max value of a docValues field to use as a ValueSource: \"field(field_name. min)\" and \"field(field_name. max)\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1693625 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-01 00:21:44","modifiedFileCount":"9","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":25,"curCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2016-05-23 14:35:53","endLine":910,"groupId":"957","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardValueSourceParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/1a4b11305ffaf47f5e376782a6d0947179fa94.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not spported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":25,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":26,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2016-05-26 01:42:11","endLine":914,"groupId":"957","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/65/a4d0d1c46f0cfc1028ce325d79b93158eae809.src","preCode":"    standardValueSourceParsers.put(dest, standardValueSourceParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":26,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"M","submitter":"Noble Paul"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2016-07-29 10:45:43","commitOrder":27,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2016-07-29 10:45:43","endLine":966,"groupId":"957","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dd/0db9660789d18b697b3d656278fd372582a97e.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":27,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"12256","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/6ad15edec76dd6e03b09f1fbbdc37fdf077c55.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"d12b93e2729036b0c04621114429c25739499243","commitMessage":"@@@SOLR-9279: new function queries: gt.  gte.  lt.  lte.  eq\nLucene Queries module: new ComparisonBoolFunction base class\n","date":"2016-07-29 10:45:43","modifiedFileCount":"3","status":"M","submitter":"David Smiley"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":28,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2016-10-03 03:18:22","endLine":966,"groupId":"957","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c2/b8a5d4118d7e9fba4ecdc3b4eb49b378727626.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":28,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-04-18 10:30:29","commitOrder":29,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","date":"2017-04-18 10:30:29","endLine":975,"groupId":"957","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/02c41d7b37fe487c97fccb57ffb8e3785174ca.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":29,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"3145f781b3b55ebbd6374f40db7fe7b676b8d1af","commitMessage":"@@@SOLR-10082: JSON Facet API.  add stddev and variance functions\n","date":"2017-04-18 10:30:29","modifiedFileCount":"4","status":"M","submitter":"yonik"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-04-22 19:39:33","commitOrder":30,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-04-28 16:23:53","endLine":977,"groupId":"957","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/68baa0359aca8ee74d64c1af2f7eede80b20e6.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":30,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"816b806d8ac81940ccb9681c3b4f1d8727a395f7","commitMessage":"@@@SOLR-10521: adding sort=childfield(field. $q) asc for {!parent} query.\n","date":"2017-04-28 16:23:53","modifiedFileCount":"3","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-05-02 09:35:29","commitOrder":31,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-05-02 09:35:29","endLine":1021,"groupId":"957","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/32e0d562982cdc550d6a8771f55e9b75190298.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":31,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"6c565c001bb48af0c37a4d4909ba2f98d51e7fe6","commitMessage":"@@@SOLR-1485: Add payload support\n","date":"2017-05-02 09:35:29","modifiedFileCount":"7","status":"M","submitter":"Erik Hatcher"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-05-02 19:50:12","commitOrder":32,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-05-02 19:50:12","endLine":1026,"groupId":"957","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/116560e683866bef6f69acd7e505967a9d0734.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":32,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"a68b778e5dc2b3b623a038de3ae9929e15dcc194","commitMessage":"@@@SOLR-1485: fix tests.  removing unnecessary tie to Similarity in PayloadDecoder\n","date":"2017-05-02 19:50:12","modifiedFileCount":"6","status":"M","submitter":"Erik Hatcher"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-05-06 17:49:19","commitOrder":33,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-05-06 17:52:15","endLine":1025,"groupId":"957","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/7b86f742a762cb882ad7dffeea7d5cc462eb18.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MaxAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":33,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"b636d6e96a377e63bcd25c4bfa60920401100d5e","commitMessage":"@@@SOLR-10547: consolidate MinAgg+MaxAgg.  add min/max support for single valued string fields\n","date":"2017-05-06 17:52:15","modifiedFileCount":"3","status":"M","submitter":"yonik"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":34,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-06-29 17:00:17","endLine":1034,"groupId":"39836","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/6d162ce1a0ff410b542522eadd9340d7f571a6.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyField)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyField: \" + fieldName);\n        }\n        CurrencyField ft = (CurrencyField) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":34,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-09-08 13:20:00","commitOrder":35,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-09-08 13:20:00","endLine":1034,"groupId":"39836","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/048d2aa6b60632e8b654a6af848b6f780d4887.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":35,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"5fee937242430b4f90681968b91969a656fd6dcd","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-08 13:20:00","modifiedFileCount":"55","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-11-06 19:52:13","commitOrder":36,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-11-09 22:05:34","endLine":1035,"groupId":"39836","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/59/44dc5acbfd6397a8f5b74c9c271ba425eb367d.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        FieldType fieldType = fp.getReq().getCore().getLatestSchema().getFieldTypeNoEx(tinfo.field);\n        PayloadDecoder decoder = PayloadUtils.getPayloadDecoder(fieldType);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":36,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"1a80bc76b12e74a3fea065ac6989a9a72662f5f4","commitMessage":"@@@SOLR-11610: Move SOLR to PayloadDecoder\n","date":"2017-11-09 22:05:34","modifiedFileCount":"6","status":"M","submitter":"Alan Woodward"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-12-06 22:16:25","commitOrder":37,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-12-07 00:29:16","endLine":1035,"groupId":"39836","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dc/6411ee8c15f6d37571ac5ef1b4913bbc9137df.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevensteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":37,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"70b36666d49d1207aa9776eaa859c69278933515","commitMessage":"@@@LUCENE-8051: Typo in LevensHtein distance.\n\nCloses #284\n","date":"2017-12-07 00:29:16","modifiedFileCount":"7","status":"M","submitter":"Adrien Grand"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2017-12-14 20:09:51","commitOrder":38,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(BoostQParserPlugin.boostQuery(q, vs), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2017-12-19 01:47:03","endLine":1033,"groupId":"39836","id":75,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/7eb641ba0b4fb8907b01a2e5948d2477caa86c.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        BoostedQuery bq = new BoostedQuery(q, vs);\n        return new QueryValueSource(bq, 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":38,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":76,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"b01e6023e1cd3c62260b38c05c8d145ba143a2ac","commitMessage":"@@@LUCENE-8099: Deprecate CustomScoreQuery.  BoostedQuery.  BoostingQuery\n","date":"2017-12-19 01:47:03","modifiedFileCount":"15","status":"M","submitter":"Alan Woodward"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":39,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2018-01-23 20:35:14","endLine":1034,"groupId":"39836","id":77,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/45/0d95a7afffd3f56654aebe7f1f1bff0e3332b7.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(BoostQParserPlugin.boostQuery(q, vs), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":39,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":78,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2018-04-10 08:13:23","commitOrder":40,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2018-04-10 08:13:23","endLine":1035,"groupId":"39836","id":79,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/26bf83928bcf9edbf51ac49770ff99d51da095.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"eq\", (cmp) -> cmp == 0);\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":40,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":80,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"1cd859713bda498fe295b2774fa74640d669882b","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-04-10 08:13:23","modifiedFileCount":"67","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2018-05-02 01:19:15","commitOrder":41,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2018-05-02 01:19:15","endLine":1043,"groupId":"39836","id":81,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/3cf4a6605f60de182414bc15da0ed355ae1e92.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":41,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":82,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"ee7b52f4c6fe55f0d07ce8228c246b61d1f2b5fb","commitMessage":"@@@SOLR-8998: uniqueBlock() aggreagation for singlevalue string fields in json.facet\n","date":"2018-05-02 01:19:15","modifiedFileCount":"5","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2018-05-21 23:22:54","commitOrder":42,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        return new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2018-05-21 23:22:54","endLine":1055,"groupId":"39836","id":83,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/c68157a0b2ee30f6fbef87ce655b1332b1192b.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":42,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":84,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"669b9e7a5343c625e265a075c9dbf24fcbff7363","commitMessage":"@@@SOLR-9480: A new 'relatedness()' aggregate function for JSON Faceting to enable building Semantic Knowledge Graphs\n","date":"2018-05-21 23:22:54","modifiedFileCount":"26","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2018-07-26 01:06:30","commitOrder":43,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2018-07-26 01:06:30","endLine":1057,"groupId":"39836","id":85,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/84642695c15586670ffa8dc218118c9b66a13f.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        return new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":43,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":86,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"71c0bddd149b7c0364fbba8d31494dcd9f57f1ef","commitMessage":"@@@SOLR-12581: the JSON Facet 'relatedness()' aggregate function now supports a 'min_popularity' option using the extended type:func syntax\n","date":"2018-07-26 01:06:30","modifiedFileCount":"4","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2019-11-16 14:26:47","commitOrder":44,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2019-11-16 14:42:11","endLine":1065,"groupId":"39836","id":87,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5f/6fc3f77d7e3d8aad363a7621e4a6de6e3b20b1.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":44,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":88,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"0602956a446269f0f32fc2951a2b885d7ec28744","commitMessage":"@@@SOLR-13911: add support for missing aggregation in JSON facet module\n\n* This missing aggregation is equivalent to StatsComponent's missing\n","date":"2019-11-16 14:42:11","modifiedFileCount":"4","status":"M","submitter":"Munendra S N"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2019-11-22 20:46:20","commitOrder":45,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2019-11-22 20:46:20","endLine":1073,"groupId":"39836","id":89,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6e/eff2b9c4e229cfd17339db6cce9370c20bf295.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":45,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":90,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"2740d90dee8aef81d98afd63a53ac06320b7e73e","commitMessage":"@@@SOLR-13912: add support for countvals aggregation in JSON facet module\n\n* This aggregation is equivalent to StatsComponent's count\n","date":"2019-11-22 20:46:20","modifiedFileCount":"6","status":"M","submitter":"Munendra S N"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2019-12-05 13:18:22","commitOrder":46,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<Double> percentiles = new ArrayList<>();\n        ValueSource vs = fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE);\n        while (fp.hasMoreArguments()) {\n          double val = fp.parseDouble();\n          if (val<0 || val>100) {\n            throw new SyntaxError(\"requested percentile must be between 0 and 100.  got \" + val);\n          }\n          percentiles.add(val);\n        }\n\n        if (percentiles.isEmpty()) {\n          throw new SyntaxError(\"expected percentile(valsource,percent1[,percent2]*)  EXAMPLE:percentile(myfield,50)\");\n        }\n\n        return new PercentileAgg(vs, percentiles);\n      }\n    });\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2019-12-05 13:18:22","endLine":1092,"groupId":"39836","id":91,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/cadb6843fa55e15844c684152b64e3af0f5c0d.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource());\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource());\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new PercentileAgg.Parser());\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":46,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":92,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"12e8cca6442e6c64a414d832b3982cc77354c6ad","commitMessage":"@@@SOLR-11706: add support for aggregation on multivalued fields\n\n* min.  max.  sum.  sumsq.  avg.  stddev.  variance.  percentile aggregations\n  in JSON facets now supports multivalued fields\n","date":"2019-12-05 13:18:22","modifiedFileCount":"14","status":"M","submitter":"Munendra S N"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2020-02-02 20:15:17","commitOrder":47,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        if (fp.sp.peek() == QueryParsing.LOCALPARAM_START.charAt(0) ) {\n          return new UniqueBlockQueryAgg(fp.parseNestedQuery());\n        }\n        return new UniqueBlockFieldAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<Double> percentiles = new ArrayList<>();\n        ValueSource vs = fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE);\n        while (fp.hasMoreArguments()) {\n          double val = fp.parseDouble();\n          if (val<0 || val>100) {\n            throw new SyntaxError(\"requested percentile must be between 0 and 100.  got \" + val);\n          }\n          percentiles.add(val);\n        }\n\n        if (percentiles.isEmpty()) {\n          throw new SyntaxError(\"expected percentile(valsource,percent1[,percent2]*)  EXAMPLE:percentile(myfield,50)\");\n        }\n\n        return new PercentileAgg(vs, percentiles);\n      }\n    });\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2020-02-02 20:15:35","endLine":1096,"groupId":"39836","id":93,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/54bc8d88681a909c053b0cee3d400f12c0edd9.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueBlockAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<Double> percentiles = new ArrayList<>();\n        ValueSource vs = fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE);\n        while (fp.hasMoreArguments()) {\n          double val = fp.parseDouble();\n          if (val<0 || val>100) {\n            throw new SyntaxError(\"requested percentile must be between 0 and 100.  got \" + val);\n          }\n          percentiles.add(val);\n        }\n\n        if (percentiles.isEmpty()) {\n          throw new SyntaxError(\"expected percentile(valsource,percent1[,percent2]*)  EXAMPLE:percentile(myfield,50)\");\n        }\n\n        return new PercentileAgg(vs, percentiles);\n      }\n    });\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":47,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"12256","id":94,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"d8bc9bcfcf772dfbfb6aa39dc019b0787946707a","commitMessage":"@@@SOLR-12325: uniqueBlock(\\{!v=foo:bar})\n","date":"2020-02-02 20:15:35","modifiedFileCount":"4","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2020-05-07 23:04:06","commitOrder":48,"curCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return BoolConstValueSource.TRUE;\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return BoolConstValueSource.FALSE;\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        if (fp.sp.peek() == QueryParsing.LOCALPARAM_START.charAt(0) ) {\n          return new UniqueBlockQueryAgg(fp.parseNestedQuery());\n        }\n        return new UniqueBlockFieldAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<Double> percentiles = new ArrayList<>();\n        ValueSource vs = fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE);\n        while (fp.hasMoreArguments()) {\n          double val = fp.parseDouble();\n          if (val<0 || val>100) {\n            throw new SyntaxError(\"requested percentile must be between 0 and 100.  got \" + val);\n          }\n          percentiles.add(val);\n        }\n\n        if (percentiles.isEmpty()) {\n          throw new SyntaxError(\"expected percentile(valsource,percent1[,percent2]*)  EXAMPLE:percentile(myfield,50)\");\n        }\n\n        return new PercentileAgg(vs, percentiles);\n      }\n    });\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","date":"2020-05-07 23:04:06","endLine":1096,"groupId":"102087","id":95,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(dest@standardVSParsers.get(source))","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/4c1a2c10c126fc97d41acbf2328d01bedcda81.src","preCode":"    standardVSParsers.put(dest, standardVSParsers.get(source));\n  }\n\n  static {\n    addParser(\"testfunc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        final ValueSource source = fp.parseValueSource();\n        return new TestValueSource(source);\n      }\n    });\n    addParser(\"ord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new OrdFieldSource(field);\n      }\n    });\n    addParser(\"literal\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LiteralValueSource(fp.parseArg());\n      }\n    });\n    addParser(\"threadid\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new LongConstValueSource(Thread.currentThread().getId());\n      }\n    });\n    addParser(\"sleep\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        int ms = fp.parseInt();\n        ValueSource source = fp.parseValueSource();\n        try {\n          Thread.sleep(ms);\n        } catch (InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        return source;\n      }\n    });\n    addParser(\"rord\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseId();\n        return new ReverseOrdFieldSource(field);\n      }\n    });\n    addParser(\"top\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        ValueSource source = fp.parseValueSource();\n        return source;\n      }\n    });\n    addParser(\"linear\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float slope = fp.parseFloat();\n        float intercept = fp.parseFloat();\n        return new LinearFloatFunction(source, slope, intercept);\n      }\n    });\n    addParser(\"recip\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float m = fp.parseFloat();\n        float a = fp.parseFloat();\n        float b = fp.parseFloat();\n        return new ReciprocalFloatFunction(source, m, a, b);\n      }\n    });\n    addParser(\"scale\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        return new ScaleFloatFunction(source, min, max);\n      }\n    });\n    addParser(\"div\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DivFloatFunction(a, b);\n      }\n    });\n    addParser(\"mod\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"mod\";\n          }\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) % bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"map\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        float min = fp.parseFloat();\n        float max = fp.parseFloat();\n        ValueSource target = fp.parseValueSource();\n        ValueSource def = fp.hasMoreArguments() ? fp.parseValueSource() : null;\n        return new RangeMapFloatFunction(source, min, max, target, def);\n      }\n    });\n\n    addParser(\"abs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource source = fp.parseValueSource();\n        return new SimpleFloatFunction(source) {\n          @Override\n          protected String name() {\n            return \"abs\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues vals) throws IOException {\n            return Math.abs(vals.floatVal(doc));\n          }\n        };\n      }\n    });\n    addParser(\"cscore\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CollapseScoreFunction();\n      }\n    });\n    addParser(\"sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"sum\",\"add\");    \n\n    addParser(\"product\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    alias(\"product\",\"mul\");\n\n    addParser(\"sub\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource a = fp.parseValueSource();\n        ValueSource b = fp.parseValueSource();\n        return new DualFloatFunction(a, b) {\n          @Override\n          protected String name() {\n            return \"sub\";\n          }\n\n          @Override\n          protected float func(int doc, FunctionValues aVals, FunctionValues bVals) throws IOException {\n            return aVals.floatVal(doc) - bVals.floatVal(doc);\n          }\n        };\n      }\n    });\n    addParser(\"vector\", new ValueSourceParser(){\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VectorValueSource(fp.parseValueSourceList());\n      }\n    });\n    addParser(\"query\", new ValueSourceParser() {\n      \r\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        float defVal = 0.0f;\n        if (fp.hasMoreArguments()) {\n          defVal = fp.parseFloat();\n        }\n        return new QueryValueSource(q, defVal);\n      }\n    });\n    addParser(\"boost\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        Query q = fp.parseNestedQuery();\n        ValueSource vs = fp.parseValueSource();\n        return new QueryValueSource(FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource()), 0.0f);\n      }\n    });\n    addParser(\"joindf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String f0 = fp.parseArg();\n        String qf = fp.parseArg();\n        return new JoinDocFreqValueSource( f0, qf );\n      }\n    });\n\n    addParser(\"geodist\", new GeoDistValueSourceParser());\n\n    addParser(\"hsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        double radius = fp.parseDouble();\n        \r\n        boolean convert = Boolean.parseBoolean(fp.parseArg());\n        \n        MultiValueSource pv1;\n        MultiValueSource pv2;\n\n        ValueSource one = fp.parseValueSource();\n        ValueSource two = fp.parseValueSource();\n        if (fp.hasMoreArguments()) {\n          pv1 = new VectorValueSource(Arrays.asList(one, two));\r\n          pv2 = new VectorValueSource(Arrays.asList(fp.parseValueSource(), fp.parseValueSource()));\r\n        } else {\n          \r\n          if (one instanceof MultiValueSource && two instanceof MultiValueSource){\n            pv1 = (MultiValueSource) one;\n            pv2 = (MultiValueSource) two;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                    \"Input must either be 2 MultiValueSources, or there must be 4 ValueSources\");\n          }\n        }\n\n        return new HaversineFunction(pv1, pv2, radius, convert);\n      }\n    });\n\n    addParser(\"ghhsin\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        double radius = fp.parseDouble();\n\n        ValueSource gh1 = fp.parseValueSource();\n        ValueSource gh2 = fp.parseValueSource();\n\n        return new GeohashHaversineFunction(gh1, gh2, radius);\n      }\n    });\n\n    addParser(\"geohash\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource lat = fp.parseValueSource();\n        ValueSource lon = fp.parseValueSource();\n\n        return new GeohashFunction(lat, lon);\n      }\n    });\n    addParser(\"strdist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        ValueSource str1 = fp.parseValueSource();\n        ValueSource str2 = fp.parseValueSource();\n        String distClass = fp.parseArg();\n\n        StringDistance dist = null;\n        if (distClass.equalsIgnoreCase(\"jw\")) {\n          dist = new JaroWinklerDistance();\n        } else if (distClass.equalsIgnoreCase(\"edit\")) {\n          dist = new LevenshteinDistance();\n        } else if (distClass.equalsIgnoreCase(\"ngram\")) {\n          int ngram = 2;\n          if (fp.hasMoreArguments()) {\n            ngram = fp.parseInt();\n          }\n          dist = new NGramDistance(ngram);\n        } else {\n          dist = fp.req.getCore().getResourceLoader().newInstance(distClass, StringDistance.class);\n        }\n        return new StringDistanceFunction(str1, str2, dist);\n      }\n    });\n    addParser(\"field\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (fp.hasMoreArguments()) {\n          \r\n          String s = fp.parseArg();\n          FieldType.MultiValueSelector selector = FieldType.MultiValueSelector.lookup(s);\n          if (null == selector) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"Multi-Valued field selector '\"+s+\"' not supported\");\n          }\n          return f.getType().getSingleValueSource(selector, f, fp);\n        }\n        \r\n        return f.getType().getValueSource(f, fp);\n      }\n    });\n    addParser(\"currency\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n\n        String fieldName = fp.parseArg();\n        SchemaField f = fp.getReq().getSchema().getField(fieldName);\n        if (! (f.getType() instanceof CurrencyFieldType)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Currency function input must be the name of a CurrencyFieldType: \" + fieldName);\n        }\n        CurrencyFieldType ft = (CurrencyFieldType) f.getType();\n        String code = fp.hasMoreArguments() ? fp.parseArg() : null;\n        return ft.getConvertedValueSource(code, ft.getValueSource(f, fp));\n      }\n    });\n\n    addParser(new DoubleParser(\"rad\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n      }\n    });\n    addParser(new DoubleParser(\"deg\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;\n      }\n    });\n    addParser(new DoubleParser(\"sqrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sqrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cbrt\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cbrt(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"log\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log10(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ln\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.log(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"exp\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.exp(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"asin\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.asin(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"acos\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.acos(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"atan\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.atan(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"sinh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.sinh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"cosh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.cosh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"tanh\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.tanh(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"ceil\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.ceil(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"floor\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.floor(vals.doubleVal(doc));\n      }\n    });\n    addParser(new DoubleParser(\"rint\") {\n      @Override\n      public double func(int doc, FunctionValues vals) throws IOException {\n        return Math.rint(vals.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"pow\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.pow(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"hypot\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(new Double2Parser(\"atan2\") {\n      @Override\n      public double func(int doc, FunctionValues a, FunctionValues b) throws IOException {\n        return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));\n      }\n    });\n    addParser(\"max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n    addParser(\"min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n    addParser(\"sqedist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n\n        return new SquaredEuclideanFunction(mvr.mv1, mvr.mv2);\n      }\n    });\n\n    addParser(\"dist\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        float power = fp.parseFloat();\n        List<ValueSource> sources = fp.parseValueSourceList();\n        MVResult mvr = getMultiValueSources(sources);\n        return new VectorDistanceFunction(power, mvr.mv1, mvr.mv2);\n      }\n    });\n    addParser(\"ms\", new DateValueSourceParser());\n\n    \n    addParser(\"pi\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.PI);\n      }\n    });\n    addParser(\"e\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new DoubleConstValueSource(Math.E);\n      }\n    });\n\n\n    addParser(\"docfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"totaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TotalTermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n    alias(\"totaltermfreq\",\"ttf\");\n\n    addParser(\"sumtotaltermfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new SumTotalTermFreqValueSource(field);\n      }\n    });\n    alias(\"sumtotaltermfreq\",\"sttf\");\n\n    addParser(\"idf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"termfreq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"tf\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        TInfo tinfo = parseTerm(fp);\n        return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes.get());\n      }\n    });\n\n    addParser(\"norm\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        String field = fp.parseArg();\n        return new NormValueSource(field);\n      }\n    });\n\n    addParser(\"maxdoc\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new MaxDocValueSource();\n      }\n    });\n\n    addParser(\"numdocs\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new NumDocsValueSource();\n      }\n    });\n\n    addParser(\"payload\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n\n        TInfo tinfo = parseTerm(fp); \r\n\n        ValueSource defaultValueSource;\n        if (fp.hasMoreArguments()) {\n          defaultValueSource = fp.parseValueSource();\n        } else {\n          defaultValueSource = new ConstValueSource(0.0f);\n        }\n\n        PayloadFunction payloadFunction = null;\n        String func = \"average\";\n        if (fp.hasMoreArguments()) {\n          func = fp.parseArg();\n        }\n        payloadFunction = PayloadUtils.getPayloadFunction(func);\n\n        \r\n        if(payloadFunction == null && !\"first\".equals(func)) {\n          \r\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid payload function: \" + func);\n        }\n\n        IndexSchema schema = fp.getReq().getCore().getLatestSchema();\n        PayloadDecoder decoder = schema.getPayloadDecoder(tinfo.field);\n\n        if (decoder==null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No payload decoder found for field: \" + tinfo.field);\n        }\n\n        return new FloatPayloadValueSource(\n            tinfo.field,\n            tinfo.val,\n            tinfo.indexedField,\n            tinfo.indexedBytes.get(),\n            decoder,\n            payloadFunction,\n            defaultValueSource);\n      }\n    });\n\n    addParser(\"true\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(true);\n      }\n    });\n\n    addParser(\"false\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) {\n        return new BoolConstValueSource(false);\n      }\n    });\n\n    addParser(\"exists\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected String name() {\n            return \"exists\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return vals.exists(doc);\n          }\n        };\n      }\n    });\n\n    addParser(\"not\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource vs = fp.parseValueSource();\n        return new SimpleBoolFunction(vs) {\n          @Override\n          protected boolean func(int doc, FunctionValues vals) throws IOException {\n            return !vals.boolVal(doc);\n          }\n          @Override\n          protected String name() {\n            return \"not\";\n          }\n        };\n      }\n    });\n\n\n    addParser(\"and\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"and\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (!dv.boolVal(doc)) return false;\n            return true;\n          }\n        };\n      }\n    });\n\n    addParser(\"or\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"or\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            for (FunctionValues dv : vals)\n              if (dv.boolVal(doc)) return true;\n            return false;\n          }\n        };\n      }\n    });\n\n    addParser(\"xor\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new MultiBoolFunction(sources) {\n          @Override\n          protected String name() {\n            return \"xor\";\n          }\n          @Override\n          protected boolean func(int doc, FunctionValues[] vals) throws IOException {\n            int nTrue=0, nFalse=0;\n            for (FunctionValues dv : vals) {\n              if (dv.boolVal(doc)) nTrue++;\n              else nFalse++;\n            }\n            return nTrue != 0 && nFalse != 0;\n          }\n        };\n      }\n    });\n\n    addParser(\"if\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource ifValueSource = fp.parseValueSource();\n        ValueSource trueValueSource = fp.parseValueSource();\n        ValueSource falseValueSource = fp.parseValueSource();\n\n        return new IfFunction(ifValueSource, trueValueSource, falseValueSource);\n      }\n    });\n\n    addParser(\"gt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gt\", (cmp) -> cmp > 0);\n      }\n    });\n\n    addParser(\"lt\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lt\", (cmp) -> cmp < 0);\n      }\n    });\n\n    addParser(\"gte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"gte\", (cmp) -> cmp >= 0);\n\n      }\n    });\n\n    addParser(\"lte\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new SolrComparisonBoolFunction(lhsValSource, rhsValSource, \"lte\", (cmp) -> cmp <= 0);\n      }\n    });\n\n    addParser(\"eq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        ValueSource lhsValSource = fp.parseValueSource();\n        ValueSource rhsValSource = fp.parseValueSource();\n\n        return new EqualFunction(lhsValSource, rhsValSource, \"eq\");\n      }\n    });\n\n    addParser(\"def\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new DefFunction(fp.parseValueSourceList());\n      }\n    });\n\n    addParser(\"concat\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<ValueSource> sources = fp.parseValueSourceList();\n        return new ConcatStringFunction(sources.toArray(new ValueSource[sources.size()]));\n      }\n    });\n\n\n    addParser(\"agg\", new ValueSourceParser() {\n      @Override\n      public AggValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return fp.parseAgg(FunctionQParser.FLAG_DEFAULT);\n      }\n    });\n\n    addParser(\"agg_count\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountAgg();\n      }\n    });\n\n    addParser(\"agg_unique\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new UniqueAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_uniqueBlock\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        if (fp.sp.peek() == QueryParsing.LOCALPARAM_START.charAt(0) ) {\n          return new UniqueBlockQueryAgg(fp.parseNestedQuery());\n        }\n        return new UniqueBlockFieldAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_hll\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new HLLAgg(fp.parseArg());\n      }\n    });\n\n    addParser(\"agg_sum\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_avg\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new AvgAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_sumsq\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new SumsqAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_variance\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new VarianceAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    addParser(\"agg_stddev\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new StddevAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_missing\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MissingAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_countvals\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new CountValsAgg(fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n    \n    \r\n\r\n\r\n\r\n\r\n\r\n\n\n    addParser(\"agg_min\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"min\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_max\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        return new MinMaxAgg(\"max\", fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE));\n      }\n    });\n\n    addParser(\"agg_percentile\", new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        List<Double> percentiles = new ArrayList<>();\n        ValueSource vs = fp.parseValueSource(FunctionQParser.FLAG_DEFAULT | FunctionQParser.FLAG_USE_FIELDNAME_SOURCE);\n        while (fp.hasMoreArguments()) {\n          double val = fp.parseDouble();\n          if (val<0 || val>100) {\n            throw new SyntaxError(\"requested percentile must be between 0 and 100.  got \" + val);\n          }\n          percentiles.add(val);\n        }\n\n        if (percentiles.isEmpty()) {\n          throw new SyntaxError(\"expected percentile(valsource,percent1[,percent2]*)  EXAMPLE:percentile(myfield,50)\");\n        }\n\n        return new PercentileAgg(vs, percentiles);\n      }\n    });\n    \n    addParser(\"agg_\" + RelatednessAgg.NAME, new ValueSourceParser() {\n      @Override\n      public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n        \r\n        \r\n        \r\n        \r\n        RelatednessAgg agg = new RelatednessAgg(fp.parseNestedQuery(), fp.parseNestedQuery());\n        agg.setOpts(fp);\n        return agg;\n      }\n    });\n    \n    addParser(\"childfield\", new ChildFieldValueSourceParser());\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/ValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":48,"curCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","date":"2016-10-03 03:18:22","endLine":70,"groupId":"102087","id":96,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(FunctionQParserfp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/e2cc68c98447d01783f051c62784439e3c0b73.src","preCode":"    public ValueSource parse(FunctionQParser fp) throws SyntaxError {\n      ValueSource source = fp.parseValueSource();\n      final float nvl = fp.parseFloat();\n\n      return new SimpleFloatFunction(source) {\n        @Override\n      protected String name() {\n          return \"nvl\";\n        }\n\n        @Override\n        protected float func(int doc, FunctionValues vals) throws IOException {\n          float v = vals.floatVal(doc);\n          if (v == nvlFloatValue) {\n            return nvl;\n          } else {\n            return v;\n          }\n        }\n      };\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"31b350e8040cbe30c4e85b7fb82eab4b6afd81c7","commitMessage":"@@@SOLR-14426 Move auxiliary classes to nested classes (#1487)\n\n","date":"2020-05-07 23:04:06","modifiedFileCount":"67","status":"M","submitter":"Mike Drob"}]
