[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"rollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1239,"groupId":"23057","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"rollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1114,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1695,"groupId":"49118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1562,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"rollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":1239,"groupId":"10678","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"rollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1114,"status":"N"},{"authorDate":"2018-11-28 00:21:42","commitOrder":2,"curCode":"  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\", qt=\\\"/export\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":1704,"groupId":"10678","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/639d4bc8fa96853700ee3a75bd2091f2437482.src","preCode":"  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1571,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
