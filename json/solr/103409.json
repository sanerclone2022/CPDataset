[{"authorTime":"2020-02-10 22:27:05","codes":[{"authorDate":"2020-02-10 22:27:05","commitOrder":1,"curCode":"  public void testSimple_ShardsParam() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2\", \"baseUrl1_\", \"baseUrl2_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","date":"2020-02-10 22:27:05","endLine":63,"groupId":"37121","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple_ShardsParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/6af33598d0d1e41d4c1a5c88dd1d9b79c87bbc.src","preCode":"  public void testSimple_ShardsParam() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2\", \"baseUrl1_\", \"baseUrl2_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/CloudReplicaSourceTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2020-02-10 22:27:05","commitOrder":1,"curCode":"  public void testShardsParam_DownReplica() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    \r\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2r3D\", \"baseUrl1_\", \"baseUrl2_\", \"baseUrl3_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","date":"2020-02-10 22:27:05","endLine":113,"groupId":"37123","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testShardsParam_DownReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/18/6af33598d0d1e41d4c1a5c88dd1d9b79c87bbc.src","preCode":"  public void testShardsParam_DownReplica() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    \r\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2r3D\", \"baseUrl1_\", \"baseUrl2_\", \"baseUrl3_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/CloudReplicaSourceTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"c65b97665c61116632bc93e5f88f84bdb5cccf21","commitMessage":"@@@SOLR-13996: Refactor HttpShardHandler.prepDistributed method (#1220)\n\nSOLR-13996: Refactor HttpShardHandler.prepDistributed method into smaller pieces\n\nThis commit introduces an interface named ReplicaSource which is marked as experimental. It has two sub-classes named CloudReplicaSource (for solr cloud) and LegacyReplicaSource for non-cloud clusters. The prepDistributed method now calls out to these sub-classes depending on whether the cluster is running on cloud mode or not.","date":"2020-02-10 22:27:05","modifiedFileCount":"4","status":"B","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2021-01-06 03:00:14","codes":[{"authorDate":"2021-01-06 03:00:14","commitOrder":2,"curCode":"  public void testSimple_ShardsParam() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2\", \"baseUrl1:8983_\", \"baseUrl2:8984_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1:8983/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2:8984/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","date":"2021-01-06 03:00:14","endLine":64,"groupId":"37121","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple_ShardsParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/59de4e6fc5ac9c7d7559f37fd43b64220ec476.src","preCode":"  public void testSimple_ShardsParam() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2\", \"baseUrl1_\", \"baseUrl2_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/CloudReplicaSourceTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2021-01-06 03:00:14","commitOrder":2,"curCode":"  public void testShardsParam_DownReplica() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    \r\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2r3D\", \"baseUrl1:8983_\", \"baseUrl2:8984_\", \"baseUrl3:8985_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1:8983/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2:8984/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","date":"2021-01-06 03:00:14","endLine":114,"groupId":"37123","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testShardsParam_DownReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/59de4e6fc5ac9c7d7559f37fd43b64220ec476.src","preCode":"  public void testShardsParam_DownReplica() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    \r\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2r3D\", \"baseUrl1_\", \"baseUrl2_\", \"baseUrl3_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/CloudReplicaSourceTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"2fcaba1ce24aeded56e264bfb1525f8d02a8b337","commitMessage":"@@@SOLR-15058: Enforce node_name contains colon and port and find first underscore after colon to parse context (#2178)\n\n","date":"2021-01-06 03:00:14","modifiedFileCount":"13","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-03-24 22:34:08","codes":[{"authorDate":"2021-03-24 22:34:08","commitOrder":3,"curCode":"  public void testSimple_ShardsParam() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    AllowListUrlChecker checker = Mockito.mock(AllowListUrlChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2\", \"baseUrl1:8983_\", \"baseUrl2:8984_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .allowListUrlChecker(checker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1:8983/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2:8984/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","date":"2021-04-26 21:44:20","endLine":65,"groupId":"103409","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSimple_ShardsParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/c4ced7888aa1e6eb365a48e2be94ba63dbcf8d.src","preCode":"  public void testSimple_ShardsParam() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2\", \"baseUrl1:8983_\", \"baseUrl2:8984_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1:8983/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2:8984/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/CloudReplicaSourceTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-03-24 22:34:08","commitOrder":3,"curCode":"  public void testShardsParam_DownReplica() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    AllowListUrlChecker checker = Mockito.mock(AllowListUrlChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    \r\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2r3D\", \"baseUrl1:8983_\", \"baseUrl2:8984_\", \"baseUrl3:8985_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .allowListUrlChecker(checker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1:8983/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2:8984/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","date":"2021-04-26 21:44:20","endLine":115,"groupId":"103409","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testShardsParam_DownReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/c4ced7888aa1e6eb365a48e2be94ba63dbcf8d.src","preCode":"  public void testShardsParam_DownReplica() {\n    ReplicaListTransformer replicaListTransformer = Mockito.mock(ReplicaListTransformer.class);\n    HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock(HttpShardHandlerFactory.WhitelistHostChecker.class);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"shards\", \"slice1,slice2\");\n    \r\n    try (ZkStateReader zkStateReader = ClusterStateMockUtil.buildClusterState(\"csr*sr2r3D\", \"baseUrl1:8983_\", \"baseUrl2:8984_\", \"baseUrl3:8985_\")) {\n      CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder()\n          .collection(\"collection1\")\n          .onlyNrt(false)\n          .zkStateReader(zkStateReader)\n          .replicaListTransformer(replicaListTransformer)\n          .whitelistHostChecker(whitelistHostChecker)\n          .params(params)\n          .build();\n      assertEquals(2, cloudReplicaSource.getSliceCount());\n      assertEquals(2, cloudReplicaSource.getSliceNames().size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(0).size());\n      assertEquals(\"http://baseUrl1:8983/slice1_replica1/\", cloudReplicaSource.getReplicasBySlice(0).get(0));\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(1, cloudReplicaSource.getReplicasBySlice(1).size());\n      assertEquals(\"http://baseUrl2:8984/slice2_replica2/\", cloudReplicaSource.getReplicasBySlice(1).get(0));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/CloudReplicaSourceTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"c7abf3f32ca439b73fbe0ed5a3a6d70ecc411cbb","commitMessage":"@@@SOLR-15217: Rename shardsWhitelist and extract AllowListUrlChecker.\n","date":"2021-04-26 21:44:20","modifiedFileCount":"27","status":"M","submitter":"Bruno Roustant"}]
