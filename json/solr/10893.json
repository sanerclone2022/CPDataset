[{"authorTime":"2018-11-08 09:45:13","codes":[{"authorDate":"2018-04-28 21:14:05","commitOrder":2,"curCode":"  public void testOnes() throws Exception {\n    String cexpr = \"ones(6)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).intValue(), 1);\n    assertEquals(out.get(1).intValue(), 1);\n    assertEquals(out.get(2).intValue(), 1);\n    assertEquals(out.get(3).intValue(), 1);\n    assertEquals(out.get(4).intValue(), 1);\n    assertEquals(out.get(5).intValue(), 1);\n  }\n","date":"2018-04-28 21:14:05","endLine":1019,"groupId":"39011","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/d5334fc98f95c29030a57ae7f83716a08fb081.src","preCode":"  public void testOnes() throws Exception {\n    String cexpr = \"ones(6)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).intValue(), 1);\n    assertEquals(out.get(1).intValue(), 1);\n    assertEquals(out.get(2).intValue(), 1);\n    assertEquals(out.get(3).intValue(), 1);\n    assertEquals(out.get(4).intValue(), 1);\n    assertEquals(out.get(5).intValue(), 1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"NB"},{"authorDate":"2018-11-08 09:45:13","commitOrder":2,"curCode":"  public void testLtrim() throws Exception {\n    String cexpr = \"ltrim(array(1,2,3,4,5,6), 2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 4);\n    assertEquals(out.get(0).intValue(), 3);\n    assertEquals(out.get(1).intValue(), 4);\n    assertEquals(out.get(2).intValue(), 5);\n    assertEquals(out.get(3).intValue(), 6);\n  }\n","date":"2018-11-08 09:47:07","endLine":1246,"groupId":"39011","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/cd691c1b851db7b2c521866a913ebc6ef9fa22.src","preCode":"  public void testLtrim() throws Exception {\n    String cexpr = \"ltrim(array(1,2,3,4,5,6), 2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 4);\n    assertEquals(out.get(0).intValue(), 3);\n    assertEquals(out.get(1).intValue(), 4);\n    assertEquals(out.get(2).intValue(), 5);\n    assertEquals(out.get(3).intValue(), 6);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"B"}],"commitId":"2d0e565c62f09174bf1c123f0483d3b75d66aa41","commitMessage":"@@@SOLR-12975: Add ltrim and rtrim Stream Evaluators\n","date":"2018-11-08 09:47:07","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testOnes() throws Exception {\n    String cexpr = \"ones(6)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).intValue(), 1);\n    assertEquals(out.get(1).intValue(), 1);\n    assertEquals(out.get(2).intValue(), 1);\n    assertEquals(out.get(3).intValue(), 1);\n    assertEquals(out.get(4).intValue(), 1);\n    assertEquals(out.get(5).intValue(), 1);\n  }\n","date":"2020-06-17 01:27:53","endLine":1418,"groupId":"10893","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testOnes() throws Exception {\n    String cexpr = \"ones(6)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).intValue(), 1);\n    assertEquals(out.get(1).intValue(), 1);\n    assertEquals(out.get(2).intValue(), 1);\n    assertEquals(out.get(3).intValue(), 1);\n    assertEquals(out.get(4).intValue(), 1);\n    assertEquals(out.get(5).intValue(), 1);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1398,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testLtrim() throws Exception {\n    String cexpr = \"ltrim(array(1,2,3,4,5,6), 2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 4);\n    assertEquals(out.get(0).intValue(), 3);\n    assertEquals(out.get(1).intValue(), 4);\n    assertEquals(out.get(2).intValue(), 5);\n    assertEquals(out.get(3).intValue(), 6);\n  }\n","date":"2020-06-17 01:27:53","endLine":1487,"groupId":"10893","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testLtrim() throws Exception {\n    String cexpr = \"ltrim(array(1,2,3,4,5,6), 2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertEquals(out.size(), 4);\n    assertEquals(out.get(0).intValue(), 3);\n    assertEquals(out.get(1).intValue(), 4);\n    assertEquals(out.get(2).intValue(), 5);\n    assertEquals(out.get(3).intValue(), 6);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1469,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
