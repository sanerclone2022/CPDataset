[{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","date":"2017-07-15 01:54:35","endLine":3213,"groupId":"11667","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3180,"status":"MB"},{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Double> values = getRandomDoubles(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","date":"2017-07-15 01:54:35","endLine":3249,"groupId":"11667","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDoublePointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Double> values = getRandomDoubles(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3215,"status":"B"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-15 04:40:19","codes":[{"authorDate":"2017-07-15 04:40:19","commitOrder":5,"curCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":3222,"groupId":"34183","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3186,"status":"M"},{"authorDate":"2017-07-15 04:40:19","commitOrder":5,"curCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Double> values = getRandomDoubles(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":3261,"groupId":"34183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDoublePointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Double> values = getRandomDoubles(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3224,"status":"M"}],"commitId":"4cb74a50ef8a3386a436e69da6f9cd80fe4d746d","commitMessage":"@@@SOLR-10796: fix test bugs when RANDOM_MULTIPLIER > 1\n","date":"2017-07-15 04:40:19","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-09-11 22:48:17","codes":[{"authorDate":"2017-07-15 04:40:19","commitOrder":6,"curCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":3222,"groupId":"34183","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3186,"status":"N"},{"authorDate":"2017-09-11 22:48:17","commitOrder":6,"curCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    \r\n    List<Double> values = getRandomList(10, false, () -> {\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      return f.doubleValue();\n    });\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-09-11 22:48:17","endLine":3374,"groupId":"34183","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDoublePointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/3ddd884b5917ca3c9fc727ccbc3c105c3ce24d.src","preCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Double> values = getRandomDoubles(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3330,"status":"M"}],"commitId":"fe34e141ca1914ea811878919590ef574d2c77fa","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-11 22:48:17","modifiedFileCount":"1","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-09-12 20:34:52","codes":[{"authorDate":"2017-07-15 04:40:19","commitOrder":7,"curCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-15 04:40:19","endLine":3222,"groupId":"102682","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFloatPointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/b6971749523c4450f320fa25f8f31c6fe6db28.src","preCode":"  private void doTestFloatPointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Float> values = getRandomFloats(numVals, false);\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/float[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3186,"status":"N"},{"authorDate":"2017-09-12 20:34:52","commitOrder":7,"curCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    \r\n    List<Double> values = getRandomList(numVals, false, () -> {\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      return f.doubleValue();\n    });\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-09-12 20:34:52","endLine":3374,"groupId":"102682","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestDoublePointFunctionQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/c48e6bad21250d631ba829ac0dc544c9a95a13.src","preCode":"  private void doTestDoublePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    \r\n    List<Double> values = getRandomList(10, false, () -> {\n      Float f = Float.NaN;\n      while (f.isNaN()) {\n        f = Float.intBitsToFloat(random().nextInt());\n      }\n      return f.doubleValue();\n    });\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, String.valueOf(values.get(i))));\n      \r\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/double[@name='field(\" + field + \")'][.='\" + values.get(i) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,\" + field + \")'][.='\"\n          + (-1.0f * values.get(i).floatValue()) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    \r\n    List<PosVal<Float>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v.floatValue()).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Float> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1]\n          = \"//result/doc[\" + (1 + i) + \"]/double[@name='\" + field + \"'][.='\" + values.get(posVal.pos) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,\" + field + \") asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3330,"status":"M"}],"commitId":"b125107b7c8f093ffb21e2acaa1c8fc68a11d883","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-12 20:34:52","modifiedFileCount":"19","status":"M","submitter":"Karl Wright"}]
