[{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2014-12-31 22:05:48","commitOrder":1,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":107,"groupId":"44048","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/49/879e7b705329b7ae1ce0062cb91c83f145911c.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2014-12-31 22:05:48","commitOrder":1,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":52,"groupId":"25078","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/40/c9da49a0be650a89b55d208529226306b7d471.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleXMLTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"}],"commitId":"ef809a0f10e78aec3f97c878f90ff74673f98745","commitMessage":"@@@SOLR-6895: Deprecate SolrServer classes and replace with SolrClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1648697 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-31 22:05:48","modifiedFileCount":"152","status":"B","submitter":"Alan Woodward"},{"authorTime":"2016-04-02 00:21:59","codes":[{"authorDate":"2016-04-02 00:21:59","commitOrder":2,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2016-04-02 00:21:59","endLine":150,"groupId":"59971","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/31/7d4cd7c052df98f8b521797395f8a13c037760.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2016-04-02 00:21:59","commitOrder":2,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2016-04-02 00:21:59","endLine":49,"groupId":"59971","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/8e449af18b936a57c88e989b477c94dc55cfd1.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setDefaultMaxConnectionsPerHost(100);\n      client.setMaxTotalConnections(100);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleXMLTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"ce172acb8fec6c3bbb18837a4d640da6c5aad649","commitMessage":"@@@SOLR-4509: Move to non deprecated HttpClient impl classes to remove stale connection check on every request and move connection lifecycle management towards the client.\n","date":"2016-04-02 00:21:59","modifiedFileCount":"67","status":"M","submitter":"markrmiller"},{"authorTime":"2016-04-08 18:07:13","codes":[{"authorDate":"2016-04-08 18:07:13","commitOrder":3,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":150,"groupId":"59971","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/3e59ebe2610946a93e94d346c4accaf56d57d8.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2016-04-08 18:07:13","commitOrder":3,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":49,"groupId":"59971","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/92/ab1ec9c034f4bba49658d3d1db32ba3b9457ee.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleXMLTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"9b65416e60d1183e0d145646c36e5eb9018603f8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-08 18:07:13","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-07-04 12:44:18","codes":[{"authorDate":"2017-07-04 12:44:18","commitOrder":4,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":148,"groupId":"10462","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/47/faf7887a8549a2c813cbdaf469365e15def251.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      \r\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n      \n      if (random().nextBoolean()) {\n        client.setParser(new BinaryResponseParser());\n        client.setRequestWriter(new BinaryRequestWriter());\n      }\n      \n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2017-07-04 12:44:18","commitOrder":4,"curCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url, DEFAULT_CONNECTION_TIMEOUT);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":48,"groupId":"10462","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createNewSolrClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/903475e090a1b190b78a9ff76b700b6218ff68.src","preCode":"  public SolrClient createNewSolrClient() {\n    try {\n      String url = jetty.getBaseUrl().toString() + \"/collection1\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      client.setUseMultiPartPost(random().nextBoolean());\n      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);\n      client.setParser(new XMLResponseParser());\n      client.setRequestWriter(new RequestWriter());\n      return client;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleXMLTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"6c163658bbca15b1e4ff81d16b25e07df78468e8","commitMessage":"@@@SOLR-10456: Deprecate timeout related setters from SolrClients.  and replace with Builder based implementation\n","date":"2017-07-04 12:44:18","modifiedFileCount":"48","status":"M","submitter":"Anshum Gupta"}]
