[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2017-04-18 23:21:15","commitOrder":2,"curCode":"  public void testEchoStream() throws Exception {\n    String expr = \"echo(hello world)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello, world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, world\"));\n\n    expr = \"echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"echo asc\\\", echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n    s = (String)tuples.get(1).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"echo(\\\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi\" +\n        \" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi \" +\n        \"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\"));\n\n\n\n  }\n","date":"2017-04-18 23:21:34","endLine":5011,"groupId":"32849","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEchoStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/fc37d884740bd6ece7caaacc1d6d0860d96bc9.src","preCode":"  public void testEchoStream() throws Exception {\n    String expr = \"echo(hello world)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello, world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, world\"));\n\n    expr = \"echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"echo asc\\\", echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n    s = (String)tuples.get(1).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"echo(\\\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi\" +\n        \" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi \" +\n        \"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\"));\n\n\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4922,"status":"NB"},{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testPercentile() throws Exception {\n    String cexpr = \"percentile(array(1,2,3,4,5,6,7,8,9,10,11), 50)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    double p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 50)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 20)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 2.4, 0.001);\n  }\n","date":"2018-04-06 02:00:07","endLine":723,"groupId":"12026","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testPercentile() throws Exception {\n    String cexpr = \"percentile(array(1,2,3,4,5,6,7,8,9,10,11), 50)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    double p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 50)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 20)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 2.4, 0.001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":676,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-10-30 04:29:04","codes":[{"authorDate":"2017-04-18 23:21:15","commitOrder":3,"curCode":"  public void testEchoStream() throws Exception {\n    String expr = \"echo(hello world)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello, world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, world\"));\n\n    expr = \"echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"echo asc\\\", echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n    s = (String)tuples.get(1).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"echo(\\\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi\" +\n        \" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi \" +\n        \"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\"));\n\n\n\n  }\n","date":"2017-04-18 23:21:34","endLine":5011,"groupId":"32849","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEchoStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/fc37d884740bd6ece7caaacc1d6d0860d96bc9.src","preCode":"  public void testEchoStream() throws Exception {\n    String expr = \"echo(hello world)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello, world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, world\"));\n\n    expr = \"echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"echo asc\\\", echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n    s = (String)tuples.get(1).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"echo(\\\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi\" +\n        \" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi \" +\n        \"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\"));\n\n\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4922,"status":"N"},{"authorDate":"2018-10-30 04:29:04","commitOrder":3,"curCode":"  public void testPercentile() throws Exception {\n    String cexpr = \"percentile(array(1,2,3,4,5,6,7,8,9,10,11), 50)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    double p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 50)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 20)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 2.4, 0.001);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), array(20, 50))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    List<Number> percentiles = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(percentiles.get(0).doubleValue(), 2.4, 0.001);\n    assertEquals(percentiles.get(1).doubleValue(), 6.0, 0.001);\n  }\n","date":"2018-10-30 04:29:04","endLine":1005,"groupId":"12026","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/f9c0a96f2048c0d30ad91419f430d1ded2cb3b.src","preCode":"  public void testPercentile() throws Exception {\n    String cexpr = \"percentile(array(1,2,3,4,5,6,7,8,9,10,11), 50)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    double p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 50)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 20)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 2.4, 0.001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":941,"status":"M"}],"commitId":"ac1925045d137d4762c6cb5d6940bfec784bdd4f","commitMessage":"@@@SOLR-12936: Allow percentiles Stream Evaluator to accept an array of percentiles to calculate\n","date":"2018-10-30 04:29:04","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2017-04-18 23:21:15","commitOrder":4,"curCode":"  public void testEchoStream() throws Exception {\n    String expr = \"echo(hello world)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello, world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, world\"));\n\n    expr = \"echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"echo asc\\\", echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n    s = (String)tuples.get(1).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"echo(\\\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi\" +\n        \" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi \" +\n        \"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\"));\n\n\n\n  }\n","date":"2017-04-18 23:21:34","endLine":5011,"groupId":"10600","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEchoStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/fc37d884740bd6ece7caaacc1d6d0860d96bc9.src","preCode":"  public void testEchoStream() throws Exception {\n    String expr = \"echo(hello world)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello world\"));\n\n    expr = \"echo(\\\"hello, world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, world\"));\n\n    expr = \"echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"parallel(\"+COLLECTIONORALIAS+\", workers=2, sort=\\\"echo asc\\\", echo(\\\"hello, \\\\\\\"t\\\\\\\" world\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    s = (String)tuples.get(0).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n    s = (String)tuples.get(1).get(\"echo\");\n    assertTrue(s.equals(\"hello, \\\"t\\\" world\"));\n\n    expr = \"echo(\\\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi\" +\n        \" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\\\")\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    s = (String)tuples.get(0).get(\"echo\");\n\n    assertTrue(s.equals(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi \" +\n        \"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\"));\n\n\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4922,"status":"N"},{"authorDate":"2020-06-17 01:27:53","commitOrder":4,"curCode":"  public void testPercentile() throws Exception {\n    String cexpr = \"percentile(array(1,2,3,4,5,6,7,8,9,10,11), 50)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    double p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 50)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 20)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 2.4, 0.001);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), array(20, 50))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> percentiles = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(percentiles.get(0).doubleValue(), 2.4, 0.001);\n    assertEquals(percentiles.get(1).doubleValue(), 6.0, 0.001);\n  }\n","date":"2020-06-17 01:27:53","endLine":1190,"groupId":"10600","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercentile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testPercentile() throws Exception {\n    String cexpr = \"percentile(array(1,2,3,4,5,6,7,8,9,10,11), 50)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    double p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 50)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 6, 0.0);\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), 20)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    p = tuple.getDouble(\"return-value\");\n    assertEquals(p, 2.4, 0.001);\n\n\n    cexpr = \"percentile(array(11,10,3,4,5,6,7,8,9,2,1), array(20, 50))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    tuple = tuples.get(0);\n    List<Number> percentiles = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(percentiles.get(0).doubleValue(), 2.4, 0.001);\n    assertEquals(percentiles.get(1).doubleValue(), 6.0, 0.001);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1125,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
