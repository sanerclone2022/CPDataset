[{"authorTime":"2015-06-20 02:53:57","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  public Comparator<Tuple> constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      Comparator[] comps = new Comparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultiComp(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (Comparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","date":"2015-05-11 20:37:18","endLine":199,"groupId":"47601","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constructComparator","params":"(StringcomparatorString@ClasscomparatorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/8989637fab717beeef9ff9336e36577f1ba8f3.src","preCode":"  public Comparator<Tuple> constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      Comparator[] comps = new Comparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultiComp(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (Comparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"NB"},{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  public Equalitor<Tuple> constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      Equalitor[] eqs = new Equalitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultiEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (Equalitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","date":"2015-06-20 02:53:57","endLine":232,"groupId":"10687","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constructEqualitor","params":"(StringequalitorString@ClassequalitorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/dec674518d5824ed7c70441999231bdac5fdb0.src","preCode":"  public Equalitor<Tuple> constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      Equalitor[] eqs = new Equalitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultiEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (Equalitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"1ff66e90f1a5c209130bc39095f2f57107ee30d4","commitMessage":"@@@SOLR-7513.  SOLR-7528: Add Equalitors to Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686481 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-20 02:53:57","modifiedFileCount":"16","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","date":"2015-06-24 21:07:09","endLine":203,"groupId":"47601","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"constructComparator","params":"(StringcomparatorString@ClasscomparatorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/af3580d6e494d54fc9d7bfb79cd974f7f25179.src","preCode":"  public Comparator<Tuple> constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      Comparator[] comps = new Comparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultiComp(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (Comparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","date":"2015-06-24 21:07:09","endLine":233,"groupId":"10687","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"constructEqualitor","params":"(StringequalitorString@ClassequalitorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/af3580d6e494d54fc9d7bfb79cd974f7f25179.src","preCode":"  public Equalitor<Tuple> constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      Equalitor[] eqs = new Equalitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultiEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (Equalitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"33a4099b9850b4f5ee8f6fe237d07060a4272704","commitMessage":"@@@SOLR-7554: Add checks in Streams for incoming stream order\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1687258 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-24 21:07:09","modifiedFileCount":"18","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-11-11 09:45:04","commitOrder":4,"curCode":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        \r\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        \r\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else if(null == order){ \n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","date":"2015-11-11 09:45:04","endLine":253,"groupId":"10684","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"constructComparator","params":"(StringcomparatorString@ClasscomparatorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/26/064ce24f88072e0aa1be46fcebeaaf29d165ef.src","preCode":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else{\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting fieldName and order\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","date":"2015-06-24 21:07:09","endLine":233,"groupId":"10687","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"constructEqualitor","params":"(StringequalitorString@ClassequalitorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/af3580d6e494d54fc9d7bfb79cd974f7f25179.src","preCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"}],"commitId":"5c5812940a58fd97c03de6822bb82202ec852add","commitMessage":"@@@SOLR-7584: Adds Inner and LeftOuter Joins to the Streaming API and Streaming Expressions (Dennis Gove.  Corey Wu)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713753 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-11 09:45:04","modifiedFileCount":"12","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2016-10-07 07:36:39","commitOrder":5,"curCode":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        \r\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        \r\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else {\n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","date":"2016-10-07 21:24:02","endLine":297,"groupId":"36096","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"constructComparator","params":"(StringcomparatorString@ClasscomparatorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/e72dfc9ea841b8b8c4e00e09892bf88ccca9d7.src","preCode":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if(comparatorString.contains(\",\")){\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    }\n    else if(comparatorString.contains(\"=\")){\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if(parts.length < 3){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for(String part : parts){\n        \r\n        if(null == part || 0 == part.trim().length()){ continue; }\n        \n        \r\n        if(null == leftFieldName){ \n          leftFieldName = part.trim(); \n        }\n        else if(null == rightFieldName){ \n          rightFieldName = part.trim(); \n        }\n        else if(null == order){ \n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if(null == leftFieldName || null == rightFieldName || null == order){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    }\n    else{\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if(2 != parts.length){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator)createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":5,"curCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","date":"2015-06-24 21:07:09","endLine":233,"groupId":"10687","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"constructEqualitor","params":"(StringequalitorString@ClassequalitorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/af3580d6e494d54fc9d7bfb79cd974f7f25179.src","preCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"}],"commitId":"6aa28bd6558e47080166bf42b2b97aaa74ebf90b","commitMessage":"@@@SOLR-8385: Narrow StreamFactory.withFunctionName clazz parameter to prevent misconfiguration\n","date":"2016-10-07 21:24:02","modifiedFileCount":"3","status":"M","submitter":"Kevin Risden"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":6,"curCode":"  public StreamComparator constructComparator(String comparatorString, @SuppressWarnings({\"rawtypes\"})Class comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        \r\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        \r\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":358,"groupId":"36096","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"constructComparator","params":"(StringcomparatorString@@SuppressWarnings({\"rawtypes\"})ClasscomparatorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/443e9c60bae95de61db442b8cae15153b4801d.src","preCode":"  public StreamComparator constructComparator(String comparatorString, Class comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        \r\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        \r\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":6,"curCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","date":"2015-06-24 21:07:09","endLine":233,"groupId":"10687","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"constructEqualitor","params":"(StringequalitorString@ClassequalitorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/af3580d6e494d54fc9d7bfb79cd974f7f25179.src","preCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":7,"curCode":"  public StreamComparator constructComparator(String comparatorString, Class<? extends StreamComparator> comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        \r\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        \r\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return createInstance(comparatorType, new Class<?>[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return createInstance(comparatorType, new Class<?>[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","date":"2021-06-03 06:17:26","endLine":350,"groupId":"10358","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"constructComparator","params":"(StringcomparatorString@Class<?extendsStreamComparator>comparatorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/81da1bf58fac3cb043b56e0583c74a16396806.src","preCode":"  public StreamComparator constructComparator(String comparatorString, @SuppressWarnings({\"rawtypes\"})Class comparatorType) throws IOException {\n    if (comparatorString.contains(\",\")) {\n      String[] parts = comparatorString.split(\",\");\n      StreamComparator[] comps = new StreamComparator[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        comps[idx] = constructComparator(parts[idx].trim(), comparatorType);\n      }\n      return new MultipleFieldComparator(comps);\n    } else if (comparatorString.contains(\"=\")) {\n      \r\n      String[] parts = comparatorString.split(\"[ =]\");\n      \n      if (parts.length < 3) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      String leftFieldName = null;\n      String rightFieldName = null;\n      String order = null;\n      for (String part : parts) {\n        \r\n        if (null == part || 0 == part.trim().length()) { continue; }\n        \n        \r\n        if (null == leftFieldName) {\n          leftFieldName = part.trim(); \n        } else if (null == rightFieldName) {\n          rightFieldName = part.trim(); \n        } else {\n          order = part.trim();\n          break; \r\n        }\n      }\n      \n      if (null == leftFieldName || null == rightFieldName || null == order) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'left=right order'\",comparatorString));\n      }\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, String.class, ComparatorOrder.class }, new Object[]{ leftFieldName, rightFieldName, ComparatorOrder.fromString(order) });\n    } else {\n      \r\n      String[] parts = comparatorString.split(\" \");\n      if (2 != parts.length) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid comparator expression %s - expecting 'field order'\",comparatorString));\n      }\n      \n      String fieldName = parts[0].trim();\n      String order = parts[1].trim();\n      \n      return (StreamComparator) createInstance(comparatorType, new Class[]{ String.class, ComparatorOrder.class }, new Object[]{ fieldName, ComparatorOrder.fromString(order) });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":7,"curCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class<? extends StreamEqualitor> equalitorType) throws IOException {\n    if (equalitorString.contains(\",\")) {\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    } else {\n      String leftFieldName;\n      String rightFieldName;\n      \n      if (equalitorString.contains(\"=\")) {\n        String[] parts = equalitorString.split(\"=\");\n        if (2 != parts.length) {\n          throw new IOException(String.format(Locale.ROOT, \"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      } else {\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return createInstance(equalitorType, new Class<?>[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","date":"2021-06-03 06:17:26","endLine":378,"groupId":"10358","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"constructEqualitor","params":"(StringequalitorString@Class<?extendsStreamEqualitor>equalitorType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/81da1bf58fac3cb043b56e0583c74a16396806.src","preCode":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if (equalitorString.contains(\",\")) {\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    } else {\n      String leftFieldName;\n      String rightFieldName;\n      \n      if (equalitorString.contains(\"=\")) {\n        String[] parts = equalitorString.split(\"=\");\n        if (2 != parts.length) {\n          throw new IOException(String.format(Locale.ROOT, \"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      } else {\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor) createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
