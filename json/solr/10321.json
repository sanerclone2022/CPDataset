[{"authorTime":"2017-01-04 02:09:49","codes":[{"authorDate":"2016-04-20 00:06:32","commitOrder":7,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(includeStreams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    \r\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":169,"groupId":"47523","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/375c2ffae745b79e2882ba8b26d990732f5c86.src","preCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(includeStreams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    \r\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"NB"},{"authorDate":"2017-01-04 02:09:49","commitOrder":7,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    if(includeStreams){\n      expression.addParameter(((Expressible) stream).toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n\n    return expression;\n  }\n","date":"2017-01-04 03:53:03","endLine":131,"groupId":"47523","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/ca113b90348f9b37aede47e6dfa90a5dc65e9d.src","preCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    if(includeStreams){\n      expression.addParameter(((Expressible) stream).toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"1da283ef2c673b2effac834da1de1cb94c0118bb","commitMessage":"@@@SOLR-8530: Add HavingStream to Streaming API and StreamingExpressions\n","date":"2017-01-04 03:53:03","modifiedFileCount":"0","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-02-10 13:39:06","codes":[{"authorDate":"2016-04-20 00:06:32","commitOrder":8,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(includeStreams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    \r\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":169,"groupId":"10321","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/375c2ffae745b79e2882ba8b26d990732f5c86.src","preCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(includeStreams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    \r\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"N"},{"authorDate":"2017-02-10 13:39:06","commitOrder":8,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    if(includeStreams){\n      expression.addParameter(((Expressible) stream).toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    if(evaluator instanceof Expressible) {\n      expression.addParameter(evaluator.toExpression(factory));\n    } else {\n      throw new IOException(\"This HavingStream contains a non-expressible evaluator - it cannot be converted to an expression\");\n    }\n\n    return expression;\n  }\n","date":"2017-02-10 13:39:51","endLine":112,"groupId":"10321","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/e8952ed6f50e46226a2215102663c1d4f646b3.src","preCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    if(includeStreams){\n      expression.addParameter(((Expressible) stream).toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"62489678d074edb2ee962e1c4ee38026ff504b2a","commitMessage":"@@@SOLR-9916: Adds Stream Evaluators to support evaluating values from tuples\n","date":"2017-02-10 13:39:51","modifiedFileCount":"6","status":"M","submitter":"Dennis Gove"}]
