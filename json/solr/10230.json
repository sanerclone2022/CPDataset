[{"authorTime":"2017-12-05 10:08:58","codes":[{"authorDate":"2017-12-05 10:08:58","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n","date":"2017-12-05 10:09:41","endLine":62,"groupId":"18105","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/1d8181239625531697560af1cd56c83d6713aa.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"MB"},{"authorDate":"2017-12-05 10:08:58","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeSubtract(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n","date":"2017-12-05 10:09:41","endLine":62,"groupId":"53728","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/0de32bff02651859f653f54774e275097c0b83.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeSubtract(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBESubtractEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"MB"}],"commitId":"8750e5f2a97e2011da7a3c821dca38a31d0f9bf1","commitMessage":"@@@SOLR-11485: Add olsRegress.  spline and derivative Stream Evaluators\n","date":"2017-12-05 10:09:41","modifiedFileCount":"46","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-03-05 09:22:33","codes":[{"authorDate":"2018-03-05 09:22:33","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2018-03-05 09:22:33","endLine":68,"groupId":"14019","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/86a95a1147869eb73ee21ba7c12d666012be6f.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeAdd(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2018-03-05 09:22:33","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2018-03-05 09:22:33","endLine":67,"groupId":"14019","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/7a96821cbd92f657dcd654924697cddb55c589.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    double[] result =  MathArrays.ebeSubtract(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n\n    List<Number> numbers = new ArrayList();\n    for(double d : result) {\n      numbers.add(d);\n    }\n\n    return numbers;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBESubtractEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"dc5db9b2f1050f1d1fc545c33f117ae4ec867983","commitMessage":"@@@SOLR-12054: ebeAdd and ebeSubtract should support matrix operations\n","date":"2018-03-05 09:22:33","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-04-10 18:57:34","codes":[{"authorDate":"2018-04-10 18:57:34","commitOrder":4,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2018-04-10 18:57:34","endLine":67,"groupId":"14019","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/09f15cc176b6ba438eb2a00a453182261feceb.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2018-04-10 18:57:34","commitOrder":4,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2018-04-10 18:57:34","endLine":66,"groupId":"14019","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/857de6a982e3f372bb353dc164c8488bb6ee4c.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2);\n      RealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getData());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBESubtractEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"b65229c90479cf3b798759a02dee6120564c28c7","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-04-10 18:57:34","modifiedFileCount":"12","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":5,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":68,"groupId":"14019","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/7f2d5e5106b6c71d4aa83ac6c88962c78bb64e.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":5,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":67,"groupId":"14019","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/2dd0602afbae140a5eb4fcbd203610a4f9a67c.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBESubtractEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":6,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":67,"groupId":"10230","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/50be3c2ecc6d88644f458f91f237927973d4d2.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeAdd(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeAdd must either be two numeric arrays or two matrices. \");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBEAddEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":6,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":66,"groupId":"10230","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/ff9c6eccf42cb9b6b7b56f3c359572edeb5eee.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(first instanceof List && second instanceof List) {\n      double[] result = MathArrays.ebeSubtract(\n          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n      );\n\n      List<Number> numbers = new ArrayList<>();\n      for (double d : result) {\n        numbers.add(d);\n      }\n\n      return numbers;\n    } else if(first instanceof Matrix && second instanceof Matrix) {\n      double[][] data1 = ((Matrix) first).getData();\n      double[][] data2 = ((Matrix) second).getData();\n      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);\n      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);\n      Array2DRowRealMatrix matrix3 = matrix1.subtract(matrix2);\n      return new Matrix(matrix3.getDataRef());\n    } else {\n      throw new IOException(\"Parameters for ebeSubtract must either be two numeric arrays or two matrices. \");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EBESubtractEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
