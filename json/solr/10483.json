[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":7,"curCode":"  public void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudSolrClient.Builder(solrUrls).build();\n  }\n","date":"2018-11-30 01:58:51","endLine":110,"groupId":"60073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/b67d4b055ccc07147bf9c107c04228ac86f01e.src","preCode":"  public void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudSolrClient.Builder(solrUrls).build();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":7,"curCode":"  public void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(solrUrls).build();\n    zkBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build();\n  }\n","date":"2019-03-04 17:41:45","endLine":113,"groupId":"60073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(solrUrls).build();\n    zkBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-10-15 16:13:47","codes":[{"authorDate":"2020-10-15 16:13:47","commitOrder":8,"curCode":"  public void setupCluster() throws Exception {\n    System.setProperty(\"metricsEnabled\", \"true\");\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudSolrClient.Builder(solrUrls).build();\n  }\n","date":"2020-10-15 16:14:16","endLine":113,"groupId":"10483","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/747a441835ebceb7a55aa58ee5e08b84f744de.src","preCode":"  public void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudSolrClient.Builder(solrUrls).build();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-10-15 16:13:47","commitOrder":8,"curCode":"  public void setupCluster() throws Exception {\n    System.setProperty(\"metricsEnabled\", \"true\");\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(solrUrls).build();\n    zkBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build();\n  }\n","date":"2020-10-15 16:14:16","endLine":116,"groupId":"10483","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/96d2c515c09ef6506af556939fd80dcc1af536.src","preCode":"  public void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    final List<String> solrUrls = new ArrayList<>();\n    solrUrls.add(cluster.getJettySolrRunner(0).getBaseUrl().toString());\n    httpBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(solrUrls).build();\n    zkBasedCloudSolrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"2a3da99e2dc006701d0799d84480183c9a81cd3e","commitMessage":"@@@SOLR-14914: Add option to disable metrics collection.\n","date":"2020-10-15 16:14:16","modifiedFileCount":"28","status":"M","submitter":"Andrzej Bialecki"}]
