[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n","date":"2015-05-11 20:37:18","endLine":72,"groupId":"4685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudSolrStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/33c848833f7b93970f0cb412c91013507b168a.src","preCode":"  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","date":"2015-05-11 20:37:18","endLine":102,"groupId":"4686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/33c848833f7b93970f0cb412c91013507b168a.src","preCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"e50f4d94c74560d863df197f21bc87d21c212f8c","commitMessage":"@@@SOLR-7377: Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1678743 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-11 20:37:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2017-07-14 01:48:22","commitOrder":2,"curCode":"  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    System.out.println(\"ExpressionString: \" + expressionString.toString());\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n","date":"2017-07-14 02:29:46","endLine":93,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudSolrStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/b28296e039a952f897e3a47f451cbdd6a42c2b.src","preCode":"  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","date":"2015-05-11 20:37:18","endLine":102,"groupId":"4686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/33c848833f7b93970f0cb412c91013507b168a.src","preCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"19fd95b46cf40fa0b91b7dcf0b157706ea718efb","commitMessage":"@@@commit 4241a13beb0a14e8bd81a520bd8e04ab6c7465aa\nAuthor: Erick Erickson <erick@apache.org>\nDate:   Thu Jul 13 10:39:33 2017 -0700\n\n    SOLR-10908: CloudSolrStream.toExpression incorrectly handles fq clauses\n","date":"2017-07-14 02:29:46","modifiedFileCount":"2","status":"M","submitter":"Erick Erickson"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testCloudSolrStream() throws Exception {\n\n    String expressionString;\n    \n    \r\n    try (CloudSolrStream stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      System.out.println(\"ExpressionString: \" + expressionString.toString());\n      assertTrue(expressionString.contains(\"search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n      assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    }\n    \r\n    try (CloudSolrStream stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"id=izzy\"));\n      assertTrue(expressionString.contains(\"a_s=kayden\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":92,"groupId":"10666","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudSolrStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testCloudSolrStream() throws Exception {\n\n    CloudSolrStream stream;\n    String expressionString;\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", fq=\\\"a_s:one\\\", fq=\\\"a_s:two\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    System.out.println(\"ExpressionString: \" + expressionString.toString());\n    assertTrue(expressionString.contains(\"search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:one\\\"\"));\n    assertTrue(expressionString.contains(\"fq=\\\"a_s:two\\\"\"));\n    \n    \r\n    stream = new CloudSolrStream(StreamExpressionParser.parse(\"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", aliases=\\\"id=izzy,a_s=kayden\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"id=izzy\"));\n    assertTrue(expressionString.contains(\"a_s=kayden\"));\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testMergeStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (MergeStream stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n      assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n      assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":187,"groupId":"10666","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testMergeStream() throws Exception {\n\n    MergeStream stream;\n    String expressionString;\n    \n    \r\n    stream = new MergeStream(StreamExpressionParser.parse(\"merge(\"\n                              + \"search(collection1, q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"search(collection1, q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n                              + \"on=\\\"a_f asc, a_s asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"id:(0 3 4)\\\"\"));\n    assertTrue(expressionString.contains(\"q=\\\"id:(1 2)\\\"\"));\n    assertTrue(expressionString.contains(\"on=\\\"a_f asc,a_s asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
