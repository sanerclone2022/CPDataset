[{"authorTime":"2019-12-05 13:18:22","codes":[{"authorDate":"2019-12-05 13:18:22","commitOrder":1,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-12-05 13:18:22","endLine":60,"groupId":"42264","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/4a073e3ffe761092117797cd723cf2f5c72b40.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/VarianceAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"},{"authorDate":"2019-12-05 13:18:22","commitOrder":1,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2019-12-05 13:18:22","endLine":62,"groupId":"42264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@intnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/3e39c4b75a93bb04aa7bff14829a2f888f6a7f.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/SumsqAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"12e8cca6442e6c64a414d832b3982cc77354c6ad","commitMessage":"@@@SOLR-11706: add support for aggregation on multivalued fields\n\n* min.  max.  sum.  sumsq.  avg.  stddev.  variance.  percentile aggregations\n  in JSON facets now supports multivalued fields\n","date":"2019-12-05 13:18:22","modifiedFileCount":"14","status":"B","submitter":"Munendra S N"},{"authorTime":"2020-04-10 21:46:54","codes":[{"authorDate":"2020-04-10 21:46:54","commitOrder":2,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-04-10 22:00:20","endLine":60,"groupId":"42264","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/2f5c5f3fd6ca3743ea3d8b6c87bc8b0bf5a2d6.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/VarianceAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-04-10 21:46:54","commitOrder":2,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-04-10 22:00:20","endLine":62,"groupId":"42264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/b9e67d7ca503be114c74e25b697928d9c23a59.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/SumsqAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"36b280bd0a21952ea54c7567f037eb48dc93205a","commitMessage":"@@@SOLR-11775: return long val for facet count in json facet\n\n* Long value is returned for any count related to json facets\n  irrespective of number of shards\n","date":"2020-04-10 22:00:20","modifiedFileCount":"33","status":"M","submitter":"Munendra S N"},{"authorTime":"2020-05-07 23:04:06","codes":[{"authorDate":"2020-05-07 23:04:06","commitOrder":3,"curCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-07 23:04:06","endLine":60,"groupId":"42264","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetRequest.FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/15c40cdda2a345def819fe800bb4c7b35afb6d.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/VarianceAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-05-07 23:04:06","commitOrder":3,"curCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-07 23:04:06","endLine":62,"groupId":"42264","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSlotAcc","params":"(FacetRequest.FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/921797e7d24884c87bb48a537ff412380b424b.src","preCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/SumsqAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"31b350e8040cbe30c4e85b7fb82eab4b6afd81c7","commitMessage":"@@@SOLR-14426 Move auxiliary classes to nested classes (#1487)\n\n","date":"2020-05-07 23:04:06","modifiedFileCount":"67","status":"M","submitter":"Mike Drob"},{"authorTime":"2020-05-21 20:59:32","codes":[{"authorDate":"2020-05-21 20:59:32","commitOrder":4,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SlotAcc.VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-21 20:59:32","endLine":60,"groupId":"102161","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/12be69cf306482e63e6ab787817ccac4f1ea53.src","preCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource) vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new VarianceSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new VarianceSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new VarianceUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new VarianceSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/VarianceAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2020-05-21 20:59:32","commitOrder":4,"curCode":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SlotAcc.SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","date":"2020-05-21 20:59:32","endLine":62,"groupId":"102161","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"createSlotAcc","params":"(FacetContextfcontext@longnumDocs@intnumSlots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/eec86699c087ab6caa92e9897b7c1e9d6f8b21.src","preCode":"  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.getType().getNumberType() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            name() + \" aggregation not supported for \" + sf.getType().getTypeName());\n      }\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            return new SumSqSortedNumericAcc(fcontext, sf, numSlots);\n          }\n          return new SumSqSortedSetAcc(fcontext, sf, numSlots);\n        }\n        if (sf.getType().isPointField()) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              name() + \" aggregation not supported for PointField w/o docValues\");\n        }\n        return new SumSqUnInvertedFieldAcc(fcontext, sf, numSlots);\n      }\n      vs = sf.getType().getValueSource(sf, null);\n    }\n    return new SumsqSlotAcc(vs, fcontext, numSlots);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/SumsqAgg.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"9c066f60f1804c26db8be226429a0be046c5a4db","commitMessage":"@@@SOLR-14482: Fix or suppress warnings in solr/search/facet\n","date":"2020-05-21 20:59:32","modifiedFileCount":"57","status":"M","submitter":"Erick Erickson"}]
