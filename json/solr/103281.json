[{"authorTime":"2015-11-30 22:02:45","codes":[{"authorDate":"2015-11-30 22:02:45","commitOrder":2,"curCode":"  public void testDontUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n        \r\n        Thread.sleep(500);\n      }\n      \r\n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      assertFalse(\"Query should be waiting for warming to finish\", querySucceeded.get());\n      \n      \r\n      SlowSearcherListener.latch.countDown();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n    } finally {\n      \n      if (coreCreated) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n","date":"2015-11-30 22:02:45","endLine":322,"groupId":"10163","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontUseColdSearcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/1635c4405331b39056bded9bd1228c8173a22c.src","preCode":"  public void testDontUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n        \r\n        Thread.sleep(500);\n      }\n      \r\n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      assertFalse(\"Query should be waiting for warming to finish\", querySucceeded.get());\n      \n      \r\n      SlowSearcherListener.latch.countDown();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n    } finally {\n      \n      if (coreCreated) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"MB"},{"authorDate":"2015-11-30 22:02:45","commitOrder":2,"curCode":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n","date":"2015-11-30 22:02:45","endLine":381,"groupId":"1418","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUseColdSearcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/1635c4405331b39056bded9bd1228c8173a22c.src","preCode":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"MB"}],"commitId":"e5be9136a6fdbc17538ad4ead186ba9024aee63e","commitMessage":"@@@SOLR-8336: CoreDescriptor takes a Path for its instance dir.  rather than a String\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1717254 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-30 22:02:45","modifiedFileCount":"29","status":"M","submitter":"Alan Woodward"},{"authorTime":"2016-09-27 05:51:39","codes":[{"authorDate":"2016-09-27 05:51:39","commitOrder":3,"curCode":"  public void testDontUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n        \r\n        Thread.sleep(500);\n      }\n      \r\n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      assertFalse(\"Query should be waiting for warming to finish\", querySucceeded.get());\n      \n      \r\n      SlowSearcherListener.latch.countDown();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n    } finally {\n      \n      if (coreCreated) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n","date":"2016-10-18 00:18:25","endLine":331,"groupId":"103281","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontUseColdSearcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/e3f9717ab32b8faf137eb89558ab65ac0168ef.src","preCode":"  public void testDontUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n        \r\n        Thread.sleep(500);\n      }\n      \r\n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      assertFalse(\"Query should be waiting for warming to finish\", querySucceeded.get());\n      \n      \r\n      SlowSearcherListener.latch.countDown();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n    } finally {\n      \n      if (coreCreated) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2016-09-27 05:51:39","commitOrder":3,"curCode":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n","date":"2016-10-18 00:18:25","endLine":390,"groupId":"103281","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUseColdSearcher","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/e3f9717ab32b8faf137eb89558ab65ac0168ef.src","preCode":"  public void testUseColdSearcher() throws Exception {\n    MockSearchComponent.registerFirstSearcherListener = false;\n    MockSearchComponent.registerNewSearcherListener = false;\n    MockSearchComponent.registerSlowSearcherListener = true;\n    final AtomicBoolean querySucceeded = new AtomicBoolean(false);\n    SlowSearcherListener.numberOfTimesCalled = new AtomicInteger(0);\n    SlowSearcherListener.latch = new CountDownLatch(1);\n    \n    \n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    final SolrCore newCore;\n    boolean coreCreated = false;\n    try {\n      System.setProperty(\"tests.solr.useColdSearcher\", \"true\");\n      \r\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      coreCreated = true;\n      \n      \r\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertTrue(newCore.getSolrConfig().useColdSearcher);\n      \n      Thread t = new Thread() {\n        public void run() {\n          try {\n            doQuery(newCore);\n            querySucceeded.set(true);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        };\n      };\n      t.start();\n      \n      \r\n      for (int i = 0; i <= 1000; i++) {\n        if (querySucceeded.get()) {\n          break;\n        }\n        if (i == 1000) {\n          fail(\"Query didn't succeed after 10 secoonds\");\n        }\n        Thread.sleep(10);\n      }\n      \n      assertEquals(0, SlowSearcherListener.numberOfTimesCalled.get());\n      \n    } finally {\n      System.getProperties().remove(\"tests.solr.useColdSearcher\");\n      if (coreCreated) {\n        SlowSearcherListener.latch.countDown();\n        cores.unload(\"core1\");\n      }\n      \n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"65f55802ee01b90a7f529de270d5d866a2282a40","commitMessage":"@@@SOLR-9566: Don't put replicas into recovery when collections are created\n","date":"2016-10-18 00:18:25","modifiedFileCount":"8","status":"M","submitter":"Alan Woodward"}]
