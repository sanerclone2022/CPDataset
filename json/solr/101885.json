[{"authorTime":"2021-02-04 21:47:30","codes":[{"authorDate":"2021-02-04 21:47:30","commitOrder":1,"curCode":"        private void backupThenWait() throws SolrServerException, IOException {\n            CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(getCollectionName(), backupName)\n                    .setLocation(backupLocation)\n                    .setIncremental(true)\n                    .setMaxNumberBackupPoints(maxNumberOfBackupToKeep)\n                    .setRepositoryName(BACKUP_REPO_NAME);\n            if (random().nextBoolean()) {\n                try {\n                    RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                    assertEquals(RequestStatusState.COMPLETED, state);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                numBackup++;\n            } else {\n                CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n                assertEquals(0, rsp.getStatus());\n                NamedList resp = (NamedList) rsp.getResponse().get(\"response\");\n                numBackup++;\n                assertEquals(numBackup, resp.get(\"backupId\"));;\n            }\n        }\n","date":"2021-02-04 21:47:30","endLine":367,"groupId":"3625","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backupThenWait","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/18bbf93e1a0c85e5ab7ee0de978f03d9371269.src","preCode":"        private void backupThenWait() throws SolrServerException, IOException {\n            CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(getCollectionName(), backupName)\n                    .setLocation(backupLocation)\n                    .setIncremental(true)\n                    .setMaxNumberBackupPoints(maxNumberOfBackupToKeep)\n                    .setRepositoryName(BACKUP_REPO_NAME);\n            if (random().nextBoolean()) {\n                try {\n                    RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                    assertEquals(RequestStatusState.COMPLETED, state);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                numBackup++;\n            } else {\n                CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n                assertEquals(0, rsp.getStatus());\n                NamedList resp = (NamedList) rsp.getResponse().get(\"response\");\n                numBackup++;\n                assertEquals(numBackup, resp.get(\"backupId\"));;\n            }\n        }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/api/collections/AbstractIncrementalBackupTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"},{"authorDate":"2021-02-04 21:47:30","commitOrder":1,"curCode":"    public void makeBackup() throws Exception {\n        CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(DEFAULT_TEST_COLLECTION_NAME, \"stressBackup\")\n                .setLocation(backupDir.getAbsolutePath())\n                .setIncremental(true)\n                .setMaxNumberBackupPoints(5);\n        if (random().nextBoolean()) {\n            try {\n                RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                assertEquals(RequestStatusState.COMPLETED, state);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        } else {\n            CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n            assertEquals(0, rsp.getStatus());\n        }\n    }\n","date":"2021-02-04 21:47:30","endLine":175,"groupId":"3625","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeBackup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/1d3498be6b55a7837834d321dc4679c9b5bf34.src","preCode":"    public void makeBackup() throws Exception {\n        CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(DEFAULT_TEST_COLLECTION_NAME, \"stressBackup\")\n                .setLocation(backupDir.getAbsolutePath())\n                .setIncremental(true)\n                .setMaxNumberBackupPoints(5);\n        if (random().nextBoolean()) {\n            try {\n                RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                assertEquals(RequestStatusState.COMPLETED, state);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        } else {\n            CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n            assertEquals(0, rsp.getStatus());\n        }\n    }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestStressIncrementalBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"}],"commitId":"33d16b570c7630fde784552193ad495b63abd3e3","commitMessage":"@@@SOLR-13608: Incremental backup file format (#2250)\n\nThis commit introduces a new way for Solr to do backups (with a new\nunderlying file structure).  This new \"incremental\" backup process\nimproves over the existing backup mechanism in several ways:\n\n- multiple backups \"points\" can now be stored at a given backup\n  location/name.  allowing users to choose which point in time they want\n  to restore\n- subsequent backups skip over uploading files that were uploaded by\n  previous backups.  saving time and network time.\n- files are checksumed as they're uploaded.  ensuring that corrupted\n  indices aren't persisted and accidentally restored later.\n\nIncremental backups are now the default.  and traditional backups\nshould now be considered 'deprecated' but can still be created by\npassing an `incremental=false` parameter on backup requests.","date":"2021-02-04 21:47:30","modifiedFileCount":"23","status":"B","submitter":"Jason Gerlowski"},{"authorTime":"2021-02-10 04:45:27","codes":[{"authorDate":"2021-02-04 21:47:30","commitOrder":2,"curCode":"        private void backupThenWait() throws SolrServerException, IOException {\n            CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(getCollectionName(), backupName)\n                    .setLocation(backupLocation)\n                    .setIncremental(true)\n                    .setMaxNumberBackupPoints(maxNumberOfBackupToKeep)\n                    .setRepositoryName(BACKUP_REPO_NAME);\n            if (random().nextBoolean()) {\n                try {\n                    RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                    assertEquals(RequestStatusState.COMPLETED, state);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                numBackup++;\n            } else {\n                CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n                assertEquals(0, rsp.getStatus());\n                NamedList resp = (NamedList) rsp.getResponse().get(\"response\");\n                numBackup++;\n                assertEquals(numBackup, resp.get(\"backupId\"));;\n            }\n        }\n","date":"2021-02-04 21:47:30","endLine":367,"groupId":"101885","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backupThenWait","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/18bbf93e1a0c85e5ab7ee0de978f03d9371269.src","preCode":"        private void backupThenWait() throws SolrServerException, IOException {\n            CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(getCollectionName(), backupName)\n                    .setLocation(backupLocation)\n                    .setIncremental(true)\n                    .setMaxNumberBackupPoints(maxNumberOfBackupToKeep)\n                    .setRepositoryName(BACKUP_REPO_NAME);\n            if (random().nextBoolean()) {\n                try {\n                    RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                    assertEquals(RequestStatusState.COMPLETED, state);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                numBackup++;\n            } else {\n                CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n                assertEquals(0, rsp.getStatus());\n                NamedList resp = (NamedList) rsp.getResponse().get(\"response\");\n                numBackup++;\n                assertEquals(numBackup, resp.get(\"backupId\"));;\n            }\n        }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/api/collections/AbstractIncrementalBackupTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"N"},{"authorDate":"2021-02-10 04:45:27","commitOrder":2,"curCode":"    public void makeBackup() throws Exception {\n        CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(DEFAULT_TEST_COLLECTION_NAME, \"stressBackup\")\n                .setLocation(backupPath.toString())\n                .setIncremental(true)\n                .setMaxNumberBackupPoints(5);\n        if (random().nextBoolean()) {\n            try {\n                RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                assertEquals(RequestStatusState.COMPLETED, state);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        } else {\n            CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n            assertEquals(0, rsp.getStatus());\n        }\n    }\n","date":"2021-02-11 04:39:13","endLine":177,"groupId":"101885","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"makeBackup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/507a427a7e87e642da375adbaa01043997de21.src","preCode":"    public void makeBackup() throws Exception {\n        CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(DEFAULT_TEST_COLLECTION_NAME, \"stressBackup\")\n                .setLocation(backupDir.getAbsolutePath())\n                .setIncremental(true)\n                .setMaxNumberBackupPoints(5);\n        if (random().nextBoolean()) {\n            try {\n                RequestStatusState state = backup.processAndWait(cluster.getSolrClient(), 1000);\n                assertEquals(RequestStatusState.COMPLETED, state);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        } else {\n            CollectionAdminResponse rsp = backup.process(cluster.getSolrClient());\n            assertEquals(0, rsp.getStatus());\n        }\n    }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestStressIncrementalBackup.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"aea29464f120feb6f5c3c9e3e7e6c5374770cccd","commitMessage":"@@@SOLR-13608: Fix incremental-backup test failures\n\nThe initial incremental-backup commit introduced several test failures\non Windows test runs that I neglected to catch before committing.  Most\nof these failures were the result of bad 'location' path handling in the\ntest logic itself.  though there were a few tweaks made to Solr code\nitself to better handle Windows paths as well.\n","date":"2021-02-11 04:39:13","modifiedFileCount":"10","status":"M","submitter":"Jason Gerlowski"}]
