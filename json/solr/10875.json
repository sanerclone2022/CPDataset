[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":677,"groupId":"27585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":725,"groupId":"27585","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"B"}],"commitId":"e50f4d94c74560d863df197f21bc87d21c212f8c","commitMessage":"@@@SOLR-7377: Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1678743 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-11 20:37:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2015-06-20 02:53:57","codes":[{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-20 02:53:57","endLine":910,"groupId":"27585","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/ef764448d34c5703ed5e7327acd3b09e6563ec.src","preCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":862,"status":"M"},{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-20 02:53:57","endLine":958,"groupId":"27585","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/ef764448d34c5703ed5e7327acd3b09e6563ec.src","preCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"M"}],"commitId":"1ff66e90f1a5c209130bc39095f2f57107ee30d4","commitMessage":"@@@SOLR-7513.  SOLR-7528: Add Equalitors to Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686481 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-20 02:53:57","modifiedFileCount":"16","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":963,"groupId":"27585","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":915,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":1011,"groupId":"27585","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":965,"status":"M"}],"commitId":"33a4099b9850b4f5ee8f6fe237d07060a4272704","commitMessage":"@@@SOLR-7554: Add checks in Streams for incoming stream order\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1687258 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-24 21:07:09","modifiedFileCount":"18","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":963,"groupId":"27585","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":915,"status":"N"},{"authorDate":"2015-07-04 22:24:35","commitOrder":4,"curCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    RecordCountStream cstream = new RecordCountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-07-04 22:24:35","endLine":1038,"groupId":"27585","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/39b77576511aa84119410f06c2759a190fd198.src","preCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    CountStream cstream = new CountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":992,"status":"M"}],"commitId":"b22f711b6316df59789ac7421e972c0530cc0aef","commitMessage":"@@@SOLR-7707: Add StreamExpression Support to RollupStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689168 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-04 22:24:35","modifiedFileCount":"17","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-12-10 03:52:28","codes":[{"authorDate":"2015-12-10 03:52:28","commitOrder":5,"curCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-12-10 03:52:28","endLine":1673,"groupId":"27585","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/9acab9fbe43bdf605cca5729e7ef7c3d98f4ea.src","preCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1 8 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1623,"status":"M"},{"authorDate":"2015-12-10 03:52:28","commitOrder":5,"curCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-12-10 03:52:28","endLine":1712,"groupId":"27585","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/9acab9fbe43bdf605cca5729e7ef7c3d98f4ea.src","preCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    RecordCountStream cstream = new RecordCountStream(mstream);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", cstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    long totalCount = 0;\n\n    Iterator<Tuple> it = eofTuples.values().iterator();\n    while(it.hasNext()) {\n      Tuple t = it.next();\n      totalCount += t.getLong(\"count\");\n    }\n\n    assert(tuples.size() == totalCount);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1675,"status":"M"}],"commitId":"e04981edc7995280b488197611847f9a7b201e2e","commitMessage":"@@@SOLR-8266: Remove Java Serialization from the Streaming API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718947 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-10 03:52:28","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":6,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":1640,"groupId":"10329","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testParallelMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1595,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":6,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n  }\n","date":"2016-05-05 15:05:25","endLine":1675,"groupId":"10329","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testParallelEOF() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\");\n    indexr(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\");\n    indexr(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\");\n    indexr(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1643,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":7,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1661,"groupId":"20492","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    paramsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1616,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":7,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1696,"groupId":"20492","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1 8 7 9)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3 6)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1664,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-05-27 02:39:37","codes":[{"authorDate":"2016-05-27 02:39:37","commitOrder":8,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","date":"2016-05-27 02:39:37","endLine":1659,"groupId":"20492","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/ea31126212eca3af35418c2d2da7d922cecc93.src","preCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1614,"status":"M"},{"authorDate":"2016-05-27 02:39:37","commitOrder":8,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == numWorkers); \r\n\n  }\n","date":"2016-05-27 02:39:37","endLine":1693,"groupId":"20492","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/ea31126212eca3af35418c2d2da7d922cecc93.src","preCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, mstream, 2, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == 2); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1662,"status":"M"}],"commitId":"4d4030350b79303d6f358612473f4e68570858cc","commitMessage":"@@@SOLR-9141: Fix ClassCastException when using the /sql handler count() function with single-shard collections\n","date":"2016-05-27 02:39:37","modifiedFileCount":"2","status":"M","submitter":"jdyer1"},{"authorTime":"2016-11-14 15:03:37","codes":[{"authorDate":"2016-11-14 15:03:37","commitOrder":9,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assertEquals(8, tuples.size());\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":1667,"groupId":"20492","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assert(tuples.size() == 8);\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1622,"status":"M"},{"authorDate":"2016-11-14 15:03:37","commitOrder":9,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assertEquals(numWorkers, eofTuples.size()); \r\n\n  }\n","date":"2016-11-14 15:03:37","endLine":1701,"groupId":"20492","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 9);\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assert(eofTuples.size() == numWorkers); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1670,"status":"M"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":10,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assertEquals(8, tuples.size());\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":1918,"groupId":"15879","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assertEquals(8, tuples.size());\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1873,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":10,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assertEquals(numWorkers, eofTuples.size()); \r\n\n  }\n","date":"2016-11-16 10:33:58","endLine":1952,"groupId":"15879","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assertEquals(numWorkers, eofTuples.size()); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1921,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":11,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assertEquals(9, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      \r\n      sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n      streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n      streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assertEquals(8, tuples.size());\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":2118,"groupId":"32593","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4,7,6,8,9);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    attachStreamFactory(pstream);\n    tuples = getTuples(pstream);\n\n    assertEquals(8, tuples.size());\n    assertOrder(tuples, 9,8,6,4,3,2,1,0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2064,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":11,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assertEquals(9, tuples.size());\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assertEquals(numWorkers, eofTuples.size()); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":2160,"groupId":"32593","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));    \n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assertEquals(9, tuples.size());\n    Map<String, Tuple> eofTuples = pstream.getEofTuples();\n    assertEquals(numWorkers, eofTuples.size()); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2121,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-11-28 00:21:42","commitOrder":12,"curCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\", \"qt\", \"/export\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\", \"qt\", \"/export\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assertEquals(9, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      \r\n      sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\", \"qt\", \"/export\");\n      streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\", \"qt\", \"/export\");\n      streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assertEquals(8, tuples.size());\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":2187,"groupId":"10875","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testParallelMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/85f2ce458e9299a8c12edad6d0e2bcf87128db.src","preCode":"  public void testParallelMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assertEquals(9, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4, 7, 6, 8, 9);\n\n      \r\n      sParamsA = mapParams(\"q\", \"id:(4 1 8 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n      streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\", \"partitionKeys\", \"a_i\");\n      streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      tuples = getTuples(pstream);\n\n      assertEquals(8, tuples.size());\n      assertOrder(tuples, 9, 8, 6, 4, 3, 2, 1, 0);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2133,"status":"M"},{"authorDate":"2018-11-28 00:21:42","commitOrder":12,"curCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\", \"qt\", \"/export\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\", \"qt\", \"/export\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assertEquals(9, tuples.size());\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assertEquals(numWorkers, eofTuples.size()); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":2229,"groupId":"10875","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelEOF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/85f2ce458e9299a8c12edad6d0e2bcf87128db.src","preCode":"  public void testParallelEOF() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"10\", \"a_f\", \"0\")\n        .add(id, \"6\", \"a_s\", \"hello2\", \"a_i\", \"8\", \"a_f\", \"0\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"3\")\n        .add(id, \"8\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"4\")\n        .add(id, \"9\", \"a_s\", \"hello1\", \"a_i\", \"100\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1 8 7 9)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3 6)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\", \"partitionKeys\", \"a_i\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      ParallelStream pstream = parallelStream(mstream, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n\n      assertEquals(9, tuples.size());\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assertEquals(numWorkers, eofTuples.size()); \r\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2190,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
