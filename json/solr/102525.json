[{"authorTime":"2017-08-22 18:50:53","codes":[{"authorDate":"2017-08-22 18:50:53","commitOrder":1,"curCode":"  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n","date":"2017-08-22 18:50:53","endLine":78,"groupId":"3908","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"muteConsole","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/b6a42288e35e75aafa1089de7bc72d6e0a74d0.src","preCode":"  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2017-08-22 18:50:53","commitOrder":1,"curCode":"  public static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not change log level.\");\n        return false;\n      }\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n","date":"2017-08-22 18:50:53","endLine":98,"groupId":"3909","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"changeLogLevel","params":"(StringlogLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/b6a42288e35e75aafa1089de7bc72d6e0a74d0.src","preCode":"  public static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not change log level.\");\n        return false;\n      }\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"b67424ee5875f4b2028763a17fc0f446e460a9f9","commitMessage":"@@@SOLR-10628: Less verbose output from bin/solr commands\n","date":"2017-08-22 18:50:53","modifiedFileCount":"2","status":"B","submitter":"Jan H?ydahl"},{"authorTime":"2018-03-26 18:20:49","codes":[{"authorDate":"2018-03-26 18:20:49","commitOrder":2,"curCode":"  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n      Configuration config = ctx.getConfiguration();\n      LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);\n      Map<String, Appender> appenders = loggerConfig.getAppenders();\n      appenders.forEach((name, appender) -> {\n        if (appender instanceof ConsoleAppender) {\n          loggerConfig.removeAppender(name);\n          ctx.updateLoggers();\n        }\n      });\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n","date":"2018-03-26 18:20:49","endLine":86,"groupId":"102525","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"muteConsole","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/ded813548100473c99241893d7177866187ba1.src","preCode":"  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2018-03-26 18:20:49","commitOrder":2,"curCode":"  public static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not change log level.\");\n        return false;\n      }\n\n      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n      Configuration config = ctx.getConfiguration();\n      LoggerConfig loggerConfig = config.getRootLogger();\n      loggerConfig.setLevel(Level.toLevel(logLevel, Level.INFO));\n      ctx.updateLoggers();\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n","date":"2018-03-26 18:20:49","endLine":111,"groupId":"102525","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"changeLogLevel","params":"(StringlogLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/ded813548100473c99241893d7177866187ba1.src","preCode":"  public static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not change log level.\");\n        return false;\n      }\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"07d255a7087aede40b32c311f076a876cccdfb08","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-03-26 18:20:49","modifiedFileCount":"15","status":"M","submitter":"Karl Wright"}]
