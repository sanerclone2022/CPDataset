[{"authorTime":"2019-02-28 10:53:43","codes":[{"authorDate":"2018-11-07 00:22:51","commitOrder":6,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","date":"2018-11-07 00:23:40","endLine":1339,"groupId":"48435","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/2451e799bfcc6a860446e9fa628665231b6f4e.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"NB"},{"authorDate":"2019-02-28 10:53:43","commitOrder":6,"curCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2019-02-28 22:20:08","endLine":1383,"groupId":"56129","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/8d745c5c458c953c42fd4d3f8cc0d57f2618b7.src","preCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1251,"status":"B"}],"commitId":"dcb022bc672979609db4f849d0aadc3b714f063f","commitMessage":"@@@SOLR-10436: Add hashRollup Streaming Expression\n","date":"2019-02-28 22:20:08","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-02-28 10:53:43","codes":[{"authorDate":"2020-05-19 04:22:56","commitOrder":7,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"std\", StdMetric.class)\n      .withFunctionName(\"per\", PercentileMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"std(a_i), std(a_f),\"\n              +   \"per(a_i, 50), per(a_f, 50),\"\n              +   \"count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double stdi = tuple.getDouble(\"std(a_i)\");\n    Double stdf = tuple.getDouble(\"std(a_f)\");\n    Double peri = tuple.getDouble(\"per(a_i,50)\");\n    Double perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    System.out.println(\"STD and Per:\"+stdi+\":\"+stdf+\":\"+peri+\":\"+perf);\n\r\n    \r\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","date":"2020-05-19 21:10:23","endLine":1793,"groupId":"11909","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/5da9d5b549aea49984a00fa7383a371a6a582c.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1140,"status":"M"},{"authorDate":"2019-02-28 10:53:43","commitOrder":7,"curCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2019-02-28 22:20:08","endLine":1383,"groupId":"56129","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/8d745c5c458c953c42fd4d3f8cc0d57f2618b7.src","preCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1251,"status":"N"}],"commitId":"16aad55369d285fec96425f996984a9f4afe28e4","commitMessage":"@@@SOLR-14476: Add percentiles and standard deviation aggregations to stats.  facet and timeseries Streaming Expressions\n","date":"2020-05-19 21:10:23","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-02-28 10:53:43","codes":[{"authorDate":"2020-06-29 08:41:28","commitOrder":8,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"std\", StdMetric.class)\n      .withFunctionName(\"per\", PercentileMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"std(a_i), std(a_f),\"\n              +   \"per(a_i, 50), per(a_f, 50),\"\n              +   \"count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double stdi = tuple.getDouble(\"std(a_i)\");\n    Double stdf = tuple.getDouble(\"std(a_f)\");\n    Double peri = tuple.getDouble(\"per(a_i,50)\");\n    Double perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","date":"2020-06-29 08:41:40","endLine":1860,"groupId":"11909","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/8a0623f276fb8c4265a675b6cdd9bd29f9c73f.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"std\", StdMetric.class)\n      .withFunctionName(\"per\", PercentileMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"std(a_i), std(a_f),\"\n              +   \"per(a_i, 50), per(a_f, 50),\"\n              +   \"count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double stdi = tuple.getDouble(\"std(a_i)\");\n    Double stdf = tuple.getDouble(\"std(a_f)\");\n    Double peri = tuple.getDouble(\"per(a_i,50)\");\n    Double perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    System.out.println(\"STD and Per:\"+stdi+\":\"+stdf+\":\"+peri+\":\"+perf);\n\r\n    \r\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1209,"status":"M"},{"authorDate":"2019-02-28 10:53:43","commitOrder":8,"curCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2019-02-28 22:20:08","endLine":1383,"groupId":"56129","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/8d745c5c458c953c42fd4d3f8cc0d57f2618b7.src","preCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1251,"status":"N"}],"commitId":"7bb9926ef282321361a7f90a6f577a72121c6582","commitMessage":"@@@SOLR-14481: Add drill Streaming Expression\n","date":"2020-06-29 08:41:40","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-02-28 10:53:43","codes":[{"authorDate":"2021-04-01 23:34:41","commitOrder":9,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"std\", StdMetric.class)\n      .withFunctionName(\"per\", PercentileMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      .withFunctionName(\"countDist\", CountDistinctMetric.class);\n\n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"std(a_i), std(a_f),\"\n              +   \"per(a_i, 50), per(a_f, 50),\"\n              +   \"count(*), countDist(a_i)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double stdi = tuple.getDouble(\"std(a_i)\");\n    Double stdf = tuple.getDouble(\"std(a_f)\");\n    Double peri = tuple.getDouble(\"per(a_i,50)\");\n    Double perf = tuple.getDouble(\"per(a_f,50)\");\n    Long countDist = tuple.getLong(\"countDist(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n    assertEquals(countDist.longValue(), 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n    countDist = tuple.getLong(\"countDist(a_i)\");\n\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n    assertEquals(countDist.longValue(), 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n    countDist = tuple.getLong(\"countDist(a_i)\");\n\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n    assertEquals(countDist.longValue(), 4);\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","date":"2021-04-01 23:38:54","endLine":1860,"groupId":"10593","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fd/eb26ddfcf6767a0033539681d7def385aed2a3.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"std\", StdMetric.class)\n      .withFunctionName(\"per\", PercentileMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    \r\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n              +   \"sort=\\\"a_s asc\\\", \"\n              +   \"buckets=\\\"a_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), sum(a_f), \"\n              +   \"min(a_i), min(a_f), \"\n              +   \"max(a_i), max(a_f), \"\n              +   \"avg(a_i), avg(a_f), \"\n              +   \"std(a_i), std(a_f),\"\n              +   \"per(a_i, 50), per(a_f, 50),\"\n              +   \"count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double stdi = tuple.getDouble(\"std(a_i)\");\n    Double stdf = tuple.getDouble(\"std(a_f)\");\n    Double peri = tuple.getDouble(\"per(a_i,50)\");\n    Double perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n\n\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"sum(a_i) desc\\\", \"\n        +   \"rows=2, offset=1, method=dvhash, refine=true,\"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n\n    \r\n\n    tuple = tuples.get(0);\n    assertEquals(tuples.size(), 2);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"std(a_i), std(a_f),\"\n        +   \"per(a_i, 50), per(a_f, 50),\"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n    assertTrue(stdi.doubleValue() == 4.949747468305833D);\n    assertTrue(stdf.doubleValue() == 2.1213203435596424D);\n    assertTrue(peri.doubleValue() == 7.5D);\n    assertTrue(perf.doubleValue() ==  5.5D);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 4.509249752822894D);\n    assertTrue(stdf.doubleValue() == 2.6457513110645907D);\n    assertTrue(peri.doubleValue() == 11.0D);\n    assertTrue(perf.doubleValue() ==  7.0D);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    stdf = tuple.getDouble(\"std(a_f)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n    perf = tuple.getDouble(\"per(a_f,50)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n    assertTrue(stdi.doubleValue() == 6.551081335677848D);\n    assertTrue(stdf.doubleValue() == 4.041451884327381D);\n    assertTrue(peri.doubleValue() == 1.5D);\n    assertTrue(perf.doubleValue() ==  3.5D);\n\n\n    \r\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    \r\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"blahhh\\\", \"\n        +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n        +   \"sort=\\\"a_s asc\\\", \"\n        +   \"buckets=\\\"a_s\\\", \"\n        +   \"bucketSorts=\\\"a_s asc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), sum(a_f), \"\n        +   \"min(a_i), min(a_f), \"\n        +   \"max(a_i), max(a_f), \"\n        +   \"avg(a_i), avg(a_f), \"\n        +   \"count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1207,"status":"M"},{"authorDate":"2019-02-28 10:53:43","commitOrder":9,"curCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2019-02-28 22:20:08","endLine":1383,"groupId":"10593","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHashRollupStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/8d745c5c458c953c42fd4d3f8cc0d57f2618b7.src","preCode":"  public void testHashRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"hashRollup\", HashRollupStream.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"sort\", SortStream.class);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      expression = StreamExpressionParser.parse(\"sort(hashRollup(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\"),\"\n          + \"over=\\\"a_s\\\",\"\n          + \"sum(a_i),\"\n          + \"sum(a_f),\"\n          + \"min(a_i),\"\n          + \"min(a_f),\"\n          + \"max(a_i),\"\n          + \"max(a_f),\"\n          + \"avg(a_i),\"\n          + \"avg(a_f),\"\n          + \"count(*),\"\n          + \"), by=\\\"avg(a_f) asc\\\")\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      System.out.println(\"################:bucket\"+bucket);\n\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1251,"status":"N"}],"commitId":"00bc7101f274dcd8a49aeea159a476f79e89ceb9","commitMessage":"@@@SOLR-15208: Add the countDist aggregation to the stats.  facet and timeseries Streaming Expressions\n","date":"2021-04-01 23:38:54","modifiedFileCount":"6","status":"M","submitter":"Joel Bernstein"}]
