[{"authorTime":"2017-03-14 18:17:56","codes":[{"authorDate":"2017-03-14 18:17:56","commitOrder":1,"curCode":"  static Map<String,Object> convertTimer(Timer timer, boolean skipHistograms) {\n    Map<String, Object> response = new LinkedHashMap<>();\n    response.put(\"count\", timer.getCount());\n    response.put(\"meanRate\", timer.getMeanRate());\n    response.put(\"1minRate\", timer.getOneMinuteRate());\n    response.put(\"5minRate\", timer.getFiveMinuteRate());\n    response.put(\"15minRate\", timer.getFifteenMinuteRate());\n    if (!skipHistograms) {\n      \r\n      addSnapshot(response, timer.getSnapshot(), true);\n    }\n    return response;\n  }\n","date":"2017-03-14 19:36:35","endLine":293,"groupId":"34647","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertTimer","params":"(Timertimer@booleanskipHistograms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/1284e3b72399c1b1bd811c18e2dbd20b24561e.src","preCode":"  static Map<String,Object> convertTimer(Timer timer, boolean skipHistograms) {\n    Map<String, Object> response = new LinkedHashMap<>();\n    response.put(\"count\", timer.getCount());\n    response.put(\"meanRate\", timer.getMeanRate());\n    response.put(\"1minRate\", timer.getOneMinuteRate());\n    response.put(\"5minRate\", timer.getFiveMinuteRate());\n    response.put(\"15minRate\", timer.getFifteenMinuteRate());\n    if (!skipHistograms) {\n      \r\n      addSnapshot(response, timer.getSnapshot(), true);\n    }\n    return response;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"B"},{"authorDate":"2017-03-14 18:17:56","commitOrder":1,"curCode":"  static Map<String, Object> convertMeter(Meter meter) {\n    Map<String, Object> response = new LinkedHashMap<>();\n    response.put(\"count\", meter.getCount());\n    response.put(\"meanRate\", meter.getMeanRate());\n    response.put(\"1minRate\", meter.getOneMinuteRate());\n    response.put(\"5minRate\", meter.getFiveMinuteRate());\n    response.put(\"15minRate\", meter.getFifteenMinuteRate());\n    return response;\n  }\n","date":"2017-03-14 19:36:35","endLine":303,"groupId":"34647","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMeter","params":"(Metermeter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/1284e3b72399c1b1bd811c18e2dbd20b24561e.src","preCode":"  static Map<String, Object> convertMeter(Meter meter) {\n    Map<String, Object> response = new LinkedHashMap<>();\n    response.put(\"count\", meter.getCount());\n    response.put(\"meanRate\", meter.getMeanRate());\n    response.put(\"1minRate\", meter.getOneMinuteRate());\n    response.put(\"5minRate\", meter.getFiveMinuteRate());\n    response.put(\"15minRate\", meter.getFifteenMinuteRate());\n    return response;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"B"}],"commitId":"1750095048a5bee9c8f63d9bf6ad53d4a309aa60","commitMessage":"@@@SOLR-10247: Support non-numeric metrics and a \"compact\" format of /admin/metrics.\n","date":"2017-03-14 19:36:35","modifiedFileCount":"14","status":"B","submitter":"Andrzej Bialecki"},{"authorTime":"2017-04-12 01:22:23","codes":[{"authorDate":"2017-04-12 01:22:23","commitOrder":2,"curCode":"  public static void convertTimer(String name, Timer timer, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".meanRate\", timer.getMeanRate());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", timer.getCount());\n      response.put(\"meanRate\", timer.getMeanRate());\n      response.put(\"1minRate\", timer.getOneMinuteRate());\n      response.put(\"5minRate\", timer.getFiveMinuteRate());\n      response.put(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        \r\n        addSnapshot(response, timer.getSnapshot(), true);\n      }\n      consumer.accept(name, response);\n    }\n  }\n","date":"2017-04-12 01:22:23","endLine":411,"groupId":"34647","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertTimer","params":"(Stringname@Timertimer@booleanskipHistograms@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/00857a912057d361ac66d805ef82f5abc5905c.src","preCode":"  static Map<String,Object> convertTimer(Timer timer, boolean skipHistograms) {\n    Map<String, Object> response = new LinkedHashMap<>();\n    response.put(\"count\", timer.getCount());\n    response.put(\"meanRate\", timer.getMeanRate());\n    response.put(\"1minRate\", timer.getOneMinuteRate());\n    response.put(\"5minRate\", timer.getFiveMinuteRate());\n    response.put(\"15minRate\", timer.getFifteenMinuteRate());\n    if (!skipHistograms) {\n      \r\n      addSnapshot(response, timer.getSnapshot(), true);\n    }\n    return response;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2017-04-12 01:22:23","commitOrder":2,"curCode":"  static void convertMeter(String name, Meter meter, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".count\", meter.getCount());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", meter.getCount());\n      response.put(\"meanRate\", meter.getMeanRate());\n      response.put(\"1minRate\", meter.getOneMinuteRate());\n      response.put(\"5minRate\", meter.getFiveMinuteRate());\n      response.put(\"15minRate\", meter.getFifteenMinuteRate());\n      consumer.accept(name, response);\n    }\n  }\n","date":"2017-04-12 01:22:23","endLine":433,"groupId":"34647","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMeter","params":"(Stringname@Metermeter@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/00857a912057d361ac66d805ef82f5abc5905c.src","preCode":"  static Map<String, Object> convertMeter(Meter meter) {\n    Map<String, Object> response = new LinkedHashMap<>();\n    response.put(\"count\", meter.getCount());\n    response.put(\"meanRate\", meter.getMeanRate());\n    response.put(\"1minRate\", meter.getOneMinuteRate());\n    response.put(\"5minRate\", meter.getFiveMinuteRate());\n    response.put(\"15minRate\", meter.getFifteenMinuteRate());\n    return response;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"e30cc70fddcdd6fddb5eedf9f38e77fcb3f33bd1","commitMessage":"@@@SOLR-9959: SolrInfoMBean-s category and hierarchy cleanup.\n","date":"2017-04-12 01:22:23","modifiedFileCount":"132","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-04-18 18:46:39","codes":[{"authorDate":"2017-04-18 18:46:39","commitOrder":3,"curCode":"  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + \".\" + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        \r\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","date":"2017-04-18 18:46:39","endLine":440,"groupId":"8138","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convertTimer","params":"(Stringname@Timertimer@PropertyFilterpropertyFilter@booleanskipHistograms@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/90a0f0085b7ca5cd3db785f37687e05be61a94.src","preCode":"  public static void convertTimer(String name, Timer timer, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".meanRate\", timer.getMeanRate());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", timer.getCount());\n      response.put(\"meanRate\", timer.getMeanRate());\n      response.put(\"1minRate\", timer.getOneMinuteRate());\n      response.put(\"5minRate\", timer.getFiveMinuteRate());\n      response.put(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        \r\n        addSnapshot(response, timer.getSnapshot(), true);\n      }\n      consumer.accept(name, response);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"},{"authorDate":"2017-04-18 18:46:39","commitOrder":3,"curCode":"  static void convertMeter(String name, Meter meter, PropertyFilter propertyFilter, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(\"count\")) {\n        consumer.accept(name + \".count\", meter.getCount());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", meter.getCount());\n      filter.accept(\"meanRate\", meter.getMeanRate());\n      filter.accept(\"1minRate\", meter.getOneMinuteRate());\n      filter.accept(\"5minRate\", meter.getFiveMinuteRate());\n      filter.accept(\"15minRate\", meter.getFifteenMinuteRate());\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","date":"2017-04-18 18:46:39","endLine":472,"groupId":"8138","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMeter","params":"(Stringname@Metermeter@PropertyFilterpropertyFilter@booleansimple@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/90a0f0085b7ca5cd3db785f37687e05be61a94.src","preCode":"  static void convertMeter(String name, Meter meter, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".count\", meter.getCount());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", meter.getCount());\n      response.put(\"meanRate\", meter.getMeanRate());\n      response.put(\"1minRate\", meter.getOneMinuteRate());\n      response.put(\"5minRate\", meter.getFiveMinuteRate());\n      response.put(\"15minRate\", meter.getFifteenMinuteRate());\n      consumer.accept(name, response);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"bb69c02e575caac12c8735a0f6b96ed5808f94e2","commitMessage":"@@@SOLR-10418: Metrics API should return JVM system properties.\n","date":"2017-04-18 18:46:39","modifiedFileCount":"10","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-08-17 18:32:22","codes":[{"authorDate":"2017-08-17 18:32:22","commitOrder":4,"curCode":"  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + separator + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        \r\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","date":"2017-08-17 18:33:36","endLine":440,"groupId":"8138","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"convertTimer","params":"(Stringname@Timertimer@PropertyFilterpropertyFilter@booleanskipHistograms@booleansimple@Stringseparator@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/e2db2f0d60f68aeeb54ce77b3701b03bcb605e.src","preCode":"  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + \".\" + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        \r\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"},{"authorDate":"2017-08-17 18:32:22","commitOrder":4,"curCode":"  static void convertMeter(String name, Meter meter, PropertyFilter propertyFilter, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(\"count\")) {\n        consumer.accept(name + separator + \"count\", meter.getCount());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", meter.getCount());\n      filter.accept(\"meanRate\", meter.getMeanRate());\n      filter.accept(\"1minRate\", meter.getOneMinuteRate());\n      filter.accept(\"5minRate\", meter.getFiveMinuteRate());\n      filter.accept(\"15minRate\", meter.getFifteenMinuteRate());\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","date":"2017-08-17 18:33:36","endLine":472,"groupId":"8138","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMeter","params":"(Stringname@Metermeter@PropertyFilterpropertyFilter@booleansimple@Stringseparator@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/e2db2f0d60f68aeeb54ce77b3701b03bcb605e.src","preCode":"  static void convertMeter(String name, Meter meter, PropertyFilter propertyFilter, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(\"count\")) {\n        consumer.accept(name + \".count\", meter.getCount());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", meter.getCount());\n      filter.accept(\"meanRate\", meter.getMeanRate());\n      filter.accept(\"1minRate\", meter.getOneMinuteRate());\n      filter.accept(\"5minRate\", meter.getFiveMinuteRate());\n      filter.accept(\"15minRate\", meter.getFifteenMinuteRate());\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"1c3656917652732506c6dfa4978db7af128dffdb","commitMessage":"@@@SOLR-11215: Make a metric accessible through a single param.\n","date":"2017-08-17 18:33:36","modifiedFileCount":"6","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-10-07 20:57:26","codes":[{"authorDate":"2020-10-07 20:57:26","commitOrder":5,"curCode":"  public static void convertTimer(String name, Timer timer, Predicate<CharSequence> propertyFilter, boolean skipHistograms,\n                                                boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.test(prop)) {\n        consumer.accept(name + separator + prop, timer.getMeanRate());\n      }\n    } else {\n      MapWriter writer = ew -> {\n        BiConsumer<String,Object> filter = (k, v) -> {\n          if (propertyFilter.test(k)) {\n            ew.putNoEx(k, v);\n          }\n        };\n        filter.accept(\"count\", timer.getCount());\n        filter.accept(\"meanRate\", timer.getMeanRate());\n        filter.accept(\"1minRate\", timer.getOneMinuteRate());\n        filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n        filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n        if (!skipHistograms) {\n          \r\n          addSnapshot(ew, timer.getSnapshot(), propertyFilter, true);\n        }\n      };\n      if (writer._size() > 0) {\n        consumer.accept(name, writer);\n      }\n    }\n  }\n","date":"2020-10-07 23:52:55","endLine":574,"groupId":"102495","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"convertTimer","params":"(Stringname@Timertimer@Predicate<CharSequence>propertyFilter@booleanskipHistograms@booleansimple@Stringseparator@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/7b13c2b5e5e0196a2118633a25d983c12a1ee4.src","preCode":"  public static void convertTimer(String name, Timer timer, PropertyFilter propertyFilter, boolean skipHistograms,\n                                                boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      String prop = \"meanRate\";\n      if (propertyFilter.accept(prop)) {\n        consumer.accept(name + separator + prop, timer.getMeanRate());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String,Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", timer.getCount());\n      filter.accept(\"meanRate\", timer.getMeanRate());\n      filter.accept(\"1minRate\", timer.getOneMinuteRate());\n      filter.accept(\"5minRate\", timer.getFiveMinuteRate());\n      filter.accept(\"15minRate\", timer.getFifteenMinuteRate());\n      if (!skipHistograms) {\n        \r\n        addSnapshot(response, timer.getSnapshot(), propertyFilter, true);\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"M"},{"authorDate":"2020-10-07 20:57:26","commitOrder":5,"curCode":"  static void convertMeter(String name, Meter meter, Predicate<CharSequence> propertyFilter, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.test(\"count\")) {\n        consumer.accept(name + separator + \"count\", meter.getCount());\n      }\n    } else {\n      MapWriter writer = ew -> {\n        BiConsumer<String, Object> filter = (k, v) -> {\n          if (propertyFilter.test(k)) {\n            ew.putNoEx(k, v);\n          }\n        };\n        filter.accept(\"count\", meter.getCount());\n        filter.accept(\"meanRate\", meter.getMeanRate());\n        filter.accept(\"1minRate\", meter.getOneMinuteRate());\n        filter.accept(\"5minRate\", meter.getFiveMinuteRate());\n        filter.accept(\"15minRate\", meter.getFifteenMinuteRate());\n      };\n      if (writer._size() > 0) {\n        consumer.accept(name, writer);\n      }\n    }\n  }\n","date":"2020-10-07 23:52:55","endLine":607,"groupId":"102495","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMeter","params":"(Stringname@Metermeter@Predicate<CharSequence>propertyFilter@booleansimple@Stringseparator@BiConsumer<String@Object>consumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/7b13c2b5e5e0196a2118633a25d983c12a1ee4.src","preCode":"  static void convertMeter(String name, Meter meter, PropertyFilter propertyFilter, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(\"count\")) {\n        consumer.accept(name + separator + \"count\", meter.getCount());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", meter.getCount());\n      filter.accept(\"meanRate\", meter.getMeanRate());\n      filter.accept(\"1minRate\", meter.getOneMinuteRate());\n      filter.accept(\"5minRate\", meter.getFiveMinuteRate());\n      filter.accept(\"15minRate\", meter.getFifteenMinuteRate());\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":585,"status":"M"}],"commitId":"43b1a2fdc7a4bf8e5c8409013d07858dec6d0c35","commitMessage":"@@@SOLR-14691: Metrics reporting should avoid creating objects.\n","date":"2020-10-07 23:52:55","modifiedFileCount":"20","status":"M","submitter":"Andrzej Bialecki"}]
