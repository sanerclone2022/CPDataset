[{"authorTime":"2014-07-29 02:45:23","codes":[{"authorDate":"2014-07-29 02:45:23","commitOrder":17,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2014-07-29 02:45:23","endLine":291,"groupId":"6661","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/3d97161ceed34ae36689f24f0fc5b6e92a0963.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"MB"},{"authorDate":"2014-07-29 02:45:23","commitOrder":17,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-07-29 02:45:23","endLine":307,"groupId":"1584","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/3d97161ceed34ae36689f24f0fc5b6e92a0963.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"B"}],"commitId":"b2e631846fc1eab4da2c1ce8e83943a78e70f4d4","commitMessage":"@@@SOLR-6264: Distributed commit and optimize are executed serially across all replicas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1614118 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-29 02:45:23","modifiedFileCount":"2","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2014-12-31 22:05:48","commitOrder":18,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n      \n      HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient());\n      try {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        client.shutdown();\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":290,"groupId":"6661","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":18,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"ef809a0f10e78aec3f97c878f90ff74673f98745","commitMessage":"@@@SOLR-6895: Deprecate SolrServer classes and replace with SolrClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1648697 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-31 22:05:48","modifiedFileCount":"152","status":"M","submitter":"Alan Woodward"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2015-01-28 19:55:57","commitOrder":19,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2015-01-28 19:55:57","endLine":287,"groupId":"38935","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/556e1de29b0b4747bfdb3ae456d9eb318998d7.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n      \n      HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient());\n      try {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        client.shutdown();\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":19,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"3018576b67648f3f7f827103a881ef3477c70a18","commitMessage":"@@@SOLR-6954: SolrClient implements Closeable\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1655263 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-28 19:55:57","modifiedFileCount":"94","status":"M","submitter":"Alan Woodward"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2016-03-26 02:00:29","commitOrder":20,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2016-03-26 02:02:55","endLine":294,"groupId":"38935","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/9952dbd5734d8a3ea5a282de9bb30f8ff5ca98.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":20,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"f051f56be96b12f1f3e35978ca4c840ae06a801f","commitMessage":"@@@SOLR-445: new ToleranteUpdateProcessorFactory to support skipping update commands that cause failures when sending multiple updates in a single request.\n\nSOLR-8890: New static method in DistributedUpdateProcessorFactory to allow UpdateProcessorFactories to indicate request params that should be forwarded when DUP distributes updates.\n\nThis commit is a squashed merge from the jira/SOLR-445 branch (as of b08c284b26b1779d03693a45e219db89839461d0)\n","date":"2016-03-26 02:02:55","modifiedFileCount":"6","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2016-04-07 05:18:10","commitOrder":21,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2016-04-07 05:18:10","endLine":289,"groupId":"38935","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/196b7ca4078a7dbbc39f27952efd6ced633729.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":21,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"eda2a319595d01efaf05ed4bc4574682b91e7aaf","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-07 05:18:10","modifiedFileCount":"41","status":"M","submitter":"Karl Wright"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2016-04-08 18:07:13","commitOrder":22,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":288,"groupId":"38935","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/61b82dd00ebaa48c0fcb11572d48ec9192cacf.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient(req.node.getUrl(), clients.getHttpClient())) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":22,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"9b65416e60d1183e0d145646c36e5eb9018603f8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-08 18:07:13","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2018-02-13 22:53:19","commitOrder":23,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        try {\n          \r\n          \r\n          Throwable rootCause = SolrException.getRootCause(e);\n          log.error(\"Setting up to try to start recovery on replica {}\", req.node.getUrl(), rootCause);\n          req.cmd.getReq().getCore().getCoreContainer().getZkController().ensureReplicaInLeaderInitiatedRecovery(\n              req.cmd.getReq().getCore().getCoreContainer(),\n              req.node.getCollection(),\n              req.node.getShardId(),\n              req.node.getNodeProps(),\n              req.cmd.getReq().getCore().getCoreDescriptor(),\n              false \n          );\n        } catch (Exception exc) {\n          Throwable setLirZnodeFailedCause = SolrException.getRootCause(exc);\n          log.error(\"Leader failed to set replica \" +\n              req.node.getUrl() + \" state to DOWN due to: \" + setLirZnodeFailedCause, setLirZnodeFailedCause);\n        }\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2018-02-13 22:53:19","endLine":321,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b2/00f892f6f6c8397d136c2ee19fd02eba1dd96d.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":23,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"8a5a4a6317e272cdda316a54fa74f60fa82f1497","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-02-13 22:53:19","modifiedFileCount":"34","status":"M","submitter":"Karl Wright"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2018-03-02 15:29:18","commitOrder":24,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2018-03-02 15:29:18","endLine":311,"groupId":"1584","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/b397fbb20dd87e0e68096972d7933950afc483.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        try {\n          \r\n          \r\n          Throwable rootCause = SolrException.getRootCause(e);\n          log.error(\"Setting up to try to start recovery on replica {}\", req.node.getUrl(), rootCause);\n          req.cmd.getReq().getCore().getCoreContainer().getZkController().ensureReplicaInLeaderInitiatedRecovery(\n              req.cmd.getReq().getCore().getCoreContainer(),\n              req.node.getCollection(),\n              req.node.getShardId(),\n              req.node.getNodeProps(),\n              req.cmd.getReq().getCore().getCoreDescriptor(),\n              false \n          );\n        } catch (Exception exc) {\n          Throwable setLirZnodeFailedCause = SolrException.getRootCause(exc);\n          log.error(\"Leader failed to set replica \" +\n              req.node.getUrl() + \" state to DOWN due to: \" + setLirZnodeFailedCause, setLirZnodeFailedCause);\n        }\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":24,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"f1ce5419eebfa361f572802eb4a8b637c2849bb5","commitMessage":"@@@SOLR-11702: Remove old LIR call in SolrCmdDistributor and let DistributedUpdateProcessor handle it on finish()\n","date":"2018-03-02 15:29:18","modifiedFileCount":"2","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2018-12-13 17:51:56","commitOrder":25,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2018-12-13 17:51:56","endLine":328,"groupId":"1584","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/b46d1fb47f12b3e04b97942d31611defc5cf76.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":25,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"81dbad54e0af82cfe830f4926f06b57bb8b02f9e","commitMessage":"@@@SOLR-12799: Allow Authentication Plugins to intercept internode requests on a per-request basis\nAdd 'forwardCredentials' parameter to BasicAuth which will then skip using PKI on sub requests\n","date":"2018-12-13 17:51:56","modifiedFileCount":"13","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":26,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2018-12-17 00:58:20","endLine":325,"groupId":"1584","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/5154be28c251d53173359c638ad5b050f70e39.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try (HttpSolrClient client = new HttpSolrClient.Builder(req.node.getUrl()).withHttpClient(clients.getHttpClient()).build()) {\n        client.request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":26,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2019-06-05 03:04:11","commitOrder":27,"curCode":"  private void submit(final Req req, boolean isCommit) {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = GlobalTracer.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2019-06-05 03:04:11","endLine":337,"groupId":"1584","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/dfb5117adfe34a4ab38bfa44fe6d86e9360c2e.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":27,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"301ea0e4624c2bd693fc034a801c4abb91cba299","commitMessage":"@@@SOLR-13434: OpenTracing support for Solr (#685)\n\n","date":"2019-06-05 03:04:11","modifiedFileCount":"14","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2019-12-11 04:45:43","commitOrder":28,"curCode":"  private void submit(final Req req, boolean isCommit) throws IOException {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = GlobalTracer.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2019-12-11 04:45:43","endLine":339,"groupId":"1584","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/727dab2af3c670773a155436aa0e015ac4b652.src","preCode":"  private void submit(final Req req, boolean isCommit) {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = GlobalTracer.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":28,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"c4f0c3363828c088eefa2b99783178848c2f1f7a","commitMessage":"@@@SOLR-13975.  SOLR-13896: ConcurrentUpdateSolrClient connection stall prevention.\n","date":"2019-12-11 04:45:43","modifiedFileCount":"8","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2020-04-23 10:32:49","commitOrder":29,"curCode":"  private void submit(final Req req, boolean isCommit) throws IOException {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = GlobalTracer.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to {} retry: {} {} params {}\"\n          , req.node.getUrl(), req.retries, req.cmd, req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2020-04-23 10:32:49","endLine":340,"groupId":"1584","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/202427647333ad2a7940e6ee3e796c5a6b323f.src","preCode":"  private void submit(final Req req, boolean isCommit) throws IOException {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = GlobalTracer.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmd + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":29,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"1584","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"e43b17962a116111af4348cf7548ee2e7a2375b8","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-23 10:32:49","modifiedFileCount":"102","status":"M","submitter":"Erick Erickson"},{"authorTime":"2014-12-31 22:05:48","codes":[{"authorDate":"2021-04-23 00:21:45","commitOrder":30,"curCode":"  private void submit(final Req req, boolean isCommit) throws IOException {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = req.cmd.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to {} retry: {} {} params {}\"\n          , req.node.getUrl(), req.retries, req.cmd, req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","date":"2021-04-23 00:21:45","endLine":339,"groupId":"102063","id":27,"instanceNumber":1,"isCurCommit":1,"methodName":"submit","params":"(finalReqreq@booleanisCommit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/2ae7b654ec4284cb4e86421a0a20dd879bfff9.src","preCode":"  private void submit(final Req req, boolean isCommit) throws IOException {\n    \r\n    if (SolrRequestInfo.getRequestInfo() != null) {\n      req.uReq.setUserPrincipal(SolrRequestInfo.getRequestInfo().getReq().getUserPrincipal());\n    }\n\n    Tracer tracer = GlobalTracer.getTracer();\n    Span parentSpan = tracer.activeSpan();\n    if (parentSpan != null) {\n      tracer.inject(parentSpan.context(), Format.Builtin.HTTP_HEADERS,\n          new SolrRequestCarrier(req.uReq));\n    }\n\n    if (req.synchronous) {\n      blockAndDoRetries();\n\n      try {\n        req.uReq.setBasePath(req.node.getUrl());\n        clients.getHttpClient().request(req.uReq);\n      } catch (Exception e) {\n        SolrException.log(log, e);\n        Error error = new Error();\n        error.e = e;\n        error.req = req;\n        if (e instanceof SolrException) {\n          error.statusCode = ((SolrException) e).code();\n        }\n        errors.add(error);\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to {} retry: {} {} params {}\"\n          , req.node.getUrl(), req.retries, req.cmd, req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      \r\n      \r\n      \r\n      pending.add(completionService.submit(() -> {\n        doRequest(req);\n        return null;\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2014-12-31 22:05:48","commitOrder":30,"curCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":306,"groupId":"102063","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"doRequest","params":"(finalReqreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0d271c68541379a9877177cd9123fc056415a9.src","preCode":"  private void doRequest(final Req req) {\n    try {\n      SolrClient solrClient = clients.getSolrClient(req);\n      solrClient.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"69b41878551a0598c870f925deb501aa4d4acb1c","commitMessage":"@@@SOLR-15283 Tracing overhaul (#52)\n\n* Solr's GlobalTracer is gone. Use OpenTracing's GlobalTracer.  or even better: getters on CoreContainer.  SolrQueryRequest.  etc.\n* No more \"samplingThreshold\" cluster property.  Instead.  configure sampling specific to the plugin.\n* Ensure the active span is visible from all threads by using ExecutorUtil\n* JaegerTracerConfigurator is now configured via sys props / env vars","date":"2021-04-23 00:21:45","modifiedFileCount":"17","status":"M","submitter":"David Smiley"}]
