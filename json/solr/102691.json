[{"authorTime":"2015-03-17 13:13:36","codes":[{"authorDate":"2015-03-17 13:13:36","commitOrder":1,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2015-03-17 13:13:36","endLine":198,"groupId":"8876","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/9aba173152cf803a0a2e416b7b3e4b4b5cf871.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"},{"authorDate":"2015-03-17 13:13:36","commitOrder":1,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2015-03-17 13:13:36","endLine":268,"groupId":"8877","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/9aba173152cf803a0a2e416b7b3e4b4b5cf871.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"}],"commitId":"ff83497b27c56dd86a94f64e081c2694772bd571","commitMessage":"@@@SOLR-6141: Schema API: Remove fields.  dynamic fields.  field types and copy fields; and replace fields.  dynamic fields and field types\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1667175 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-17 13:13:36","modifiedFileCount":"11","status":"B","submitter":"Steven Rowe"},{"authorTime":"2015-03-18 05:52:05","codes":[{"authorDate":"2015-03-18 05:52:05","commitOrder":2,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2015-03-18 05:52:05","endLine":198,"groupId":"8876","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3a/d79af9009587602db4926b5d7980a27b3691ba.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2015-03-18 05:52:05","commitOrder":2,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2015-03-18 05:52:05","endLine":268,"groupId":"8877","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3a/d79af9009587602db4926b5d7980a27b3691ba.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"8d64c08c1aa215f20b4809598bca6378031c62a4","commitMessage":"@@@SOLR-7258: Forbid MessageFormat.format and MessageFormat single-arg constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1667414 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-18 05:52:05","modifiedFileCount":"15","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-07-14 21:55:46","codes":[{"authorDate":"2015-07-14 21:55:46","commitOrder":3,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2015-07-14 21:55:46","endLine":198,"groupId":"8876","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/0419a813b09e7c16c099285d60e9fabdaf9fe7.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2015-07-14 21:55:46","commitOrder":3,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2015-07-14 21:55:46","endLine":268,"groupId":"8877","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/0419a813b09e7c16c099285d60e9fabdaf9fe7.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"422694f9c06393964bc6f26447c6b74e9f22de92","commitMessage":"@@@SOLR-7793: Refactor some utility methods to a separate utility class\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1690935 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-14 21:55:46","modifiedFileCount":"65","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-07-26 22:35:46","codes":[{"authorDate":"2017-07-26 22:35:46","commitOrder":4,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2017-07-26 22:35:46","endLine":191,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/958f8c93556f062471c0f250025ab29b42696b.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2017-07-26 22:35:46","commitOrder":4,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2017-07-26 22:35:46","endLine":261,"groupId":"8877","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/958f8c93556f062471c0f250025ab29b42696b.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"e95b48e12d0034faa11235cf6c0d6b449a6898ea","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-07-26 22:35:46","modifiedFileCount":"78","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-12-28 20:31:05","codes":[{"authorDate":"2017-12-28 20:31:05","commitOrder":5,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2017-12-28 20:31:05","endLine":173,"groupId":"8876","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/079f9577c324f2d6128104b34dad858e1f09d1.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2017-12-28 20:31:05","commitOrder":5,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2017-12-28 20:31:05","endLine":243,"groupId":"8877","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/079f9577c324f2d6128104b34dad858e1f09d1.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"287062df37b6e4a1f158fc53418baa9ae40eeeda","commitMessage":"@@@SOLR-11793: Reduce code duplication w.r.t. RestTestHarness(es).\n","date":"2017-12-28 20:31:05","modifiedFileCount":"10","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2019-05-03 05:20:05","codes":[{"authorDate":"2019-05-03 05:20:05","commitOrder":6,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2019-05-03 05:20:05","endLine":171,"groupId":"8876","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/5e6dbc0b40bcc7b4ba5629a774e6b96843877a.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2019-05-03 05:20:05","commitOrder":6,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2019-05-03 05:20:05","endLine":241,"groupId":"8877","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/5e6dbc0b40bcc7b4ba5629a774e6b96843877a.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"8908205b428f2ae68bcef0f22a944a62cfcd93d5","commitMessage":"@@@SOLR-13441: Refactor code to minimize direct use of noggit\n","date":"2019-05-03 05:20:05","modifiedFileCount":"58","status":"M","submitter":"noble"},{"authorTime":"2020-06-18 05:51:41","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":7,"curCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        @SuppressWarnings({\"rawtypes\"})\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2020-06-18 05:51:41","endLine":178,"groupId":"102691","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"invokeBulkAddCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/196d759d0fd9a18a0427c4714d103f9f6f5ce1.src","preCode":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-06-18 05:51:41","commitOrder":7,"curCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        @SuppressWarnings({\"rawtypes\"})\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","date":"2020-06-18 05:51:41","endLine":252,"groupId":"102691","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"invokeBulkReplaceCall","params":"(intseed@ArrayList<String>errs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/196d759d0fd9a18a0427c4714d103f9f6f5ce1.src","preCode":"  private void invokeBulkReplaceCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'replace-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'text',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'replace-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'text',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'replace-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.TextField'\\n\" +\n        \"                        }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    \r\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} no longer present\", aField));\n\n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} no longer present\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} no longer present\", aField, dynamicCopyFldDest));\n\n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0} no longer present\", newFieldTypeName));\n\n        if (errmessages.isEmpty()) break;\n\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"b01e249c9ec724b6df120a5d731020cfe4de3fce","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 1)\n","date":"2020-06-18 05:51:41","modifiedFileCount":"213","status":"M","submitter":"Erick Erickson"}]
