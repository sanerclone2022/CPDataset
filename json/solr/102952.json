[{"authorTime":"2016-04-29 03:52:17","codes":[{"authorDate":"2015-12-29 05:42:11","commitOrder":2,"curCode":"  public void testAtomicUpdatesOnNonStoredDocValues() throws Exception {\n    assertU(adoc(sdoc(\"id\", 2, \"title\", \"title2\", \"single_i_dvo\", 100)));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", \"title3\", \"single_d_dvo\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 4, \"single_s_dvo\", \"abc\", \"single_i_dvo\", 1)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 2, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n        \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n        \"single_d_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 4, \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:2\"),\n        \"/response/docs/[0]/id==2\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvo==101\");\n\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id==3\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n\n    assertJQ(req(\"q\", \"id:4\"),\n        1e-4,\n        \"/response/docs/[0]/id==4\",\n        \"/response/docs/[0]/single_s_dvo=='abc'\",\n        \"/response/docs/[0]/single_i_dvo==2\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newertitle3\"))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id==3\",\n        \"/response/docs/[0]/title/[0]=='newertitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n  }\n","date":"2015-12-29 05:42:11","endLine":1052,"groupId":"16028","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAtomicUpdatesOnNonStoredDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/9caccd2f3c8ac2622aa673e8570397e7f9e4c3.src","preCode":"  public void testAtomicUpdatesOnNonStoredDocValues() throws Exception {\n    assertU(adoc(sdoc(\"id\", 2, \"title\", \"title2\", \"single_i_dvo\", 100)));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", \"title3\", \"single_d_dvo\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 4, \"single_s_dvo\", \"abc\", \"single_i_dvo\", 1)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 2, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n        \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n        \"single_d_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 4, \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:2\"),\n        \"/response/docs/[0]/id==2\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvo==101\");\n\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id==3\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n\n    assertJQ(req(\"q\", \"id:4\"),\n        1e-4,\n        \"/response/docs/[0]/id==4\",\n        \"/response/docs/[0]/single_s_dvo=='abc'\",\n        \"/response/docs/[0]/single_i_dvo==2\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newertitle3\"))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id==3\",\n        \"/response/docs/[0]/title/[0]=='newertitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1014,"status":"NB"},{"authorDate":"2016-04-29 03:52:17","commitOrder":2,"curCode":"  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    \r\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n","date":"2016-04-29 03:52:22","endLine":1111,"groupId":"16030","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAtomicUpdatesOnNonStoredDocValuesCopyField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/1a34b92da7032c668dcf55d839e068acf40828.src","preCode":"  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    \r\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1071,"status":"B"}],"commitId":"c897917c718eef75d66c5d0006f409d5c95260c7","commitMessage":"@@@SOLR-9034: fix atomic updates for copyField w/ docValues\n","date":"2016-04-29 03:52:22","modifiedFileCount":"3","status":"M","submitter":"yonik"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":3,"curCode":"  public void testAtomicUpdatesOnNonStoredDocValues() throws Exception {\n    assertU(adoc(sdoc(\"id\", 2, \"title\", \"title2\", \"single_i_dvo\", 100)));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", \"title3\", \"single_d_dvo\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 4, \"single_s_dvo\", \"abc\", \"single_i_dvo\", 1)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 2, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n        \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n        \"single_d_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 4, \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:2\"),\n        \"/response/docs/[0]/id=='2'\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvo==101\");\n\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id=='3'\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n\n    assertJQ(req(\"q\", \"id:4\"),\n        1e-4,\n        \"/response/docs/[0]/id=='4'\",\n        \"/response/docs/[0]/single_s_dvo=='abc'\",\n        \"/response/docs/[0]/single_i_dvo==2\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newertitle3\"))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id=='3'\",\n        \"/response/docs/[0]/title/[0]=='newertitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n  }\n","date":"2017-06-29 17:00:17","endLine":1070,"groupId":"102952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAtomicUpdatesOnNonStoredDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/19/780df966eab4ef4d55b6a6b643b30bac6f183a.src","preCode":"  public void testAtomicUpdatesOnNonStoredDocValues() throws Exception {\n    assertU(adoc(sdoc(\"id\", 2, \"title\", \"title2\", \"single_i_dvo\", 100)));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", \"title3\", \"single_d_dvo\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 4, \"single_s_dvo\", \"abc\", \"single_i_dvo\", 1)));\n    assertU(commit());\n\n    assertU(adoc(sdoc(\"id\", 2, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n        \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n        \"single_d_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(adoc(sdoc(\"id\", 4, \"single_i_dvo\", ImmutableMap.of(\"inc\", 1))));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:2\"),\n        \"/response/docs/[0]/id==2\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvo==101\");\n\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id==3\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n\n    assertJQ(req(\"q\", \"id:4\"),\n        1e-4,\n        \"/response/docs/[0]/id==4\",\n        \"/response/docs/[0]/single_s_dvo=='abc'\",\n        \"/response/docs/[0]/single_i_dvo==2\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 3, \"title\", ImmutableMap.of(\"set\", \"newertitle3\"))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:3\"),\n        1e-4,\n        \"/response/docs/[0]/id==3\",\n        \"/response/docs/[0]/title/[0]=='newertitle3'\",\n        \"/response/docs/[0]/single_d_dvo==4.14\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1032,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":3,"curCode":"  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    \r\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id=='101'\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id=='102'\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id=='103'\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n","date":"2017-06-29 17:00:17","endLine":1129,"groupId":"102952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAtomicUpdatesOnNonStoredDocValuesCopyField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/19/780df966eab4ef4d55b6a6b643b30bac6f183a.src","preCode":"  public void testAtomicUpdatesOnNonStoredDocValuesCopyField() throws Exception {\n    assertU(adoc(sdoc(\"id\", 101, \"title\", \"title2\", \"single_i_dvn\", 100)));\n    assertU(adoc(sdoc(\"id\", 102, \"title\", \"title3\", \"single_d_dvn\", 3.14)));\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", \"abc\", \"single_i_dvn\", 1)));\n    assertU(commit());\n\n    \r\n    for (int i=0; i<2; i++) {\n      assertU(adoc(sdoc(\"id\", 101, \"title\", ImmutableMap.of(\"set\", \"newtitle2\"),\n          \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 102, \"title\", ImmutableMap.of(\"set\", \"newtitle3\"),\n          \"single_d_dvn\", ImmutableMap.of(\"inc\", 1))));\n      assertU(adoc(sdoc(\"id\", 103, \"single_i_dvn\", ImmutableMap.of(\"inc\", 1))));\n    }\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:101\"),\n        \"/response/docs/[0]/id==101\",\n        \"/response/docs/[0]/title/[0]=='newtitle2'\",\n        \"/response/docs/[0]/single_i_dvn==102\");\n\n    assertJQ(req(\"q\", \"id:102\"),\n        1e-4,\n        \"/response/docs/[0]/id==102\",\n        \"/response/docs/[0]/title/[0]=='newtitle3'\",\n        \"/response/docs/[0]/single_d_dvn==5.14\");\n\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abc'\",\n        \"/response/docs/[0]/single_i_dvn==3\");\n\n    \r\n    assertU(adoc(sdoc(\"id\", 103, \"single_s_dvn\", ImmutableMap.of(\"set\", \"abcupdate\"),\n        \"single_i_dvn\", ImmutableMap.of(\"set\", 5))));\n    assertU(commit());\n    assertJQ(req(\"q\", \"id:103\"),\n        \"/response/docs/[0]/id==103\",\n        \"/response/docs/[0]/single_s_dvn=='abcupdate'\",\n        \"/response/docs/[0]/single_i_dvn==5\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"}]
