[{"authorTime":"2014-01-23 00:50:07","codes":[{"authorDate":"2013-03-12 02:14:24","commitOrder":3,"curCode":"  protected void assertQueryEquals(final String defType,\n                                   final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    if (null != defType) qParsersTested.add(defType);\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], defType, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      QueryUtils.check(queries[i]);\n      \r\n      \r\n      \r\n      for (int j = 0; j < queries.length; j++) {\n        QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","date":"2013-03-12 02:14:24","endLine":770,"groupId":"23385","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryEquals","params":"(finalStringdefType@finalSolrQueryRequestreq@finalString...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/1b666a17b178517b9bf57edaf4e729fbfe0ff6.src","preCode":"  protected void assertQueryEquals(final String defType,\n                                   final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    if (null != defType) qParsersTested.add(defType);\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], defType, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      QueryUtils.check(queries[i]);\n      \r\n      \r\n      \r\n      for (int j = 0; j < queries.length; j++) {\n        QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"NB"},{"authorDate":"2014-01-23 00:50:07","commitOrder":3,"curCode":"  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","date":"2014-01-23 00:50:07","endLine":151,"groupId":"9263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryEquals","params":"(finalSolrQueryRequestreq@finalString...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/249ace97334301a262e7b3d46920018d6843e3.src","preCode":"  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"}],"commitId":"4fcf007f944f3ae0ccff656bb5baf4119abaca8e","commitMessage":"@@@SOLR-5594: Allow FieldTypes to specify custom PrefixQuery behavior\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1560412 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-23 00:50:07","modifiedFileCount":"5","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2016-08-10 14:29:38","codes":[{"authorDate":"2013-03-12 02:14:24","commitOrder":4,"curCode":"  protected void assertQueryEquals(final String defType,\n                                   final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    if (null != defType) qParsersTested.add(defType);\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], defType, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      QueryUtils.check(queries[i]);\n      \r\n      \r\n      \r\n      for (int j = 0; j < queries.length; j++) {\n        QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","date":"2013-03-12 02:14:24","endLine":770,"groupId":"23385","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryEquals","params":"(finalStringdefType@finalSolrQueryRequestreq@finalString...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/1b666a17b178517b9bf57edaf4e729fbfe0ff6.src","preCode":"  protected void assertQueryEquals(final String defType,\n                                   final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    if (null != defType) qParsersTested.add(defType);\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], defType, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      QueryUtils.check(queries[i]);\n      \r\n      \r\n      \r\n      for (int j = 0; j < queries.length; j++) {\n        QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"N"},{"authorDate":"2016-08-10 14:29:38","commitOrder":4,"curCode":"  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","date":"2016-08-10 14:29:38","endLine":148,"groupId":"54775","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryEquals","params":"(finalSolrQueryRequestreq@finalString...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/012ccfa1b19048b809d5d2d832269e7dc5e3e8.src","preCode":"  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"22eeba9920d65a704156145d101616394992602d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-08-10 14:29:38","modifiedFileCount":"36","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-08-10 14:29:38","codes":[{"authorDate":"2017-11-23 00:08:08","commitOrder":5,"curCode":"  protected void assertQueryEquals(final String defType,\n                                   final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    if (null != defType) qParsersTested.add(defType);\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = QParser.getParser(inputs[i], defType, true, req).getQuery();\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      QueryUtils.check(queries[i]);\n      \r\n      \r\n      \r\n      for (int j = 0; j < queries.length; j++) {\n        QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","date":"2017-11-23 00:08:08","endLine":1067,"groupId":"103149","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryEquals","params":"(finalStringdefType@finalSolrQueryRequestreq@finalString...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/2ba5661e1e524c6f0e016f03b3e1bb0c1ed6d2.src","preCode":"  protected void assertQueryEquals(final String defType,\n                                   final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    if (null != defType) qParsersTested.add(defType);\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], defType, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      QueryUtils.check(queries[i]);\n      \r\n      \r\n      \r\n      for (int j = 0; j < queries.length; j++) {\n        QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"M"},{"authorDate":"2016-08-10 14:29:38","commitOrder":5,"curCode":"  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","date":"2016-08-10 14:29:38","endLine":148,"groupId":"103149","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryEquals","params":"(finalSolrQueryRequestreq@finalString...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/012ccfa1b19048b809d5d2d832269e7dc5e3e8.src","preCode":"  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"}],"commitId":"26cbf520d574a37c59b61962a85a847a07bc2af9","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-11-23 00:08:08","modifiedFileCount":"13","status":"M","submitter":"Karl Wright"}]
