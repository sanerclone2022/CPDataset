[{"authorTime":"2016-08-03 23:12:57","codes":[{"authorDate":"2016-08-03 23:12:57","commitOrder":1,"curCode":"  protected List<String> getShardUrls() throws IOException {\n\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n      List baseUrls = new ArrayList();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-08-03 23:43:00","endLine":367,"groupId":"38814","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/9168f560b4478e7be797b226e99a41b49318f3.src","preCode":"  protected List<String> getShardUrls() throws IOException {\n\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n      List baseUrls = new ArrayList();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"},{"authorDate":"2016-08-03 23:12:57","commitOrder":1,"curCode":"  private List<String> getShardUrls() throws IOException {\n\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-08-03 23:43:00","endLine":285,"groupId":"21969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/7e3d8a88c66000857f0b893f9e10c45a42b29f.src","preCode":"  private List<String> getShardUrls() throws IOException {\n\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FeaturesSelectionStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"B"}],"commitId":"87938e00e9f1006801fbf0e8c0d7b2a84b5eda48","commitMessage":"@@@SOLR-9252: Feature selection and logistic regression on text\n","date":"2016-08-03 23:43:00","modifiedFileCount":"7","status":"B","submitter":"jbernste"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":2,"curCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-11-16 10:33:58","endLine":364,"groupId":"21969","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/0f785ab612ebce3e16325e0530e401dc512fd6.src","preCode":"  protected List<String> getShardUrls() throws IOException {\n\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n      List baseUrls = new ArrayList();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":2,"curCode":"  private List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-11-16 10:33:58","endLine":283,"groupId":"21969","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/b3941f8ae880eee2fab8022762d4f1d7491e59.src","preCode":"  private List<String> getShardUrls() throws IOException {\n\n    try {\n\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      Collection<Slice> slices = clusterState.getActiveSlices(this.collection);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FeaturesSelectionStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2018-09-05 00:16:00","codes":[{"authorDate":"2018-09-05 00:16:00","commitOrder":3,"curCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Slice[] slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-09-05 00:16:00","endLine":370,"groupId":"10273","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dd/9be6a64446a587f32ec62da078379e01df41c6.src","preCode":"  protected List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2018-09-05 00:16:00","commitOrder":3,"curCode":"  private List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Slice[] slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-09-05 00:16:00","endLine":289,"groupId":"10273","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/12dc6beb25ea59404b88f1026533736a63794b.src","preCode":"  private List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FeaturesSelectionStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"e0eb7bac02a7e6d434bb159430c3fadfcfe3a564","commitMessage":"@@@SOLR-12723: Reduce object creation in HashBasedRouter.\n","date":"2018-09-05 00:16:00","modifiedFileCount":"19","status":"M","submitter":"Andrzej Bialecki"}]
