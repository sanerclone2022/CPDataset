[{"authorTime":"2019-01-26 05:38:18","codes":[{"authorDate":"2019-01-26 05:38:18","commitOrder":1,"curCode":"  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    \r\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n","date":"2019-01-26 05:38:18","endLine":344,"groupId":"25437","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/7afadcab25a123590961ce1cc6844e3711f49f.src","preCode":"  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    \r\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"B"},{"authorDate":"2019-01-26 05:38:18","commitOrder":1,"curCode":"  public void testMultipleVersionDeletes() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1000\", \"del_version_2\", \"1.0\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"0.9\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    try {\n      ignoreException(\"Delete by ID must specify doc version param\");\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 400\");\n    } catch (SolrException ex) {\n      assertEquals(400, ex.code());\n      unIgnoreException(\"Delete by ID must specify doc version param\");\n    }\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"2.0\",\n        \"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==0\"); \r\n  }\n","date":"2019-01-26 05:38:18","endLine":383,"groupId":"25428","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleVersionDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/7afadcab25a123590961ce1cc6844e3711f49f.src","preCode":"  public void testMultipleVersionDeletes() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1000\", \"del_version_2\", \"1.0\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"0.9\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    try {\n      ignoreException(\"Delete by ID must specify doc version param\");\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 400\");\n    } catch (SolrException ex) {\n      assertEquals(400, ex.code());\n      unIgnoreException(\"Delete by ID must specify doc version param\");\n    }\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"2.0\",\n        \"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==0\"); \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"}],"commitId":"0bd1911db6de9f38f74fc61398bd1fc3f42037a2","commitMessage":"@@@SOLR-12373: Let DocBasedVersionConstraintsProcessor define fields to use in tombstones\n\nA new config option.  \"tombstoneConfig\" allows the DocBasedVersionConstraintsProcessor\nto add extra fields to the tombstone generated when a document is deleted. This can\nbe useful when the schema has required fields.\n","date":"2019-01-26 05:38:18","modifiedFileCount":"2","status":"B","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    \r\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n    });\n    assertEquals(409, ex.code());\n\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n    });\n    assertEquals(409, ex.code());\n\n    \r\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n    });\n    assertEquals(409, ex.code());\n\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n","date":"2019-08-03 15:30:49","endLine":338,"groupId":"102986","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/d1a1cc4832a8cd676558f07eb861ad5cea3331.src","preCode":"  public void testMultipleVersions() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n      params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    \r\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X1\", \"my_version_l\", \"1000\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X2\", \"my_version_l\", \"1001\", \"my_version_f\", \"0.9\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"X3\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n          params(\"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y1\", \"my_version_l\", \"2001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y1\"), \"/response/numFound==1\");\n\n    \r\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"Y2\", \"my_version_l\", \"2001\", \"my_version_f\", \"2.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:Y2\"), \"/response/numFound==1\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testMultipleVersionDeletes() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1000\", \"del_version_2\", \"1.0\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n    });\n    assertEquals(409, ex.code());\n\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"0.9\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n    });\n    assertEquals(409, ex.code());\n\n    \r\n    ignoreException(\"Delete by ID must specify doc version param\");\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n    });\n    assertEquals(400, ex.code());\n    unIgnoreException(\"Delete by ID must specify doc version param\");\n\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"2.0\",\n        \"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==0\"); \r\n  }\n","date":"2019-08-03 15:30:49","endLine":375,"groupId":"102986","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleVersionDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/d1a1cc4832a8cd676558f07eb861ad5cea3331.src","preCode":"  public void testMultipleVersionDeletes() throws Exception {\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\", \"my_version_f\", \"1.0\")),\n        params(\"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1000\", \"del_version_2\", \"1.0\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"0.9\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    \r\n    try {\n      ignoreException(\"Delete by ID must specify doc version param\");\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\",\n          \"update.chain\",\"external-version-failhard-multiple\"));\n      fail(\"no 400\");\n    } catch (SolrException ex) {\n      assertEquals(400, ex.code());\n      unIgnoreException(\"Delete by ID must specify doc version param\");\n    }\n    \r\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==1\");\n\n    \r\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1001\", \"del_version_2\", \"2.0\",\n        \"update.chain\",\"external-version-failhard-multiple\"));\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa +name:a1\"), \"/response/numFound==0\"); \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
