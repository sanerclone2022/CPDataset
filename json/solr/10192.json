[{"authorTime":"2017-02-10 13:39:06","codes":[{"authorDate":"2017-02-10 13:39:06","commitOrder":1,"curCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) >= 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) >= 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-02-10 13:39:51","endLine":98,"groupId":"41944","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/79e82f5992a169a91209eafda0d58d41387b61.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) >= 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) >= 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2017-02-10 13:39:06","commitOrder":1,"curCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) > 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) > 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-02-10 13:39:51","endLine":98,"groupId":"41944","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/0e6e37cb1faad75f35d7facf81c64215ddc5b7.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) > 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) > 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"62489678d074edb2ee962e1c4ee38026ff504b2a","commitMessage":"@@@SOLR-9916: Adds Stream Evaluators to support evaluating values from tuples\n","date":"2017-02-10 13:39:51","modifiedFileCount":"6","status":"B","submitter":"Dennis Gove"},{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) >= 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) >= 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-08-26 17:07:19","endLine":59,"groupId":"10192","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/e4a0c7e2cbb1ef959339597b8d3295c74cabeb.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) >= 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) >= 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEqualToEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  protected Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) > 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) > 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","date":"2017-08-26 17:07:19","endLine":59,"groupId":"10192","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"constructChecker","params":"(ObjectfromValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/7aa591f17c76b340cd214be30400ee91ca275f.src","preCode":"  private Checker constructChecker(Object fromValue) throws IOException{\n    if(null == fromValue){\n      throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) because a null value was found\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(fromValue instanceof Number){\n      return new NumberChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString())) > 0;\n        }\n      };\n    }\n    else if(fromValue instanceof String){\n      return new StringChecker(){\n        @Override\n        public boolean test(Object left, Object right) {\n          return ((String)left).compareToIgnoreCase((String)right) > 0;\n        }\n      };\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Unable to check %s(...) for values of type '%s'\", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/GreaterThanEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"ddcb98e9c3e0d5f6acf59f872e8324e7ad144506","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-26 17:07:19","modifiedFileCount":"90","status":"M","submitter":"Karl Wright"}]
