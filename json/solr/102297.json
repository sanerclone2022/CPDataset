[{"authorTime":"2021-04-25 21:45:44","codes":[{"authorDate":"2020-05-30 09:44:44","commitOrder":2,"curCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","date":"2020-05-30 09:44:44","endLine":97,"groupId":"61445","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCachedBitSetProducer","params":"(finalSolrQueryRequestrequest@Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/1062f2d10b8cc5ba3b91aadfc3ad1d426c7d42.src","preCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"},{"authorDate":"2021-04-25 21:45:44","commitOrder":2,"curCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","date":"2021-04-25 21:45:44","endLine":186,"groupId":"61445","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCachedBitSetProducer","params":"(finalSolrQueryRequestrequest@Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/79/83fd31c5967232800b3ea9dd2d1debbf877126.src","preCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"1adedf5488398422e5812f5020ee0bc7f39a1c93","commitMessage":"@@@SOLR-15067: Child doc transformer should use the perSegFilter cache (#92)\n\nCo-authored-by: bszabo2 <bszabo2@cloudera.com>","date":"2021-04-25 21:45:44","modifiedFileCount":"1","status":"M","submitter":"bszabo97"},{"authorTime":"2021-09-14 08:56:31","codes":[{"authorDate":"2021-09-14 08:56:31","commitOrder":3,"curCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n        try {\n          return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n        } catch (IOException e) {\n          throw new UncheckedIOException(e); \r\n        }\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","date":"2021-09-14 08:56:31","endLine":102,"groupId":"102297","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getCachedBitSetProducer","params":"(finalSolrQueryRequestrequest@Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/557d258da3f71de8200979a20770ed948ee346.src","preCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/join/BlockJoinParentQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-09-14 08:56:31","commitOrder":3,"curCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      try {\n        return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n      } catch (IOException e) {\n        throw new UncheckedIOException(e); \r\n      }\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","date":"2021-09-14 08:56:31","endLine":191,"groupId":"102297","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getCachedBitSetProducer","params":"(finalSolrQueryRequestrequest@Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/95/902e276e7b428e0ac949d9075666f5d172d922.src","preCode":"  public static BitSetProducer getCachedBitSetProducer(final SolrQueryRequest request, Query query) {\n    @SuppressWarnings(\"unchecked\")\n    SolrCache<Query, BitSetProducer> parentCache = request.getSearcher().getCache(CACHE_NAME);\n    \r\n    if (parentCache != null) {\n      return parentCache.computeIfAbsent(query, QueryBitSetProducer::new);\n    } else {\n      return new QueryBitSetProducer(query);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"f68bfad4c45df8bdb5b3eb15a65097f388c8f5cc","commitMessage":"@@@SOLR-15555 Improved caching on FilterQuery (#230)\n\nCreate a new cache mode for CaffeineCache where we can optionally use an\nasync cache instead of the synchronous implementation. This is useful\nfor cases (esp FilterQuery) where many identical requests come in near\nthe same time and they would otherwise race to fill the same cache slot.\n\nCaffeineCache computeIfAbsent now accepts an IOFunction instead of\nthe non-throwing java.util.Function interface.\n\nThis required an update to CaffeineCache 2.9.  which updates putIfAbsent\nwith an optimistic get.\n\nAlso incidentally fixes a rare bug where cache ramBytesUsed would be\nincorrectly reported under heavy cache contention/eviction loads.","date":"2021-09-14 08:56:31","modifiedFileCount":"18","status":"M","submitter":"Mike Drob"}]
