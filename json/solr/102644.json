[{"authorTime":"2020-11-05 19:16:35","codes":[{"authorDate":"2020-11-05 19:16:35","commitOrder":1,"curCode":"  public void testCollectionRepair() throws Exception {\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testCollectionRepair_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 3);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 3);\n    eventsListener.waitForExpectedEvent(10);\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(10);\n    cluster.waitForActiveCollection(collection, 1, 2);\n\n    Thread.sleep(TimeUnit.MILLISECONDS.convert(waitFor, TimeUnit.SECONDS));\n\n    \r\n    boolean await = repairListener.completed.await(60, TimeUnit.SECONDS);\n    if (!await) {\n      fail(\"Timeout waiting for the processing to complete\");\n    }\n    cluster.waitForActiveCollection(collection, 1, 3);\n  }\n","date":"2020-11-05 19:18:05","endLine":163,"groupId":"57902","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"testCollectionRepair","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/4067e657e8e121f4691fe8f4ad725b2d7e5f11.src","preCode":"  public void testCollectionRepair() throws Exception {\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testCollectionRepair_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 3);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 3);\n    eventsListener.waitForExpectedEvent(10);\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(10);\n    cluster.waitForActiveCollection(collection, 1, 2);\n\n    Thread.sleep(TimeUnit.MILLISECONDS.convert(waitFor, TimeUnit.SECONDS));\n\n    \r\n    boolean await = repairListener.completed.await(60, TimeUnit.SECONDS);\n    if (!await) {\n      fail(\"Timeout waiting for the processing to complete\");\n    }\n    cluster.waitForActiveCollection(collection, 1, 3);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/events/impl/CollectionsRepairEventListenerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2020-11-05 19:16:35","commitOrder":1,"curCode":"  public void testEvents() throws Exception {\n    PluginMeta plugin = new PluginMeta();\n    plugin.klass = DefaultClusterEventProducer.class.getName();\n    plugin.name = ClusterEventProducer.PLUGIN_NAME;\n    V2Request req = new V2Request.Builder(\"/cluster/plugin\")\n        .withMethod(POST)\n        .withPayload(Collections.singletonMap(\"add\", plugin))\n        .build();\n    V2Response rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n\n    \r\n\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_DOWN events\", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));\n    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);\n    assertEquals(\"should be one NODES_DOWN event\", 1, events.size());\n    ClusterEvent event = events.get(0);\n    assertEquals(\"should be NODES_DOWN event type\", ClusterEvent.EventType.NODES_DOWN, event.getType());\n    NodesDownEvent nodesDown = (NodesDownEvent) event;\n    assertEquals(\"should be node \" + nodeName, nodeName, nodesDown.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForNode(newNode, 60);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_UP events\", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));\n    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);\n    assertEquals(\"should be one NODES_UP event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be NODES_UP event type\", ClusterEvent.EventType.NODES_UP, event.getType());\n    NodesUpEvent nodesUp = (NodesUpEvent) event;\n    assertEquals(\"should be node \" + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testNodesEvent_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_ADDED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    assertEquals(\"should be one COLLECTIONS_ADDED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_ADDED event type\", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());\n    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsAdded.getCollectionNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);\n    cluster.getSolrClient().request(delete);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_REMOVED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    assertEquals(\"should be one COLLECTIONS_REMOVED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_REMOVED event type\", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());\n    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsRemoved.getCollectionNames().next());\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());\n    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());\n    clusterProperties.setClusterProperty(\"ext.foo\", \"bar\");\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();\n    assertEquals(\"new properties wrong value of the 'ext.foo' property: \" + newProps,\n        \"bar\", newProps.get(\"ext.foo\"));\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    clusterProperties.setClusterProperty(\"ext.foo\", null);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    assertEquals(\"new properties should not have 'ext.foo' property: \" + propertiesChanged.getNewClusterProperties(),\n        null, propertiesChanged.getNewClusterProperties().get(\"ext.foo\"));\n\n  }\n","date":"2020-11-05 19:18:05","endLine":206,"groupId":"57902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/718234ecd31d5fd9873e7413e383f631ce8741.src","preCode":"  public void testEvents() throws Exception {\n    PluginMeta plugin = new PluginMeta();\n    plugin.klass = DefaultClusterEventProducer.class.getName();\n    plugin.name = ClusterEventProducer.PLUGIN_NAME;\n    V2Request req = new V2Request.Builder(\"/cluster/plugin\")\n        .withMethod(POST)\n        .withPayload(Collections.singletonMap(\"add\", plugin))\n        .build();\n    V2Response rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n\n    \r\n\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_DOWN events\", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));\n    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);\n    assertEquals(\"should be one NODES_DOWN event\", 1, events.size());\n    ClusterEvent event = events.get(0);\n    assertEquals(\"should be NODES_DOWN event type\", ClusterEvent.EventType.NODES_DOWN, event.getType());\n    NodesDownEvent nodesDown = (NodesDownEvent) event;\n    assertEquals(\"should be node \" + nodeName, nodeName, nodesDown.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForNode(newNode, 60);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_UP events\", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));\n    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);\n    assertEquals(\"should be one NODES_UP event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be NODES_UP event type\", ClusterEvent.EventType.NODES_UP, event.getType());\n    NodesUpEvent nodesUp = (NodesUpEvent) event;\n    assertEquals(\"should be node \" + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testNodesEvent_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_ADDED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    assertEquals(\"should be one COLLECTIONS_ADDED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_ADDED event type\", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());\n    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsAdded.getCollectionNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);\n    cluster.getSolrClient().request(delete);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_REMOVED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    assertEquals(\"should be one COLLECTIONS_REMOVED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_REMOVED event type\", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());\n    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsRemoved.getCollectionNames().next());\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());\n    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());\n    clusterProperties.setClusterProperty(\"ext.foo\", \"bar\");\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();\n    assertEquals(\"new properties wrong value of the 'ext.foo' property: \" + newProps,\n        \"bar\", newProps.get(\"ext.foo\"));\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    clusterProperties.setClusterProperty(\"ext.foo\", null);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    assertEquals(\"new properties should not have 'ext.foo' property: \" + propertiesChanged.getNewClusterProperties(),\n        null, propertiesChanged.getNewClusterProperties().get(\"ext.foo\"));\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/events/ClusterEventProducerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"bdc6e8247fdb162902c794b73fdc228d526a3a6e","commitMessage":"@@@SOLR-14749: Provide a clean API for cluster-level event processing.\n","date":"2020-11-05 19:18:05","modifiedFileCount":"4","status":"B","submitter":"Andrzej Bialecki"},{"authorTime":"2021-02-02 19:06:12","codes":[{"authorDate":"2020-11-05 19:16:35","commitOrder":2,"curCode":"  public void testCollectionRepair() throws Exception {\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testCollectionRepair_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 3);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 3);\n    eventsListener.waitForExpectedEvent(10);\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(10);\n    cluster.waitForActiveCollection(collection, 1, 2);\n\n    Thread.sleep(TimeUnit.MILLISECONDS.convert(waitFor, TimeUnit.SECONDS));\n\n    \r\n    boolean await = repairListener.completed.await(60, TimeUnit.SECONDS);\n    if (!await) {\n      fail(\"Timeout waiting for the processing to complete\");\n    }\n    cluster.waitForActiveCollection(collection, 1, 3);\n  }\n","date":"2020-11-05 19:18:05","endLine":163,"groupId":"57902","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCollectionRepair","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/4067e657e8e121f4691fe8f4ad725b2d7e5f11.src","preCode":"  public void testCollectionRepair() throws Exception {\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testCollectionRepair_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 3);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 3);\n    eventsListener.waitForExpectedEvent(10);\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(10);\n    cluster.waitForActiveCollection(collection, 1, 2);\n\n    Thread.sleep(TimeUnit.MILLISECONDS.convert(waitFor, TimeUnit.SECONDS));\n\n    \r\n    boolean await = repairListener.completed.await(60, TimeUnit.SECONDS);\n    if (!await) {\n      fail(\"Timeout waiting for the processing to complete\");\n    }\n    cluster.waitForActiveCollection(collection, 1, 3);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/events/impl/CollectionsRepairEventListenerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2021-02-02 19:06:12","commitOrder":2,"curCode":"  public void testEvents() throws Exception {\n    int version = waitForVersionChange(-1, 10);\n\n    PluginMeta plugin = new PluginMeta();\n    plugin.klass = DefaultClusterEventProducer.class.getName();\n    plugin.name = ClusterEventProducer.PLUGIN_NAME;\n    V2Request req = new V2Request.Builder(\"/cluster/plugin\")\n        .withMethod(POST)\n        .withPayload(Collections.singletonMap(\"add\", plugin))\n        .build();\n    V2Response rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n\n    version = waitForVersionChange(version, 10);\n\n    \r\n\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      } else {\n        nonOverseerJetty = jetty;\n        break;\n      }\n    }\n\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_DOWN events\", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));\n    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);\n    assertEquals(\"should be one NODES_DOWN event\", 1, events.size());\n    ClusterEvent event = events.get(0);\n    assertEquals(\"should be NODES_DOWN event type\", ClusterEvent.EventType.NODES_DOWN, event.getType());\n    NodesDownEvent nodesDown = (NodesDownEvent) event;\n    assertEquals(\"should be node \" + nodeName, nodeName, nodesDown.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForNode(newNode, 60);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_UP events\", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));\n    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);\n    assertEquals(\"should be one NODES_UP event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be NODES_UP event type\", ClusterEvent.EventType.NODES_UP, event.getType());\n    NodesUpEvent nodesUp = (NodesUpEvent) event;\n    assertEquals(\"should be node \" + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testNodesEvent_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_ADDED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    assertEquals(\"should be one COLLECTIONS_ADDED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_ADDED event type\", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());\n    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsAdded.getCollectionNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);\n    cluster.getSolrClient().request(delete);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_REMOVED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    assertEquals(\"should be one COLLECTIONS_REMOVED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_REMOVED event type\", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());\n    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsRemoved.getCollectionNames().next());\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());\n    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());\n    clusterProperties.setClusterProperty(\"ext.foo\", \"bar\");\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();\n    assertEquals(\"new properties wrong value of the 'ext.foo' property: \" + newProps,\n        \"bar\", newProps.get(\"ext.foo\"));\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    clusterProperties.setClusterProperty(\"ext.foo\", null);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    assertEquals(\"new properties should not have 'ext.foo' property: \" + propertiesChanged.getNewClusterProperties(),\n        null, propertiesChanged.getNewClusterProperties().get(\"ext.foo\"));\n\n  }\n","date":"2021-02-02 19:06:39","endLine":218,"groupId":"57902","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/51b44d82027695c3b17ea3bef9c8d755ec3117.src","preCode":"  public void testEvents() throws Exception {\n    PluginMeta plugin = new PluginMeta();\n    plugin.klass = DefaultClusterEventProducer.class.getName();\n    plugin.name = ClusterEventProducer.PLUGIN_NAME;\n    V2Request req = new V2Request.Builder(\"/cluster/plugin\")\n        .withMethod(POST)\n        .withPayload(Collections.singletonMap(\"add\", plugin))\n        .build();\n    V2Response rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n\n    \r\n\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_DOWN events\", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));\n    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);\n    assertEquals(\"should be one NODES_DOWN event\", 1, events.size());\n    ClusterEvent event = events.get(0);\n    assertEquals(\"should be NODES_DOWN event type\", ClusterEvent.EventType.NODES_DOWN, event.getType());\n    NodesDownEvent nodesDown = (NodesDownEvent) event;\n    assertEquals(\"should be node \" + nodeName, nodeName, nodesDown.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForNode(newNode, 60);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_UP events\", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));\n    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);\n    assertEquals(\"should be one NODES_UP event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be NODES_UP event type\", ClusterEvent.EventType.NODES_UP, event.getType());\n    NodesUpEvent nodesUp = (NodesUpEvent) event;\n    assertEquals(\"should be node \" + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testNodesEvent_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_ADDED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    assertEquals(\"should be one COLLECTIONS_ADDED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_ADDED event type\", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());\n    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsAdded.getCollectionNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);\n    cluster.getSolrClient().request(delete);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_REMOVED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    assertEquals(\"should be one COLLECTIONS_REMOVED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_REMOVED event type\", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());\n    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsRemoved.getCollectionNames().next());\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());\n    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());\n    clusterProperties.setClusterProperty(\"ext.foo\", \"bar\");\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();\n    assertEquals(\"new properties wrong value of the 'ext.foo' property: \" + newProps,\n        \"bar\", newProps.get(\"ext.foo\"));\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    clusterProperties.setClusterProperty(\"ext.foo\", null);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    assertEquals(\"new properties should not have 'ext.foo' property: \" + propertiesChanged.getNewClusterProperties(),\n        null, propertiesChanged.getNewClusterProperties().get(\"ext.foo\"));\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/events/ClusterEventProducerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"4cb1000ea0a1f6c0d7be2486a709fc82dc94616b","commitMessage":"@@@SOLR-15122: Tentative fix for the test failure - the node in the test could go down\nbefore the new plugin was active on the Overseer.\n","date":"2021-02-02 19:06:39","modifiedFileCount":"3","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2021-02-04 09:39:04","codes":[{"authorDate":"2020-11-05 19:16:35","commitOrder":3,"curCode":"  public void testCollectionRepair() throws Exception {\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testCollectionRepair_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 3);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 3);\n    eventsListener.waitForExpectedEvent(10);\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(10);\n    cluster.waitForActiveCollection(collection, 1, 2);\n\n    Thread.sleep(TimeUnit.MILLISECONDS.convert(waitFor, TimeUnit.SECONDS));\n\n    \r\n    boolean await = repairListener.completed.await(60, TimeUnit.SECONDS);\n    if (!await) {\n      fail(\"Timeout waiting for the processing to complete\");\n    }\n    cluster.waitForActiveCollection(collection, 1, 3);\n  }\n","date":"2020-11-05 19:18:05","endLine":163,"groupId":"102644","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCollectionRepair","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/4067e657e8e121f4691fe8f4ad725b2d7e5f11.src","preCode":"  public void testCollectionRepair() throws Exception {\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testCollectionRepair_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 3);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 3);\n    eventsListener.waitForExpectedEvent(10);\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      }\n      nonOverseerJetty = jetty;\n      break;\n    }\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(10);\n    cluster.waitForActiveCollection(collection, 1, 2);\n\n    Thread.sleep(TimeUnit.MILLISECONDS.convert(waitFor, TimeUnit.SECONDS));\n\n    \r\n    boolean await = repairListener.completed.await(60, TimeUnit.SECONDS);\n    if (!await) {\n      fail(\"Timeout waiting for the processing to complete\");\n    }\n    cluster.waitForActiveCollection(collection, 1, 3);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/events/impl/CollectionsRepairEventListenerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2021-02-04 09:39:04","commitOrder":3,"curCode":"  public void testEvents() throws Exception {\n    int version = phaser.getPhase();\n\n    PluginMeta plugin = new PluginMeta();\n    plugin.klass = DefaultClusterEventProducer.class.getName();\n    plugin.name = ClusterEventProducer.PLUGIN_NAME;\n    V2Request req = new V2Request.Builder(\"/cluster/plugin\")\n        .withMethod(POST)\n        .withPayload(Collections.singletonMap(\"add\", plugin))\n        .build();\n    V2Response rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n\n    phaser.awaitAdvanceInterruptibly(version, 10, TimeUnit.SECONDS);\n\n    \r\n\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      } else {\n        nonOverseerJetty = jetty;\n        break;\n      }\n    }\n\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_DOWN events\", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));\n    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);\n    assertEquals(\"should be one NODES_DOWN event\", 1, events.size());\n    ClusterEvent event = events.get(0);\n    assertEquals(\"should be NODES_DOWN event type\", ClusterEvent.EventType.NODES_DOWN, event.getType());\n    NodesDownEvent nodesDown = (NodesDownEvent) event;\n    assertEquals(\"should be node \" + nodeName, nodeName, nodesDown.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForNode(newNode, 60);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_UP events\", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));\n    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);\n    assertEquals(\"should be one NODES_UP event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be NODES_UP event type\", ClusterEvent.EventType.NODES_UP, event.getType());\n    NodesUpEvent nodesUp = (NodesUpEvent) event;\n    assertEquals(\"should be node \" + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testNodesEvent_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_ADDED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    assertEquals(\"should be one COLLECTIONS_ADDED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_ADDED event type\", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());\n    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsAdded.getCollectionNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);\n    cluster.getSolrClient().request(delete);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_REMOVED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    assertEquals(\"should be one COLLECTIONS_REMOVED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_REMOVED event type\", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());\n    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsRemoved.getCollectionNames().next());\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());\n    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());\n    clusterProperties.setClusterProperty(\"ext.foo\", \"bar\");\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();\n    assertEquals(\"new properties wrong value of the 'ext.foo' property: \" + newProps,\n        \"bar\", newProps.get(\"ext.foo\"));\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    clusterProperties.setClusterProperty(\"ext.foo\", null);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    assertEquals(\"new properties should not have 'ext.foo' property: \" + propertiesChanged.getNewClusterProperties(),\n        null, propertiesChanged.getNewClusterProperties().get(\"ext.foo\"));\n\n  }\n","date":"2021-02-04 09:39:04","endLine":220,"groupId":"102644","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/c7c4f9fe63c580bd15ce25a0ea4865d6d0cdec.src","preCode":"  public void testEvents() throws Exception {\n    int version = waitForVersionChange(-1, 10);\n\n    PluginMeta plugin = new PluginMeta();\n    plugin.klass = DefaultClusterEventProducer.class.getName();\n    plugin.name = ClusterEventProducer.PLUGIN_NAME;\n    V2Request req = new V2Request.Builder(\"/cluster/plugin\")\n        .withMethod(POST)\n        .withPayload(Collections.singletonMap(\"add\", plugin))\n        .build();\n    V2Response rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n\n    version = waitForVersionChange(version, 10);\n\n    \r\n\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_DOWN);\n\n    \r\n    JettySolrRunner nonOverseerJetty = null;\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (cluster.getOpenOverseer().getCoreContainer().getZkController().getNodeName().equals(jetty.getNodeName())) {\n        continue;\n      } else {\n        nonOverseerJetty = jetty;\n        break;\n      }\n    }\n\n    String nodeName = nonOverseerJetty.getNodeName();\n    cluster.stopJettySolrRunner(nonOverseerJetty);\n    cluster.waitForJettyToStop(nonOverseerJetty);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_DOWN events\", eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN));\n    List<ClusterEvent> events = eventsListener.events.get(ClusterEvent.EventType.NODES_DOWN);\n    assertEquals(\"should be one NODES_DOWN event\", 1, events.size());\n    ClusterEvent event = events.get(0);\n    assertEquals(\"should be NODES_DOWN event type\", ClusterEvent.EventType.NODES_DOWN, event.getType());\n    NodesDownEvent nodesDown = (NodesDownEvent) event;\n    assertEquals(\"should be node \" + nodeName, nodeName, nodesDown.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.NODES_UP);\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForNode(newNode, 60);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be NODES_UP events\", eventsListener.events.get(ClusterEvent.EventType.NODES_UP));\n    events = eventsListener.events.get(ClusterEvent.EventType.NODES_UP);\n    assertEquals(\"should be one NODES_UP event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be NODES_UP event type\", ClusterEvent.EventType.NODES_UP, event.getType());\n    NodesUpEvent nodesUp = (NodesUpEvent) event;\n    assertEquals(\"should be node \" + newNode.getNodeName(), newNode.getNodeName(), nodesUp.getNodeNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    String collection = \"testNodesEvent_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf\", 1, 1);\n    cluster.getSolrClient().request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_ADDED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_ADDED);\n    assertEquals(\"should be one COLLECTIONS_ADDED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_ADDED event type\", ClusterEvent.EventType.COLLECTIONS_ADDED, event.getType());\n    CollectionsAddedEvent collectionsAdded = (CollectionsAddedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsAdded.getCollectionNames().next());\n\n    \r\n    eventsListener.setExpectedType(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    CollectionAdminRequest.Delete delete = CollectionAdminRequest.deleteCollection(collection);\n    cluster.getSolrClient().request(delete);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be COLLECTIONS_REMOVED events\", eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED));\n    events = eventsListener.events.get(ClusterEvent.EventType.COLLECTIONS_REMOVED);\n    assertEquals(\"should be one COLLECTIONS_REMOVED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be COLLECTIONS_REMOVED event type\", ClusterEvent.EventType.COLLECTIONS_REMOVED, event.getType());\n    CollectionsRemovedEvent collectionsRemoved = (CollectionsRemovedEvent) event;\n    assertEquals(\"should be collection \" + collection, collection, collectionsRemoved.getCollectionNames().next());\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    ClusterProperties clusterProperties = new ClusterProperties(cluster.getZkClient());\n    Map<String, Object> oldProps = new HashMap<>(clusterProperties.getClusterProperties());\n    clusterProperties.setClusterProperty(\"ext.foo\", \"bar\");\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    ClusterPropertiesChangedEvent propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    Map<String, Object> newProps = propertiesChanged.getNewClusterProperties();\n    assertEquals(\"new properties wrong value of the 'ext.foo' property: \" + newProps,\n        \"bar\", newProps.get(\"ext.foo\"));\n\n    \r\n    eventsListener.events.clear();\n    eventsListener.setExpectedType(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    clusterProperties.setClusterProperty(\"ext.foo\", null);\n    eventsListener.waitForExpectedEvent(30);\n    assertNotNull(\"should be CLUSTER_CONFIG_CHANGED events\", eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED));\n    events = eventsListener.events.get(ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED);\n    assertEquals(\"should be one CLUSTER_CONFIG_CHANGED event\", 1, events.size());\n    event = events.get(0);\n    assertEquals(\"should be CLUSTER_CONFIG_CHANGED event type\", ClusterEvent.EventType.CLUSTER_PROPERTIES_CHANGED, event.getType());\n    propertiesChanged = (ClusterPropertiesChangedEvent) event;\n    assertEquals(\"new properties should not have 'ext.foo' property: \" + propertiesChanged.getNewClusterProperties(),\n        null, propertiesChanged.getNewClusterProperties().get(\"ext.foo\"));\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/events/ClusterEventProducerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"8fccdfe3530cd556270af08e1b51f13f8a1d8eb2","commitMessage":"@@@SOLR-15122 Replace sleeps with phaser await (#2291)\n\n","date":"2021-02-04 09:39:04","modifiedFileCount":"4","status":"M","submitter":"Mike Drob"}]
