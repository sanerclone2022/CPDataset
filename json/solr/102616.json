[{"authorTime":"2019-04-04 21:48:51","codes":[{"authorDate":"2019-04-04 21:48:51","commitOrder":3,"curCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","date":"2019-04-04 21:48:51","endLine":366,"groupId":"43307","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAuthorizationPlugin","params":"(Map<String@Object>authorizationConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/54/1b2514fb27ca300abd4c34d377c7d62a126269.src","preCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"MB"},{"authorDate":"2019-04-04 21:48:51","commitOrder":3,"curCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(auditConf)) {\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(readVersion(auditConf),\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n","date":"2019-04-04 21:48:51","endLine":397,"groupId":"43307","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeAuditloggerPlugin","params":"(Map<String@Object>auditConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/54/1b2514fb27ca300abd4c34d377c7d62a126269.src","preCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(auditConf)) {\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(readVersion(auditConf),\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"B"}],"commitId":"361502da8ade7dbb4516da9816e8bafe22eb79a3","commitMessage":"@@@SOLR-12120: New AuditLoggerPlugin type allowing custom Audit logger plugins\n","date":"2019-04-04 21:48:51","modifiedFileCount":"5","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2019-04-16 03:09:30","codes":[{"authorDate":"2019-04-16 03:09:30","commitOrder":4,"curCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","date":"2019-04-16 03:09:30","endLine":370,"groupId":"24427","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAuthorizationPlugin","params":"(Map<String@Object>authorizationConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/6a4b8fce75f31a4a770ba120759002a6cb764a.src","preCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"},{"authorDate":"2019-04-16 03:09:30","commitOrder":4,"curCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n","date":"2019-04-16 03:09:30","endLine":403,"groupId":"24427","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeAuditloggerPlugin","params":"(Map<String@Object>auditConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/6a4b8fce75f31a4a770ba120759002a6cb764a.src","preCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(auditConf)) {\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(readVersion(auditConf),\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }    \n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"M"}],"commitId":"9707bb6fa91ea3062a404690aa7d041771f22746","commitMessage":"@@@SOLR-12371: Editing authorization config via REST API now works in standalone mode\n","date":"2019-04-16 03:09:30","modifiedFileCount":"2","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2019-08-19 03:18:33","codes":[{"authorDate":"2019-04-16 03:09:30","commitOrder":5,"curCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","date":"2019-04-16 03:09:30","endLine":370,"groupId":"24427","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAuthorizationPlugin","params":"(Map<String@Object>authorizationConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/6a4b8fce75f31a4a770ba120759002a6cb764a.src","preCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"},{"authorDate":"2019-08-19 03:18:33","commitOrder":5,"curCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n","date":"2019-08-19 03:18:54","endLine":410,"groupId":"24427","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeAuditloggerPlugin","params":"(Map<String@Object>auditConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/98cc8ef474cb092f800b1d65123ddf2a4fdd58.src","preCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"}],"commitId":"251259d5abf94578b51da3efd05327da72667e7e","commitMessage":"@@@SOLR-13700: Fixed a race condition when initializing metrics for new security plugins on security.json change\n","date":"2019-08-19 03:18:54","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2019-10-23 03:23:48","codes":[{"authorDate":"2019-04-16 03:09:30","commitOrder":6,"curCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","date":"2019-04-16 03:09:30","endLine":370,"groupId":"24427","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAuthorizationPlugin","params":"(Map<String@Object>authorizationConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/6a4b8fce75f31a4a770ba120759002a6cb764a.src","preCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"},{"authorDate":"2019-10-23 03:23:48","commitOrder":6,"curCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n","date":"2019-10-23 03:23:48","endLine":414,"groupId":"24427","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeAuditloggerPlugin","params":"(Map<String@Object>auditConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/fff633b45cf45c4991d134b9408951ad719071.src","preCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"}],"commitId":"1d7cd6157570ca12ba3480b082479a21dd5aa660","commitMessage":"@@@SOLR-13854: Remove deprecated SolrMetricProducer.initializeMetrics API.\n","date":"2019-10-23 03:23:48","modifiedFileCount":"27","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-04-18 08:40:32","codes":[{"authorDate":"2020-04-18 08:40:32","commitOrder":7,"curCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: {}\", klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","date":"2020-04-18 08:40:32","endLine":368,"groupId":"102616","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAuthorizationPlugin","params":"(Map<String@Object>authorizationConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/7c3f83c98bc92e56d20b5453e67dfef787c724.src","preCode":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    \r\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      \r\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2020-04-18 08:40:32","commitOrder":7,"curCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: {}\", klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n","date":"2020-04-18 08:40:32","endLine":402,"groupId":"102616","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeAuditloggerPlugin","params":"(Map<String@Object>auditConf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/7c3f83c98bc92e56d20b5453e67dfef787c724.src","preCode":"  private void initializeAuditloggerPlugin(Map<String, Object> auditConf) {\n    auditConf = Utils.getDeepCopy(auditConf, 4);\n    int newVersion = readVersion(auditConf);\n    \r\n    SecurityPluginHolder<AuditLoggerPlugin> old = auditloggerPlugin;\n    SecurityPluginHolder<AuditLoggerPlugin> newAuditloggerPlugin = null;\n    if (auditConf != null) {\n      String klas = (String) auditConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for auditlogger plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Auditlogger config not modified\");\n        return;\n      }\n      log.info(\"Initializing auditlogger plugin: \" + klas);\n      newAuditloggerPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuditLoggerPlugin.class));\n\n      newAuditloggerPlugin.plugin.init(auditConf);\n      newAuditloggerPlugin.plugin.initializeMetrics(solrMetricsContext, \"/auditlogging\");\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for audit logging module.\");\n    }\n    this.auditloggerPlugin = newAuditloggerPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old auditlogger plugin\", e);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/CoreContainer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"3af165b32ac8028a6c01ac9c9a6d2c808efa0e85","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-18 08:40:32","modifiedFileCount":"37","status":"M","submitter":"Erick Erickson"}]
