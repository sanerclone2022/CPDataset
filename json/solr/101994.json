[{"authorTime":"2015-09-04 01:22:10","codes":[{"authorDate":"2015-09-04 01:22:10","commitOrder":2,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return  NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2015-09-04 01:22:10","endLine":110,"groupId":"29500","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/c448490c71bec86c89685e71140700bdb774fb.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return  NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"MB"},{"authorDate":"2015-09-04 01:22:10","commitOrder":2,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return NumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2015-09-04 01:22:10","endLine":105,"groupId":"16482","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/4ca938c975957018dddc64c9f6d6846c78118c.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return NumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"MB"}],"commitId":"ae23ea91d929160f6d8d2effd9702c25f29a9de1","commitMessage":"@@@SOLR-8001: Fixed bugs in field(foo. min) and field(foo. max) when some docs have no values\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1701081 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-04 01:22:10","modifiedFileCount":"5","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2015-12-12 05:13:41","codes":[{"authorDate":"2015-12-12 05:13:41","commitOrder":3,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return  LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2015-12-12 05:13:41","endLine":118,"groupId":"29500","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/ff8fde46cb61ca9a963112e920101048b1fd73.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return  NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2015-12-12 05:13:41","commitOrder":3,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return LegacyNumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? LegacyNumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2015-12-12 05:13:41","endLine":118,"groupId":"16482","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/55a3ad7df43fd2a13c120155d6e7a039f56955.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return NumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"7da175b0b6b4185ee6b5df852e59b93d9a9a1c86","commitMessage":"@@@LUCENE-6917: rename/deprecate numeric classes in favor of dimensional values\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719562 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-12 05:13:41","modifiedFileCount":"125","status":"M","submitter":"Michael McCandless"},{"authorTime":"2015-12-12 05:13:41","codes":[{"authorDate":"2016-03-04 18:54:10","commitOrder":4,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2016-03-04 18:54:10","endLine":118,"groupId":"29500","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/55f1ae9dffdd9ae4bda5382e42bd62dcd4ad61.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return  LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2015-12-12 05:13:41","commitOrder":4,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return LegacyNumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? LegacyNumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2015-12-12 05:13:41","endLine":118,"groupId":"16482","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/55a3ad7df43fd2a13c120155d6e7a039f56955.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return LegacyNumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? LegacyNumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"517acece6a210b2d1baf75a39fe3b77ea59926b2","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n\nConflicts:\n\tsolr/CHANGES.txt\n","date":"2016-03-04 18:54:10","modifiedFileCount":"303","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":5,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.binaryValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":132,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/91602237c55ebfe8c36d18345cab7cc4e35eca.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public double doubleVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0D;\n            }\n            return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes)) : 0D;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":5,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.binaryValue());\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":130,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/9900ca8837eb99e550ea2e99c09a2d4cab001f.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          @Override\n          public long longVal(int doc) {\n            BytesRef bytes = view.get(doc);\n            if (0 == bytes.length) {\n              \r\n              assert !exists(doc) : \"zero bytes for doc, but exists is true\";\n              return 0L;\n            }\n            return LegacyNumericUtils.prefixCodedToLong(bytes);\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return -1 != view.getOrd(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) {\n                \r\n                \r\n                \r\n                \r\n                BytesRef bytes = view.get(doc);\n                mval.exists = (0 == bytes.length);\n                mval.value = mval.exists ? LegacyNumericUtils.prefixCodedToLong(bytes) : 0L;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-17 10:07:40","codes":[{"authorDate":"2016-10-17 10:07:40","commitOrder":6,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.binaryValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-18 09:59:41","endLine":133,"groupId":"58854","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/aa38cd036e04a452f3d2d2004aedf9f767f2e0.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.binaryValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2016-10-17 10:07:40","commitOrder":6,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.binaryValue());\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-18 09:59:41","endLine":131,"groupId":"58854","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c3/a54409e3e07cbca8cdbdeee07d88da21ea9c74.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.binaryValue());\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"19c7f8eacfccbe751279e6852fe6ec856403e658","commitMessage":"@@@SOLR-9628: Set lastDocId in Trie fields\n","date":"2016-10-18 09:59:41","modifiedFileCount":"3","status":"M","submitter":"Anshum Gupta"},{"authorTime":"2020-06-12 06:01:03","codes":[{"authorDate":"2020-06-12 06:01:03","commitOrder":7,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.binaryValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 06:01:29","endLine":135,"groupId":"58854","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/6b9361bb2fd3d59610ddb297042cd9deee27de.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.binaryValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-06-12 06:01:03","commitOrder":7,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.binaryValue());\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2020-06-12 06:01:29","endLine":133,"groupId":"58854","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/60cae0aac596aae1beb95cf99424ee5bc248d4.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.binaryValue());\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"ff391448d1648c4027133c58248bf7f1aabe5d96","commitMessage":"@@@SOLR-14559: Fix or suppress warnings in solr/core/src/java/org/apache/solr/util.  response.  cloud.  security.  schema.  api\n","date":"2020-06-12 06:01:29","modifiedFileCount":"90","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-03-15 22:15:56","codes":[{"authorDate":"2021-03-15 22:15:56","commitOrder":8,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.lookupOrd(view.ordValue());\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.lookupOrd(view.ordValue())));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2021-03-16 00:55:00","endLine":136,"groupId":"58854","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/2626586df108d3f347f380c518b40761ce6572.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.binaryValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-03-15 22:15:56","commitOrder":8,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.lookupOrd(view.ordValue());\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.lookupOrd(view.ordValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2021-03-16 00:55:00","endLine":134,"groupId":"58854","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/e86a74f0f513078ee3b73c56e883fa8f70aaef.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.binaryValue();\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.binaryValue());\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"5eefa79898f1ed65a7408745b32a85b4ec2efc89","commitMessage":"@@@SOLR-15261: SortedDocValues no longer extends BinaryDocValues.\n","date":"2021-03-16 00:55:00","modifiedFileCount":"15","status":"M","submitter":"Bruno Roustant"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":9,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.lookupOrd(view.ordValue());\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.lookupOrd(view.ordValue())));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":136,"groupId":"101994","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/71/f8640906620a0d63ed45ab683f3d3933426f02.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new DoubleDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n          \n          @Override\n          public double doubleVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.lookupOrd(view.ordValue());\n              assert bytes.length > 0;\n              return NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(bytes));\n            } else {\n              return 0D;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueDouble mval = new MutableValueDouble();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(view.lookupOrd(view.ordValue())));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0D;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieDoubleField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":9,"curCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.lookupOrd(view.ordValue());\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.lookupOrd(view.ordValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":134,"groupId":"101994","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"getSingleValueSource","params":"(SortedSetSelector.Typechoice@SchemaFieldf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/3f3a99b45af26af782744f28dec197fbd753c6.src","preCode":"  protected ValueSource getSingleValueSource(SortedSetSelector.Type choice, SchemaField f) {\n    \n    return new SortedSetFieldSource(f.getName(), choice) {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n        SortedSetFieldSource thisAsSortedSetFieldSource = this; \r\n        \n        SortedSetDocValues sortedSet = DocValues.getSortedSet(readerContext.reader(), field);\n        SortedDocValues view = SortedSetSelector.wrap(sortedSet, selector);\n        \n        return new LongDocValues(thisAsSortedSetFieldSource) {\n          private int lastDocID;\n\n          private boolean setDoc(int docID) throws IOException {\n            if (docID < lastDocID) {\n              throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n            }\n            if (docID > view.docID()) {\n              lastDocID = docID;\n              return docID == view.advance(docID);\n            } else {\n              return docID == view.docID();\n            }\n          }\n\n          @Override\n          public long longVal(int doc) throws IOException {\n            if (setDoc(doc)) {\n              BytesRef bytes = view.lookupOrd(view.ordValue());\n              assert bytes.length > 0;\n              return LegacyNumericUtils.prefixCodedToLong(bytes);\n            } else {\n              return 0L;\n            }\n          }\n\n          @Override\n          public boolean exists(int doc) throws IOException {\n            return setDoc(doc);\n          }\n\n          @Override\n          public ValueFiller getValueFiller() {\n            return new ValueFiller() {\n              private final MutableValueLong mval = new MutableValueLong();\n              \n              @Override\n              public MutableValue getValue() {\n                return mval;\n              }\n              \n              @Override\n              public void fillValue(int doc) throws IOException {\n                if (setDoc(doc)) {\n                  mval.exists = true;\n                  mval.value = LegacyNumericUtils.prefixCodedToLong(view.lookupOrd(view.ordValue()));\n                } else {\n                  mval.exists = false;\n                  mval.value = 0L;\n                }\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/TrieLongField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
