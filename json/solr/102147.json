[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":2,"curCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","date":"2011-09-17 20:48:27","endLine":87,"groupId":"5830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constructRequest","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/032f53d2d55f417c3b73552e6121cf140ad5d4.src","preCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      \r\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","date":"2011-07-10 07:01:53","endLine":775,"groupId":"46185","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetrieveDocs","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/b884c75369b2f67ff4932fe65d7972be9556fe.src","preCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      \r\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"NB"}],"commitId":"96c4bb7074546cb87885bba5a7eaa1dea36d7c33","commitMessage":"@@@SOLR-2066: Added support for distributed grouping.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1171970 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-17 20:48:27","modifiedFileCount":"12","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2012-03-28 01:41:18","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":3,"curCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","date":"2011-09-17 20:48:27","endLine":87,"groupId":"5830","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"constructRequest","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/032f53d2d55f417c3b73552e6121cf140ad5d4.src","preCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2012-03-28 01:41:18","commitOrder":3,"curCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","date":"2012-03-28 01:41:18","endLine":958,"groupId":"46185","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetrieveDocs","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/2e953a34862e68b93a3655658a2291d380b7da.src","preCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      \r\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":908,"status":"M"}],"commitId":"7b3f632f32ae483ef3a496e9abbbb5e1b40cb4a0","commitMessage":"@@@SOLR-3214: If you use multiple fl entries rather than a comma separated list.  all but the first entry can be ignored if you are using distributed search.\nSOLR-3256: Distributed search throws NPE when using fl=score\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1305927 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-28 01:41:18","modifiedFileCount":"2","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":4,"curCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","date":"2011-09-17 20:48:27","endLine":87,"groupId":"5830","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"constructRequest","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/032f53d2d55f417c3b73552e6121cf140ad5d4.src","preCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2014-01-07 05:15:45","commitOrder":4,"curCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","date":"2014-01-07 05:15:45","endLine":1095,"groupId":"15647","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetrieveDocs","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/fc3a6195fc1167b9c0f69827b78f72e0d794bc.src","preCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1044,"status":"M"}],"commitId":"5efc4132f10d476373b7da72e23f475eeec4046a","commitMessage":"@@@SOLR-5463: new 'cursorMark' request param for deep paging of sorted result sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1556036 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-07 05:15:45","modifiedFileCount":"10","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":5,"curCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","date":"2014-03-12 22:39:17","endLine":87,"groupId":"5830","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"constructRequest","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/09068048fefe69463237cd379a4630901f7cb5.src","preCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<String,Set<ShardDoc>>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":5,"curCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","date":"2014-03-12 22:39:17","endLine":1132,"groupId":"37234","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetrieveDocs","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/15c6f4b0258f18ac3ff25ec8c6b785b196658e.src","preCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1081,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2016-02-01 11:25:37","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":6,"curCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","date":"2014-03-12 22:39:17","endLine":87,"groupId":"5830","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"constructRequest","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/09068048fefe69463237cd379a4630901f7cb5.src","preCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2016-02-01 11:25:37","commitOrder":6,"curCode":"  protected void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","date":"2016-02-01 11:25:37","endLine":1267,"groupId":"37234","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetrieveDocs","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/fe28dfe0e869d859e1ac1b8ae041200d924748.src","preCode":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1216,"status":"M"}],"commitId":"4cdce3db77cde2506ac77dc9ced8c1f91ed9800f","commitMessage":"@@@SOLR-7968: Make QueryComponent extensible\n","date":"2016-02-01 11:25:37","modifiedFileCount":"3","status":"M","submitter":"David Smiley"},{"authorTime":"2016-02-01 11:25:37","codes":[{"authorDate":"2019-09-04 02:01:58","commitOrder":7,"curCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      \n      \r\n      if (! rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        \r\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","date":"2019-09-04 02:01:58","endLine":83,"groupId":"102147","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"constructRequest","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/796ad08dd27c80c127b4870a6e8890d78a02be.src","preCode":"  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    HashMap<String, Set<ShardDoc>> shardMap = new HashMap<>();\n    for (TopGroups<BytesRef> topGroups : rb.mergedTopGroups.values()) {\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        mapShardToDocs(shardMap, group.scoreDocs);\n      }\n    }\n\n    for (QueryCommandResult queryCommandResult : rb.mergedQueryCommandResults.values()) {\n      mapShardToDocs(shardMap, queryCommandResult.getTopDocs().scoreDocs);\n    }\n\n    ShardRequest[] shardRequests = new ShardRequest[shardMap.size()];\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n    int i = 0;\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.add( rb.req.getParams());\n      sreq.params.remove(GroupParams.GROUP);\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        \r\n        \r\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }\n\n      List<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n      shardRequests[i++] = sreq;\n    }\n\n    return shardRequests;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/StoredFieldsShardRequestFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2016-02-01 11:25:37","commitOrder":7,"curCode":"  protected void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","date":"2016-02-01 11:25:37","endLine":1267,"groupId":"102147","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetrieveDocs","params":"(ResponseBuilderrb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/fe28dfe0e869d859e1ac1b8ae041200d924748.src","preCode":"  protected void createRetrieveDocs(ResponseBuilder rb) {\n\n    \r\n    \r\n\n    \r\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    \r\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      \r\n      sreq.params.add( rb.req.getParams());\n\n      \r\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      \r\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        \r\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1216,"status":"N"}],"commitId":"83cd54f80157916b364bb5ebde20a66cbd5d3d93","commitMessage":"@@@SOLR-13709: Fixed distributed grouping when multiple 'fl' params are specified\n","date":"2019-09-04 02:01:58","modifiedFileCount":"2","status":"M","submitter":"Chris Hostetter"}]
