[{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":2,"curCode":"  public void testDoublePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DoublePointField.class);\n    final List<String> sequential = Arrays.asList(\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\");\n    List<Double> randomDoubles = getRandomDoubles(10, false);\n    List<Double> randomDoublesMissing = getRandomDoubles(10, true);\n\n    for (String r : Arrays.asList(\"*_p_d\", \"*_p_d_dv\", \"*_p_d_dv_ns\", \"*_p_d_ni_dv\",\n                                  \"*_p_d_ni_dv_ns\", \"*_p_d_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      doTestFloatPointFunctionQuery(field, \"double\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_d_smf\", \"*_p_d_dv_smf\", \"*_p_d_ni_dv_smf\",\n                                  \"*_p_d_sml\", \"*_p_d_dv_sml\", \"*_p_d_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoublesMissing);\n      doTestFloatPointFunctionQuery(field, \"double\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_ni\", \"*_p_d_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"42.34\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_mv\", \"*_p_d_ni_mv\", \"*_p_d_ni_mv_dv\", \"*_p_d_ni_dv_ns_mv\",\n                                  \"*_p_d_ni_ns_mv\", \"*_p_d_dv_ns_mv\", \"*_p_d_mv_dv\",\n                                  \"*_p_d_mv_smf\", \"*_p_d_mv_dv_smf\", \"*_p_d_ni_mv_dv_smf\",\n                                  \"*_p_d_mv_sml\", \"*_p_d_mv_dv_sml\", \"*_p_d_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\", \"66.6\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-06-29 17:00:17","endLine":437,"groupId":"45558","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/d2260207d34be0adfa607eae44b8b2fd7b9140.src","preCode":"  public void testDoublePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DoublePointField.class);\n    final List<String> sequential = Arrays.asList(\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\");\n    List<Double> randomDoubles = getRandomDoubles(10, false);\n    List<Double> randomDoublesMissing = getRandomDoubles(10, true);\n\n    for (String r : Arrays.asList(\"*_p_d\", \"*_p_d_dv\", \"*_p_d_dv_ns\", \"*_p_d_ni_dv\",\n                                  \"*_p_d_ni_dv_ns\", \"*_p_d_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      doTestFloatPointFunctionQuery(field, \"double\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_d_smf\", \"*_p_d_dv_smf\", \"*_p_d_ni_dv_smf\",\n                                  \"*_p_d_sml\", \"*_p_d_dv_sml\", \"*_p_d_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoublesMissing);\n      doTestFloatPointFunctionQuery(field, \"double\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_ni\", \"*_p_d_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"42.34\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_mv\", \"*_p_d_ni_mv\", \"*_p_d_ni_mv_dv\", \"*_p_d_ni_dv_ns_mv\",\n                                  \"*_p_d_ni_ns_mv\", \"*_p_d_dv_ns_mv\", \"*_p_d_mv_dv\",\n                                  \"*_p_d_mv_smf\", \"*_p_d_mv_dv_smf\", \"*_p_d_ni_mv_dv_smf\",\n                                  \"*_p_d_mv_sml\", \"*_p_d_mv_dv_sml\", \"*_p_d_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\", \"66.6\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"MB"},{"authorDate":"2017-06-29 17:00:17","commitOrder":2,"curCode":"  public void testDatePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DatePointField.class);\n    final List<String> sequential = Arrays.asList(getSequentialStringArrayWithDates(10));\n    final List<Instant> randomDates = getRandomInstants(10, false);\n    final List<Instant> randomDatesMissing = getRandomInstants(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_dt\", \"*_p_dt_dv\", \"*_p_dt_dv_ns\", \"*_p_dt_ni_dv\",\n                                  \"*_p_dt_ni_dv_ns\", \"*_p_dt_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n      doTestDatePointFunctionQuery(field, \"date\");\n    }\n    for (String r : Arrays.asList(\"*_p_dt_smf\", \"*_p_dt_dv_smf\", \"*_p_dt_ni_dv_smf\",\n                                  \"*_p_dt_sml\", \"*_p_dt_dv_sml\", \"*_p_dt_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDatesMissing);\n      doTestDatePointFunctionQuery(field, \"date\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_ni\", \"*_p_dt_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_mv\", \"*_p_dt_ni_mv\", \"*_p_dt_ni_mv_dv\", \"*_p_dt_ni_dv_ns_mv\",\n                                  \"*_p_dt_ni_ns_mv\", \"*_p_dt_dv_ns_mv\", \"*_p_dt_mv_dv\",\n                                  \"*_p_dt_mv_smf\", \"*_p_dt_mv_dv_smf\", \"*_p_dt_ni_mv_dv_smf\",\n                                  \"*_p_dt_mv_sml\", \"*_p_dt_mv_dv_sml\", \"*_p_dt_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n                                \n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-06-29 17:00:17","endLine":1033,"groupId":"45558","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatePointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/d2260207d34be0adfa607eae44b8b2fd7b9140.src","preCode":"  public void testDatePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DatePointField.class);\n    final List<String> sequential = Arrays.asList(getSequentialStringArrayWithDates(10));\n    final List<Instant> randomDates = getRandomInstants(10, false);\n    final List<Instant> randomDatesMissing = getRandomInstants(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_dt\", \"*_p_dt_dv\", \"*_p_dt_dv_ns\", \"*_p_dt_ni_dv\",\n                                  \"*_p_dt_ni_dv_ns\", \"*_p_dt_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n      doTestDatePointFunctionQuery(field, \"date\");\n    }\n    for (String r : Arrays.asList(\"*_p_dt_smf\", \"*_p_dt_dv_smf\", \"*_p_dt_ni_dv_smf\",\n                                  \"*_p_dt_sml\", \"*_p_dt_dv_sml\", \"*_p_dt_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDatesMissing);\n      doTestDatePointFunctionQuery(field, \"date\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_ni\", \"*_p_dt_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_mv\", \"*_p_dt_ni_mv\", \"*_p_dt_ni_mv_dv\", \"*_p_dt_ni_dv_ns_mv\",\n                                  \"*_p_dt_ni_ns_mv\", \"*_p_dt_dv_ns_mv\", \"*_p_dt_mv_dv\",\n                                  \"*_p_dt_mv_smf\", \"*_p_dt_mv_dv_smf\", \"*_p_dt_ni_mv_dv_smf\",\n                                  \"*_p_dt_mv_sml\", \"*_p_dt_mv_dv_sml\", \"*_p_dt_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n                                \n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":989,"status":"MB"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":3,"curCode":"  public void testDoublePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DoublePointField.class);\n    final List<String> sequential = Arrays.asList(\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\");\n    List<Double> randomDoubles = getRandomDoubles(10, false);\n    List<Double> randomDoublesMissing = getRandomDoubles(10, true);\n\n    for (String r : Arrays.asList(\"*_p_d\", \"*_p_d_dv\", \"*_p_d_dv_ns\", \"*_p_d_ni_dv\",\n                                  \"*_p_d_ni_dv_ns\", \"*_p_d_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      doTestDoublePointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_d_smf\", \"*_p_d_dv_smf\", \"*_p_d_ni_dv_smf\",\n                                  \"*_p_d_sml\", \"*_p_d_dv_sml\", \"*_p_d_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoublesMissing);\n      doTestDoublePointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_ni\", \"*_p_d_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"42.34\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_mv\", \"*_p_d_ni_mv\", \"*_p_d_ni_mv_dv\", \"*_p_d_ni_dv_ns_mv\",\n                                  \"*_p_d_ni_ns_mv\", \"*_p_d_dv_ns_mv\", \"*_p_d_mv_dv\",\n                                  \"*_p_d_mv_smf\", \"*_p_d_mv_dv_smf\", \"*_p_d_ni_mv_dv_smf\",\n                                  \"*_p_d_mv_sml\", \"*_p_d_mv_dv_sml\", \"*_p_d_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\", \"66.6\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-07-15 01:54:35","endLine":594,"groupId":"53637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testDoublePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DoublePointField.class);\n    final List<String> sequential = Arrays.asList(\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\");\n    List<Double> randomDoubles = getRandomDoubles(10, false);\n    List<Double> randomDoublesMissing = getRandomDoubles(10, true);\n\n    for (String r : Arrays.asList(\"*_p_d\", \"*_p_d_dv\", \"*_p_d_dv_ns\", \"*_p_d_ni_dv\",\n                                  \"*_p_d_ni_dv_ns\", \"*_p_d_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      doTestFloatPointFunctionQuery(field, \"double\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_d_smf\", \"*_p_d_dv_smf\", \"*_p_d_ni_dv_smf\",\n                                  \"*_p_d_sml\", \"*_p_d_dv_sml\", \"*_p_d_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoublesMissing);\n      doTestFloatPointFunctionQuery(field, \"double\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_ni\", \"*_p_d_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"42.34\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_mv\", \"*_p_d_ni_mv\", \"*_p_d_ni_mv_dv\", \"*_p_d_ni_dv_ns_mv\",\n                                  \"*_p_d_ni_ns_mv\", \"*_p_d_dv_ns_mv\", \"*_p_d_mv_dv\",\n                                  \"*_p_d_mv_smf\", \"*_p_d_mv_dv_smf\", \"*_p_d_ni_mv_dv_smf\",\n                                  \"*_p_d_mv_sml\", \"*_p_d_mv_dv_sml\", \"*_p_d_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\", \"66.6\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"},{"authorDate":"2017-07-15 01:54:27","commitOrder":3,"curCode":"  public void testDatePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DatePointField.class);\n    final List<String> sequential = Arrays.asList(getSequentialStringArrayWithDates(10));\n    final List<Instant> randomDates = getRandomInstants(10, false);\n    final List<Instant> randomDatesMissing = getRandomInstants(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_dt\", \"*_p_dt_dv\", \"*_p_dt_dv_ns\", \"*_p_dt_ni_dv\",\n                                  \"*_p_dt_ni_dv_ns\", \"*_p_dt_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n      doTestDatePointFunctionQuery(field);\n    }\n    for (String r : Arrays.asList(\"*_p_dt_smf\", \"*_p_dt_dv_smf\", \"*_p_dt_ni_dv_smf\",\n                                  \"*_p_dt_sml\", \"*_p_dt_dv_sml\", \"*_p_dt_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDatesMissing);\n      doTestDatePointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_ni\", \"*_p_dt_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_mv\", \"*_p_dt_ni_mv\", \"*_p_dt_ni_mv_dv\", \"*_p_dt_ni_dv_ns_mv\",\n                                  \"*_p_dt_ni_ns_mv\", \"*_p_dt_dv_ns_mv\", \"*_p_dt_mv_dv\",\n                                  \"*_p_dt_mv_smf\", \"*_p_dt_mv_dv_smf\", \"*_p_dt_ni_mv_dv_smf\",\n                                  \"*_p_dt_mv_sml\", \"*_p_dt_mv_dv_sml\", \"*_p_dt_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n                                \n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-07-15 01:54:35","endLine":1697,"groupId":"34172","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatePointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testDatePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DatePointField.class);\n    final List<String> sequential = Arrays.asList(getSequentialStringArrayWithDates(10));\n    final List<Instant> randomDates = getRandomInstants(10, false);\n    final List<Instant> randomDatesMissing = getRandomInstants(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_dt\", \"*_p_dt_dv\", \"*_p_dt_dv_ns\", \"*_p_dt_ni_dv\",\n                                  \"*_p_dt_ni_dv_ns\", \"*_p_dt_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n      doTestDatePointFunctionQuery(field, \"date\");\n    }\n    for (String r : Arrays.asList(\"*_p_dt_smf\", \"*_p_dt_dv_smf\", \"*_p_dt_ni_dv_smf\",\n                                  \"*_p_dt_sml\", \"*_p_dt_dv_sml\", \"*_p_dt_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDatesMissing);\n      doTestDatePointFunctionQuery(field, \"date\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_ni\", \"*_p_dt_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_mv\", \"*_p_dt_ni_mv\", \"*_p_dt_ni_mv_dv\", \"*_p_dt_ni_dv_ns_mv\",\n                                  \"*_p_dt_ni_ns_mv\", \"*_p_dt_dv_ns_mv\", \"*_p_dt_mv_dv\",\n                                  \"*_p_dt_mv_smf\", \"*_p_dt_mv_dv_smf\", \"*_p_dt_ni_mv_dv_smf\",\n                                  \"*_p_dt_mv_sml\", \"*_p_dt_mv_dv_sml\", \"*_p_dt_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n                                \n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1653,"status":"M"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":4,"curCode":"  public void testDoublePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DoublePointField.class);\n    final List<String> sequential = Arrays.asList(\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\");\n    List<Double> randomDoubles = getRandomDoubles(10, false);\n    List<Double> randomDoublesMissing = getRandomDoubles(10, true);\n\n    for (String r : Arrays.asList(\"*_p_d\", \"*_p_d_dv\", \"*_p_d_dv_ns\", \"*_p_d_ni_dv\",\n                                  \"*_p_d_ni_dv_ns\", \"*_p_d_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      doTestDoublePointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_d_smf\", \"*_p_d_dv_smf\", \"*_p_d_ni_dv_smf\",\n                                  \"*_p_d_sml\", \"*_p_d_dv_sml\", \"*_p_d_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoublesMissing);\n      doTestDoublePointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_ni\", \"*_p_d_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"42.34\");\n    }\n    \n    \r\n    for (String r : Arrays.asList(\"*_p_d_mv\", \"*_p_d_ni_mv\", \"*_p_d_ni_ns_mv\", \n                                  \"*_p_d_mv_smf\", \"*_p_d_mv_sml\")) {\n                                  \n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\", \"66.6\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    \n    \r\n    for (String r : Arrays.asList(\"*_p_d_ni_mv_dv\", \"*_p_d_ni_dv_ns_mv\",\n                                  \"*_p_d_dv_ns_mv\", \"*_p_d_mv_dv\",\n                                  \"*_p_d_mv_dv_smf\", \"*_p_d_ni_mv_dv_smf\",\n                                  \"*_p_d_mv_dv_sml\", \"*_p_d_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      \n      \r\n      \r\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      \n      \r\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2018-01-23 20:35:14","endLine":631,"groupId":"102663","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublePointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/d2e1ffc7e24bca8d7be75e3d221b644447ed6f.src","preCode":"  public void testDoublePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DoublePointField.class);\n    final List<String> sequential = Arrays.asList(\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\");\n    List<Double> randomDoubles = getRandomDoubles(10, false);\n    List<Double> randomDoublesMissing = getRandomDoubles(10, true);\n\n    for (String r : Arrays.asList(\"*_p_d\", \"*_p_d_dv\", \"*_p_d_dv_ns\", \"*_p_d_ni_dv\",\n                                  \"*_p_d_ni_dv_ns\", \"*_p_d_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoubles);\n      doTestDoublePointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_d_smf\", \"*_p_d_dv_smf\", \"*_p_d_ni_dv_smf\",\n                                  \"*_p_d_sml\", \"*_p_d_dv_sml\", \"*_p_d_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDoublesMissing);\n      doTestDoublePointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_ni\", \"*_p_d_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"42.34\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_d_mv\", \"*_p_d_ni_mv\", \"*_p_d_ni_mv_dv\", \"*_p_d_ni_dv_ns_mv\",\n                                  \"*_p_d_ni_ns_mv\", \"*_p_d_dv_ns_mv\", \"*_p_d_mv_dv\",\n                                  \"*_p_d_mv_smf\", \"*_p_d_mv_dv_smf\", \"*_p_d_ni_mv_dv_smf\",\n                                  \"*_p_d_mv_sml\", \"*_p_d_mv_dv_sml\", \"*_p_d_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldSortError(field, \"multivalued\", \"42.34\", \"66.6\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"42.34\", \"66.6\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"},{"authorDate":"2018-01-23 20:35:14","commitOrder":4,"curCode":"  public void testDatePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DatePointField.class);\n    final List<String> sequential = Arrays.asList(getSequentialStringArrayWithDates(10));\n    final List<Instant> randomDates = getRandomInstants(10, false);\n    final List<Instant> randomDatesMissing = getRandomInstants(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_dt\", \"*_p_dt_dv\", \"*_p_dt_dv_ns\", \"*_p_dt_ni_dv\",\n                                  \"*_p_dt_ni_dv_ns\", \"*_p_dt_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n      doTestDatePointFunctionQuery(field);\n    }\n    for (String r : Arrays.asList(\"*_p_dt_smf\", \"*_p_dt_dv_smf\", \"*_p_dt_ni_dv_smf\",\n                                  \"*_p_dt_sml\", \"*_p_dt_dv_sml\", \"*_p_dt_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDatesMissing);\n      doTestDatePointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_ni\", \"*_p_dt_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n    }\n    \n    \r\n    for (String r : Arrays.asList(\"*_p_dt_mv\", \"*_p_dt_ni_mv\", \"*_p_dt_ni_ns_mv\", \n                                  \"*_p_dt_mv_smf\", \"*_p_dt_mv_sml\")) {\n                                  \n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n                                \n    }\n\n    \r\n    for (String r : Arrays.asList(\"*_p_dt_ni_mv_dv\", \"*_p_dt_ni_dv_ns_mv\",\n                                  \"*_p_dt_dv_ns_mv\", \"*_p_dt_mv_dv\",\n                                  \"*_p_dt_mv_dv_smf\", \"*_p_dt_ni_mv_dv_smf\",\n                                  \"*_p_dt_mv_dv_sml\", \"*_p_dt_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n\n      \r\n      \r\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n\n      \r\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n    }    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2018-01-23 20:35:14","endLine":1788,"groupId":"102663","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatePointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/d2e1ffc7e24bca8d7be75e3d221b644447ed6f.src","preCode":"  public void testDatePointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(DatePointField.class);\n    final List<String> sequential = Arrays.asList(getSequentialStringArrayWithDates(10));\n    final List<Instant> randomDates = getRandomInstants(10, false);\n    final List<Instant> randomDatesMissing = getRandomInstants(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_dt\", \"*_p_dt_dv\", \"*_p_dt_dv_ns\", \"*_p_dt_ni_dv\",\n                                  \"*_p_dt_ni_dv_ns\", \"*_p_dt_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDates);\n      doTestDatePointFunctionQuery(field);\n    }\n    for (String r : Arrays.asList(\"*_p_dt_smf\", \"*_p_dt_dv_smf\", \"*_p_dt_ni_dv_smf\",\n                                  \"*_p_dt_sml\", \"*_p_dt_dv_sml\", \"*_p_dt_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomDatesMissing);\n      doTestDatePointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_ni\", \"*_p_dt_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"1995-12-31T23:59:59Z\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_dt_mv\", \"*_p_dt_ni_mv\", \"*_p_dt_ni_mv_dv\", \"*_p_dt_ni_dv_ns_mv\",\n                                  \"*_p_dt_ni_ns_mv\", \"*_p_dt_dv_ns_mv\", \"*_p_dt_mv_dv\",\n                                  \"*_p_dt_mv_smf\", \"*_p_dt_mv_dv_smf\", \"*_p_dt_ni_mv_dv_smf\",\n                                  \"*_p_dt_mv_sml\", \"*_p_dt_mv_dv_sml\", \"*_p_dt_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldSortError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"1995-12-31T23:59:59Z\", \"2000-12-31T23:59:59Z\");\n                                \n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1727,"status":"M"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"}]
