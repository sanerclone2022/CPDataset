[{"authorTime":"2014-07-24 01:43:23","codes":[{"authorDate":"2014-07-24 01:43:23","commitOrder":1,"curCode":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              \r\n\r\n\r\n\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              \r\n\r\n\r\n\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              \r\n\r\n\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n","date":"2014-07-24 01:43:23","endLine":294,"groupId":"13140","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"accumIntervalsMulti","params":"(SortedSetDocValuesssdv@DocIdSetIteratordisi@Bitsbits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/8bc576db0ff5d885c84c8b0c83d3b0e7d93399.src","preCode":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              \r\n\r\n\r\n\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              \r\n\r\n\r\n\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              \r\n\r\n\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/request/IntervalFacets.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"},{"authorDate":"2014-07-24 01:43:23","commitOrder":1,"curCode":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n","date":"2014-07-24 01:43:23","endLine":311,"groupId":"13140","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"accumIntervalsSingle","params":"(SortedDocValuessdv@DocIdSetIteratordisi@Bitsbits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/8bc576db0ff5d885c84c8b0c83d3b0e7d93399.src","preCode":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/request/IntervalFacets.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"B"}],"commitId":"2d1056e06f487da23c52b26b1e9061f69961574c","commitMessage":"@@@SOLR-6216: Better faceting for multiple intervals on DV fields. Thanks Tomas\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1612889 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-24 01:43:23","modifiedFileCount":"5","status":"B","submitter":"Erick Erickson"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > ssdv.docID()) {\n        ssdv.advance(doc);\n      }\n      if (doc == ssdv.docID()) {\n        long currOrd;\n        int currentInterval = 0;\n        while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          boolean evaluateNextInterval = true;\n          while (evaluateNextInterval && currentInterval < intervals.length) {\n            IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n            switch (result) {\n            case INCLUDED:\n              \r\n\r\n\r\n\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              \r\n\r\n\r\n\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              \r\n\r\n\n              currentInterval++;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":319,"groupId":"1141","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"accumIntervalsMulti","params":"(SortedSetDocValuesssdv@DocIdSetIteratordisi@Bitsbits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/87feb9cd8e418c97c103e81cb2781c9ad44395.src","preCode":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              \r\n\r\n\r\n\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              \r\n\r\n\r\n\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              \r\n\r\n\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/request/IntervalFacets.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > sdv.docID()) {\n        sdv.advance(doc);\n      }\n      if (doc == sdv.docID()) {\n        accumInterval(sdv.ordValue());\n      }\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":338,"groupId":"1141","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"accumIntervalsSingle","params":"(SortedDocValuessdv@DocIdSetIteratordisi@Bitsbits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/87feb9cd8e418c97c103e81cb2781c9ad44395.src","preCode":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      int ord = sdv.getOrd(doc);\n      if (ord >= 0) {\n        accumInterval(ord);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/request/IntervalFacets.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2021-04-21 04:28:33","codes":[{"authorDate":"2021-04-21 04:28:33","commitOrder":3,"curCode":"  private void accumIntervalsMulti(SortedSetDocValues ssdv, DocIdSetIterator disi) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > ssdv.docID()) {\n        ssdv.advance(doc);\n      }\n      if (doc == ssdv.docID()) {\n        long currOrd;\n        int currentInterval = 0;\n        while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          boolean evaluateNextInterval = true;\n          while (evaluateNextInterval && currentInterval < intervals.length) {\n            IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n            switch (result) {\n            case INCLUDED:\n              \r\n\r\n\r\n\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              \r\n\r\n\r\n\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              \r\n\r\n\n              currentInterval++;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n","date":"2021-04-21 04:28:33","endLine":386,"groupId":"102619","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"accumIntervalsMulti","params":"(SortedSetDocValuesssdv@DocIdSetIteratordisi)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/66d770e301077fb59178154ae9052d1a2ace8d.src","preCode":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > ssdv.docID()) {\n        ssdv.advance(doc);\n      }\n      if (doc == ssdv.docID()) {\n        long currOrd;\n        int currentInterval = 0;\n        while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          boolean evaluateNextInterval = true;\n          while (evaluateNextInterval && currentInterval < intervals.length) {\n            IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n            switch (result) {\n            case INCLUDED:\n              \r\n\r\n\r\n\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              \r\n\r\n\r\n\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              \r\n\r\n\n              currentInterval++;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/request/IntervalFacets.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"},{"authorDate":"2021-04-21 04:28:33","commitOrder":3,"curCode":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (doc > sdv.docID()) {\n        sdv.advance(doc);\n      }\n      if (doc == sdv.docID()) {\n        accumInterval(sdv.ordValue());\n      }\n    }\n  }\n","date":"2021-04-21 04:28:33","endLine":402,"groupId":"102619","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"accumIntervalsSingle","params":"(SortedDocValuessdv@DocIdSetIteratordisi)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/66d770e301077fb59178154ae9052d1a2ace8d.src","preCode":"  private void accumIntervalsSingle(SortedDocValues sdv, DocIdSetIterator disi, Bits bits) throws IOException {\n    \r\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(sdv);\n    }\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > sdv.docID()) {\n        sdv.advance(doc);\n      }\n      if (doc == sdv.docID()) {\n        accumInterval(sdv.ordValue());\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/request/IntervalFacets.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"bec4ed890b026a23bb537190de7cdbe10b3b1081","commitMessage":"@@@SOLR-14185: introduce DocSet.iterator(LeafReaderContext).  replacing Filter where possible (#2)\n\n* fix some brittle code that effectively assumes non-null iterators\n* replace Filter with `DocSet.iterator(LeafReaderContext)` where possible\n* extend TestDocSet to cover equivalence of direct/getTopFilter DISIs\n* IntervalFacets was redundantly checking live bits; stop it\n\nSortedIntDocSet specifically:\n* report precise cost for the iterator; no need to approximate\n* cache per-segment offsets into the array\n* replaced an unnecessary custom binary search implementation with Arrays.binarySearch(...). \n* intersection size optimization; return \"this\" if unchanged\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-04-21 04:28:33","modifiedFileCount":"15","status":"M","submitter":"Michael Gibney"}]
