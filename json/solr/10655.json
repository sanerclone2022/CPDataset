[{"authorTime":"2016-01-08 23:56:33","codes":[{"authorDate":"2016-01-08 09:55:25","commitOrder":2,"curCode":"  public void testSelectStream() throws Exception {\n\n    SelectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"select(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    \n  }\n","date":"2016-01-08 09:55:25","endLine":101,"groupId":"4685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/64/e600a427f2228d25ea35d1b53abe9dfafe1ff6.src","preCode":"  public void testSelectStream() throws Exception {\n\n    SelectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"select(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2016-01-08 23:56:33","commitOrder":2,"curCode":"  public void testJDBCStream() throws Exception {\n\n    JDBCStream stream;\n    String expressionString;\n    \n    \r\n    stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n    assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n  }\n","date":"2016-01-08 23:56:33","endLine":255,"groupId":"4685","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/f173877fb39452656f2b8a085c2e0aadf05463.src","preCode":"  public void testJDBCStream() throws Exception {\n\n    JDBCStream stream;\n    String expressionString;\n    \n    \r\n    stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n    assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"}],"commitId":"fe4d702f83fb12c1543d3a483c7e3ba04bb521c9","commitMessage":"@@@SOLR-8479: Add JDBCStream to Streaming API and Streaming Expressions for integration with external data sources\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723749 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-08 23:56:33","modifiedFileCount":"2","status":"M","submitter":"Dennis Gove"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testSelectStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (SelectStream stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"select(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":107,"groupId":"10655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testSelectStream() throws Exception {\n\n    SelectStream stream;\n    String expressionString;\n    \n    \r\n    stream = new SelectStream(StreamExpressionParser.parse(\"select(\\\"a_s as fieldA\\\", search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"select(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"a_s as fieldA\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testJDBCStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (JDBCStream stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n      assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":288,"groupId":"10655","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testJDBCStream() throws Exception {\n\n    JDBCStream stream;\n    String expressionString;\n    \n    \r\n    stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n    assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
