[{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":1,"curCode":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, String configSetName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configSetName);\n  }\n","date":"2020-07-08 23:57:24","endLine":1843,"groupId":"60776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Map<String@List<Integer>>collectionInfos@StringcollectionName@StringconfigSetName@intnumShards@intreplicationFactor@SolrClientclient@StringcreateNodeSetStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/01018aa2686adc85eb68d2a844b6145f233360.src","preCode":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, String configSetName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configSetName);\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1830,"status":"B"},{"authorDate":"2020-07-08 23:57:24","commitOrder":1,"curCode":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configName);\n  }\n","date":"2020-07-08 23:57:24","endLine":1858,"groupId":"60776","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollection","params":"(Map<String@List<Integer>>collectionInfos@StringcollectionName@intnumShards@intreplicationFactor@SolrClientclient@StringcreateNodeSetStr@StringconfigName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/01018aa2686adc85eb68d2a844b6145f233360.src","preCode":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configName);\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1845,"status":"B"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"B","submitter":"Andrzej Bialecki"},{"authorTime":"2021-02-19 21:40:23","codes":[{"authorDate":"2021-02-19 21:40:23","commitOrder":2,"curCode":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, String configSetName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            CollectionHandlingUtils.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            CollectionHandlingUtils.CREATE_NODE_SET, createNodeSetStr),\n        client, configSetName);\n  }\n","date":"2021-02-19 21:40:23","endLine":1846,"groupId":"111908","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Map<String@List<Integer>>collectionInfos@StringcollectionName@StringconfigSetName@intnumShards@intreplicationFactor@SolrClientclient@StringcreateNodeSetStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/0f3f522171924a44cace32750804db1377c1d5.src","preCode":"  protected CollectionAdminResponse createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, String configSetName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configSetName);\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1833,"status":"M"},{"authorDate":"2021-02-19 21:40:23","commitOrder":2,"curCode":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            CollectionHandlingUtils.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            CollectionHandlingUtils.CREATE_NODE_SET, createNodeSetStr),\n        client, configName);\n  }\n","date":"2021-02-19 21:40:23","endLine":1861,"groupId":"111908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollection","params":"(Map<String@List<Integer>>collectionInfos@StringcollectionName@intnumShards@intreplicationFactor@SolrClientclient@StringcreateNodeSetStr@StringconfigName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/0f3f522171924a44cace32750804db1377c1d5.src","preCode":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configName);\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1848,"status":"M"}],"commitId":"e7c80f6445a04cb3d1b49d85d773fde283c916fe","commitMessage":"@@@SOLR-15157: refactor Collection API to separate from Overseer and message handling abstractions (#2390)\n\nNo functional changes. In preparation of distributing the Collection API command execution.","date":"2021-02-19 21:40:23","modifiedFileCount":"42","status":"M","submitter":"Ilan Ginzburg"}]
