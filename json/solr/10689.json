[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":2407,"groupId":"3696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2316,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":2680,"groupId":"3696","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelDaemonUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2509,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":2407,"groupId":"3696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2316,"status":"N"},{"authorDate":"2018-11-28 00:21:42","commitOrder":2,"curCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":2768,"groupId":"3696","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelDaemonUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/639d4bc8fa96853700ee3a75bd2091f2437482.src","preCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2597,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":2495,"groupId":"3696","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/7561caf1b9c365950a505693fa3de4a7f8c0ef.src","preCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2405,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"parallelDestinationCollection1\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":2768,"groupId":"3696","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelDaemonUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/7561caf1b9c365950a505693fa3de4a7f8c0ef.src","preCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2598,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2020-02-06 01:49:24","commitOrder":4,"curCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,_version_,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2020-02-06 01:49:24","endLine":2765,"groupId":"3696","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/aa3780aa59f9d91a0a67e402dd7f6acb42563a.src","preCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2674,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"parallelDestinationCollection1\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":2768,"groupId":"3696","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelDaemonUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/7561caf1b9c365950a505693fa3de4a7f8c0ef.src","preCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"parallelDestinationCollection1\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2598,"status":"N"}],"commitId":"c5d0391df9c821dc842287d8c769c6f73275a423","commitMessage":"@@@SOLR-14241: New delete() Stream Decorator\n","date":"2020-02-06 01:49:24","modifiedFileCount":"5","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":5,"curCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,_version_,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":2773,"groupId":"10689","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/775402737e9c5da09ced5ec6546c330a68af3a.src","preCode":"  public void testUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"destinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"destinationCollection\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"destinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class);\n\n    try {\n      \r\n      \r\n      expression = StreamExpressionParser.parse(\"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\\\"id,_version_,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\"))\");\n      stream = new UpdateStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      cluster.getSolrClient().commit(\"destinationCollection\");\n\n      \r\n      assert (tuples.size() == 1);\n      t = tuples.get(0);\n      assert (t.EOF == false);\n      assertEquals(5, t.get(\"batchIndexed\"));\n\n      \r\n      expression = StreamExpressionParser.parse(\"search(destinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"destinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2681,"status":"M"},{"authorDate":"2021-01-18 23:59:41","commitOrder":5,"curCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"parallelDestinationCollection1\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":3046,"groupId":"10689","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testParallelDaemonUpdateStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/775402737e9c5da09ced5ec6546c330a68af3a.src","preCode":"  public void testParallelDaemonUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection1\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"parallelDestinationCollection1\", 2, 2);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n\n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"parallelDestinationCollection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class);\n\n    try {\n      \r\n      String updateExpression = \"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\")), runInterval=\\\"1000\\\", id=\\\"test\\\")\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      assert (tuples.size() == 2);\n\n      \r\n      \r\n      ModifiableSolrParams sParams = new ModifiableSolrParams(StreamingTest.mapParams(CommonParams.QT, \"/stream\", \"action\", \"list\"));\n\n      int workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        int iterations = 0;\n        INNER:\n        while (iterations == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            long l = tupleResponse.getLong(\"iterations\");\n            if (l > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            iterations = (int) l;\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n\n      cluster.getSolrClient().commit(\"parallelDestinationCollection1\");\n\n      \r\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"stop\");\n      sParams.set(\"id\", \"test\");\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n        solrStream.setStreamContext(streamContext);\n        solrStream.open();\n        Tuple tupleResponse = solrStream.read();\n        solrStream.close();\n      }\n\n      sParams = new ModifiableSolrParams();\n      sParams.set(CommonParams.QT, \"/stream\");\n      sParams.set(\"action\", \"list\");\n\n      workersComplete = 0;\n      for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n        long stopTime = 0;\n        INNER:\n        while (stopTime == 0) {\n          SolrStream solrStream = new SolrStream(jetty.getBaseUrl() + \"/collection1\", sParams);\n          solrStream.setStreamContext(streamContext);\n          solrStream.open();\n          Tuple tupleResponse = solrStream.read();\n          if (tupleResponse.EOF) {\n            solrStream.close();\n            break INNER;\n          } else {\n            stopTime = tupleResponse.getLong(\"stopTime\");\n            if (stopTime > 0) {\n              ++workersComplete;\n            } else {\n              try {\n                Thread.sleep(1000);\n              } catch (Exception e) {\n\n              }\n            }\n            solrStream.close();\n          }\n        }\n      }\n\n      assertEquals(cluster.getJettySolrRunners().size(), workersComplete);\n      \r\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection1\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2875,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
