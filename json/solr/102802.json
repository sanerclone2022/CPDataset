[{"authorTime":"2017-08-14 18:42:33","codes":[{"authorDate":"2016-12-20 08:54:13","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    boolean useAlias = random().nextBoolean();\n    String collection;\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2016-12-20 08:54:13","endLine":78,"groupId":"15566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/5c83747d984bcd2af0c77c34757ebcf0ad716c.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    boolean useAlias = random().nextBoolean();\n    String collection;\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"},{"authorDate":"2017-08-14 18:42:33","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","date":"2017-08-14 18:42:33","endLine":51,"groupId":"21218","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/7ebafb741e9aba0e2b958e5fa00b470234103c.src","preCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"7aa660b747440bfc5beb63051db324db3c5dd761","commitMessage":"@@@SOLR-11221: SolrJmxReporter broken on core reload.\n","date":"2017-08-14 18:42:33","modifiedFileCount":"4","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2016-12-20 08:54:13","commitOrder":5,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    boolean useAlias = random().nextBoolean();\n    String collection;\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2016-12-20 08:54:13","endLine":78,"groupId":"15566","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/5c83747d984bcd2af0c77c34757ebcf0ad716c.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    boolean useAlias = random().nextBoolean();\n    String collection;\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2020-07-08 23:57:24","commitOrder":5,"curCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n  }\n","date":"2020-07-08 23:57:24","endLine":62,"groupId":"21218","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/ff7737ceb48550bd7ef43f4067ff6282f263f9.src","preCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":6,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    boolean useAlias = random().nextBoolean();\n    String collection;\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":85,"groupId":"102802","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/abfadfa657c984668f8529ec1c6b591de0b9d9.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    boolean useAlias = random().nextBoolean();\n    String collection;\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-07-08 23:57:24","commitOrder":6,"curCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n  }\n","date":"2020-07-08 23:57:24","endLine":62,"groupId":"102802","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/ff7737ceb48550bd7ef43f4067ff6282f263f9.src","preCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
