[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2017-07-04 12:44:18","commitOrder":8,"curCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":491,"groupId":"54113","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getNumRequests","params":"(StringbaseUrl@StringcollectionName@Stringcategory@Stringkey@Stringscope@booleanreturnNumErrors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/df0e2e394dc1098b1a4cf1fdad5df726778750.src","preCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":8,"curCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","date":"2019-03-04 17:41:45","endLine":518,"groupId":"54113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNumRequests","params":"(StringbaseUrl@StringcollectionName@Stringcategory@Stringkey@Stringscope@booleanreturnNumErrors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":9,"curCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":587,"groupId":"10496","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getNumRequests","params":"(StringbaseUrl@StringcollectionName@Stringcategory@Stringkey@Stringscope@booleanreturnNumErrors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fb/363589300707a5ba887ca8307c8502d1a624b8.src","preCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":9,"curCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":603,"groupId":"10496","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getNumRequests","params":"(StringbaseUrl@StringcollectionName@Stringcategory@Stringkey@Stringscope@booleanreturnNumErrors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/76cb83739b589a06e3faeacfdcbb4a3b836016.src","preCode":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      \r\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { \r\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
