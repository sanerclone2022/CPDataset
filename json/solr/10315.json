[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = factory.constructStream(streamExpressions.get(0));\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n","date":"2015-05-11 20:37:18","endLine":75,"groupId":"28224","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"UniqueStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/2a2e4c653db342e9f3c29ffb1812669d0b0b13.src","preCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = factory.constructStream(streamExpressions.get(0));\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n","date":"2015-05-11 20:37:18","endLine":87,"groupId":"26661","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ReducerStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/95633015fab7cb4637b7db9649d94dd3b20c6a.src","preCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"e50f4d94c74560d863df197f21bc87d21c212f8c","commitMessage":"@@@SOLR-7377: Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1678743 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-11 20:37:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2015-06-20 02:53:57","codes":[{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = factory.constructStream(streamExpressions.get(0));\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    \r\n    this.eq = factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), StreamEqualitor.class);\n  }\n","date":"2015-06-20 02:53:57","endLine":77,"groupId":"28224","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"UniqueStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/728eae6cfce8ae7a3d5552992603c9ebfb7f45.src","preCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = factory.constructStream(streamExpressions.get(0));\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), StreamComparator.class);\n  }\n","date":"2015-06-20 02:53:57","endLine":87,"groupId":"26661","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ReducerStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/b39ea31fa8cb7997b15304be270ccb5dd45aa0.src","preCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"1ff66e90f1a5c209130bc39095f2f57107ee30d4","commitMessage":"@@@SOLR-7513.  SOLR-7528: Add Equalitors to Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686481 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-20 02:53:57","modifiedFileCount":"16","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)), factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldEqualitor.class));\n  }\n","date":"2015-06-24 21:07:09","endLine":76,"groupId":"21368","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"UniqueStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/c799c1958aa94e2fc30e2c67c70653b8551538.src","preCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = factory.constructStream(streamExpressions.get(0));\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    \r\n    this.eq = factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), StreamEqualitor.class);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n","date":"2015-06-24 21:07:09","endLine":86,"groupId":"21368","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ReducerStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/14eabf7f2dea47c954cbe07561ddd8cfe58907.src","preCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), StreamComparator.class);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"33a4099b9850b4f5ee8f6fe237d07060a4272704","commitMessage":"@@@SOLR-7554: Add checks in Streams for incoming stream order\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1687258 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-24 21:07:09","modifiedFileCount":"18","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-11-08 11:05:13","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)), factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldEqualitor.class));\n  }\n","date":"2015-06-24 21:07:09","endLine":76,"groupId":"21368","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"UniqueStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/c799c1958aa94e2fc30e2c67c70653b8551538.src","preCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)), factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldEqualitor.class));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2015-11-08 11:05:13","commitOrder":4,"curCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n","date":"2015-11-08 11:05:13","endLine":109,"groupId":"21368","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"ReducerStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/e8fa3335170249c21f08b911f268cbfa19dba2.src","preCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    \r\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"4f00eb8300c1d7427c588def41bc6945bfa5ea01","commitMessage":"@@@SOLR-8198: Change ReducerStream to use StreamEqualitor instead of StreamComparator\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713204 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-08 11:05:13","modifiedFileCount":"4","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-12-11 10:28:25","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":5,"curCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)), factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldEqualitor.class));\n  }\n","date":"2015-06-24 21:07:09","endLine":76,"groupId":"10315","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"UniqueStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/c799c1958aa94e2fc30e2c67c70653b8551538.src","preCode":"  public UniqueStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)), factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldEqualitor.class));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2015-12-11 10:28:25","commitOrder":5,"curCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ReduceOperation.class);\n\n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n\n    ReduceOperation reduceOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof ReduceOperation) {\n        reduceOperation = (ReduceOperation) operation;\n      } else {\n        throw new IOException(\"The ReducerStream requires a ReduceOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The ReducerStream requires a ReduceOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue) byExpression.getParameter()).getValue(), FieldEqualitor.class),\n         reduceOperation);\n  }\n","date":"2015-12-11 10:28:25","endLine":125,"groupId":"10315","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"ReducerStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/cb53537fa5b54782b608ed2c0b757277b5f5a2.src","preCode":"  public ReducerStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression, \"by\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression));\n    }\n    \n    init(factory.constructStream(streamExpressions.get(0)),\n         factory.constructEqualitor(((StreamExpressionValue)byExpression.getParameter()).getValue(), FieldEqualitor.class)\n        );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"60dca1b4f988e0a839ceb5e54ad85df70cc1f1f9","commitMessage":"@@@SOLR-8337: Add ReduceOperation and wire it into the ReducerStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719246 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-11 10:28:25","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"}]
