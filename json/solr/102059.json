[{"authorTime":"2019-03-20 01:26:31","codes":[{"authorDate":"2019-03-20 01:26:31","commitOrder":1,"curCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","date":"2019-03-20 01:26:31","endLine":289,"groupId":"45997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doDistribAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ab/e4754e0d9f8a919b6ee8a7eb38aaafafadd265.src","preCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"},{"authorDate":"2019-03-20 01:26:31","commitOrder":1,"curCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","date":"2019-03-20 01:26:31","endLine":352,"groupId":"25252","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doDistribDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ab/e4754e0d9f8a919b6ee8a7eb38aaafafadd265.src","preCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"}],"commitId":"5b7866b0851eff66cb7e929beef5249e3c72ac36","commitMessage":"@@@SOLR-12955: Refactored DistributedUpdateProcessor to put SolrCloud specifics into a subclass\nCloses #528\n","date":"2019-03-20 01:26:31","modifiedFileCount":"8","status":"B","submitter":"Bar Rotstein"},{"authorTime":"2019-03-20 01:26:31","codes":[{"authorDate":"2019-04-10 15:02:59","commitOrder":2,"curCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","date":"2019-04-10 15:02:59","endLine":289,"groupId":"45997","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doDistribAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/e6956f15d272c798ae577c8f1a3bd4f1c5e9d9.src","preCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2019-03-20 01:26:31","commitOrder":2,"curCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","date":"2019-03-20 01:26:31","endLine":352,"groupId":"25252","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doDistribDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ab/e4754e0d9f8a919b6ee8a7eb38aaafafadd265.src","preCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"N"}],"commitId":"8527ec11af8099f86953ffad1182ad43c752f95b","commitMessage":"@@@SOLR-12638: Partial/Atomic updates of nested docs.\nand [child] now works in RTG.\n","date":"2019-04-10 15:02:59","modifiedFileCount":"11","status":"M","submitter":"Moshe"},{"authorTime":"2019-10-12 03:07:03","codes":[{"authorDate":"2019-10-12 03:07:03","commitOrder":3,"curCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","date":"2019-10-12 03:07:03","endLine":303,"groupId":"45997","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doDistribAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/6b6be2aac9b3007a7d9729eed36a7291f1397c.src","preCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2019-10-12 03:07:03","commitOrder":3,"curCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","date":"2019-10-12 03:07:03","endLine":368,"groupId":"46001","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doDistribDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/6b6be2aac9b3007a7d9729eed36a7291f1397c.src","preCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"}],"commitId":"a057b0d159f669d28565f48c3ee2bee76ab3d821","commitMessage":"@@@SOLR-13815: fix live split data loss due to cluster state change between checking current shard state and getting list of subShards (#920)\n\n* SOLR-13815: add simple live split test to help debugging possible issue\n\n* SOLR-13815: fix live split data loss due to cluster state change berween checking current shard state and getting list of subShards\n","date":"2019-10-12 03:07:03","modifiedFileCount":"2","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2020-12-31 23:59:48","codes":[{"authorDate":"2020-12-31 23:59:48","commitOrder":4,"curCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","date":"2020-12-31 23:59:48","endLine":298,"groupId":"45997","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doDistribAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6f/61f18b0ecf88c299e9dca850c7dec0dac8e4d2.src","preCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2020-12-31 23:59:48","commitOrder":4,"curCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","date":"2020-12-31 23:59:48","endLine":359,"groupId":"46001","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doDistribDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6f/61f18b0ecf88c299e9dca850c7dec0dac8e4d2.src","preCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"17adcc7aa499dd23500772717b075835182480b4","commitMessage":"@@@SOLR-14034: remove deprecated min_rf references (#2152)\n\n","date":"2020-12-31 23:59:48","modifiedFileCount":"6","status":"M","submitter":"Tim Dillon"},{"authorTime":"2020-12-31 23:59:48","codes":[{"authorDate":"2021-01-08 12:23:20","commitOrder":5,"curCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getIndexedIdStr(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getIndexedIdStr(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","date":"2021-01-08 12:23:20","endLine":298,"groupId":"102059","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doDistribAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/7c61e58626b817a4df457fba6905c12eafc964.src","preCode":"  protected void doDistribAdd(AddUpdateCommand cmd) throws IOException {\n\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getRootIdUsingRouteParam(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2020-12-31 23:59:48","commitOrder":5,"curCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","date":"2020-12-31 23:59:48","endLine":359,"groupId":"102059","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doDistribDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6f/61f18b0ecf88c299e9dca850c7dec0dac8e4d2.src","preCode":"  protected void doDistribDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (isLeader && !isSubShardLeader)  {\n      DocCollection coll = clusterState.getCollection(collection);\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"N"}],"commitId":"4cb3ad4a1c40b4326aec64577a7e60018f7f1a5e","commitMessage":"@@@* SOLR-14923: Nested docs indexing perf & robustness (#2159)\n\n* When the schema defines _root_.  and you want to do atomic/partial updates...\n** _root_ needn't be stored or have docValues any more\n** _nest_path_ field isn't needed for this any more\n** Simplified internal logic\n* Allow (and recommend.  eventually insist) that the _root_ field be passed for atomic/partial updates to child docs.\n** In the absence of _root_.  assume the _route_ param is equivalent to ameliorate back-compat scope.  This is a temporary hack; remove in SOLR-15064.\n** One of the two is required; you'll get an exception if the assumption is false.  THIS IS A BACK-COMPAT CHANGE\n* Ensure that the update log contains the _root_ field if it's defined in the schema; in some cases it wasn't.  It's important for robustness of atomic/partial updates to child docs.  Caveat: the buffer replay scenario is not tested with child docs.\n* Limited the cases when a realtime searcher is re-opened.  It was being applied to any update that included child docs but now only some narrow subset: only for atomic/partial updates.  and when the update log contains an in-place update for the same nest because it's complicated to resolve those log entries.\n* Internal improvements to RealTimeGetComponent to aid clarity & robustness & probably performance...\n** Use SolrDocumentFetcher.solrDoc(docID.  ReturnFields) instead of more manual loading.  Will do more with this in another PR.\n** Clarify when only root doc IDs are expected.\n** Use Resolution enum more.  add PARTIAL.  remove DOC_WITH_CHILDREN; enhance docs.\n** When have ReturnFields.  a Set of \"onlyTheseFields\" becomes redundant.  Add a child doc resolution via a transformer when needed.\n** Clarified where copy-field targets are removed\n* NestPathField should default to single valued.  instead of inheriting the schema default.  which for ancient schemas was multi-valued.\n* AddUpdateCommand.getLuceneDocument(s) methods are very internal; made package visible and refactored a bit for clarity\n* DocumentBuilder: when in-place update.  skip id and _root_ here.  thus also simplifying further logic\n* NestedShardedAtomicUpdateTest no longer extends AbstractFullDistribZkTestBase because it wasn't really leveraging the \"control client\" checking.  and it added too much complexity to debug failures.","date":"2021-01-08 12:23:20","modifiedFileCount":"19","status":"M","submitter":"David Smiley"}]
