[{"authorTime":"2014-08-29 20:30:53","codes":[{"authorDate":"2014-08-29 20:30:53","commitOrder":1,"curCode":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n","date":"2014-08-29 20:30:53","endLine":215,"groupId":"30388","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createZkCredentialsToAddAutomatically","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/01091a7113a0c9a172e94ac2a617b06bae8a80.src","preCode":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"},{"authorDate":"2014-08-29 20:30:53","commitOrder":1,"curCode":"  protected ZkACLProvider createZkACLProvider() {\n    String zkACLProviderClassName = System.getProperty(ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkACLProviderClassName)) {\n      try {\n        log.info(\"Using ZkACLProvider: \" + zkACLProviderClassName);\n        return (ZkACLProvider)Class.forName(zkACLProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkACLProvider\");\n    return new DefaultZkACLProvider();\n  }\n","date":"2014-08-29 20:30:53","endLine":231,"groupId":"30388","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createZkACLProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/01091a7113a0c9a172e94ac2a617b06bae8a80.src","preCode":"  protected ZkACLProvider createZkACLProvider() {\n    String zkACLProviderClassName = System.getProperty(ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkACLProviderClassName)) {\n      try {\n        log.info(\"Using ZkACLProvider: \" + zkACLProviderClassName);\n        return (ZkACLProvider)Class.forName(zkACLProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkACLProvider\");\n    return new DefaultZkACLProvider();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"}],"commitId":"a61a530190349049b755d01184de55180c83647a","commitMessage":"@@@SOLR-4580: Support for protecting content in ZooKeeper.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1621294 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-08-29 20:30:53","modifiedFileCount":"15","status":"B","submitter":"Mark Robert Miller"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n","date":"2016-10-03 03:18:22","endLine":214,"groupId":"30388","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createZkCredentialsToAddAutomatically","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/2d9e5d7a993f403eed6d17a501efe305eb3f93.src","preCode":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  protected ZkACLProvider createZkACLProvider() {\n    String zkACLProviderClassName = System.getProperty(ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkACLProviderClassName)) {\n      try {\n        log.info(\"Using ZkACLProvider: \" + zkACLProviderClassName);\n        return (ZkACLProvider)Class.forName(zkACLProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkACLProvider\");\n    return new DefaultZkACLProvider();\n  }\n","date":"2016-10-03 03:18:22","endLine":230,"groupId":"30388","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createZkACLProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/2d9e5d7a993f403eed6d17a501efe305eb3f93.src","preCode":"  protected ZkACLProvider createZkACLProvider() {\n    String zkACLProviderClassName = System.getProperty(ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkACLProviderClassName)) {\n      try {\n        log.info(\"Using ZkACLProvider: \" + zkACLProviderClassName);\n        return (ZkACLProvider)Class.forName(zkACLProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkACLProvider\");\n    return new DefaultZkACLProvider();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-04-28 08:45:57","codes":[{"authorDate":"2020-04-28 08:45:57","commitOrder":3,"curCode":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: {}\", zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n","date":"2020-04-28 08:45:57","endLine":235,"groupId":"1023","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createZkCredentialsToAddAutomatically","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/f119ac4697c09eb08f216eac6a6af83e719b04.src","preCode":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-04-28 08:45:57","commitOrder":3,"curCode":"  protected ZkACLProvider createZkACLProvider() {\n    String zkACLProviderClassName = System.getProperty(ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkACLProviderClassName)) {\n      try {\n        log.info(\"Using ZkACLProvider: {}\", zkACLProviderClassName);\n        return (ZkACLProvider)Class.forName(zkACLProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkACLProvider\");\n    return new DefaultZkACLProvider();\n  }\n","date":"2020-04-28 08:45:57","endLine":251,"groupId":"1023","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createZkACLProvider","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/f119ac4697c09eb08f216eac6a6af83e719b04.src","preCode":"  protected ZkACLProvider createZkACLProvider() {\n    String zkACLProviderClassName = System.getProperty(ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkACLProviderClassName)) {\n      try {\n        log.info(\"Using ZkACLProvider: \" + zkACLProviderClassName);\n        return (ZkACLProvider)Class.forName(zkACLProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        \r\n        log.warn(\"VM param zkACLProvider does not point to a class implementing ZkACLProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkACLProvider\");\n    return new DefaultZkACLProvider();\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"960610a615a2893062b1df3ab1595d8fef6bcdb4","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-28 08:45:57","modifiedFileCount":"39","status":"M","submitter":"Erick Erickson"}]
