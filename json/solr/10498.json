[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","date":"2018-11-30 01:58:51","endLine":599,"groupId":"33071","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkCollectionParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/b67d4b055ccc07147bf9c107c04228ac86f01e.src","preCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":4,"curCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","date":"2019-03-04 17:41:45","endLine":610,"groupId":"33071","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkCollectionParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":5,"curCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .setPerReplicaState(USE_PER_REPLICA_STATE)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .setPerReplicaState(USE_PER_REPLICA_STATE)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","date":"2021-01-18 23:59:41","endLine":692,"groupId":"10498","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkCollectionParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"},{"authorDate":"2019-03-04 17:41:45","commitOrder":5,"curCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","date":"2019-03-04 17:41:45","endLine":610,"groupId":"10498","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkCollectionParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void checkCollectionParameters() throws Exception {\n\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n\n      String async1 = CollectionAdminRequest.createCollection(\"multicollection1\", \"conf\", 2, 1)\n          .processAsync(client);\n      String async2 = CollectionAdminRequest.createCollection(\"multicollection2\", \"conf\", 2, 1)\n          .processAsync(client);\n\n      CollectionAdminRequest.waitForAsyncRequest(async1, client, TIMEOUT);\n      CollectionAdminRequest.waitForAsyncRequest(async2, client, TIMEOUT);\n      cluster.waitForActiveCollection(\"multicollection1\", 2, 2);\n      cluster.waitForActiveCollection(\"multicollection2\", 2, 2);\n      client.setDefaultCollection(\"multicollection1\");\n\n      List<SolrInputDocument> docs = new ArrayList<>(3);\n      for (int i = 0; i < 3; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(id, Integer.toString(i));\n        doc.addField(\"a_t\", \"hello\");\n        docs.add(doc);\n      }\n\n      client.add(docs);     \r\n      client.commit();\n\n      ModifiableSolrParams queryParams = new ModifiableSolrParams();\n      queryParams.add(\"q\", \"*:*\");\n      assertEquals(3, client.query(queryParams).getResults().size());\n      assertEquals(0, client.query(\"multicollection2\", queryParams).getResults().size());\n\n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.set(\"collection\", \"multicollection2\");\n      assertEquals(0, client.query(query).getResults().size());\n\n      client.add(\"multicollection2\", docs);\n      client.commit(\"multicollection2\");\n\n      assertEquals(3, client.query(\"multicollection2\", queryParams).getResults().size());\n\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
