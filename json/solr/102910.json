[{"authorTime":"2013-06-27 08:44:27","codes":[{"authorDate":"2013-06-27 08:44:27","commitOrder":1,"curCode":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n","date":"2013-06-27 08:44:27","endLine":285,"groupId":"631","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseIntRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/e6c21580d6797fda7663ad96ea802d93e27d17.src","preCode":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"},{"authorDate":"2013-06-27 08:44:27","commitOrder":1,"curCode":"  public void testParseTrieIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_ti\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_ti\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_ti\", intString1), f(\"int2_ti\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_ti\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_ti\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_ti\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_ti\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_ti'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_ti'][.='\" + value + \"']\");\n  }\n","date":"2013-06-27 08:44:27","endLine":322,"groupId":"631","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseTrieIntRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/e6c21580d6797fda7663ad96ea802d93e27d17.src","preCode":"  public void testParseTrieIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_ti\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_ti\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_ti\", intString1), f(\"int2_ti\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_ti\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_ti\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_ti\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_ti\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_ti'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_ti'][.='\" + value + \"']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"}],"commitId":"d6d65851cf4a7d1f9e5f0b58544374785e7c2594","commitMessage":"@@@SOLR-4892: Add field update processors to parse/convert String-typed fields to Date.  Number.  and Boolean\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1497165 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-27 08:44:27","modifiedFileCount":"15","status":"B","submitter":"Steven Rowe"},{"authorTime":"2019-06-26 07:26:03","codes":[{"authorDate":"2019-06-26 07:26:03","commitOrder":2,"curCode":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"int1_i\"), IS_INTEGER);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertThat(d.getFieldValue(\"int2_i\"), IS_INTEGER);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n","date":"2019-06-26 07:26:03","endLine":291,"groupId":"102910","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseIntRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/978c83e26b147be8a7b06765e593d9eddf99e9.src","preCode":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2019-06-26 07:26:03","commitOrder":2,"curCode":"  public void testParseTrieIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_ti\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_ti\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_ti\", intString1), f(\"int2_ti\", intString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"int1_ti\"), IS_INTEGER);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_ti\")).intValue());\n    assertThat(d.getFieldValue(\"int2_ti\"), IS_INTEGER);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_ti\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_ti'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_ti'][.='\" + value + \"']\");\n  }\n","date":"2019-06-26 07:26:03","endLine":328,"groupId":"102910","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseTrieIntRoundTrip","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ec/978c83e26b147be8a7b06765e593d9eddf99e9.src","preCode":"  public void testParseTrieIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_ti\")); \r\n    assertNotNull(schema.getFieldOrNull(\"int2_ti\")); \r\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_ti\", intString1), f(\"int2_ti\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_ti\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_ti\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_ti\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_ti\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_ti'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_ti'][.='\" + value + \"']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"583c219183b2bca85936a095727d287c5c28526b","commitMessage":"@@@SOLR-13580: add assumeThat calls to ParsingFieldUpdateProcessorsTest to skip test methods impacted by java 13-ea bug in NumberFormat.parse()\n","date":"2019-06-26 07:26:03","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"}]
