[{"authorTime":"2016-08-03 23:12:57","codes":[{"authorDate":"2016-08-03 23:12:57","commitOrder":1,"curCode":"  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n","date":"2016-08-03 23:43:00","endLine":228,"groupId":"55747","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TextLogitStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/9168f560b4478e7be797b226e99a41b49318f3.src","preCode":"  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2016-08-03 23:12:57","commitOrder":1,"curCode":"  public FeaturesSelectionStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String featureSetParam = params.get(\"featureSet\");\n    if(featureSetParam != null) {\n      params.remove(\"featureSet\");\n    } else {\n      throw new IOException(\"featureSet param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      params.remove(\"positiveLabel\");\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n    }\n\n    String numTermsParam = params.get(\"numTerms\");\n    int numTerms = 1;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"numTerms\");\n    } else {\n      throw new IOException(\"numTerms param cannot be null for FeaturesSelectionStream\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, fieldParam, outcomeParam, featureSetParam, positiveLabel, numTerms);\n  }\n","date":"2016-08-03 23:43:00","endLine":181,"groupId":"21967","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"FeaturesSelectionStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/7e3d8a88c66000857f0b893f9e10c45a42b29f.src","preCode":"  public FeaturesSelectionStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String featureSetParam = params.get(\"featureSet\");\n    if(featureSetParam != null) {\n      params.remove(\"featureSet\");\n    } else {\n      throw new IOException(\"featureSet param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      params.remove(\"positiveLabel\");\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n    }\n\n    String numTermsParam = params.get(\"numTerms\");\n    int numTerms = 1;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"numTerms\");\n    } else {\n      throw new IOException(\"numTerms param cannot be null for FeaturesSelectionStream\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, fieldParam, outcomeParam, featureSetParam, positiveLabel, numTerms);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FeaturesSelectionStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"87938e00e9f1006801fbf0e8c0d7b2a84b5eda48","commitMessage":"@@@SOLR-9252: Feature selection and logistic regression on text\n","date":"2016-08-03 23:43:00","modifiedFileCount":"7","status":"B","submitter":"jbernste"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2016-08-03 23:12:57","commitOrder":2,"curCode":"  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n","date":"2016-08-03 23:43:00","endLine":228,"groupId":"10271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"TextLogitStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/9168f560b4478e7be797b226e99a41b49318f3.src","preCode":"  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"},{"authorDate":"2021-06-22 00:19:37","commitOrder":2,"curCode":"  public FeaturesSelectionStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String featureSetParam = params.get(\"featureSet\");\n    if(featureSetParam != null) {\n      params.remove(\"featureSet\");\n    } else {\n      throw new IOException(\"featureSet param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      params.remove(\"positiveLabel\");\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n    }\n\n    String numTermsParam = params.get(\"numTerms\");\n    int numTerms = 1;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"numTerms\");\n    } else {\n      throw new IOException(\"numTerms param cannot be null for FeaturesSelectionStream\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, fieldParam, outcomeParam, featureSetParam, positiveLabel, numTerms);\n  }\n","date":"2021-06-22 00:19:37","endLine":187,"groupId":"10271","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"FeaturesSelectionStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a4/6a4e9aace907e8a1a35e8d1294cae16c2dce3f.src","preCode":"  public FeaturesSelectionStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String featureSetParam = params.get(\"featureSet\");\n    if(featureSetParam != null) {\n      params.remove(\"featureSet\");\n    } else {\n      throw new IOException(\"featureSet param cannot be null for FeaturesSelectionStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      params.remove(\"positiveLabel\");\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n    }\n\n    String numTermsParam = params.get(\"numTerms\");\n    int numTerms = 1;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"numTerms\");\n    } else {\n      throw new IOException(\"numTerms param cannot be null for FeaturesSelectionStream\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, zkHost, params, fieldParam, outcomeParam, featureSetParam, positiveLabel, numTerms);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FeaturesSelectionStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
