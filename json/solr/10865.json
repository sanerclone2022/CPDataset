[{"authorTime":"2018-08-20 02:58:14","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":7,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":1081,"groupId":"40524","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":720,"status":"NB"},{"authorDate":"2018-08-20 02:58:14","commitOrder":7,"curCode":"  public void testRollupWithNoParallel() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      rollupStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rollupStream);\n      assertEquals(3, tuples.size());\n\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"rollup(search(\" + COLLECTIONORALIAS + \",q=\\\"*:*\\\",fl=\\\"a_s,a_i,a_f\\\",sort=\\\"a_s desc\\\",partitionKeys=\\\"a_s\\\"),over=\\\"a_s\\\")\\n\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      streamContext = new StreamContext();\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 3);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-08-20 02:59:38","endLine":1842,"groupId":"19591","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollupWithNoParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/44b6cef7c72ffe657657c342f81ff5554e4d37.src","preCode":"  public void testRollupWithNoParallel() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      rollupStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rollupStream);\n      assertEquals(3, tuples.size());\n\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"rollup(search(\" + COLLECTIONORALIAS + \",q=\\\"*:*\\\",fl=\\\"a_s,a_i,a_f\\\",sort=\\\"a_s desc\\\",partitionKeys=\\\"a_s\\\"),over=\\\"a_s\\\")\\n\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      streamContext = new StreamContext();\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 3);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1788,"status":"B"}],"commitId":"3e4545219ef72e89d227b46a26a951f621989d40","commitMessage":"@@@SOLR-12674: RollupStream should not use the HashQueryParser for 1 worker\n","date":"2018-08-20 02:59:38","modifiedFileCount":"4","status":"M","submitter":"Varun Thacker"},{"authorTime":"2018-08-20 02:58:14","codes":[{"authorDate":"2018-09-12 01:58:04","commitOrder":8,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, -1);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-09-12 01:58:04","endLine":1091,"groupId":"40524","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/3ec36a69d72f33c6ab6be240a77ac4b92eb476.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"M"},{"authorDate":"2018-08-20 02:58:14","commitOrder":8,"curCode":"  public void testRollupWithNoParallel() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      rollupStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rollupStream);\n      assertEquals(3, tuples.size());\n\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"rollup(search(\" + COLLECTIONORALIAS + \",q=\\\"*:*\\\",fl=\\\"a_s,a_i,a_f\\\",sort=\\\"a_s desc\\\",partitionKeys=\\\"a_s\\\"),over=\\\"a_s\\\")\\n\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      streamContext = new StreamContext();\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 3);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-08-20 02:59:38","endLine":1842,"groupId":"19591","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollupWithNoParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/44b6cef7c72ffe657657c342f81ff5554e4d37.src","preCode":"  public void testRollupWithNoParallel() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      rollupStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rollupStream);\n      assertEquals(3, tuples.size());\n\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"rollup(search(\" + COLLECTIONORALIAS + \",q=\\\"*:*\\\",fl=\\\"a_s,a_i,a_f\\\",sort=\\\"a_s desc\\\",partitionKeys=\\\"a_s\\\"),over=\\\"a_s\\\")\\n\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      streamContext = new StreamContext();\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 3);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1788,"status":"N"}],"commitId":"d35d2063a817b4b4a6975115860624686afe8964","commitMessage":"@@@SOLR-11836: FacetStream works with bucketSizeLimit of -1 which will fetch all the buckets\n","date":"2018-09-12 01:58:04","modifiedFileCount":"2","status":"M","submitter":"Varun Thacker"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-09-12 01:58:04","commitOrder":9,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, -1);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-09-12 01:58:04","endLine":1091,"groupId":"10865","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/3ec36a69d72f33c6ab6be240a77ac4b92eb476.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, -1);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"N"},{"authorDate":"2018-11-28 00:21:42","commitOrder":9,"curCode":"  public void testRollupWithNoParallel() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\", \"qt\", \"/export\" );\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      rollupStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rollupStream);\n      assertEquals(3, tuples.size());\n\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"rollup(search(\" + COLLECTIONORALIAS + \",q=\\\"*:*\\\",fl=\\\"a_s,a_i,a_f\\\",sort=\\\"a_s desc\\\",partitionKeys=\\\"a_s\\\", qt=\\\"/export\\\"),over=\\\"a_s\\\")\\n\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      streamContext = new StreamContext();\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 3);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":1851,"groupId":"10865","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollupWithNoParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/85f2ce458e9299a8c12edad6d0e2bcf87128db.src","preCode":"  public void testRollupWithNoParallel() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      rollupStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(rollupStream);\n      assertEquals(3, tuples.size());\n\n\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"rollup(search(\" + COLLECTIONORALIAS + \",q=\\\"*:*\\\",fl=\\\"a_s,a_i,a_f\\\",sort=\\\"a_s desc\\\",partitionKeys=\\\"a_s\\\"),over=\\\"a_s\\\")\\n\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      streamContext = new StreamContext();\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 3);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1797,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
