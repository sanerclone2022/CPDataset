[{"authorTime":"2019-01-12 03:42:42","codes":[{"authorDate":"2019-01-12 03:42:42","commitOrder":5,"curCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(\"2017-10-26\", numShards, alias);\n    waitColAndAlias(\"2017-10-26\", numShards, alias2);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"2017-10-23\",2, \"foo\");\n    waitCoreCount(\"foo_2017-10-23\", 1); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-27\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-27\", numShards, alias);\n    waitColAndAlias(\"2017-10-28\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-29\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-30\", numShards, alias);\n    waitColAndAlias(\"2017-10-31\", numShards, alias); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-01\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-02\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-03\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias_2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-04\",numShards, alias);\n\n  }\n","date":"2019-01-12 03:47:57","endLine":583,"groupId":"11489","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreemptiveCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/eff5a87b3c33bf4bc4a381504cb0052d742de2.src","preCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(\"2017-10-26\", numShards, alias);\n    waitColAndAlias(\"2017-10-26\", numShards, alias2);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"2017-10-23\",2, \"foo\");\n    waitCoreCount(\"foo_2017-10-23\", 1); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-27\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-27\", numShards, alias);\n    waitColAndAlias(\"2017-10-28\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-29\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-30\", numShards, alias);\n    waitColAndAlias(\"2017-10-31\", numShards, alias); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-01\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-02\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-03\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias_2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-04\",numShards, alias);\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"MB"},{"authorDate":"2019-01-12 03:42:42","commitOrder":5,"curCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","date":"2019-01-12 03:47:57","endLine":644,"groupId":"21545","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrentUpdates","params":"(ModifiableSolrParamsparams@Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/eff5a87b3c33bf4bc4a381504cb0052d742de2.src","preCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"B"}],"commitId":"dcc9ffe186eb1873fcebc56382e3be34245b0ecc","commitMessage":"@@@SOLR-13051 improve TRA update processor test\n  - remove some timeouts\n  - better async mechanism linked to SolrCore lifecycle\n  - add some additional tests to be a bit more thorough\n","date":"2019-01-12 03:47:57","modifiedFileCount":"3","status":"M","submitter":"Gus Heck"},{"authorTime":"2019-01-12 03:42:42","codes":[{"authorDate":"2019-03-13 12:54:32","commitOrder":6,"curCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, \"_\", \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, \"_\", \"2017-10-26\", numShards);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"foo\", \"_\", \"2017-10-23\",2);\n    waitCoreCount(\"foo_2017-10-23\", 1); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-27\", numShards);\n    waitColAndAlias(alias, \"_\", \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-30\", numShards);\n    waitColAndAlias(alias, \"_\", \"2017-10-31\", numShards); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-03\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias_2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-04\",numShards);\n\n  }\n","date":"2019-03-13 13:32:23","endLine":490,"groupId":"191","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreemptiveCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/d25a64589d4bbfeca64ba8de88df374ab5f00c.src","preCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(\"2017-10-26\", numShards, alias);\n    waitColAndAlias(\"2017-10-26\", numShards, alias2);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", timeField,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"2017-10-23\",2, \"foo\");\n    waitCoreCount(\"foo_2017-10-23\", 1); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-27\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-27\", numShards, alias);\n    waitColAndAlias(\"2017-10-28\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-29\", numShards, alias);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(\"2017-10-30\", numShards, alias);\n    waitColAndAlias(\"2017-10-31\", numShards, alias); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-01\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-02\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-03\", numShards, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias_2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(\"2017-11-04\",numShards, alias);\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2019-01-12 03:42:42","commitOrder":6,"curCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","date":"2019-01-12 03:47:57","endLine":644,"groupId":"21545","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrentUpdates","params":"(ModifiableSolrParamsparams@Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/eff5a87b3c33bf4bc4a381504cb0052d742de2.src","preCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"N"}],"commitId":"d8f2a02fdb11a484425f9fddfa7061711d2f0034","commitMessage":"@@@SOLR-13131 Category Routed Aliases\n","date":"2019-03-13 13:32:23","modifiedFileCount":"10","status":"M","submitter":"Gus Heck"},{"authorTime":"2019-06-20 21:47:52","codes":[{"authorDate":"2019-06-20 21:47:52","commitOrder":7,"curCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, TRA, \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, TRA, \"2017-10-26\", numShards);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"foo\", TRA, \"2017-10-23\",2);\n    waitCoreCount(\"foo\" + TRA + \"2017-10-23\", 4); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n    waitColAndAlias(alias, TRA, \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-30\", numShards);\n    waitColAndAlias(alias, TRA, \"2017-10-31\", numShards); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-03\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias\" + TRA + \"2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-04\",numShards);\n\n  }\n","date":"2019-06-20 21:47:52","endLine":512,"groupId":"191","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreemptiveCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/2afff9b1726c3888aa28c3bb1072337aec9bbf.src","preCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, \"_\", \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, \"_\", \"2017-10-26\", numShards);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"foo\", \"_\", \"2017-10-23\",2);\n    waitCoreCount(\"foo_2017-10-23\", 1); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-27\", numShards);\n    waitColAndAlias(alias, \"_\", \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, \"_\", \"2017-10-30\", numShards);\n    waitColAndAlias(alias, \"_\", \"2017-10-31\", numShards); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-03\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias_2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, \"_\", \"2017-11-04\",numShards);\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2019-06-20 21:47:52","commitOrder":7,"curCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","date":"2019-06-20 21:47:52","endLine":577,"groupId":"21545","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrentUpdates","params":"(ModifiableSolrParamsparams@Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/2afff9b1726c3888aa28c3bb1072337aec9bbf.src","preCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias_2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"M"}],"commitId":"5d47875184e09e9e811b5dfde397222db6233a78","commitMessage":"@@@SOLR-13419 - Better infix for TRA collection names\n","date":"2019-06-20 21:47:52","modifiedFileCount":"9","status":"M","submitter":"Gus Heck"},{"authorTime":"2019-06-20 21:47:52","codes":[{"authorDate":"2019-07-15 21:57:13","commitOrder":8,"curCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, TRA, \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, TRA, \"2017-10-26\", numShards);\n\n    \r\n    \r\n    \r\n    Thread.sleep(5000);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(getSaferTestName() + \"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(getSaferTestName() + \"foo\", TRA, \"2017-10-23\",2);\n    waitCoreCount(getSaferTestName() + \"foo\" + TRA + \"2017-10-23\", 4); \r\n    assertUpdateResponse(solrClient.add(getSaferTestName() + \"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(getSaferTestName() + \"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(getSaferTestName() + \"foo\");\n\n    CollectionAdminRequest.deleteAlias(getSaferTestName() + \"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(4,cols.size()); \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\"), \r\n        sdoc(\"id\", \"71\", \"timestamp_dt\", \"2017-10-25T23:02:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(9, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-30\", numShards);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(8,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(14, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-10-31\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertFalse(cols.contains(\"myalias\" + TRA + \"2017-11-03\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-03\",numShards);\n\n  }\n","date":"2019-07-15 21:57:13","endLine":526,"groupId":"191","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreemptiveCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/dc8e0e27ae5aa852af7cea7c562224f01834b5.src","preCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, TRA, \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, TRA, \"2017-10-26\", numShards);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(\"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(\"foo\", TRA, \"2017-10-23\",2);\n    waitCoreCount(\"foo\" + TRA + \"2017-10-23\", 4); \r\n    assertUpdateResponse(solrClient.add(\"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(\"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(\"foo\");\n\n    CollectionAdminRequest.deleteAlias(\"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 5, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n    waitColAndAlias(alias, TRA, \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(8, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(12, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-30\", numShards);\n    waitColAndAlias(alias, TRA, \"2017-10-31\", numShards); \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(9,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n    assertNumDocs(\"2017-10-31\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-03\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertTrue(\"Preemptive creation beyond ROUTER_PREEMPTIVE_CREATE_MATH setting of 3DAY!\",!cols.contains(\"myalias\" + TRA + \"2017-11-04\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-11-01T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-04\",numShards);\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-06-20 21:47:52","commitOrder":8,"curCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","date":"2019-06-20 21:47:52","endLine":577,"groupId":"21545","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrentUpdates","params":"(ModifiableSolrParamsparams@Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/2afff9b1726c3888aa28c3bb1072337aec9bbf.src","preCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"N"}],"commitId":"c97551cc36c2b89320428a821e45c79951260673","commitMessage":"@@@SOLR-13375 - 2 dimensional routed aliases\n","date":"2019-07-15 21:57:13","modifiedFileCount":"21","status":"M","submitter":"Gus Heck"},{"authorTime":"2019-06-20 21:47:52","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":9,"curCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas))\n        .setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas))\n        .setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, TRA, \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, TRA, \"2017-10-26\", numShards);\n\n    \r\n    \r\n    \r\n    Thread.sleep(5000);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(getSaferTestName() + \"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2))\n        .setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(getSaferTestName() + \"foo\", TRA, \"2017-10-23\",2);\n    waitCoreCount(getSaferTestName() + \"foo\" + TRA + \"2017-10-23\", 4); \r\n    assertUpdateResponse(solrClient.add(getSaferTestName() + \"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(getSaferTestName() + \"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(getSaferTestName() + \"foo\");\n\n    CollectionAdminRequest.deleteAlias(getSaferTestName() + \"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(4,cols.size()); \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\"), \r\n        sdoc(\"id\", \"71\", \"timestamp_dt\", \"2017-10-25T23:02:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(9, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-30\", numShards);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(8,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(14, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-10-31\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertFalse(cols.contains(\"myalias\" + TRA + \"2017-11-03\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-03\",numShards);\n\n  }\n","date":"2020-07-08 23:57:24","endLine":533,"groupId":"102954","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreemptiveCreation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c3/214f40f4dbcf88ae6eea1e97de7ba3b5af6d0d.src","preCode":"  public void testPreemptiveCreation() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    final int numShards = 1 ;\n    final int numReplicas = 1 ;\n    CollectionAdminRequest.createTimeRoutedAlias(alias, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    \r\n    CollectionAdminRequest.createTimeRoutedAlias(alias2, \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, numShards, numReplicas)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    addOneDocSynchCreation(numShards, alias);\n    addOneDocSynchCreation(numShards, alias2);\n\n    List<String> cols;\n    ModifiableSolrParams params = params();\n\n    \r\n    \r\n    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool(\"TimeRoutedAliasProcessorTestx-testPreemptiveCreation\");\n\n    Exception[] threadExceptions = new Exception[2];\n    boolean[] threadStarted = new boolean[2];\n    boolean[] threadFinished = new boolean[2];\n    try {\n      CountDownLatch starter = new CountDownLatch(1);\n      executorService.submit(() -> {\n        threadStarted[0] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias);\n        } catch (Exception e) {\n          threadExceptions[0] = e;\n        }\n        threadFinished[0] = true;\n      });\n\n      executorService.submit(() -> {\n        threadStarted[1] = true;\n        try {\n          starter.await();\n          concurrentUpdates(params, alias2);\n        } catch (Exception e) {\n          threadExceptions[1] = e;\n        }\n        threadFinished[1] = true;\n      });\n      starter.countDown();\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executorService);\n    }\n\n    \r\n    for (Exception threadException : threadExceptions) {\n      if (threadException != null) {\n        Thread.sleep(5000); \r\n        throw threadException;\n      }\n    }\n\n    \r\n    assertTrue(threadStarted[0]);\n    assertTrue(threadStarted[1]);\n    assertTrue(threadFinished[0]);\n    assertTrue(threadFinished[1]);\n\n    \r\n    waitColAndAlias(alias, TRA, \"2017-10-26\", numShards);\n    waitColAndAlias(alias2, TRA, \"2017-10-26\", numShards);\n\n    \r\n    \r\n    \r\n    Thread.sleep(5000);\n\n    \r\n    checkPreemptiveCase1(alias);\n    checkPreemptiveCase1(alias2);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    CollectionAdminRequest.createTimeRoutedAlias(getSaferTestName() + \"foo\", \"2017-10-23T00:00:00Z\", \"+1DAY\", getTimeField(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(numReplicas)).setPreemptiveCreateWindow(\"3HOUR\")\n        .process(solrClient);\n\n    waitColAndAlias(getSaferTestName() + \"foo\", TRA, \"2017-10-23\",2);\n    waitCoreCount(getSaferTestName() + \"foo\" + TRA + \"2017-10-23\", 4); \r\n    assertUpdateResponse(solrClient.add(getSaferTestName() + \"foo\",\n        sdoc(\"id\",\"1\",\"timestamp_dt\", \"2017-10-23T00:00:00Z\") \r\n    ));\n    assertUpdateResponse(solrClient.commit(getSaferTestName() + \"foo\"));\n\n    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(getSaferTestName() + \"foo\");\n\n    CollectionAdminRequest.deleteAlias(getSaferTestName() + \"foo\").process(solrClient);\n\n    for (String colName : foo) {\n      CollectionAdminRequest.deleteCollection(colName).process(solrClient);\n      waitCoreCount(colName, 0);\n    }\n\n    \r\n    \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(4,cols.size()); \r\n\n    \r\n    CollectionAdminRequest.setAliasProperty(alias)\n        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, \"3DAY\").process(solrClient);\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"7\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\"), \r\n        sdoc(\"id\", \"71\", \"timestamp_dt\", \"2017-10-25T23:02:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-27\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(5,cols.size()); \r\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 6, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"8\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-28\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(6,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 0, alias);\n    assertNumDocs(\"2017-10-28\", 0, alias);\n\n    QueryResponse resp;\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"));\n    assertEquals(9, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"9\", \"timestamp_dt\", \"2017-10-27T23:01:00Z\"), \r\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        sdoc(\"id\", \"10\", \"timestamp_dt\", \"2017-10-28T23:01:00Z\"),  \r\n        sdoc(\"id\", \"11\", \"timestamp_dt\", \"2017-10-28T23:02:00Z\"),  \r\n        sdoc(\"id\", \"12\", \"timestamp_dt\", \"2017-10-28T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-29\", numShards);\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(7,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(13, resp.getResults().getNumFound());\n\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"13\", \"timestamp_dt\", \"2017-10-30T23:03:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n    waitColAndAlias(alias, TRA, \"2017-10-30\", numShards);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(8,cols.size());\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 7, alias);\n    assertNumDocs(\"2017-10-26\", 0, alias);\n    assertNumDocs(\"2017-10-27\", 1, alias);\n    assertNumDocs(\"2017-10-28\", 3, alias); \r\n    assertNumDocs(\"2017-10-29\", 0, alias);\n    assertNumDocs(\"2017-10-30\", 1, alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    assertEquals(14, resp.getResults().getNumFound());\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"14\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-10-31\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"15\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-01\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"16\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-02\", numShards);\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"17\", \"timestamp_dt\", \"2017-10-30T23:01:00Z\")), \r\n        params));\n\n    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertFalse(cols.contains(\"myalias\" + TRA + \"2017-11-03\"));\n\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"18\", \"timestamp_dt\", \"2017-10-31T23:01:00Z\")), \r\n        params));\n    waitColAndAlias(alias, TRA, \"2017-11-03\",numShards);\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2019-06-20 21:47:52","commitOrder":9,"curCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","date":"2019-06-20 21:47:52","endLine":577,"groupId":"102954","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrentUpdates","params":"(ModifiableSolrParamsparams@Stringalias)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/2afff9b1726c3888aa28c3bb1072337aec9bbf.src","preCode":"  private void concurrentUpdates(ModifiableSolrParams params, String alias) throws SolrServerException, IOException {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Arrays.asList(\n        sdoc(\"id\", \"2\", \"timestamp_dt\", \"2017-10-24T00:00:00Z\"),\n        sdoc(\"id\", \"3\", \"timestamp_dt\", \"2017-10-25T00:00:00Z\"),\n        sdoc(\"id\", \"4\", \"timestamp_dt\", \"2017-10-23T00:00:00Z\"),\n        sdoc(\"id\", \"5\", \"timestamp_dt\", \"2017-10-25T23:00:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n\n    List<String> colsT1;\n    colsT1 = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);\n    assertEquals(3, colsT1.size());\n    assertTrue(\"Preemptive creation appears to not be asynchronous anymore\", !colsT1.contains(\"myalias\" + TRA + \"2017-10-26\"));\n    assertNumDocs(\"2017-10-23\", 1, alias);\n    assertNumDocs(\"2017-10-24\", 1, alias);\n    assertNumDocs(\"2017-10-25\", 3, alias);\n\n    \r\n    \r\n    \r\n    assertUpdateResponse(add(alias, Collections.singletonList(\n        sdoc(\"id\", \"6\", \"timestamp_dt\", \"2017-10-25T23:01:00Z\")), \r\n        params));\n    assertUpdateResponse(solrClient.commit(alias));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"N"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"}]
