[{"authorTime":"2019-07-25 22:57:30","codes":[{"authorDate":"2018-10-11 22:43:30","commitOrder":6,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2018-10-11 22:43:57","endLine":159,"groupId":"21024","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/7a637e63ef0e35a79b607c89ae3900df19ff20.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"NB"},{"authorDate":"2019-07-25 22:57:30","commitOrder":6,"curCode":"  public CsvStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)));\n  }\n","date":"2019-07-30 22:42:06","endLine":57,"groupId":"9457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"CsvStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/c479e9abada752dc823bd6c814a478efd1b4cd.src","preCode":"  public CsvStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CsvStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"}],"commitId":"d0674866edf109d5813cdf5c70968344373d9f77","commitMessage":"@@@SOLR-13625: Add CsvStream.  TsvStream Streaming Expressions and supporting Stream Evaluators\n","date":"2019-07-30 22:42:06","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-07-25 22:57:30","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":7,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap<>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":160,"groupId":"12348","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/e490aeba1b28127d985a96f6abc3a6c8e66ab2.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2019-07-25 22:57:30","commitOrder":7,"curCode":"  public CsvStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)));\n  }\n","date":"2019-07-30 22:42:06","endLine":57,"groupId":"12348","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"CsvStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/c479e9abada752dc823bd6c814a478efd1b4cd.src","preCode":"  public CsvStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CsvStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"}]
