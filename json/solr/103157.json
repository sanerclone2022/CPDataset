[{"authorTime":"2020-02-24 18:29:41","codes":[{"authorDate":"2020-02-24 18:29:41","commitOrder":1,"curCode":"  public void testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery() throws Exception {\n    \r\n    \r\n    Query q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_pick_best_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_pick_best_boosted_foo:\\\"big cat\\\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\\\"panthera pardus\\\")^0.85 | t_pick_best_boosted_foo:leopard)\" +\n        \" ((t_pick_best_boosted_foo:\\\"panthera leo\\\")^0.9 | (t_pick_best_boosted_foo:\\\"simba leo\\\")^0.8 | (t_pick_best_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\" +\n        \" ((t_as_distinct_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_distinct_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_distinct_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_same_term_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_same_term_boosted_foo:\\\"big cat\\\")^0.8 (t_as_same_term_boosted_foo:bagheera)^0.9 (t_as_same_term_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_same_term_boosted_foo:leopard)\" +\n            \" ((t_as_same_term_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_same_term_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_same_term_boosted_foo:kimba)^0.75)\", q.toString());\n\n  }\n","date":"2020-02-24 18:29:41","endLine":1302,"groupId":"7504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/d12bb7b92ac187c73bb3c6f747f6005b710ad8.src","preCode":"  public void testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery() throws Exception {\n    \r\n    \r\n    Query q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_pick_best_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_pick_best_boosted_foo:\\\"big cat\\\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\\\"panthera pardus\\\")^0.85 | t_pick_best_boosted_foo:leopard)\" +\n        \" ((t_pick_best_boosted_foo:\\\"panthera leo\\\")^0.9 | (t_pick_best_boosted_foo:\\\"simba leo\\\")^0.8 | (t_pick_best_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\" +\n        \" ((t_as_distinct_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_distinct_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_distinct_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_same_term_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_same_term_boosted_foo:\\\"big cat\\\")^0.8 (t_as_same_term_boosted_foo:bagheera)^0.9 (t_as_same_term_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_same_term_boosted_foo:leopard)\" +\n            \" ((t_as_same_term_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_same_term_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_same_term_boosted_foo:kimba)^0.75)\", q.toString());\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"B"},{"authorDate":"2020-02-24 18:29:41","commitOrder":1,"curCode":"  public void testSynonymsBoost_BoostMissing_shouldAssignDefaultBoost() throws Exception {\n    \r\n    Query q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_pick_best_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_pick_best_boosted_foo:\\\"big cat\\\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\\\"panthera pardus\\\")^0.85 | t_pick_best_boosted_foo:leopard)\", q.toString());\n\n    q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\", q.toString());\n  }\n","date":"2020-02-24 18:29:41","endLine":1443,"groupId":"10487","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSynonymsBoost_BoostMissing_shouldAssignDefaultBoost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/d12bb7b92ac187c73bb3c6f747f6005b710ad8.src","preCode":"  public void testSynonymsBoost_BoostMissing_shouldAssignDefaultBoost() throws Exception {\n    \r\n    Query q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_pick_best_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_pick_best_boosted_foo:\\\"big cat\\\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\\\"panthera pardus\\\")^0.85 | t_pick_best_boosted_foo:leopard)\", q.toString());\n\n    q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\", q.toString());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1436,"status":"B"}],"commitId":"663611c99c7d48dd31d53ea17644fcecd5e0fad7","commitMessage":"@@@[SOLR-12238] Synonym Queries boost (#357)\n\nSOLR-12238: Handle boosts in QueryBuilder\n\nQueryBuilder now detects per-term boosts supplied by a BoostAttribute when\nbuilding queries using a TokenStream.  This commit also adds a DelimitedBoostTokenFilter\nthat parses boosts from tokens using a delimiter token.  and exposes this in Solr","date":"2020-02-24 18:29:41","modifiedFileCount":"7","status":"B","submitter":"Alessandro Benedetti"},{"authorTime":"2021-05-11 23:04:39","codes":[{"authorDate":"2021-05-11 23:04:39","commitOrder":2,"curCode":"  public void testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery() throws Exception {\n    \r\n    \r\n    String field = \"t_pick_best_boosted_foo\";\n    Query q = QParser.getParser(\"leopard lion\", req(params(\"df\", field))).getQuery();\n    assertThat(q, booleanQuery(\n      disjunctionOf(\n        termQuery(field, \"leopard\"),\n        boosted(phraseQuery(field, \"big cat\"), 0.8f),\n        boosted(phraseQuery(field, \"panthera pardus\"), 0.85f),\n        boosted(termQuery(field, \"bagheera\"), 0.9f)\n      ),\n      disjunctionOf(\n        boosted(termQuery(field, \"kimba\"), 0.75f),\n        boosted(phraseQuery(field, \"simba leo\"), 0.8f),\n        boosted(phraseQuery(field, \"panthera leo\"), 0.9f)\n      )\n    ));\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\" +\n        \" ((t_as_distinct_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_distinct_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_distinct_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_same_term_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_same_term_boosted_foo:\\\"big cat\\\")^0.8 (t_as_same_term_boosted_foo:bagheera)^0.9 (t_as_same_term_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_same_term_boosted_foo:leopard)\" +\n            \" ((t_as_same_term_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_same_term_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_same_term_boosted_foo:kimba)^0.75)\", q.toString());\n\n  }\n","date":"2021-05-11 23:04:39","endLine":1362,"groupId":"103157","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/90327a57e30658e1119a22cdf83a82204f2b04.src","preCode":"  public void testSynonymsBoost_multiTermQueryMultiTermSynonyms_shouldParseBoostedQuery() throws Exception {\n    \r\n    \r\n    Query q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_pick_best_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_pick_best_boosted_foo:\\\"big cat\\\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\\\"panthera pardus\\\")^0.85 | t_pick_best_boosted_foo:leopard)\" +\n        \" ((t_pick_best_boosted_foo:\\\"panthera leo\\\")^0.9 | (t_pick_best_boosted_foo:\\\"simba leo\\\")^0.8 | (t_pick_best_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\" +\n        \" ((t_as_distinct_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_distinct_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_distinct_boosted_foo:kimba)^0.75)\", q.toString());\n\n    q = QParser.getParser(\"leopard lion\", req(params(\"df\", \"t_as_same_term_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_same_term_boosted_foo:\\\"big cat\\\")^0.8 (t_as_same_term_boosted_foo:bagheera)^0.9 (t_as_same_term_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_same_term_boosted_foo:leopard)\" +\n            \" ((t_as_same_term_boosted_foo:\\\"panthera leo\\\")^0.9 (t_as_same_term_boosted_foo:\\\"simba leo\\\")^0.8 (t_as_same_term_boosted_foo:kimba)^0.75)\", q.toString());\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1335,"status":"M"},{"authorDate":"2021-05-11 23:04:39","commitOrder":2,"curCode":"  public void testSynonymsBoost_BoostMissing_shouldAssignDefaultBoost() throws Exception {\n    \r\n    String field = \"t_pick_best_boosted_foo\";\n    Query q = QParser.getParser(\"leopard\", req(params(\"df\", field))).getQuery();\n    assertThat(q, booleanQuery(disjunctionOf(\n        termQuery(field, \"leopard\"),\n        boosted(phraseQuery(field, \"big cat\"), 0.8f),\n        boosted(phraseQuery(field, \"panthera pardus\"), 0.85f),\n        boosted(termQuery(field, \"bagheera\"), 0.9f)\n    )));\n\n    q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\", q.toString());\n  }\n","date":"2021-05-11 23:04:39","endLine":1561,"groupId":"103157","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSynonymsBoost_BoostMissing_shouldAssignDefaultBoost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/90327a57e30658e1119a22cdf83a82204f2b04.src","preCode":"  public void testSynonymsBoost_BoostMissing_shouldAssignDefaultBoost() throws Exception {\n    \r\n    Query q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_pick_best_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_pick_best_boosted_foo:\\\"big cat\\\")^0.8 | (t_pick_best_boosted_foo:bagheera)^0.9 | (t_pick_best_boosted_foo:\\\"panthera pardus\\\")^0.85 | t_pick_best_boosted_foo:leopard)\", q.toString());\n\n    q = QParser.getParser(\"leopard\", req(params(\"df\", \"t_as_distinct_boosted_foo\"))).getQuery();\n    assertEquals(\"((t_as_distinct_boosted_foo:\\\"big cat\\\")^0.8 (t_as_distinct_boosted_foo:bagheera)^0.9 (t_as_distinct_boosted_foo:\\\"panthera pardus\\\")^0.85 t_as_distinct_boosted_foo:leopard)\", q.toString());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1548,"status":"M"}],"commitId":"f5ad738a6d4c9f3e23b56e95d44120a0d345b4a5","commitMessage":"@@@SOLR-15389: Tests shouldn't rely on dismax clause order (#117)\n\nIntroduces QueryMatcher compatible with Hamcrest assertions.","date":"2021-05-11 23:04:39","modifiedFileCount":"3","status":"M","submitter":"Mike Drob"}]
