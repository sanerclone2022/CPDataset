[{"authorTime":"2015-12-09 21:21:56","codes":[{"authorDate":"2015-12-09 21:21:56","commitOrder":1,"curCode":"  public void testDomainValidate2() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.somedomain.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".somedomain.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".otherdomain.com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n    cookie.setDomain(\"www.otherdomain.com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","date":"2015-12-09 21:21:56","endLine":119,"groupId":"13073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDomainValidate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/dee6671d51231dada5620917779deb1d9d5297.src","preCode":"  public void testDomainValidate2() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.somedomain.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".somedomain.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".otherdomain.com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n    cookie.setDomain(\"www.otherdomain.com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2015-12-09 21:21:56","commitOrder":1,"curCode":"  public void testDomainValidate3() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.a.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".a.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","date":"2015-12-09 21:21:56","endLine":137,"groupId":"13073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDomainValidate3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/dee6671d51231dada5620917779deb1d9d5297.src","preCode":"  public void testDomainValidate3() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.a.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".a.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"0ac77568521523cda60e3e75d34e82bf149ada9f","commitMessage":"@@@SOLR-8373: KerberosPlugin: Using multiple nodes on same machine leads clients to\n  fetch TGT for every request\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718852 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-09 21:21:56","modifiedFileCount":"4","status":"B","submitter":"Noble Paul"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testDomainValidate2() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.somedomain.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".somedomain.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".otherdomain.com\");\n    SolrTestCaseJ4.expectThrows(MalformedCookieException.class, () ->  h.validate(cookie, origin));\n\n    cookie.setDomain(\"www.otherdomain.com\");\n    SolrTestCaseJ4.expectThrows(MalformedCookieException.class, () ->  h.validate(cookie, origin));\n  }\n","date":"2019-08-03 15:30:49","endLine":95,"groupId":"10480","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDomainValidate2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/c4643cefe6d4ef63c35abe4b5a6acca6ccc5ff.src","preCode":"  public void testDomainValidate2() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.somedomain.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".somedomain.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".otherdomain.com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n    cookie.setDomain(\"www.otherdomain.com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testDomainValidate3() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.a.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".a.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".com\");\n    SolrTestCaseJ4.expectThrows(MalformedCookieException.class, () ->  h.validate(cookie, origin));\n  }\n","date":"2019-08-03 15:30:49","endLine":108,"groupId":"10480","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDomainValidate3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/c4643cefe6d4ef63c35abe4b5a6acca6ccc5ff.src","preCode":"  public void testDomainValidate3() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"www.a.com\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\".a.com\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\".com\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
