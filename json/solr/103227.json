[{"authorTime":"2018-10-25 04:57:28","codes":[{"authorDate":"2018-10-25 04:57:28","commitOrder":1,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 1, (usually() ? 5 : 10));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","date":"2018-10-25 04:57:35","endLine":171,"groupId":"8568","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/129935adbc73eb249b4ed64e12ee00dd104f05.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 1, (usually() ? 5 : 10));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2018-10-25 04:57:28","commitOrder":1,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","date":"2018-10-25 04:57:35","endLine":148,"groupId":"8568","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/b912f7fd40882722377728e1121d96ab068196.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"71988c756b76a96cb96fc8f86183219a4a008389","commitMessage":"@@@SOLR-12793: Move TestCloudJSONFacetJoinDomain amd TestCloudJSONFacetSKG to the facet test package\n","date":"2018-10-25 04:57:35","modifiedFileCount":"1","status":"B","submitter":"Varun Thacker"},{"authorTime":"2018-10-25 04:57:28","codes":[{"authorDate":"2020-05-21 02:16:05","commitOrder":2,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (MULTI_STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (MULTI_INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (SOLO_STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (SOLO_INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 1, (usually() ? 5 : 10));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(multiStrField(fieldNum), fieldValue);\n          doc.addField(multiIntField(fieldNum), fieldValue);\n        }\n        { \r\n          final String fieldValue = randFieldValue(fieldNum);\n          doc.addField(soloStrField(fieldNum), fieldValue);\n          doc.addField(soloIntField(fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","date":"2020-05-21 02:16:05","endLine":191,"groupId":"8568","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/75/e961155460b62496b59c9e5832b9ec200b4f19.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 1, (usually() ? 5 : 10));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2018-10-25 04:57:28","commitOrder":2,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","date":"2018-10-25 04:57:35","endLine":148,"groupId":"8568","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/b912f7fd40882722377728e1121d96ab068196.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"}],"commitId":"28209cb8b1fe2a4d8050e4877c4df2ad5d85509b","commitMessage":"@@@SOLR-14492: Fix ArrayIndexOutOfBoundsException in json.facet 'terms' when FacetFieldProcessorByHashDV is used with aggregations over multivalued numeric fields\n\nSOLR-14477: Fix incorrect 'relatedness()' calculations in json.facet 'terms' when 'prefix' option is used\n","date":"2020-05-21 02:16:05","modifiedFileCount":"8","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":3,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (MULTI_STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (MULTI_INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (SOLO_STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (SOLO_INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 1, (usually() ? 5 : 10));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(multiStrField(fieldNum), fieldValue);\n          doc.addField(multiIntField(fieldNum), fieldValue);\n        }\n        { \r\n          final String fieldValue = randFieldValue(fieldNum);\n          doc.addField(soloStrField(fieldNum), fieldValue);\n          doc.addField(soloIntField(fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","date":"2021-01-18 23:59:41","endLine":193,"groupId":"103227","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/c3d5613bb8dddb9d0ee0b591836746edafbf05.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (MULTI_STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (MULTI_INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (SOLO_STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) &&\n               (SOLO_INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 1, (usually() ? 5 : 10));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(multiStrField(fieldNum), fieldValue);\n          doc.addField(multiIntField(fieldNum), fieldValue);\n        }\n        { \r\n          final String fieldValue = randFieldValue(fieldNum);\n          doc.addField(soloStrField(fieldNum), fieldValue);\n          doc.addField(soloIntField(fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-01-18 23:59:41","commitOrder":3,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","date":"2021-01-18 23:59:41","endLine":148,"groupId":"103227","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/dc54976cfc7f270a9dbc984f51b3f406f0cb48.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    assertTrue(\"bad test constants: some suffixes will never be tested\",\n               (STR_FIELD_SUFFIXES.length < MAX_FIELD_NUM) && (INT_FIELD_SUFFIXES.length < MAX_FIELD_NUM));\n    \n    \r\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) System.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n    \n    \r\n    final int repFactor = usually() ? 1 : 2;\n    \r\n    final int numShards = TestUtil.nextInt(random(), 1, (usually() ? 2 :3));\n    final int numNodes = (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new LinkedHashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema_latest.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    final int numDocs = atLeast(100);\n    for (int id = 0; id < numDocs; id++) {\n      SolrInputDocument doc = sdoc(\"id\", \"\"+id);\n      for (int fieldNum = 0; fieldNum < MAX_FIELD_NUM; fieldNum++) {\n        \r\n        final int numValsThisDoc = TestUtil.nextInt(random(), 0, (usually() ? 3 : 6));\n        for (int v = 0; v < numValsThisDoc; v++) {\n          final String fieldValue = randFieldValue(fieldNum);\n          \n          \r\n          doc.addField(field(STR_FIELD_SUFFIXES, fieldNum), fieldValue);\n          doc.addField(field(INT_FIELD_SUFFIXES, fieldNum), fieldValue);\n        }\n      }\n      CLOUD_CLIENT.add(doc);\n      if (random().nextInt(100) < 1) {\n        CLOUD_CLIENT.commit();  \r\n      }\n      if (random().nextInt(100) < 5) {\n        CLOUD_CLIENT.add(doc);  \r\n      }\n    }\n    CLOUD_CLIENT.commit();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
