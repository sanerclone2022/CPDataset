[{"authorTime":"2016-04-08 18:07:13","codes":[{"authorDate":"2016-04-08 18:07:13","commitOrder":3,"curCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","date":"2016-04-08 18:07:13","endLine":55,"groupId":"19427","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/992a4215cd77256227adf374d4612a0c0da629.src","preCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"MB"},{"authorDate":"2016-04-08 18:07:13","commitOrder":3,"curCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      client = new HttpSolrClient.Builder(host)\n          .build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","date":"2016-04-08 18:07:13","endLine":67,"groupId":"19424","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpSolrClient","params":"(Stringhost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/992a4215cd77256227adf374d4612a0c0da629.src","preCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      client = new HttpSolrClient.Builder(host)\n          .build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"9b65416e60d1183e0d145646c36e5eb9018603f8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-08 18:07:13","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-03-08 05:00:38","codes":[{"authorDate":"2017-03-08 05:00:38","commitOrder":4,"curCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder()\n          .withZkHost(zkHost);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","date":"2017-03-08 05:01:21","endLine":68,"groupId":"60540","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/2a1a89576d2c9b6bc12c123b0a2f6ae488a012.src","preCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      client = new CloudSolrClient.Builder()\n          .withZkHost(zkHost)\n          .build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2017-03-08 05:00:38","commitOrder":4,"curCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","date":"2017-03-08 05:01:21","endLine":83,"groupId":"25169","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpSolrClient","params":"(Stringhost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/2a1a89576d2c9b6bc12c123b0a2f6ae488a012.src","preCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      client = new HttpSolrClient.Builder(host)\n          .build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"4d7bc9477144937335e997ad630c4b89f558ddc5","commitMessage":"@@@SOLR-9858: Collect aggregated metrics from nodes and shard leaders in overseer.\n","date":"2017-03-08 05:01:21","modifiedFileCount":"26","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-03-08 05:00:38","codes":[{"authorDate":"2018-03-10 22:30:57","commitOrder":5,"curCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty());\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","date":"2018-03-10 23:45:43","endLine":72,"groupId":"60540","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a4/5c5de2a20fdd34065d59ada1fc1dc96b464ae5.src","preCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder()\n          .withZkHost(zkHost);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2017-03-08 05:00:38","commitOrder":5,"curCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","date":"2017-03-08 05:01:21","endLine":83,"groupId":"25169","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpSolrClient","params":"(Stringhost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/2a1a89576d2c9b6bc12c123b0a2f6ae488a012.src","preCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"971bd26df6ecfa9c266910a8008a2dad52d4443a","commitMessage":"@@@SOLR-11629: Add new CloudSolrClient.Builder ctors\n\nCloudSolrClient.Builder can be pointed at a Solr cluster in two ways: a\nZK connection string.  or one or more Solr base URLs.  One of these two\nvalues must be provided to create a working CloudSolrClient.\n\nSince these values are required.  this commit introduces two new ctors. \none for each means of CloudSolrClient setup.  It deprecates the existing\nno-arg CloudSolrClient ctor.\n\nTogether.  these changes make it clearer to our users that these options\nare required (and mutually exclusive).\n","date":"2018-03-10 23:45:43","modifiedFileCount":"24","status":"M","submitter":"Jason Gerlowski"},{"authorTime":"2017-03-08 05:00:38","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":6,"curCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","date":"2018-11-30 01:58:51","endLine":72,"groupId":"18816","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a8/13f30f27f1df724c769aaa5bd8372e830b976b.src","preCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty());\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2017-03-08 05:00:38","commitOrder":6,"curCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","date":"2017-03-08 05:01:21","endLine":83,"groupId":"25169","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpSolrClient","params":"(Stringhost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/2a1a89576d2c9b6bc12c123b0a2f6ae488a012.src","preCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2017-03-08 05:00:38","codes":[{"authorDate":"2020-12-08 00:03:03","commitOrder":7,"curCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    Objects.requireNonNull(zkHost, \"ZooKeeper host cannot be null!\");\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","date":"2020-12-08 00:03:03","endLine":74,"groupId":"18816","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/d9680fb890f7a72a9c859b23ebcf4e516903ed.src","preCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2017-03-08 05:00:38","commitOrder":7,"curCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","date":"2017-03-08 05:01:21","endLine":83,"groupId":"25169","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpSolrClient","params":"(Stringhost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/2a1a89576d2c9b6bc12c123b0a2f6ae488a012.src","preCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"30e5e38336de49433a7ecc60fb169c2426278565","commitMessage":"@@@SOLR-14987: Reuse HttpSolrClient per node vs. one per Solr core when using CloudSolrStream (#2067)\n\n","date":"2020-12-08 00:03:03","modifiedFileCount":"5","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-01-28 23:35:59","codes":[{"authorDate":"2021-01-28 23:35:59","commitOrder":8,"curCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n\n    \r\n    assert(conTimeout >= 60000);\n    assert(socketTimeout >= 60000);\n\n    if(log.isDebugEnabled()) {\n      log.debug(\"SolrClientCache.conTimeout: {}\", conTimeout);\n      log.debug(\"SolrClientCache.socketTimeout: {}\", socketTimeout);\n    }\n\n    Objects.requireNonNull(zkHost, \"ZooKeeper host cannot be null!\");\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(socketTimeout).withConnectionTimeout(conTimeout);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","date":"2021-01-28 23:36:49","endLine":91,"groupId":"10244","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"getCloudSolrClient","params":"(StringzkHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/be12437b99db99b5abb46d86b670551c5de022.src","preCode":"  public synchronized CloudSolrClient getCloudSolrClient(String zkHost) {\n    Objects.requireNonNull(zkHost, \"ZooKeeper host cannot be null!\");\n    CloudSolrClient client;\n    if (solrClients.containsKey(zkHost)) {\n      client = (CloudSolrClient) solrClients.get(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<String>();\n      hosts.add(zkHost);\n      CloudSolrClient.Builder builder = new CloudSolrClient.Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      client.connect();\n      solrClients.put(zkHost, client);\n    }\n\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-01-28 23:35:59","commitOrder":8,"curCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host).withSocketTimeout(socketTimeout).withConnectionTimeout(conTimeout);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","date":"2021-01-28 23:36:49","endLine":106,"groupId":"10244","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"getHttpSolrClient","params":"(Stringhost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/be12437b99db99b5abb46d86b670551c5de022.src","preCode":"  public synchronized HttpSolrClient getHttpSolrClient(String host) {\n    HttpSolrClient client;\n    if (solrClients.containsKey(host)) {\n      client = (HttpSolrClient) solrClients.get(host);\n    } else {\n      HttpSolrClient.Builder builder = new HttpSolrClient.Builder(host);\n      if (httpClient != null) {\n        builder = builder.withHttpClient(httpClient);\n      }\n      client = builder.build();\n      solrClients.put(host, client);\n    }\n    return client;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrClientCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"acb98e549dd5027152d153171f7f2cf8975d6105","commitMessage":"@@@SOLR-14672: Make timeouts configurable for the Streaming Expression SolrClientCache\n","date":"2021-01-28 23:36:49","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"}]
