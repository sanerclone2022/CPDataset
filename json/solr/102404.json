[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2013-03-25 12:29:33","commitOrder":2,"curCode":"  public void writeArray(String name, Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","date":"2013-03-25 12:29:33","endLine":388,"groupId":"40706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeArray","params":"(Stringname@Iteratoriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/e7ff5a629722f04608ae27f7d7fc06dc817dc7.src","preCode":"  public void writeArray(String name, Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  public void writeArray(String name, Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","date":"2011-07-10 07:01:53","endLine":282,"groupId":"40706","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeArray","params":"(Stringname@Iteratoriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/c74a947c7030139b6162d8b9c2425f5f669269.src","preCode":"  public void writeArray(String name, Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/XMLWriter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"NB"}],"commitId":"5c7ca6aa4841a92cb6220d445edacd46c8ec1713","commitMessage":"@@@SOLR-4623: Provide REST API read access to all elements of the live schema.  Add a REST API request to return the entire live schema.  in JSON.  XML.  and schema.xml formats.  Move REST API methods from package org.apache.solr.rest to org.apache.solr.rest.schema.  and rename base functionality REST API classes to remove the current schema focus.  to prepare for other non-schema REST APIs.  Change output path for copyFields and dynamicFields from \"copyfields\" and \"dynamicfields\" (all lowercase) to \"copyFields\" and \"dynamicFields\".  respectively.  to align with all other schema REST API outputs.  which use camelCase.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1460519 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-25 12:29:33","modifiedFileCount":"5","status":"M","submitter":"Steven Rowe"},{"authorTime":"2020-06-12 06:01:03","codes":[{"authorDate":"2020-06-12 06:01:03","commitOrder":3,"curCode":"  public void writeArray(String name, @SuppressWarnings({\"rawtypes\"})Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","date":"2020-06-12 06:01:29","endLine":389,"groupId":"40706","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeArray","params":"(Stringname@@SuppressWarnings({\"rawtypes\"})Iteratoriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/a30fb11386b8e098b5682f5ad2145bfe4c8b54.src","preCode":"  public void writeArray(String name, Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2020-06-12 06:01:03","commitOrder":3,"curCode":"  public void writeArray(String name, @SuppressWarnings({\"rawtypes\"})Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","date":"2020-06-12 06:01:29","endLine":319,"groupId":"40706","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeArray","params":"(Stringname@@SuppressWarnings({\"rawtypes\"})Iteratoriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/be459df3f375ffc44579a9f23019c67d2eed30.src","preCode":"  public void writeArray(String name, Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/XMLWriter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"ff391448d1648c4027133c58248bf7f1aabe5d96","commitMessage":"@@@SOLR-14559: Fix or suppress warnings in solr/core/src/java/org/apache/solr/util.  response.  cloud.  security.  schema.  api\n","date":"2020-06-12 06:01:29","modifiedFileCount":"90","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public void writeArray(String name, Iterator<?> iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":387,"groupId":"102404","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"writeArray","params":"(Stringname@Iterator<?>iter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/b424d9cbcae819c47aa152b6c8bb607e1d406d.src","preCode":"  public void writeArray(String name, @SuppressWarnings({\"rawtypes\"})Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public void writeArray(String name, Iterator<?> iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":321,"groupId":"102404","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"writeArray","params":"(Stringname@Iterator<?>iter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/2cb8c5ec7f4656844ba9ed26e4346f09cdf910.src","preCode":"  public void writeArray(String name, @SuppressWarnings({\"rawtypes\"})Iterator iter) throws IOException {\n    if( iter.hasNext() ) {\n      startTag(\"arr\", name, false );\n      incLevel();\n      while( iter.hasNext() ) {\n        writeVal(null, iter.next());\n      }\n      decLevel();\n      if (doIndent) indent();\n      writer.write(\"</arr>\");\n    }\n    else {\n      startTag(\"arr\", name, true );\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/response/XMLWriter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
