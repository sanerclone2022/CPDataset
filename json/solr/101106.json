[{"authorTime":"2015-06-21 00:24:08","codes":[{"authorDate":"2015-06-21 00:24:08","commitOrder":1,"curCode":"  private static SchemaRequest.AddFieldType createFieldTypeRequest(String fieldTypeName) {\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    AnalyzerDefinition indexAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> iTokenizerAttributes = new LinkedHashMap<>();\n    iTokenizerAttributes.put(\"class\", \"solr.PathHierarchyTokenizerFactory\");\n    iTokenizerAttributes.put(\"delimiter\", \"/\");\n    indexAnalyzerDefinition.setTokenizer(iTokenizerAttributes);\n    fieldTypeDefinition.setIndexAnalyzer(indexAnalyzerDefinition);\n    AnalyzerDefinition queryAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> qTokenizerAttributes = new LinkedHashMap<>();\n    qTokenizerAttributes.put(\"class\", \"solr.KeywordTokenizerFactory\");\n    queryAnalyzerDefinition.setTokenizer(qTokenizerAttributes);\n    fieldTypeDefinition.setQueryAnalyzer(queryAnalyzerDefinition);\n    return new SchemaRequest.AddFieldType(fieldTypeDefinition);\n  }\n","date":"2015-06-21 00:24:08","endLine":89,"groupId":"3478","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createFieldTypeRequest","params":"(StringfieldTypeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  private static SchemaRequest.AddFieldType createFieldTypeRequest(String fieldTypeName) {\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    AnalyzerDefinition indexAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> iTokenizerAttributes = new LinkedHashMap<>();\n    iTokenizerAttributes.put(\"class\", \"solr.PathHierarchyTokenizerFactory\");\n    iTokenizerAttributes.put(\"delimiter\", \"/\");\n    indexAnalyzerDefinition.setTokenizer(iTokenizerAttributes);\n    fieldTypeDefinition.setIndexAnalyzer(indexAnalyzerDefinition);\n    AnalyzerDefinition queryAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> qTokenizerAttributes = new LinkedHashMap<>();\n    qTokenizerAttributes.put(\"class\", \"solr.KeywordTokenizerFactory\");\n    queryAnalyzerDefinition.setTokenizer(qTokenizerAttributes);\n    fieldTypeDefinition.setQueryAnalyzer(queryAnalyzerDefinition);\n    return new SchemaRequest.AddFieldType(fieldTypeDefinition);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2015-06-21 00:24:08","commitOrder":1,"curCode":"  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n    assertTrue(newFieldTypeRepresentation.getFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getFields().contains(fieldName));\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().contains(dynamicFieldName));\n  }\n","date":"2015-06-21 00:24:08","endLine":583,"groupId":"24700","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddFieldTypeAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n    assertTrue(newFieldTypeRepresentation.getFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getFields().contains(fieldName));\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().contains(dynamicFieldName));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":514,"status":"B"}],"commitId":"fdeffbb536dc91712ad8572b386c8c9c1b2b7c8d","commitMessage":"@@@SOLR-7182: Make the Schema-API a first class citizen of SolrJ\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686650 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-21 00:24:08","modifiedFileCount":"0","status":"B","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2016-03-08 01:14:36","codes":[{"authorDate":"2015-06-21 00:24:08","commitOrder":2,"curCode":"  private static SchemaRequest.AddFieldType createFieldTypeRequest(String fieldTypeName) {\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    AnalyzerDefinition indexAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> iTokenizerAttributes = new LinkedHashMap<>();\n    iTokenizerAttributes.put(\"class\", \"solr.PathHierarchyTokenizerFactory\");\n    iTokenizerAttributes.put(\"delimiter\", \"/\");\n    indexAnalyzerDefinition.setTokenizer(iTokenizerAttributes);\n    fieldTypeDefinition.setIndexAnalyzer(indexAnalyzerDefinition);\n    AnalyzerDefinition queryAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> qTokenizerAttributes = new LinkedHashMap<>();\n    qTokenizerAttributes.put(\"class\", \"solr.KeywordTokenizerFactory\");\n    queryAnalyzerDefinition.setTokenizer(qTokenizerAttributes);\n    fieldTypeDefinition.setQueryAnalyzer(queryAnalyzerDefinition);\n    return new SchemaRequest.AddFieldType(fieldTypeDefinition);\n  }\n","date":"2015-06-21 00:24:08","endLine":89,"groupId":"3478","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createFieldTypeRequest","params":"(StringfieldTypeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  private static SchemaRequest.AddFieldType createFieldTypeRequest(String fieldTypeName) {\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    AnalyzerDefinition indexAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> iTokenizerAttributes = new LinkedHashMap<>();\n    iTokenizerAttributes.put(\"class\", \"solr.PathHierarchyTokenizerFactory\");\n    iTokenizerAttributes.put(\"delimiter\", \"/\");\n    indexAnalyzerDefinition.setTokenizer(iTokenizerAttributes);\n    fieldTypeDefinition.setIndexAnalyzer(indexAnalyzerDefinition);\n    AnalyzerDefinition queryAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> qTokenizerAttributes = new LinkedHashMap<>();\n    qTokenizerAttributes.put(\"class\", \"solr.KeywordTokenizerFactory\");\n    queryAnalyzerDefinition.setTokenizer(qTokenizerAttributes);\n    fieldTypeDefinition.setQueryAnalyzer(queryAnalyzerDefinition);\n    return new SchemaRequest.AddFieldType(fieldTypeDefinition);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2016-03-08 01:14:36","commitOrder":2,"curCode":"  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n","date":"2016-03-08 01:14:36","endLine":578,"groupId":"24700","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddFieldTypeAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/051b123aadb2df57f4bf19abfedb0ac0deb6cd.src","preCode":"  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n    assertTrue(newFieldTypeRepresentation.getFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getFields().contains(fieldName));\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().size() == 1);\n    assertTrue(newFieldTypeRepresentation.getDynamicFields().contains(dynamicFieldName));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"M"}],"commitId":"f2c281abcbfc254d44c196ceb7c7f61311e7967c","commitMessage":"@@@SOLR-8736: schema GET operations on fields.  dynamicFields.  fieldTypes.  copyField are\n  reimplemented as a part of the bulk API with less details. The tests and write implementations are removed\n","date":"2016-03-08 01:14:36","modifiedFileCount":"17","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-03-28 11:53:55","codes":[{"authorDate":"2015-06-21 00:24:08","commitOrder":3,"curCode":"  private static SchemaRequest.AddFieldType createFieldTypeRequest(String fieldTypeName) {\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    AnalyzerDefinition indexAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> iTokenizerAttributes = new LinkedHashMap<>();\n    iTokenizerAttributes.put(\"class\", \"solr.PathHierarchyTokenizerFactory\");\n    iTokenizerAttributes.put(\"delimiter\", \"/\");\n    indexAnalyzerDefinition.setTokenizer(iTokenizerAttributes);\n    fieldTypeDefinition.setIndexAnalyzer(indexAnalyzerDefinition);\n    AnalyzerDefinition queryAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> qTokenizerAttributes = new LinkedHashMap<>();\n    qTokenizerAttributes.put(\"class\", \"solr.KeywordTokenizerFactory\");\n    queryAnalyzerDefinition.setTokenizer(qTokenizerAttributes);\n    fieldTypeDefinition.setQueryAnalyzer(queryAnalyzerDefinition);\n    return new SchemaRequest.AddFieldType(fieldTypeDefinition);\n  }\n","date":"2015-06-21 00:24:08","endLine":89,"groupId":"101106","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createFieldTypeRequest","params":"(StringfieldTypeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/a061104d9ed0da0132e9d9ab82a76985f889fd.src","preCode":"  private static SchemaRequest.AddFieldType createFieldTypeRequest(String fieldTypeName) {\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    AnalyzerDefinition indexAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> iTokenizerAttributes = new LinkedHashMap<>();\n    iTokenizerAttributes.put(\"class\", \"solr.PathHierarchyTokenizerFactory\");\n    iTokenizerAttributes.put(\"delimiter\", \"/\");\n    indexAnalyzerDefinition.setTokenizer(iTokenizerAttributes);\n    fieldTypeDefinition.setIndexAnalyzer(indexAnalyzerDefinition);\n    AnalyzerDefinition queryAnalyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> qTokenizerAttributes = new LinkedHashMap<>();\n    qTokenizerAttributes.put(\"class\", \"solr.KeywordTokenizerFactory\");\n    queryAnalyzerDefinition.setTokenizer(qTokenizerAttributes);\n    fieldTypeDefinition.setQueryAnalyzer(queryAnalyzerDefinition);\n    return new SchemaRequest.AddFieldType(fieldTypeDefinition);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2017-03-28 11:53:55","commitOrder":3,"curCode":"  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterGraphFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n","date":"2017-03-28 11:53:55","endLine":573,"groupId":"101106","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddFieldTypeAccuracy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/bcff1c8d310e38741eb343d3a0662ef3e52e97.src","preCode":"  public void testAddFieldTypeAccuracy() throws Exception {\n    SchemaRequest.FieldTypes fieldTypesRequest = new SchemaRequest.FieldTypes();\n    SchemaResponse.FieldTypesResponse initialFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialFieldTypesResponse);\n    List<FieldTypeRepresentation> initialFieldTypes = initialFieldTypesResponse.getFieldTypes();\n\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldTypeName = \"accuracyTextField\";\n    fieldTypeAttributes.put(\"name\", fieldTypeName);\n    fieldTypeAttributes.put(\"class\", \"solr.TextField\");\n    fieldTypeAttributes.put(\"positionIncrementGap\", \"100\");\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n\n    AnalyzerDefinition analyzerDefinition = new AnalyzerDefinition();\n    Map<String, Object> charFilterAttributes = new LinkedHashMap<>();\n    charFilterAttributes.put(\"class\", \"solr.PatternReplaceCharFilterFactory\");\n    charFilterAttributes.put(\"replacement\", \"$1$1\");\n    charFilterAttributes.put(\"pattern\", \"([a-zA-Z])\\\\\\\\1+\");\n    analyzerDefinition.setCharFilters(Collections.singletonList(charFilterAttributes));\n    Map<String, Object> tokenizerAttributes = new LinkedHashMap<>();\n    tokenizerAttributes.put(\"class\", \"solr.WhitespaceTokenizerFactory\");\n    analyzerDefinition.setTokenizer(tokenizerAttributes);\n    Map<String, Object> filterAttributes = new LinkedHashMap<>();\n    filterAttributes.put(\"class\", \"solr.WordDelimiterFilterFactory\");\n    filterAttributes.put(\"preserveOriginal\", \"0\");\n    analyzerDefinition.setFilters(Collections.singletonList(filterAttributes));\n    fieldTypeDefinition.setAnalyzer(analyzerDefinition);\n\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeResponse);\n\n    SchemaResponse.FieldTypesResponse currentFieldTypesResponse = fieldTypesRequest.process(getSolrClient());\n    assertEquals(0, currentFieldTypesResponse.getStatus());\n    List<FieldTypeRepresentation> currentFieldTypes = currentFieldTypesResponse.getFieldTypes();\n    assertEquals(initialFieldTypes.size() + 1, currentFieldTypes.size());\n\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    String fieldName = \"accuracyField\";\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddField addFieldRequest =\n        new SchemaRequest.AddField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    Map<String, Object> dynamicFieldAttributes = new LinkedHashMap<>();\n    String dynamicFieldName = \"*_accuracy\";\n    dynamicFieldAttributes.put(\"name\", dynamicFieldName);\n    dynamicFieldAttributes.put(\"type\", fieldTypeName);\n    SchemaRequest.AddDynamicField addDynamicFieldRequest =\n        new SchemaRequest.AddDynamicField(dynamicFieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addDynamicFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.FieldType fieldTypeRequest = new SchemaRequest.FieldType(fieldTypeName);\n    SchemaResponse.FieldTypeResponse newFieldTypeResponse = fieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldTypeResponse);\n    FieldTypeRepresentation newFieldTypeRepresentation = newFieldTypeResponse.getFieldType();\n    assertThat(fieldTypeName, is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"name\"))));\n    assertThat(\"solr.TextField\", is(equalTo(newFieldTypeRepresentation.getAttributes().get(\"class\"))));\n    assertThat(analyzerDefinition.getTokenizer().get(\"class\"),\n        is(equalTo(newFieldTypeRepresentation.getAnalyzer().getTokenizer().get(\"class\"))));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"b46b8278c60102eeaeb45dddf239356746da7de8","commitMessage":"@@@SOLR-10344: Update Solr default/example and test configs to use WordDelimiterGraphFilterFactory\n","date":"2017-03-28 11:53:55","modifiedFileCount":"4","status":"M","submitter":"Steve Rowe"}]
