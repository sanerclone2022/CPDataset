[{"authorTime":"2015-03-05 03:45:09","codes":[{"authorDate":"2015-03-05 03:45:09","commitOrder":1,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2015-03-05 03:45:09","endLine":246,"groupId":"24337","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/da5ef61f3e0d0bee25d15bdc637d50cd6dfe9a.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"},{"authorDate":"2015-03-05 03:45:09","commitOrder":1,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2015-03-05 03:45:09","endLine":1518,"groupId":"59202","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/da5ef61f3e0d0bee25d15bdc637d50cd6dfe9a.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1505,"status":"B"}],"commitId":"de381d2816f6a8baceaf09fe16bc0d225bf30164","commitMessage":"@@@SOLR-6804: Untangle SnapPuller and ReplicationHandler\n\nThis closes #110\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1664126 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-05 03:45:09","modifiedFileCount":"6","status":"B","submitter":"Ramkumar Aiyengar"},{"authorTime":"2015-03-05 03:45:09","codes":[{"authorDate":"2015-04-02 12:08:05","commitOrder":2,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2015-04-02 12:08:05","endLine":247,"groupId":"24337","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/5ba929ec31e85fa825eca5c5b20f7fe05aa89d.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2015-03-05 03:45:09","commitOrder":2,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2015-03-05 03:45:09","endLine":1518,"groupId":"59202","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/da5ef61f3e0d0bee25d15bdc637d50cd6dfe9a.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1505,"status":"N"}],"commitId":"9baabd177c8a63873ac4f3dbead4edae87a8bd25","commitMessage":"@@@SOLR-6615: Refactor code to use String constants\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1670813 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-02 12:08:05","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-03-05 03:45:09","codes":[{"authorDate":"2015-05-23 02:58:29","commitOrder":3,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2015-05-23 02:58:29","endLine":258,"groupId":"24337","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/603da173d6ed87da5262ffaec2110a9d31043f.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2015-03-05 03:45:09","commitOrder":3,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2015-03-05 03:45:09","endLine":1518,"groupId":"59202","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/da5ef61f3e0d0bee25d15bdc637d50cd6dfe9a.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1505,"status":"N"}],"commitId":"375899fdbd3512fc33c5c872c88c244cdf3f7541","commitMessage":"@@@SOLR-6273: Cross Data Center Replication\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1681186 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-23 02:58:29","modifiedFileCount":"9","status":"M","submitter":"Erick Erickson"},{"authorTime":"2016-04-02 00:21:59","codes":[{"authorDate":"2016-04-02 00:21:59","commitOrder":4,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-04-02 00:21:59","endLine":280,"groupId":"14089","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/38acd2dd2d7f3308fff711b31964f9fb439675.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2016-04-02 00:21:59","commitOrder":4,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2016-04-02 00:21:59","endLine":1737,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/38acd2dd2d7f3308fff711b31964f9fb439675.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1724,"status":"M"}],"commitId":"ce172acb8fec6c3bbb18837a4d640da6c5aad649","commitMessage":"@@@SOLR-4509: Move to non deprecated HttpClient impl classes to remove stale connection check on every request and move connection lifecycle management towards the client.\n","date":"2016-04-02 00:21:59","modifiedFileCount":"67","status":"M","submitter":"markrmiller"},{"authorTime":"2016-04-08 18:07:13","codes":[{"authorDate":"2016-04-08 18:07:13","commitOrder":5,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":281,"groupId":"14089","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/71/a2a8426dbf08fa13335e9565e982ff0579bc2f.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2016-04-08 18:07:13","commitOrder":5,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":1741,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/71/a2a8426dbf08fa13335e9565e982ff0579bc2f.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1728,"status":"M"}],"commitId":"9b65416e60d1183e0d145646c36e5eb9018603f8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-08 18:07:13","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-04-27 20:09:28","codes":[{"authorDate":"2016-04-27 20:09:28","commitOrder":6,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-04-27 20:09:28","endLine":281,"groupId":"14089","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/df132d17688f97270ec939adcdc7a42a1b19a1.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2016-04-27 20:09:28","commitOrder":6,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2016-04-27 20:09:28","endLine":1741,"groupId":"30589","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/df132d17688f97270ec939adcdc7a42a1b19a1.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, \"/replication\");\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1728,"status":"M"}],"commitId":"3b4ec73595adba4d1a4859a35be61f60e6a6be31","commitMessage":"@@@SOLR-9037: replace multiple \"/replication\" strings with one static constant\n","date":"2016-04-27 20:09:28","modifiedFileCount":"11","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-07-04 12:44:18","codes":[{"authorDate":"2017-07-04 12:44:18","commitOrder":7,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":329,"groupId":"63143","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/f452fce4f189435e639ccc0fd092b630b8c7ff.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2017-07-04 12:44:18","commitOrder":7,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":1815,"groupId":"12145","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/f452fce4f189435e639ccc0fd092b630b8c7ff.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"M"}],"commitId":"6c163658bbca15b1e4ff81d16b25e07df78468e8","commitMessage":"@@@SOLR-10456: Deprecate timeout related setters from SolrClients.  and replace with Builder based implementation\n","date":"2017-07-04 12:44:18","modifiedFileCount":"48","status":"M","submitter":"Anshum Gupta"},{"authorTime":"2017-07-04 12:44:18","codes":[{"authorDate":"2017-10-26 05:29:37","commitOrder":8,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2017-10-26 05:30:04","endLine":342,"groupId":"63143","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/37bdccca7572a154b892219ef53763689bf29f.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"},{"authorDate":"2017-07-04 12:44:18","commitOrder":8,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":1815,"groupId":"12145","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/f452fce4f189435e639ccc0fd092b630b8c7ff.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"N"}],"commitId":"cb20bbdd1fb6bde7edf00d397dc6a8dc200d40eb","commitMessage":"@@@SOLR-11326: A bootstrap of a target cluster does not need to download the tlog files from the source cluster\n","date":"2017-10-26 05:30:04","modifiedFileCount":"4","status":"M","submitter":"Varun Thacker"},{"authorTime":"2017-07-04 12:44:18","codes":[{"authorDate":"2018-08-23 06:26:37","commitOrder":9,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-08-23 06:26:37","endLine":344,"groupId":"63143","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a3/4ad7a5e23bcb456ee601e56ddf63ea4acbbfea.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2017-07-04 12:44:18","commitOrder":9,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":1815,"groupId":"12145","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/f452fce4f189435e639ccc0fd092b630b8c7ff.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"N"}],"commitId":"8cde1277ec7151bd6ab62950ac93cbdd6ff04d9f","commitMessage":"@@@SOLR-12690: Regularize LoggerFactory declarations\n","date":"2018-08-23 06:26:37","modifiedFileCount":"93","status":"M","submitter":"Erick Erickson"},{"authorTime":"2017-07-04 12:44:18","codes":[{"authorDate":"2020-04-29 22:56:54","commitOrder":10,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-04-29 22:56:54","endLine":348,"groupId":"63143","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/6b0e9c2caa114316022c84d1f0a2d8574de30e.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2017-07-04 12:44:18","commitOrder":10,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":1815,"groupId":"12145","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/f452fce4f189435e639ccc0fd092b630b8c7ff.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"N"}],"commitId":"6e96d01efc579b4df40fb02e6158b05ee2aeff7f","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-29 22:56:54","modifiedFileCount":"58","status":"M","submitter":"Erick Erickson"},{"authorTime":"2017-07-04 12:44:18","codes":[{"authorDate":"2020-06-06 03:22:44","commitOrder":11,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-06-06 03:22:44","endLine":351,"groupId":"63143","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/46/c009cfb780a0f9290957a5d77a37e060bd6abe.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2017-07-04 12:44:18","commitOrder":11,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2017-07-04 12:44:18","endLine":1815,"groupId":"12145","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/f452fce4f189435e639ccc0fd092b630b8c7ff.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"N"}],"commitId":"ae3de57b33dec2c78ae34e601c2c1c0bc7717825","commitMessage":"@@@SOLR-14538: Fix or suppress remaining warnings in apache/solr/handler\n","date":"2020-06-06 03:22:44","modifiedFileCount":"28","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-08-06 05:52:48","codes":[{"authorDate":"2020-08-06 05:52:48","commitOrder":12,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-08-06 05:52:48","endLine":351,"groupId":"63143","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/f8ba08554de3e2b3de146bde981c99113e84b1.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2020-08-06 05:52:48","commitOrder":12,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"follower\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2020-08-06 05:52:48","endLine":1994,"groupId":"12145","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/f8ba08554de3e2b3de146bde981c99113e84b1.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"slave\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1979,"status":"M"}],"commitId":"7110118ad4f1a68f39a1db1caab374594098243e","commitMessage":"@@@SOLR-14702: Remove oppressive language (part1) (#1711)\n\nReplace references to \"master\" and \"slave\" with \"leader\" and \"follower\"","date":"2020-08-06 05:52:48","modifiedFileCount":"28","status":"M","submitter":"Marcus"},{"authorTime":"2020-08-06 05:52:48","codes":[{"authorDate":"2020-08-29 04:43:13","commitOrder":13,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-08-29 04:43:13","endLine":334,"groupId":"63143","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/d20454dbeec4f05d2c50cbfdf52206aad41b79.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2020-08-06 05:52:48","commitOrder":13,"curCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"follower\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2020-08-06 05:52:48","endLine":1994,"groupId":"12145","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/f8ba08554de3e2b3de146bde981c99113e84b1.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"follower\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1979,"status":"N"}],"commitId":"d84977eb5cde00f0e92f71837bdf9cee25e0b54a","commitMessage":"@@@SOLR-14616: Remove CDCR\n","date":"2020-08-29 04:43:13","modifiedFileCount":"12","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2021-06-09 02:08:25","codes":[{"authorDate":"2021-06-09 02:08:25","commitOrder":14,"curCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList<?> response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2021-06-09 02:08:25","endLine":356,"groupId":"102336","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchFileList","params":"(longgen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/89f7d42be6c4c3a8a3bfada74d4b8462931037.src","preCode":"  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"},{"authorDate":"2021-06-09 02:08:25","commitOrder":14,"curCode":"  NamedList<Object> getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"follower\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","date":"2021-06-09 02:08:25","endLine":1892,"groupId":"102336","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"getDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/89f7d42be6c4c3a8a3bfada74d4b8462931037.src","preCode":"  NamedList getDetails() throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_DETAILS);\n    params.set(\"follower\", false);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n\n    \r\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      QueryRequest request = new QueryRequest(params);\n      return client.request(request);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1877,"status":"M"}],"commitId":"916b7a04f65490179a73e2c1620bab1df65e4bb8","commitMessage":"@@@SOLR-15385 RawTypes Part II.  Searching for NamedList (#165)\n\nMost updates relate to NamedListInitializationPlugin init method.  and RequestHandler.\n\nLink to JIRA issues for some extant bugs.\n\nCo-authored-by: David Smiley <dsmiley@apache.org>","date":"2021-06-09 02:08:25","modifiedFileCount":"221","status":"M","submitter":"Mike Drob"}]
