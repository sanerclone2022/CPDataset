[{"authorTime":"2015-05-15 00:25:52","codes":[{"authorDate":"2015-05-15 00:25:52","commitOrder":1,"curCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","date":"2015-05-15 00:25:52","endLine":234,"groupId":"35831","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeReplicaFirstWatcher","params":"(StringcollectionName@Sliceslice@Replicareplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/096e1ae57b061fce417a35ae609e8900b47887.src","preCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"},{"authorDate":"2015-05-15 00:25:52","commitOrder":1,"curCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","date":"2015-05-15 00:25:52","endLine":252,"groupId":"57332","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForNodeChange","params":"(StringcollectionName@Sliceslice@StringelectionNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/096e1ae57b061fce417a35ae609e8900b47887.src","preCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"fba21341575de740ad515ee9709091883776be0a","commitMessage":"@@@SOLR-7544: CollectionsHandler refactored to be more modular\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1679397 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-15 00:25:52","modifiedFileCount":"2","status":"B","submitter":"Noble Paul"},{"authorTime":"2015-08-06 14:07:32","codes":[{"authorDate":"2015-08-06 14:07:32","commitOrder":2,"curCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","date":"2015-08-06 14:07:32","endLine":234,"groupId":"35831","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeReplicaFirstWatcher","params":"(StringcollectionName@Sliceslice@Replicareplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/45fac434e18b2edb6e6bd5f821a1731cfa7677.src","preCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2015-08-06 14:07:32","commitOrder":2,"curCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","date":"2015-08-06 14:07:32","endLine":252,"groupId":"57332","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForNodeChange","params":"(StringcollectionName@Sliceslice@StringelectionNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/45fac434e18b2edb6e6bd5f821a1731cfa7677.src","preCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerCollectionProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"589a27eb27a7adec013232e4004f8a7d72ba3093","commitMessage":"@@@SOLR-7855: OverseerCollectionProcessor: separate general task management from collection message handling\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1694406 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-06 14:07:32","modifiedFileCount":"26","status":"M","submitter":"Gregory Chanan"},{"authorTime":"2015-08-27 10:18:36","codes":[{"authorDate":"2015-08-27 10:18:36","commitOrder":3,"curCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","date":"2015-08-27 10:18:36","endLine":234,"groupId":"35831","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"makeReplicaFirstWatcher","params":"(StringcollectionName@Sliceslice@Replicareplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/bce61911d0aa1e74de53779fd1cdbc2ca05f21.src","preCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2015-08-27 10:18:36","commitOrder":3,"curCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","date":"2015-08-27 10:18:36","endLine":252,"groupId":"57332","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForNodeChange","params":"(StringcollectionName@Sliceslice@StringelectionNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/bce61911d0aa1e74de53779fd1cdbc2ca05f21.src","preCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"679dd8f7902d0c607cc020d17b40b93b950c2939","commitMessage":"@@@SOLR-7789: Introduce a ConfigSet management API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1698043 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-27 10:18:36","modifiedFileCount":"25","status":"M","submitter":"Gregory Chanan"},{"authorTime":"2015-08-27 10:18:36","codes":[{"authorDate":"2015-09-02 00:13:38","commitOrder":4,"curCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    \r\n    electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","date":"2015-09-02 00:13:38","endLine":234,"groupId":"55097","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"makeReplicaFirstWatcher","params":"(StringcollectionName@Sliceslice@Replicareplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/817d432ffc1670b4765585e1a2c6a31592693d.src","preCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    List<String> electionNodesTmp = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n\n    \r\n    electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2015-08-27 10:18:36","commitOrder":4,"curCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","date":"2015-08-27 10:18:36","endLine":252,"groupId":"57332","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForNodeChange","params":"(StringcollectionName@Sliceslice@StringelectionNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/bce61911d0aa1e74de53779fd1cdbc2ca05f21.src","preCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"N"}],"commitId":"442963d020a1b543175d0a0180b347cc97465625","commitMessage":"@@@SOLR-7844: Zookeeper session expiry during shard leader election can cause multiple leaders.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1700603 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-02 00:13:38","modifiedFileCount":"10","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2019-01-20 11:20:39","codes":[{"authorDate":"2019-01-20 11:20:39","commitOrder":5,"curCode":"  void makeReplicaFirstWatcher(Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int secondSeq = Integer.MAX_VALUE;\n\n    int candidateSeq = -1;\n    for (int idx = 1; idx < electionNodes.size(); ++idx) {\n      String candidate = electionNodes.get(idx);\n      secondSeq = Math.min(secondSeq, LeaderElector.getSeq(candidate));\n      if (LeaderElector.getNodeName(candidate).equals(replica.getName())) {\n        candidateSeq = LeaderElector.getSeq(candidate);\n      }\n    }\n    int newSeq = -1;\n    if (candidateSeq == secondSeq) {\n      \r\n      newSeq = secondSeq;\n    } else {\n      for (String electionNode : electionNodes) {\n        if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n          \r\n          String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n          rejoinElectionQueue(slice, electionNode, coreName, true);\n          newSeq = waitForNodeChange(slice, electionNode);\n          break;\n        }\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    \r\n    electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      \r\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElectionQueue(slice, thisNode, coreName, false);\n        waitForNodeChange(slice, thisNode);\n      }\n    }\n  }\n","date":"2019-01-20 11:20:39","endLine":374,"groupId":"102361","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"makeReplicaFirstWatcher","params":"(Sliceslice@Replicareplica)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2a432fe05609cdb2bfdf0d562d7afd5a4fdb3f.src","preCode":"  void makeReplicaFirstWatcher(String collectionName, Slice slice, Replica replica)\n      throws KeeperException, InterruptedException {\n\n    ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n    List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    \r\n    int newSeq = -1;\n    for (String electionNode : electionNodes) {\n      if (LeaderElector.getNodeName(electionNode).equals(replica.getName())) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(electionNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, electionNode, coreName, true);\n        newSeq = waitForNodeChange(collectionName, slice, electionNode);\n        break;\n      }\n    }\n    if (newSeq == -1) {\n      return; \r\n    }\n\n    \r\n    electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n        ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n\n    for (String thisNode : electionNodes) {\n      if (LeaderElector.getSeq(thisNode) > newSeq) {\n        break;\n      }\n      if (LeaderElector.getNodeName(thisNode).equals(replica.getName())) {\n        continue;\n      }\n      if (LeaderElector.getSeq(thisNode) == newSeq) {\n        String coreName = slice.getReplica(LeaderElector.getNodeName(thisNode)).getStr(CORE_NAME_PROP);\n        rejoinElection(collectionName, slice, thisNode, coreName, false);\n        waitForNodeChange(collectionName, slice, thisNode);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2019-01-20 11:20:39","commitOrder":5,"curCode":"  int waitForNodeChange(Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n      zkStateReader.forciblyRefreshAllClusterStateSlow();\n    }\n    return -1;\n  }\n","date":"2019-01-20 11:20:39","endLine":395,"groupId":"102361","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForNodeChange","params":"(Sliceslice@StringelectionNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2a432fe05609cdb2bfdf0d562d7afd5a4fdb3f.src","preCode":"  int waitForNodeChange(String collectionName, Slice slice, String electionNode) throws InterruptedException, KeeperException {\n    String nodeName = LeaderElector.getNodeName(electionNode);\n    int oldSeq = LeaderElector.getSeq(electionNode);\n    for (int idx = 0; idx < 600; ++idx) {\n      ZkStateReader zkStateReader = coreContainer.getZkController().getZkStateReader();\n      List<String> electionNodes = OverseerTaskProcessor.getSortedElectionNodes(zkStateReader.getZkClient(),\n          ZkStateReader.getShardLeadersElectPath(collectionName, slice.getName()));\n      for (String testNode : electionNodes) {\n        if (LeaderElector.getNodeName(testNode).equals(nodeName) && oldSeq != LeaderElector.getSeq(testNode)) {\n          return LeaderElector.getSeq(testNode);\n        }\n      }\n\n      Thread.sleep(100);\n    }\n    return -1;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/admin/RebalanceLeaders.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"}],"commitId":"a692d05a909e1ce385c56c087cb62911c27b5f5b","commitMessage":"@@@SOLR-13091: REBALANCELEADERS is broken\n","date":"2019-01-20 11:20:39","modifiedFileCount":"3","status":"M","submitter":"Erick Erickson"}]
