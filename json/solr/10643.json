[{"authorTime":"2019-07-30 22:01:15","codes":[{"authorDate":"2019-07-30 22:01:15","commitOrder":1,"curCode":"  public void testDateTime() throws Exception {\n    String expr = \"select(list(tuple(a=20001011:10:11:01), tuple(a=20071011:14:30:20)), dateTime(a, yyyyMMdd:kk:mm:ss) as date)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    assertEquals(date, \"2000-10-11T10:11:01Z\");\n    date = (String)tuples.get(1).get(\"date\");\n    assertEquals(date, \"2007-10-11T14:30:20Z\");\n  }\n","date":"2019-07-30 22:42:06","endLine":4501,"groupId":"52603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/a07deef805d91ff482a6e0f8813928ece78a17.src","preCode":"  public void testDateTime() throws Exception {\n    String expr = \"select(list(tuple(a=20001011:10:11:01), tuple(a=20071011:14:30:20)), dateTime(a, yyyyMMdd:kk:mm:ss) as date)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    assertEquals(date, \"2000-10-11T10:11:01Z\");\n    date = (String)tuples.get(1).get(\"date\");\n    assertEquals(date, \"2007-10-11T14:30:20Z\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4485,"status":"B"},{"authorDate":"2019-07-30 22:01:15","commitOrder":1,"curCode":"  public void testDateTimeTZ() throws Exception {\n    String expr = \"select(list(tuple(a=20001011), tuple(a=20071011)), dateTime(a, yyyyMMdd, UTC) as date, dateTime(a, yyyyMMdd, EST) as date1, dateTime(a, yyyyMMdd) as date2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    String date1 = (String)tuples.get(0).get(\"date1\");\n    String date2 = (String)tuples.get(0).get(\"date2\");\n\n    assertEquals(date, \"2000-10-11T00:00:00Z\");\n    assertEquals(date1, \"2000-10-11T05:00:00Z\");\n    assertEquals(date2, \"2000-10-11T00:00:00Z\");\n\n\n    date = (String)tuples.get(1).get(\"date\");\n    date1 = (String)tuples.get(1).get(\"date1\");\n    date2 = (String)tuples.get(1).get(\"date2\");\n\n    assertEquals(date, \"2007-10-11T00:00:00Z\");\n    assertEquals(date1, \"2007-10-11T05:00:00Z\");\n    assertEquals(date2, \"2007-10-11T00:00:00Z\");\n  }\n","date":"2019-07-30 22:42:06","endLine":4532,"groupId":"52603","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateTimeTZ","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/a07deef805d91ff482a6e0f8813928ece78a17.src","preCode":"  public void testDateTimeTZ() throws Exception {\n    String expr = \"select(list(tuple(a=20001011), tuple(a=20071011)), dateTime(a, yyyyMMdd, UTC) as date, dateTime(a, yyyyMMdd, EST) as date1, dateTime(a, yyyyMMdd) as date2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    String date1 = (String)tuples.get(0).get(\"date1\");\n    String date2 = (String)tuples.get(0).get(\"date2\");\n\n    assertEquals(date, \"2000-10-11T00:00:00Z\");\n    assertEquals(date1, \"2000-10-11T05:00:00Z\");\n    assertEquals(date2, \"2000-10-11T00:00:00Z\");\n\n\n    date = (String)tuples.get(1).get(\"date\");\n    date1 = (String)tuples.get(1).get(\"date1\");\n    date2 = (String)tuples.get(1).get(\"date2\");\n\n    assertEquals(date, \"2007-10-11T00:00:00Z\");\n    assertEquals(date1, \"2007-10-11T05:00:00Z\");\n    assertEquals(date2, \"2007-10-11T00:00:00Z\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4504,"status":"B"}],"commitId":"62955b1a4e98c4a583f9c6c5d71adc7947423b90","commitMessage":"@@@SOLR-13625: Fix broken test cases\n","date":"2019-07-30 22:42:06","modifiedFileCount":"34","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2019-08-03 03:25:34","codes":[{"authorDate":"2019-08-03 03:25:34","commitOrder":2,"curCode":"  public void testDateTime() throws Exception {\n    String expr = \"select(list(tuple(a=20001011:10:11:01), tuple(a=20071011:14:30:20)), dateTime(a, \\\"yyyyMMdd:kk:mm:ss\\\") as date)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    assertEquals(date, \"2000-10-11T10:11:01Z\");\n    date = (String)tuples.get(1).get(\"date\");\n    assertEquals(date, \"2007-10-11T14:30:20Z\");\n  }\n","date":"2019-08-03 03:38:26","endLine":4563,"groupId":"10643","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/0d0d33b33ec86567bafecd88b8e194b251745e.src","preCode":"  public void testDateTime() throws Exception {\n    String expr = \"select(list(tuple(a=20001011:10:11:01), tuple(a=20071011:14:30:20)), dateTime(a, yyyyMMdd:kk:mm:ss) as date)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    assertEquals(date, \"2000-10-11T10:11:01Z\");\n    date = (String)tuples.get(1).get(\"date\");\n    assertEquals(date, \"2007-10-11T14:30:20Z\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4547,"status":"M"},{"authorDate":"2019-08-03 03:25:34","commitOrder":2,"curCode":"  public void testDateTimeTZ() throws Exception {\n    String expr = \"select(list(tuple(a=20001011), tuple(a=20071011)), dateTime(a, \\\"yyyyMMdd\\\", \\\"UTC\\\") as date, dateTime(a, \\\"yyyyMMdd\\\", \\\"EST\\\") as date1, dateTime(a, \\\"yyyyMMdd\\\") as date2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    String date1 = (String)tuples.get(0).get(\"date1\");\n    String date2 = (String)tuples.get(0).get(\"date2\");\n\n    assertEquals(date, \"2000-10-11T00:00:00Z\");\n    assertEquals(date1, \"2000-10-11T05:00:00Z\");\n    assertEquals(date2, \"2000-10-11T00:00:00Z\");\n\n\n    date = (String)tuples.get(1).get(\"date\");\n    date1 = (String)tuples.get(1).get(\"date1\");\n    date2 = (String)tuples.get(1).get(\"date2\");\n\n    assertEquals(date, \"2007-10-11T00:00:00Z\");\n    assertEquals(date1, \"2007-10-11T05:00:00Z\");\n    assertEquals(date2, \"2007-10-11T00:00:00Z\");\n  }\n","date":"2019-08-03 03:38:26","endLine":4594,"groupId":"10643","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateTimeTZ","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/0d0d33b33ec86567bafecd88b8e194b251745e.src","preCode":"  public void testDateTimeTZ() throws Exception {\n    String expr = \"select(list(tuple(a=20001011), tuple(a=20071011)), dateTime(a, yyyyMMdd, UTC) as date, dateTime(a, yyyyMMdd, EST) as date1, dateTime(a, yyyyMMdd) as date2)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    String date = (String)tuples.get(0).get(\"date\");\n    String date1 = (String)tuples.get(0).get(\"date1\");\n    String date2 = (String)tuples.get(0).get(\"date2\");\n\n    assertEquals(date, \"2000-10-11T00:00:00Z\");\n    assertEquals(date1, \"2000-10-11T05:00:00Z\");\n    assertEquals(date2, \"2000-10-11T00:00:00Z\");\n\n\n    date = (String)tuples.get(1).get(\"date\");\n    date1 = (String)tuples.get(1).get(\"date1\");\n    date2 = (String)tuples.get(1).get(\"date2\");\n\n    assertEquals(date, \"2007-10-11T00:00:00Z\");\n    assertEquals(date1, \"2007-10-11T05:00:00Z\");\n    assertEquals(date2, \"2007-10-11T00:00:00Z\");\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":4566,"status":"M"}],"commitId":"03a39666c0bd7969e267332fb282f1ba5f7a0866","commitMessage":"@@@SOLR-13667: Add upper.  lower.  trim and split Stream Evaluators\n","date":"2019-08-03 03:38:26","modifiedFileCount":"30","status":"M","submitter":"Joel Bernstein"}]
