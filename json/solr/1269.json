[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2019-03-04 17:41:45","commitOrder":1,"curCode":"  protected CloudSolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new HttpClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.clientIsInternal = builder.httpClient == null;\n    this.shutdownLBHttpSolrServer = builder.loadBalancedSolrClient == null;\n    if(builder.lbClientBuilder != null) {\n      propagateLBClientConfigOptions(builder);\n      builder.loadBalancedSolrClient = builder.lbClientBuilder.build();\n    }\n    if(builder.loadBalancedSolrClient != null) builder.httpClient = builder.loadBalancedSolrClient.getHttpClient();\n    this.myClient = (builder.httpClient == null) ? HttpClientUtil.createClient(null) : builder.httpClient;\n    if (builder.loadBalancedSolrClient == null) builder.loadBalancedSolrClient = createLBHttpSolrClient(builder, myClient);\n    this.lbClient = builder.loadBalancedSolrClient;\n  }\n","date":"2019-03-04 17:41:45","endLine":104,"groupId":"50431","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"CloudSolrClient","params":"(Builderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/087802f89ddb83306c08febe77284e62468ca8.src","preCode":"  protected CloudSolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new HttpClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.clientIsInternal = builder.httpClient == null;\n    this.shutdownLBHttpSolrServer = builder.loadBalancedSolrClient == null;\n    if(builder.lbClientBuilder != null) {\n      propagateLBClientConfigOptions(builder);\n      builder.loadBalancedSolrClient = builder.lbClientBuilder.build();\n    }\n    if(builder.loadBalancedSolrClient != null) builder.httpClient = builder.loadBalancedSolrClient.getHttpClient();\n    this.myClient = (builder.httpClient == null) ? HttpClientUtil.createClient(null) : builder.httpClient;\n    if (builder.loadBalancedSolrClient == null) builder.loadBalancedSolrClient = createLBHttpSolrClient(builder, myClient);\n    this.lbClient = builder.loadBalancedSolrClient;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2019-03-04 17:41:45","commitOrder":1,"curCode":"  protected CloudHttp2SolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    this.clientIsInternal = builder.httpClient == null;\n    this.myClient = (builder.httpClient == null) ? new Http2SolrClient.Builder().build() : builder.httpClient;\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new Http2ClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.lbClient = new LBHttp2SolrClient(myClient);\n\n  }\n","date":"2019-03-04 17:41:45","endLine":83,"groupId":"50431","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"CloudHttp2SolrClient","params":"(Builderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/6ac826d6476d993897b31abb210a08e2bf5eb8.src","preCode":"  protected CloudHttp2SolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    this.clientIsInternal = builder.httpClient == null;\n    this.myClient = (builder.httpClient == null) ? new Http2SolrClient.Builder().build() : builder.httpClient;\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new Http2ClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.lbClient = new LBHttp2SolrClient(myClient);\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudHttp2SolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"B","submitter":"Cao Manh Dat"},{"authorTime":"2021-03-27 07:17:23","codes":[{"authorDate":"2019-03-04 17:41:45","commitOrder":2,"curCode":"  protected CloudSolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new HttpClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.clientIsInternal = builder.httpClient == null;\n    this.shutdownLBHttpSolrServer = builder.loadBalancedSolrClient == null;\n    if(builder.lbClientBuilder != null) {\n      propagateLBClientConfigOptions(builder);\n      builder.loadBalancedSolrClient = builder.lbClientBuilder.build();\n    }\n    if(builder.loadBalancedSolrClient != null) builder.httpClient = builder.loadBalancedSolrClient.getHttpClient();\n    this.myClient = (builder.httpClient == null) ? HttpClientUtil.createClient(null) : builder.httpClient;\n    if (builder.loadBalancedSolrClient == null) builder.loadBalancedSolrClient = createLBHttpSolrClient(builder, myClient);\n    this.lbClient = builder.loadBalancedSolrClient;\n  }\n","date":"2019-03-04 17:41:45","endLine":104,"groupId":"1269","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"CloudSolrClient","params":"(Builderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/087802f89ddb83306c08febe77284e62468ca8.src","preCode":"  protected CloudSolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new HttpClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.clientIsInternal = builder.httpClient == null;\n    this.shutdownLBHttpSolrServer = builder.loadBalancedSolrClient == null;\n    if(builder.lbClientBuilder != null) {\n      propagateLBClientConfigOptions(builder);\n      builder.loadBalancedSolrClient = builder.lbClientBuilder.build();\n    }\n    if(builder.loadBalancedSolrClient != null) builder.httpClient = builder.loadBalancedSolrClient.getHttpClient();\n    this.myClient = (builder.httpClient == null) ? HttpClientUtil.createClient(null) : builder.httpClient;\n    if (builder.loadBalancedSolrClient == null) builder.loadBalancedSolrClient = createLBHttpSolrClient(builder, myClient);\n    this.lbClient = builder.loadBalancedSolrClient;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"},{"authorDate":"2021-03-27 07:17:23","commitOrder":2,"curCode":"  protected CloudHttp2SolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    if (builder.httpClient == null) {\n      this.clientIsInternal = true;\n      if (builder.internalClientBuilder == null) {\n        this.myClient = new Http2SolrClient.Builder().build();\n      } else {\n        this.myClient = builder.internalClientBuilder.build();\n      }\n    } else {\n      this.clientIsInternal = false;\n      this.myClient = builder.httpClient;\n    }\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new Http2ClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.lbClient = new LBHttp2SolrClient(myClient);\n\n  }\n","date":"2021-03-27 07:17:23","endLine":92,"groupId":"1269","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"CloudHttp2SolrClient","params":"(Builderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/e79ca9e392b8aacc124bf2bf2a47586e2b7a13.src","preCode":"  protected CloudHttp2SolrClient(Builder builder) {\n    super(builder.shardLeadersOnly, builder.parallelUpdates, builder.directUpdatesToLeadersOnly);\n    this.clientIsInternal = builder.httpClient == null;\n    this.myClient = (builder.httpClient == null) ? new Http2SolrClient.Builder().build() : builder.httpClient;\n    if (builder.stateProvider == null) {\n      if (builder.zkHosts != null && builder.solrUrls != null) {\n        throw new IllegalArgumentException(\"Both zkHost(s) & solrUrl(s) have been specified. Only specify one.\");\n      }\n      if (builder.zkHosts != null) {\n        this.stateProvider = new ZkClientClusterStateProvider(builder.zkHosts, builder.zkChroot);\n      } else if (builder.solrUrls != null && !builder.solrUrls.isEmpty()) {\n        try {\n          this.stateProvider = new Http2ClusterStateProvider(builder.solrUrls, builder.httpClient);\n        } catch (Exception e) {\n          throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n              + \"Solr server(s), \"  + builder.solrUrls + \", down?)\", e);\n        }\n      } else {\n        throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n      }\n    } else {\n      this.stateProvider = builder.stateProvider;\n    }\n    this.lbClient = new LBHttp2SolrClient(myClient);\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudHttp2SolrClient.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"9903d00b0fb6216f836bb580f42d0081b7b41584","commitMessage":"@@@SOLR-15155: Let CloudHttp2SolrClient accept an external Http2SolrClient Builder (#15)\n\nThis allows configuring the internal client with things like timeouts.  credentials.  etc","date":"2021-03-27 07:17:23","modifiedFileCount":"2","status":"M","submitter":"Tomas Fernandez Lobbe"}]
