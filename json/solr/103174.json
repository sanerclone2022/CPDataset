[{"authorTime":"2013-11-29 05:00:28","codes":[{"authorDate":"2014-03-08 02:01:52","commitOrder":2,"curCode":"  public void testCustomComparator() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"payload\", \"2\")));\n    assertU(adoc(sdoc(\"id\", \"2\", \"payload\", \"3\")));\n    assertU(adoc(sdoc(\"id\", \"3\", \"payload\", \"1\")));\n    assertU(adoc(sdoc(\"id\", \"4\", \"payload\", \"5\")));\n    assertU(adoc(sdoc(\"id\", \"5\", \"payload\", \"4\")));\n    assertU(commit());\n\n    \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id asc\", \"fsv\", \"true\")\n        , \"//result/doc[int='2'  and position()=1]\"\n        , \"//result/doc[int='3'  and position()=2]\"\n        , \"//result/doc[int='5'  and position()=3]\"\n        , \"//result/doc[int='1'  and position()=4]\"\n        , \"//result/doc[int='4'  and position()=5]\");\n  }\n","date":"2014-03-08 02:01:52","endLine":52,"groupId":"7622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCustomComparator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/34ff7dc3e20acdfabe33b874fe91f90e577c64.src","preCode":"  public void testCustomComparator() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"payload\", \"2\")));\n    assertU(adoc(sdoc(\"id\", \"2\", \"payload\", \"3\")));\n    assertU(adoc(sdoc(\"id\", \"3\", \"payload\", \"1\")));\n    assertU(adoc(sdoc(\"id\", \"4\", \"payload\", \"5\")));\n    assertU(adoc(sdoc(\"id\", \"5\", \"payload\", \"4\")));\n    assertU(commit());\n\n    \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id asc\", \"fsv\", \"true\")\n        , \"//result/doc[int='2'  and position()=1]\"\n        , \"//result/doc[int='3'  and position()=2]\"\n        , \"//result/doc[int='5'  and position()=3]\"\n        , \"//result/doc[int='1'  and position()=4]\"\n        , \"//result/doc[int='4'  and position()=5]\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestFieldSortValues.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2013-11-29 05:00:28","commitOrder":2,"curCode":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              \r\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  \r\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   \r\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); \r\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             \r\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             \r\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"    \r\n        , \"//result/doc[int='1'  and position()=2]\"    \r\n        , \"//result/doc[int='6'  and position()=3]\"    \r\n        , \"//result/doc[int='4'  and position()=4]\"    \r\n        , \"//result/doc[int='2'  and position()=5]\"    \r\n        , \"//result/doc[int='10' and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='3'  and position()=8]\"    \r\n        , \"//result/doc[int='5'  and position()=9]\"    \r\n        , \"//result/doc[int='9'  and position()=10]\"   \r\n        , \"//result/doc[int='8'  and position()=11]\"   \r\n        , \"//result/doc[int='13' and position()=12]\"   \r\n        , \"//result/doc[int='11' and position()=13]\"); \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"    \r\n        , \"//result/doc[int='13' and position()=2]\"    \r\n        , \"//result/doc[int='8'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\"    \r\n        , \"//result/doc[int='5'  and position()=5]\"    \r\n        , \"//result/doc[int='3'  and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='10' and position()=8]\"    \r\n        , \"//result/doc[int='2'  and position()=9]\"    \r\n        , \"//result/doc[int='4'  and position()=10]\"   \r\n        , \"//result/doc[int='6'  and position()=11]\"   \r\n        , \"//result/doc[int='1'  and position()=12]\"   \r\n        , \"//result/doc[int='7'  and position()=13]\"); \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='1'  and position()=1]\"    \r\n        , \"//result/doc[int='3'  and position()=2]\"    \r\n        , \"//result/doc[int='5'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='9'  and position()=1]\"    \r\n        , \"//result/doc[int='5'  and position()=2]\"    \r\n        , \"//result/doc[int='3'  and position()=3]\"    \r\n        , \"//result/doc[int='1'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='4'  and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='10' and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='10' and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='4'  and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='8'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='8'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='7'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='12' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='11' and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='12' and position()=3]\"); \r\n  }\n","date":"2013-11-29 05:00:28","endLine":125,"groupId":"7622","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSortableBinary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/afe4d3f6c963fc80ae702dfb4112161531abb7.src","preCode":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              \r\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  \r\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   \r\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); \r\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             \r\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             \r\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"    \r\n        , \"//result/doc[int='1'  and position()=2]\"    \r\n        , \"//result/doc[int='6'  and position()=3]\"    \r\n        , \"//result/doc[int='4'  and position()=4]\"    \r\n        , \"//result/doc[int='2'  and position()=5]\"    \r\n        , \"//result/doc[int='10' and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='3'  and position()=8]\"    \r\n        , \"//result/doc[int='5'  and position()=9]\"    \r\n        , \"//result/doc[int='9'  and position()=10]\"   \r\n        , \"//result/doc[int='8'  and position()=11]\"   \r\n        , \"//result/doc[int='13' and position()=12]\"   \r\n        , \"//result/doc[int='11' and position()=13]\"); \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"    \r\n        , \"//result/doc[int='13' and position()=2]\"    \r\n        , \"//result/doc[int='8'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\"    \r\n        , \"//result/doc[int='5'  and position()=5]\"    \r\n        , \"//result/doc[int='3'  and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='10' and position()=8]\"    \r\n        , \"//result/doc[int='2'  and position()=9]\"    \r\n        , \"//result/doc[int='4'  and position()=10]\"   \r\n        , \"//result/doc[int='6'  and position()=11]\"   \r\n        , \"//result/doc[int='1'  and position()=12]\"   \r\n        , \"//result/doc[int='7'  and position()=13]\"); \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='1'  and position()=1]\"    \r\n        , \"//result/doc[int='3'  and position()=2]\"    \r\n        , \"//result/doc[int='5'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='9'  and position()=1]\"    \r\n        , \"//result/doc[int='5'  and position()=2]\"    \r\n        , \"//result/doc[int='3'  and position()=3]\"    \r\n        , \"//result/doc[int='1'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='4'  and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='10' and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='10' and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='4'  and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='8'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='8'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='7'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='12' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='11' and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='12' and position()=3]\"); \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestCustomSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"}],"commitId":"26c79531b0eabeb0b7a1ab0dfa39a2318f8ee631","commitMessage":"@@@SOLR-5818: distrib search with custom comparator does not quite work correctly\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1575344 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-08 02:01:52","modifiedFileCount":"1","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":3,"curCode":"  public void testCustomComparator() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"payload\", \"2\")));\n    assertU(adoc(sdoc(\"id\", \"2\", \"payload\", \"3\")));\n    assertU(adoc(sdoc(\"id\", \"3\", \"payload\", \"1\")));\n    assertU(adoc(sdoc(\"id\", \"4\", \"payload\", \"5\")));\n    assertU(adoc(sdoc(\"id\", \"5\", \"payload\", \"4\")));\n    assertU(commit());\n\n    \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id asc\", \"fsv\", \"true\")\n        , \"//result/doc[str='2'  and position()=1]\"\n        , \"//result/doc[str='3'  and position()=2]\"\n        , \"//result/doc[str='5'  and position()=3]\"\n        , \"//result/doc[str='1'  and position()=4]\"\n        , \"//result/doc[str='4'  and position()=5]\");\n  }\n","date":"2017-06-29 17:00:17","endLine":49,"groupId":"103174","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCustomComparator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/07bf311f324bdc1c6030bfe2ebbdcfe060cd78.src","preCode":"  public void testCustomComparator() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"payload\", \"2\")));\n    assertU(adoc(sdoc(\"id\", \"2\", \"payload\", \"3\")));\n    assertU(adoc(sdoc(\"id\", \"3\", \"payload\", \"1\")));\n    assertU(adoc(sdoc(\"id\", \"4\", \"payload\", \"5\")));\n    assertU(adoc(sdoc(\"id\", \"5\", \"payload\", \"4\")));\n    assertU(commit());\n\n    \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc, id asc\", \"fsv\", \"true\")\n        , \"//result/doc[int='2'  and position()=1]\"\n        , \"//result/doc[int='3'  and position()=2]\"\n        , \"//result/doc[int='5'  and position()=3]\"\n        , \"//result/doc[int='1'  and position()=4]\"\n        , \"//result/doc[int='4'  and position()=5]\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestFieldSortValues.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":3,"curCode":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              \r\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  \r\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   \r\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); \r\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             \r\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             \r\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"    \r\n        , \"//result/doc[int='1'  and position()=2]\"    \r\n        , \"//result/doc[int='6'  and position()=3]\"    \r\n        , \"//result/doc[int='4'  and position()=4]\"    \r\n        , \"//result/doc[int='2'  and position()=5]\"    \r\n        , \"//result/doc[int='10' and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='3'  and position()=8]\"    \r\n        , \"//result/doc[int='5'  and position()=9]\"    \r\n        , \"//result/doc[int='9'  and position()=10]\"   \r\n        , \"//result/doc[int='8'  and position()=11]\"   \r\n        , \"//result/doc[int='13' and position()=12]\"   \r\n        , \"//result/doc[int='11' and position()=13]\"); \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"    \r\n        , \"//result/doc[int='13' and position()=2]\"    \r\n        , \"//result/doc[int='8'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\"    \r\n        , \"//result/doc[int='5'  and position()=5]\"    \r\n        , \"//result/doc[int='3'  and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='10' and position()=8]\"    \r\n        , \"//result/doc[int='2'  and position()=9]\"    \r\n        , \"//result/doc[int='4'  and position()=10]\"   \r\n        , \"//result/doc[int='6'  and position()=11]\"   \r\n        , \"//result/doc[int='1'  and position()=12]\"   \r\n        , \"//result/doc[int='7'  and position()=13]\"); \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='1'  and position()=1]\"    \r\n        , \"//result/doc[int='3'  and position()=2]\"    \r\n        , \"//result/doc[int='5'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='9'  and position()=1]\"    \r\n        , \"//result/doc[int='5'  and position()=2]\"    \r\n        , \"//result/doc[int='3'  and position()=3]\"    \r\n        , \"//result/doc[int='1'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='4'  and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='10' and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='10' and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='4'  and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='8'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='8'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='7'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='12' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='11' and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id_i\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='12' and position()=3]\"); \r\n  }\n","date":"2017-06-29 17:00:17","endLine":124,"groupId":"103174","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSortableBinary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/b83011fa05cf87bb785de89b813e34739ed2ae.src","preCode":"  public void testSortableBinary() throws Exception {\n    clearIndex();\n    assertU(adoc(sdoc(\"id\", \"1\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"2\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"3\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"4\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"5\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }))));              \r\n    assertU(adoc(sdoc(\"id\", \"6\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }))));  \r\n    assertU(adoc(sdoc(\"id\", \"7\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"8\", \"text\", \"c\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"9\", \"text\", \"a\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }))));                    \r\n    assertU(adoc(sdoc(\"id\", \"10\", \"text\", \"b\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }))));                   \r\n    assertU(adoc(sdoc(\"id\", \"11\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })))); \r\n    assertU(adoc(sdoc(\"id\", \"12\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }))));             \r\n    assertU(adoc(sdoc(\"id\", \"13\", \"text\", \"d\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }))));             \r\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"    \r\n        , \"//result/doc[int='1'  and position()=2]\"    \r\n        , \"//result/doc[int='6'  and position()=3]\"    \r\n        , \"//result/doc[int='4'  and position()=4]\"    \r\n        , \"//result/doc[int='2'  and position()=5]\"    \r\n        , \"//result/doc[int='10' and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='3'  and position()=8]\"    \r\n        , \"//result/doc[int='5'  and position()=9]\"    \r\n        , \"//result/doc[int='9'  and position()=10]\"   \r\n        , \"//result/doc[int='8'  and position()=11]\"   \r\n        , \"//result/doc[int='13' and position()=12]\"   \r\n        , \"//result/doc[int='11' and position()=13]\"); \r\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='13']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"    \r\n        , \"//result/doc[int='13' and position()=2]\"    \r\n        , \"//result/doc[int='8'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\"    \r\n        , \"//result/doc[int='5'  and position()=5]\"    \r\n        , \"//result/doc[int='3'  and position()=6]\"    \r\n        , \"//result/doc[int='12' and position()=7]\"    \r\n        , \"//result/doc[int='10' and position()=8]\"    \r\n        , \"//result/doc[int='2'  and position()=9]\"    \r\n        , \"//result/doc[int='4'  and position()=10]\"   \r\n        , \"//result/doc[int='6'  and position()=11]\"   \r\n        , \"//result/doc[int='1'  and position()=12]\"   \r\n        , \"//result/doc[int='7'  and position()=13]\"); \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='1'  and position()=1]\"    \r\n        , \"//result/doc[int='3'  and position()=2]\"    \r\n        , \"//result/doc[int='5'  and position()=3]\"    \r\n        , \"//result/doc[int='9'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:a\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='4']\"                    \r\n        , \"//result/doc[int='9'  and position()=1]\"    \r\n        , \"//result/doc[int='5'  and position()=2]\"    \r\n        , \"//result/doc[int='3'  and position()=3]\"    \r\n        , \"//result/doc[int='1'  and position()=4]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='4'  and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='10' and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:b\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                    \r\n        , \"//result/doc[int='10' and position()=1]\"    \r\n        , \"//result/doc[int='2'  and position()=2]\"    \r\n        , \"//result/doc[int='4'  and position()=3]\");  \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='7'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='8'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:c\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='8'  and position()=1]\"   \r\n        , \"//result/doc[int='6'  and position()=2]\"   \r\n        , \"//result/doc[int='7'  and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload asc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='12' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='11' and position()=3]\"); \r\n    assertQ(req(\"q\", \"text:d\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\")\n        , \"//result[@numFound='3']\"                   \r\n        , \"//result/doc[int='11' and position()=1]\"   \r\n        , \"//result/doc[int='13' and position()=2]\"   \r\n        , \"//result/doc[int='12' and position()=3]\"); \r\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestCustomSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"}]
