[{"authorTime":"2017-02-08 02:15:51","codes":[{"authorDate":"2017-02-08 02:15:51","commitOrder":3,"curCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      logger.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","date":"2017-02-08 02:15:51","endLine":147,"groupId":"26581","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuilder","params":"(SolrHttpClientBuilderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/cf96b5185d1b40d246b429ae06f7efa8361518.src","preCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      logger.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"MB"},{"authorDate":"2017-02-08 02:15:51","commitOrder":3,"curCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","date":"2017-02-08 02:15:51","endLine":131,"groupId":"62701","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initHttpClientBuilder","params":"(SolrHttpClientBuilderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/ce9902ed92720acce096cfe137575948910604.src","preCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"e1a577645756addc8ed060024e4af7ccd15c2321","commitMessage":"@@@SOLR-9997: Enable configuring SolrHttpClientBuilder via java system property.\n","date":"2017-02-08 02:15:51","modifiedFileCount":"4","status":"M","submitter":"markrmiller"},{"authorTime":"2017-02-08 02:15:51","codes":[{"authorDate":"2018-08-23 06:26:37","commitOrder":4,"curCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","date":"2018-08-23 06:26:37","endLine":147,"groupId":"26581","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuilder","params":"(SolrHttpClientBuilderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/a2ef6c87122a483dec1a460dce3baa122e84a0.src","preCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        logger.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          logger.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      logger.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2017-02-08 02:15:51","commitOrder":4,"curCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","date":"2017-02-08 02:15:51","endLine":131,"groupId":"62701","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initHttpClientBuilder","params":"(SolrHttpClientBuilderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/ce9902ed92720acce096cfe137575948910604.src","preCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"}],"commitId":"8cde1277ec7151bd6ab62950ac93cbdd6ff04d9f","commitMessage":"@@@SOLR-12690: Regularize LoggerFactory declarations\n","date":"2018-08-23 06:26:37","modifiedFileCount":"93","status":"M","submitter":"Erick Erickson"},{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2018-08-23 06:26:37","commitOrder":5,"curCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","date":"2018-08-23 06:26:37","endLine":147,"groupId":"26581","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuilder","params":"(SolrHttpClientBuilderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/a2ef6c87122a483dec1a460dce3baa122e84a0.src","preCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        }\n        else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2018-12-17 00:58:20","commitOrder":5,"curCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder, String basicAuthUser, String basicAuthPass) {\n    builder.setDefaultCredentialsProvider(() -> {\n      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n      credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n      return credsProvider;\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","date":"2018-12-17 00:58:20","endLine":147,"groupId":"62701","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initHttpClientBuilder","params":"(SolrHttpClientBuilderbuilder@StringbasicAuthUser@StringbasicAuthPass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/c0bfb0ee8c31c5cdec7057f202358e5958d39f.src","preCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2020-04-28 08:45:57","commitOrder":6,"curCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: {}\", configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        } else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          log.warn(\"System Property: {} set to: {} not false.  SPNego authentication may not be successful.\"\n              , useSubjectCredsProp, useSubjectCredsVal);\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","date":"2020-04-28 08:45:57","endLine":195,"groupId":"1083","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getBuilder","params":"(SolrHttpClientBuilderbuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/b12177519400cda4ff282ca42ea0f0e109e62f.src","preCode":"  public SolrHttpClientBuilder getBuilder(SolrHttpClientBuilder builder) {\n    if (System.getProperty(LOGIN_CONFIG_PROP) != null) {\n      String configValue = System.getProperty(LOGIN_CONFIG_PROP);\n\n      if (configValue != null) {\n        log.info(\"Setting up SPNego auth with config: \" + configValue);\n        final String useSubjectCredsProp = \"javax.security.auth.useSubjectCredsOnly\";\n        String useSubjectCredsVal = System.getProperty(useSubjectCredsProp);\n\n        \r\n        \r\n        if (useSubjectCredsVal == null) {\n          System.setProperty(useSubjectCredsProp, \"false\");\n        } else if (!useSubjectCredsVal.toLowerCase(Locale.ROOT).equals(\"false\")) {\n          \r\n          \r\n          log.warn(\"System Property: \" + useSubjectCredsProp + \" set to: \" + useSubjectCredsVal\n              + \" not false.  SPNego authentication may not be successful.\");\n        }\n\n        javax.security.auth.login.Configuration.setConfiguration(jaasConfig);\n        \r\n\n        builder.setAuthSchemeRegistryProvider(() -> {\n          Lookup<AuthSchemeProvider> authProviders = RegistryBuilder.<AuthSchemeProvider>create()\n              .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(true, false))\n              .build();\n          return authProviders;\n        });\n        \r\n        Credentials useJaasCreds = new Credentials() {\n          public String getPassword() {\n            return null;\n          }\n          public Principal getUserPrincipal() {\n            return null;\n          }\n        };\n\n        HttpClientUtil.setCookiePolicy(SolrPortAwareCookieSpecFactory.POLICY_NAME);\n\n        builder.setCookieSpecRegistryProvider(() -> {\n          SolrPortAwareCookieSpecFactory cookieFactory = new SolrPortAwareCookieSpecFactory();\n\n          Lookup<CookieSpecProvider> cookieRegistry = RegistryBuilder.<CookieSpecProvider> create()\n              .register(SolrPortAwareCookieSpecFactory.POLICY_NAME, cookieFactory).build();\n\n          return cookieRegistry;\n        });\n        \n        builder.setDefaultCredentialsProvider(() -> {\n          CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n          credentialsProvider.setCredentials(AuthScope.ANY, useJaasCreds);\n          return credentialsProvider;\n        });\n        HttpClientUtil.addRequestInterceptor(bufferedEntityInterceptor);\n      }\n    } else {\n      log.warn(\"{} is configured without specifying system property '{}'\",\n          getClass().getName(), LOGIN_CONFIG_PROP);\n    }\n\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Krb5HttpClientBuilder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2018-12-17 00:58:20","commitOrder":6,"curCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder, String basicAuthUser, String basicAuthPass) {\n    builder.setDefaultCredentialsProvider(() -> {\n      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n      credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n      return credsProvider;\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","date":"2018-12-17 00:58:20","endLine":147,"groupId":"1083","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initHttpClientBuilder","params":"(SolrHttpClientBuilderbuilder@StringbasicAuthUser@StringbasicAuthPass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/c0bfb0ee8c31c5cdec7057f202358e5958d39f.src","preCode":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder, String basicAuthUser, String basicAuthPass) {\n    builder.setDefaultCredentialsProvider(() -> {\n      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n      credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n      return credsProvider;\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"960610a615a2893062b1df3ab1595d8fef6bcdb4","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-28 08:45:57","modifiedFileCount":"39","status":"M","submitter":"Erick Erickson"}]
