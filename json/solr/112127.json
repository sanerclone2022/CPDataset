[{"authorTime":"2015-11-13 06:52:06","codes":[{"authorDate":"2015-11-13 06:52:06","commitOrder":1,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":1791,"groupId":"54440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1755,"status":"B"},{"authorDate":"2015-11-13 06:52:06","commitOrder":1,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":1895,"groupId":"42002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1844,"status":"B"}],"commitId":"918476e0ac207fc2a0454e9047857cd78f68fa4a","commitMessage":"@@@SOLR-6168: Add a 'sort' local param to the collapse QParser to support using complex sort options to select the representitive doc for each collapsed group\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1714133 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-13 06:52:06","modifiedFileCount":"4","status":"B","submitter":"Chris M. Hostetter"},{"authorTime":"2015-11-13 06:52:06","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2016-10-03 03:18:22","endLine":1908,"groupId":"54440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/58d1c44517ebc98feb4473e3e8d9ea734591b9.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1872,"status":"M"},{"authorDate":"2015-11-13 06:52:06","commitOrder":2,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":1895,"groupId":"42002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1844,"status":"N"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-05-03 05:15:15","codes":[{"authorDate":"2019-05-03 05:15:15","commitOrder":3,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2019-05-03 05:15:15","endLine":1926,"groupId":"12695","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/e9223c7d37476dde416583cecc18f2646230c3.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1880,"status":"M"},{"authorDate":"2019-05-03 05:15:15","commitOrder":3,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2019-05-03 05:15:15","endLine":2046,"groupId":"12694","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/e9223c7d37476dde416583cecc18f2646230c3.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1980,"status":"M"}],"commitId":"29a98825d0b70166c6c759d022f2c1426b145fe1","commitMessage":"@@@SOLR-13348: Speed up collapsing by avoiding scoring of ineligible documents\n","date":"2019-05-03 05:15:15","modifiedFileCount":"1","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2020-04-10 16:24:10","codes":[{"authorDate":"2020-04-10 16:24:10","commitOrder":4,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2020-04-10 16:24:10","endLine":1918,"groupId":"14924","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/e4bed5c1c6853f002e8ee7eef39a1eae46964e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1872,"status":"M"},{"authorDate":"2020-04-10 16:24:10","commitOrder":4,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords.get(ord)) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords.put(ord, globalDoc);\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords.put(ord, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores.put(ord, score);\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2020-04-10 16:24:10","endLine":2031,"groupId":"24980","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/e4bed5c1c6853f002e8ee7eef39a1eae46964e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords[ord]) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords[ord] = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores[ord] = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords[ord] = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores[ord] = score;\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1965,"status":"M"}],"commitId":"adbd714b37d794e9aa7615e61c431e42162c1d3c","commitMessage":"@@@SOLR-14365: CollapsingQParser - Avoiding always allocate int[] and float[] with size equals to number of unique values (WIP) (#1395)\n\n","date":"2020-04-10 16:24:10","modifiedFileCount":"1","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-09-29 21:49:49","codes":[{"authorDate":"2020-09-29 21:49:49","commitOrder":5,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2020-09-29 21:49:49","endLine":1966,"groupId":"14924","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/1e740bd8fb3cd95358bd57ec7a4102fd9b392f.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1920,"status":"M"},{"authorDate":"2020-09-29 21:49:49","commitOrder":5,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords.get(ord)) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords.put(ord, globalDoc);\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords.put(ord, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores.put(ord, score);\n            }\n          }\n        }\n      } else if (this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2020-09-29 21:49:49","endLine":2079,"groupId":"14918","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/1e740bd8fb3cd95358bd57ec7a4102fd9b392f.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords.get(ord)) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords.put(ord, globalDoc);\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords.put(ord, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores.put(ord, score);\n            }\n          }\n        }\n      } else if (this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2013,"status":"M"}],"commitId":"1dba76c0d31b6f0294c1f257e5a1fc51a722b82f","commitMessage":"@@@SOLR-14333: Implement toString in Collapse filter  (#1371)\n\n","date":"2020-09-29 21:49:49","modifiedFileCount":"2","status":"M","submitter":"Guna Sekhar Dora Kovvuru"},{"authorTime":"2021-01-06 01:00:56","codes":[{"authorDate":"2021-01-06 01:00:56","commitOrder":6,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      \n      float score = 0;\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2021-01-06 01:00:56","endLine":1890,"groupId":"112127","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/6ec45dfccf4b7d94c5215e8e7a648432ac563d.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1848,"status":"M"},{"authorDate":"2021-01-06 01:00:56","commitOrder":6,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords.get(ord)) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords.put(ord, globalDoc);\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords.put(ord, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores.put(ord, score);\n            }\n          }\n        }\n      } else if (this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2021-01-06 01:00:56","endLine":1998,"groupId":"112127","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/6ec45dfccf4b7d94c5215e8e7a648432ac563d.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        this.score = scorer.score();\n      }\n\n      if (ord > -1) { \r\n        if (-1 == ords.get(ord)) {\n          \r\n          compareState.setGroupValues(ord, contextDoc);\n          ords.put(ord, globalDoc);\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        } else {\n          \r\n          if (compareState.testAndSetGroupValues(ord, contextDoc)) {\r\n            ords.put(ord, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              scores.put(ord, score);\n            }\n          }\n        }\n      } else if (this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              this.score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                this.score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            this.score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1937,"status":"M"}],"commitId":"a48e937f599bc1487df3321c490589b0d8820616","commitMessage":"@@@SOLR-15048: Fixed collapse parser behavior when dealing with docs boosted by QueryElevationComponent that are in the null group to treat them consistently regardless of collapse field type or group head selector\n","date":"2021-01-06 01:00:56","modifiedFileCount":"2","status":"M","submitter":"Chris Hostetter"}]
