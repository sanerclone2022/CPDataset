[{"authorTime":"2016-04-08 18:07:13","codes":[{"authorDate":"2016-04-15 01:17:42","commitOrder":3,"curCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","date":"2016-04-15 01:17:42","endLine":1963,"groupId":"28374","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadCollection","params":"(Replicareplica@StringtestCollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/a94f6308410e5341149de3e84173f3c16712ba.src","preCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1929,"status":"B"},{"authorDate":"2016-04-08 18:07:13","commitOrder":3,"curCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","date":"2016-04-08 18:07:13","endLine":414,"groupId":"48203","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reloadCollection","params":"(Replicareplica@StringtestCollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/2815b017389199eddd0d952e10a3130de51af8.src","preCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"NB"}],"commitId":"b36a6ecbe44d9b458fe79198616a4bed19d4c08b","commitMessage":"@@@SOLR-8908: Fixed OnReconnect listener management in ZkController to allow for de-registering listeners.\n\nHere's what this commit includes:\n* Added the removeOnReconnectListener method to ZkController to allow OnReconnect listener implementations to de-register; avoids a memory leak\n* Updated ZkIndexSchemaReader to add a CloseHook to the SolrCore it supports to de-register as an OnReconnect listener\n* Added unit test to verify that after reloading and deleting a SolrCore in managed schema mode.  the associated ZkIndexSchemaReader gets de-registered correctly\n","date":"2016-04-15 01:17:42","modifiedFileCount":"8","status":"M","submitter":"Timothy Potter"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-04-15 01:17:42","commitOrder":4,"curCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","date":"2016-04-15 01:17:42","endLine":1963,"groupId":"28374","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadCollection","params":"(Replicareplica@StringtestCollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/a94f6308410e5341149de3e84173f3c16712ba.src","preCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1929,"status":"N"},{"authorDate":"2016-05-23 14:35:53","commitOrder":4,"curCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","date":"2016-05-23 14:35:53","endLine":382,"groupId":"25254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reloadCollection","params":"(Replicareplica@StringtestCollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/0cd5e3fc5ed72ef472a50a2c9a35995d79f6e6.src","preCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2020-05-01 07:50:31","commitOrder":5,"curCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for {}\", testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","date":"2020-05-01 07:50:31","endLine":2231,"groupId":"101912","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"reloadCollection","params":"(Replicareplica@StringtestCollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/df36a3205f788f9ba303c336a2a3815ebc5e5d.src","preCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2197,"status":"M"},{"authorDate":"2020-05-01 07:50:31","commitOrder":5,"curCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for {}\", testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","date":"2020-05-01 07:50:31","endLine":387,"groupId":"101912","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"reloadCollection","params":"(Replicareplica@StringtestCollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a4/b1b1281d159ba3fb51f5ae9289578ec7bf936a.src","preCode":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      \r\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); \r\n\n      \r\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        \r\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"}]
