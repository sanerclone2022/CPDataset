[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.LONG, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=searcher.doc(sd[0].doc).getField(field).numericValue().longValue();\n      for (int j=1; j<sd.length; j++) {\n        long act=searcher.doc(sd[j].doc).getField(field).numericValue().longValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","date":"2016-05-26 01:42:11","endLine":145,"groupId":"4633","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSorting","params":"(intprecisionStep)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/a8be98c0f1b980b17fdcded636dd9013db61bf.src","preCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.LONG, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=searcher.doc(sd[0].doc).getField(field).numericValue().longValue();\n      for (int j=1; j<sd.length; j++) {\n        long act=searcher.doc(sd[j].doc).getField(field).numericValue().longValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms64.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","date":"2016-05-26 01:42:11","endLine":140,"groupId":"21077","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSorting","params":"(intprecisionStep)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/861adb43d74f733917bb0a0294197cdcf9ce66.src","preCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms32.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2018-07-30 16:08:16","codes":[{"authorDate":"2018-07-30 16:08:16","commitOrder":2,"curCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.LONG, true)));\n      if (topDocs.totalHits.value==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=searcher.doc(sd[0].doc).getField(field).numericValue().longValue();\n      for (int j=1; j<sd.length; j++) {\n        long act=searcher.doc(sd[j].doc).getField(field).numericValue().longValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","date":"2018-07-30 22:38:05","endLine":145,"groupId":"103323","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSorting","params":"(intprecisionStep)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/e523b8a8451b7e1a194aef875c19a85749be41.src","preCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.LONG, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      long last=searcher.doc(sd[0].doc).getField(field).numericValue().longValue();\n      for (int j=1; j<sd.length; j++) {\n        long act=searcher.doc(sd[j].doc).getField(field).numericValue().longValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms64.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2018-07-30 16:08:16","commitOrder":2,"curCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits.value==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","date":"2018-07-30 22:38:05","endLine":140,"groupId":"103323","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSorting","params":"(intprecisionStep)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/80867b0c1339014dbf8a8a198f23689e1babcb.src","preCode":"  private void testSorting(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    \r\n    \r\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      int lower=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      int upper=(int)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      Query tq= LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n      TopDocs topDocs = searcher.search(tq, noDocs, new Sort(new SortField(field, SortField.Type.INT, true)));\n      if (topDocs.totalHits==0) continue;\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      int last = searcher.doc(sd[0].doc).getField(field).numericValue().intValue();\n      for (int j=1; j<sd.length; j++) {\n        int act = searcher.doc(sd[j].doc).getField(field).numericValue().intValue();\n        assertTrue(\"Docs should be sorted backwards\", last>act );\n        last=act;\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestNumericTerms32.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"9ca053712af0795cbd0d0d9f2d862f24d9e547c3","commitMessage":"@@@LUCENE-8430: TopDocs.totalHits may now be a lower bound of the hit count.\n","date":"2018-07-30 22:38:05","modifiedFileCount":"178","status":"M","submitter":"Adrien Grand"}]
