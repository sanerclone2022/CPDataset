[{"authorTime":"2020-12-02 03:07:08","codes":[{"authorDate":"2020-12-02 03:07:08","commitOrder":1,"curCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100L);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = attributeFetcher.fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","date":"2020-12-02 03:07:08","endLine":611,"groupId":"48478","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplicaType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/240b6fd31dc078aca8791df761e11d9fb2d046.src","preCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100L);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = attributeFetcher.fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"B"},{"authorDate":"2020-12-02 03:07:08","commitOrder":1,"curCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1L);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100L);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","date":"2020-12-02 03:07:08","endLine":651,"groupId":"48475","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreeDiskConstraints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7e/240b6fd31dc078aca8791df761e11d9fb2d046.src","preCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1L);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100L);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"B"}],"commitId":"3df72502ccb72c2775db72b3347e99dc621d2d6b","commitMessage":"@@@SOLR-15004: tests for the replica placement API + placement plugin fixes and light refactoring (#2110)\n\nCo-authored-by: Andrzej Bialecki <ab@apache.org>","date":"2020-12-02 03:07:08","modifiedFileCount":"22","status":"B","submitter":"Ilan Ginzburg"},{"authorTime":"2021-01-04 22:24:25","codes":[{"authorDate":"2021-01-04 22:24:25","commitOrder":2,"curCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100.0);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = attributeFetcher.fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","date":"2021-01-04 22:24:25","endLine":611,"groupId":"48478","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplicaType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/dda9d1bceecd02ebceb212ff249a222fb69ee3.src","preCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100L);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = attributeFetcher.fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"},{"authorDate":"2021-01-04 22:24:25","commitOrder":2,"curCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1.0);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100.0);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","date":"2021-01-04 22:24:25","endLine":651,"groupId":"48475","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreeDiskConstraints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/dda9d1bceecd02ebceb212ff249a222fb69ee3.src","preCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1L);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100L);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"}],"commitId":"2695624a9f2d11a63f3640dd7f3bb30c2e6f938e","commitMessage":"@@@SOLR-15019: Replica placement API needs a way to fetch existing replica metrics.\n","date":"2021-01-04 22:24:25","modifiedFileCount":"14","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2021-01-26 22:16:04","codes":[{"authorDate":"2021-01-26 22:16:04","commitOrder":3,"curCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100.0);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    PlacementContext placementContext = clusterBuilder.buildPlacementContext();\n    Cluster cluster = placementContext.getCluster();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = placementContext.getAttributeFetcher().fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","date":"2021-01-26 22:16:33","endLine":613,"groupId":"48478","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplicaType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/d02a08acf6807071acd60714bd86e4a46a6b95.src","preCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100.0);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = attributeFetcher.fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"},{"authorDate":"2021-01-26 22:16:04","commitOrder":3,"curCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1.0);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100.0);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    PlacementContext placementContext = clusterBuilder.buildPlacementContext();\n    Cluster cluster = placementContext.getCluster();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","date":"2021-01-26 22:16:33","endLine":652,"groupId":"16343","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreeDiskConstraints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/d02a08acf6807071acd60714bd86e4a46a6b95.src","preCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1.0);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100.0);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    Cluster cluster = clusterBuilder.build();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlanFactory placementPlanFactory = new PlacementPlanFactoryImpl();\n    AttributeFetcher attributeFetcher = clusterBuilder.buildAttributeFetcher();\n    PlacementPlan pp = plugin.computePlacement(cluster, placementRequest, attributeFetcher, placementPlanFactory);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"}],"commitId":"6e9185a33aefa039934adb4c14764030f8e702ea","commitMessage":"@@@SOLR-15055: Re-implement 'withCollection'.\n","date":"2021-01-26 22:16:33","modifiedFileCount":"28","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2021-01-26 22:16:04","codes":[{"authorDate":"2021-03-01 22:21:54","commitOrder":4,"curCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100.0);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementConfig.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementConfig.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    PlacementContext placementContext = clusterBuilder.buildPlacementContext();\n    Cluster cluster = placementContext.getCluster();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = placementContext.getAttributeFetcher().fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","date":"2021-03-01 22:21:54","endLine":618,"groupId":"102643","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testReplicaType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fd/35b4cec309d32927f73ffc3f6743b9f6fb508e.src","preCode":"  public void testReplicaType() throws Exception {\n    String collectionName = \"replicaTypeCollection\";\n    int NUM_NODES = 6;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      nodeBuilder.setFreeDiskGB(100.0);\n      if (i < NUM_NODES / 3 * 2) {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Nrt, TlOg\");\n        nodeBuilder.setSysprop(\"group\", \"one\");\n      } else {\n        nodeBuilder.setSysprop(AffinityPlacementFactory.REPLICA_TYPE_SYSPROP, \"Pull,foobar\");\n        nodeBuilder.setSysprop(\"group\", \"two\");\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    PlacementContext placementContext = clusterBuilder.buildPlacementContext();\n    Cluster cluster = placementContext.getCluster();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 2, 2, 2);\n\n    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);\n    \r\n    assertEquals(12, pp.getReplicaPlacements().size());\n    \r\n    Map<Replica.ReplicaType, Map<String, Map<String, AtomicInteger>>> replicas = new HashMap<>();\n    AttributeValues attributeValues = placementContext.getAttributeFetcher().fetchAttributes();\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      Optional<String> groupOptional = attributeValues.getSystemProperty(rp.getNode(), \"group\");\n      if (!groupOptional.isPresent()) {\n        fail(\"missing group sysprop for node \" + rp.getNode());\n      }\n      String group = groupOptional.get();\n      if (group.equals(\"one\")) {\n        assertTrue(\"wrong replica type in group one\",\n            (rp.getReplicaType() == Replica.ReplicaType.NRT) || rp.getReplicaType() == Replica.ReplicaType.TLOG);\n      } else {\n        assertEquals(\"wrong replica type in group two\", Replica.ReplicaType.PULL, rp.getReplicaType());\n      }\n      replicas.computeIfAbsent(rp.getReplicaType(), type -> new HashMap<>())\n          .computeIfAbsent(rp.getShardName(), shard -> new HashMap<>())\n          .computeIfAbsent(group, g -> new AtomicInteger()).incrementAndGet();\n    }\n    replicas.forEach((type, perTypeReplicas) -> {\n      perTypeReplicas.forEach((shard, groupCounts) -> {\n        assertEquals(\"number of groups\", 1, groupCounts.size());\n        groupCounts.forEach((group, count) -> {\n          assertTrue(\"too few replicas shard=\" + shard + \", type=\" + type + \", group=\" + group,\n              count.get() >= 1);\n        });\n      });\n    });\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2021-01-26 22:16:04","commitOrder":4,"curCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1.0);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100.0);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    PlacementContext placementContext = clusterBuilder.buildPlacementContext();\n    Cluster cluster = placementContext.getCluster();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","date":"2021-01-26 22:16:33","endLine":652,"groupId":"102643","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFreeDiskConstraints","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/d02a08acf6807071acd60714bd86e4a46a6b95.src","preCode":"  public void testFreeDiskConstraints() throws Exception {\n    String collectionName = \"freeDiskCollection\";\n    int NUM_NODES = 3;\n    Builders.ClusterBuilder clusterBuilder = Builders.newClusterBuilder().initializeLiveNodes(NUM_NODES);\n    Node smallNode = null;\n    for (int i = 0; i < NUM_NODES; i++) {\n      Builders.NodeBuilder nodeBuilder = clusterBuilder.getLiveNodeBuilders().get(i);\n      nodeBuilder.setCoreCount(0);\n      if (i == 0) {\n        \r\n        nodeBuilder.setFreeDiskGB(1.0);\n        smallNode = nodeBuilder.build();\n      } else {\n        nodeBuilder.setFreeDiskGB(100.0);\n      }\n    }\n\n    Builders.CollectionBuilder collectionBuilder = Builders.newCollectionBuilder(collectionName);\n    collectionBuilder.initializeShardsReplicas(2, 0, 0, 0, clusterBuilder.getLiveNodeBuilders());\n    clusterBuilder.addCollection(collectionBuilder);\n\n    PlacementContext placementContext = clusterBuilder.buildPlacementContext();\n    Cluster cluster = placementContext.getCluster();\n\n    SolrCollection solrCollection = cluster.getCollection(collectionName);\n\n    PlacementRequestImpl placementRequest = new PlacementRequestImpl(solrCollection,\n        StreamSupport.stream(solrCollection.shards().spliterator(), false)\n            .map(Shard::getShardName).collect(Collectors.toSet()),\n        cluster.getLiveNodes(), 1, 0, 1);\n\n    PlacementPlan pp = plugin.computePlacement(placementRequest, placementContext);\n    assertEquals(4, pp.getReplicaPlacements().size());\n    for (ReplicaPlacement rp : pp.getReplicaPlacements()) {\n      assertFalse(\"should not put any replicas on \" + smallNode, rp.getNode().equals(smallNode));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cluster/placement/plugins/AffinityPlacementFactoryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"N"}],"commitId":"2c5b86b67374fc9e6ff4f5f8b18b61adce4b3e3a","commitMessage":"@@@SOLR-15130: Support for per-collection replica placement node sets.  a.k.a \"node type\"\nplacements.\n","date":"2021-03-01 22:21:54","modifiedFileCount":"10","status":"M","submitter":"Andrzej Bialecki"}]
