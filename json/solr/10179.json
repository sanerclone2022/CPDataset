[{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2017-11-28 16:01:18","commitOrder":3,"curCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object value = values[0];\n\n    double sumTo = 1.0;\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      sumTo = n.doubleValue();\n    }\n\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        double[] unitRow = MathArrays.normalizeArray(row, sumTo);\n        unitData[i] = unitRow;\n      }\n\n      return new Matrix(unitData);\n    } else if(value instanceof List) {\n      List<Number> vals = (List<Number>)value;\n      double[] doubles = new double[vals.size()];\n      for(int i=0; i<doubles.length; i++) {\n        doubles[i] = vals.get(i).doubleValue();\n      }\n\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = MathArrays.normalizeArray(doubles, sumTo);\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","date":"2017-11-28 16:01:18","endLine":83,"groupId":"39244","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d3/00f598cc225c91c9ad170bb7c45e97b219e395.src","preCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object value = values[0];\n\n    double sumTo = 1.0;\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      sumTo = n.doubleValue();\n    }\n\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        double[] unitRow = MathArrays.normalizeArray(row, sumTo);\n        unitData[i] = unitRow;\n      }\n\n      return new Matrix(unitData);\n    } else if(value instanceof List) {\n      List<Number> vals = (List<Number>)value;\n      double[] doubles = new double[vals.size()];\n      for(int i=0; i<doubles.length; i++) {\n        doubles[i] = vals.get(i).doubleValue();\n      }\n\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = MathArrays.normalizeArray(doubles, sumTo);\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NormalizeSumEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"NB"},{"authorDate":"2018-01-23 20:35:14","commitOrder":3,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","date":"2018-01-23 20:35:14","endLine":79,"groupId":"56754","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/d72ae367f6e70dd0b0f46c4902498e553ebcb6.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"MB"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-10-07 10:17:45","codes":[{"authorDate":"2019-10-07 10:17:45","commitOrder":4,"curCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object value = values[0];\n\n    double sumTo = 1.0;\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      sumTo = n.doubleValue();\n    }\n\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        double[] unitRow = MathArrays.normalizeArray(row, sumTo);\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> vals = (List<Number>)value;\n      double[] doubles = new double[vals.size()];\n      for(int i=0; i<doubles.length; i++) {\n        doubles[i] = vals.get(i).doubleValue();\n      }\n\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = MathArrays.normalizeArray(doubles, sumTo);\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","date":"2019-10-07 10:18:00","endLine":86,"groupId":"39244","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/67/17909e9df38f8873931b1454120c70a26ddc08.src","preCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object value = values[0];\n\n    double sumTo = 1.0;\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      sumTo = n.doubleValue();\n    }\n\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        double[] unitRow = MathArrays.normalizeArray(row, sumTo);\n        unitData[i] = unitRow;\n      }\n\n      return new Matrix(unitData);\n    } else if(value instanceof List) {\n      List<Number> vals = (List<Number>)value;\n      double[] doubles = new double[vals.size()];\n      for(int i=0; i<doubles.length; i++) {\n        doubles[i] = vals.get(i).doubleValue();\n      }\n\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = MathArrays.normalizeArray(doubles, sumTo);\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NormalizeSumEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2019-10-07 10:17:45","commitOrder":4,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","date":"2019-10-07 10:18:00","endLine":79,"groupId":"56754","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/463cd9a470cdbccd53b88178a25ecfeb52b9ad.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"88fee95d54183c3c3d163660e99184c76d7cdb58","commitMessage":"@@@SOLR-13298: Allow zplot to plot matrices\n","date":"2019-10-07 10:18:00","modifiedFileCount":"9","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":5,"curCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object value = values[0];\n\n    double sumTo = 1.0;\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      sumTo = n.doubleValue();\n    }\n\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        double[] unitRow = MathArrays.normalizeArray(row, sumTo);\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> vals = (List<Number>)value;\n      double[] doubles = new double[vals.size()];\n      for(int i=0; i<doubles.length; i++) {\n        doubles[i] = vals.get(i).doubleValue();\n      }\n\n      List<Number> unitList = new ArrayList<>(doubles.length);\n      double[] unitArray = MathArrays.normalizeArray(doubles, sumTo);\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":87,"groupId":"10179","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/c90ea997b676c9e591bc7d67581a8e58467473.src","preCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object value = values[0];\n\n    double sumTo = 1.0;\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      sumTo = n.doubleValue();\n    }\n\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        double[] unitRow = MathArrays.normalizeArray(row, sumTo);\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> vals = (List<Number>)value;\n      double[] doubles = new double[vals.size()];\n      for(int i=0; i<doubles.length; i++) {\n        doubles[i] = vals.get(i).doubleValue();\n      }\n\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = MathArrays.normalizeArray(doubles, sumTo);\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NormalizeSumEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":5,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList<>(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":80,"groupId":"10179","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/eadee4f427a76963674beb1ed36c2c7927ade5.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"}]
