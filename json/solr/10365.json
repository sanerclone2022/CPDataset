[{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2017-04-26 22:57:52","commitOrder":3,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2017-04-26 23:17:43","endLine":217,"groupId":"7598","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/48a46c5b1c92b107a90f0d4c42f4a88132ce72.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"},{"authorDate":"2016-05-23 14:35:53","commitOrder":3,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":167,"groupId":"7598","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/f4b438ee03e4b523c913884797851767748a88.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"NB"}],"commitId":"0e963f7a8aeac0b8a831cd44fd48cd0c6bda11d2","commitMessage":"@@@SOLR-10566: Add timeseries Streaming Expression\n","date":"2017-04-26 23:17:43","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2017-05-31 19:56:14","commitOrder":4,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2017-05-31 19:56:14","endLine":235,"groupId":"7598","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fe/2a1066567727e488cc9db0bbc64092ed23dd8a.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":4,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":167,"groupId":"7598","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/f4b438ee03e4b523c913884797851767748a88.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"97693234def7fb4fc92d8fbaab775705aaaaf565","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-05-31 19:56:14","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2018-12-12 22:15:41","commitOrder":5,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2018-12-12 22:16:08","endLine":250,"groupId":"7598","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/4c70bb9f32afe284a030dd7518ca75cbcc146a.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":167,"groupId":"7598","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/f4b438ee03e4b523c913884797851767748a88.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"7e4555a2fdb863d6aac2f785116f8f13e51bf16b","commitMessage":"@@@SOLR-13057: Allow search.  facet and timeseries Streaming Expressions to accept a comma delimited list of collections\n","date":"2018-12-12 22:16:08","modifiedFileCount":"6","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-05-19 04:22:56","codes":[{"authorDate":"2018-12-12 22:15:41","commitOrder":6,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2018-12-12 22:16:08","endLine":250,"groupId":"10365","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/4c70bb9f32afe284a030dd7518ca75cbcc146a.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"},{"authorDate":"2020-05-19 04:22:56","commitOrder":6,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n","date":"2020-05-19 21:10:23","endLine":178,"groupId":"10365","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/47565dbe0c81f84b453bb7a1fb690585c2c6e6.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"16aad55369d285fec96425f996984a9f4afe28e4","commitMessage":"@@@SOLR-14476: Add percentiles and standard deviation aggregations to stats.  facet and timeseries Streaming Expressions\n","date":"2020-05-19 21:10:23","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
