[{"authorTime":"2018-10-23 03:20:13","codes":[{"authorDate":"2018-10-23 03:20:13","commitOrder":2,"curCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          \r\n          \r\n          \r\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","date":"2018-10-23 03:20:13","endLine":132,"groupId":"18288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/f8fd59bbee3941ba759bda0372ad54ed70be16.src","preCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          \r\n          \r\n          \r\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"MB"},{"authorDate":"2018-10-23 03:20:13","commitOrder":2,"curCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","date":"2018-10-23 03:20:13","endLine":130,"groupId":"18288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ef/02ffad377c131f56f1db015fd66f045916d386.src","preCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"fcaea07f3c8cba34906ca02f40fb1d2c40badc08","commitMessage":"@@@SOLR-12829: Add plist (parallel list) Streaming Expression\n","date":"2018-10-23 03:20:13","modifiedFileCount":"5","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 22:03:07","codes":[{"authorDate":"2020-06-08 22:03:07","commitOrder":3,"curCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          \r\n          \r\n          \r\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          return Tuple.EOF();\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":129,"groupId":"10308","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/58df5521cd75b4569dedfc76655d211d99dfef.src","preCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n          \r\n          \r\n          \r\n          streams[streamIndex] = null;\n          currentStream.open();\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ListStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-06-08 22:03:07","commitOrder":3,"curCode":"  public Tuple read() throws IOException {\n    while (true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n        } else {\n          return Tuple.EOF();\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":127,"groupId":"10308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/f2901d9634f50ea960189ab12fdb4b096c90cd.src","preCode":"  public Tuple read() throws IOException {\n    while(true) {\n      if (currentStream == null) {\n        if (streamIndex < streams.length) {\n          currentStream = streams[streamIndex];\n        } else {\n          HashMap map = new HashMap();\n          map.put(\"EOF\", true);\n          return new Tuple(map);\n        }\n      }\n\n      Tuple tuple = currentStream.read();\n      if (tuple.EOF) {\n        currentStream.close();\n        currentStream = null;\n        ++streamIndex;\n      } else {\n        return tuple;\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelListStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"30924f23d6834605b9bf2d24509755ff61c4e878","commitMessage":"@@@SOLR-14470: Add streaming expressions to /export handler.\n","date":"2020-06-08 22:03:07","modifiedFileCount":"75","status":"M","submitter":"Andrzej Bialecki"}]
