[{"authorTime":"2021-02-19 21:40:23","codes":[{"authorDate":"2021-02-19 21:40:23","commitOrder":2,"curCode":"    private void createSingleReplicaPerShard(NamedList results,\n                                             DocCollection restoreCollection,\n                                             String asyncId,\n                                             ClusterState clusterState, List<ReplicaPosition> replicaPositions) throws Exception {\n      CountDownLatch countDownLatch = new CountDownLatch(restoreCollection.getSlices().size());\n\n      \r\n      for (Slice slice : restoreCollection.getSlices()) {\n        String sliceName = slice.getName();\n        log.info(\"Adding replica for shard={} collection={} \", sliceName, restoreCollection);\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD);\n        propMap.put(COLLECTION_PROP, restoreCollection.getName());\n        propMap.put(SHARD_ID_PROP, sliceName);\n\n        if (numNrtReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.NRT.name());\n        } else if (numTlogReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.TLOG.name());\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unexpected number of replicas, replicationFactor, \" +\n                  Replica.Type.NRT + \" or \" + Replica.Type.TLOG + \" must be greater than 0\");\n        }\n\n        \r\n        String node;\n        for (ReplicaPosition replicaPosition : replicaPositions) {\n          if (Objects.equals(replicaPosition.shard, sliceName)) {\n            node = replicaPosition.node;\n            propMap.put(CoreAdminParams.NODE, node);\n            replicaPositions.remove(replicaPosition);\n            break;\n          }\n        }\n\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        CollectionHandlingUtils.addPropertyParams(message, propMap);\n        final NamedList addReplicaResult = new NamedList();\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), addReplicaResult, () -> {\n          Object addResultFailure = addReplicaResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addReplicaResult.get(\"success\"));\n          }\n          countDownLatch.countDown();\n        });\n      }\n\n      boolean allIsDone = countDownLatch.await(1, TimeUnit.HOURS);\n      if (!allIsDone) {\n        throw new TimeoutException(\"Initial replicas were not created within 1 hour. Timing out.\");\n      }\n    }\n","date":"2021-02-19 21:40:23","endLine":437,"groupId":"36421","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSingleReplicaPerShard","params":"(NamedListresults@DocCollectionrestoreCollection@StringasyncId@ClusterStateclusterState@List<ReplicaPosition>replicaPositions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/0605cda463d7d0908bf8d0a31dd31f476a6148.src","preCode":"    private void createSingleReplicaPerShard(NamedList results,\n                                             DocCollection restoreCollection,\n                                             String asyncId,\n                                             ClusterState clusterState, List<ReplicaPosition> replicaPositions) throws Exception {\n      CountDownLatch countDownLatch = new CountDownLatch(restoreCollection.getSlices().size());\n\n      \r\n      for (Slice slice : restoreCollection.getSlices()) {\n        String sliceName = slice.getName();\n        log.info(\"Adding replica for shard={} collection={} \", sliceName, restoreCollection);\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD);\n        propMap.put(COLLECTION_PROP, restoreCollection.getName());\n        propMap.put(SHARD_ID_PROP, sliceName);\n\n        if (numNrtReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.NRT.name());\n        } else if (numTlogReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.TLOG.name());\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unexpected number of replicas, replicationFactor, \" +\n                  Replica.Type.NRT + \" or \" + Replica.Type.TLOG + \" must be greater than 0\");\n        }\n\n        \r\n        String node;\n        for (ReplicaPosition replicaPosition : replicaPositions) {\n          if (Objects.equals(replicaPosition.shard, sliceName)) {\n            node = replicaPosition.node;\n            propMap.put(CoreAdminParams.NODE, node);\n            replicaPositions.remove(replicaPosition);\n            break;\n          }\n        }\n\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        CollectionHandlingUtils.addPropertyParams(message, propMap);\n        final NamedList addReplicaResult = new NamedList();\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), addReplicaResult, () -> {\n          Object addResultFailure = addReplicaResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addReplicaResult.get(\"success\"));\n          }\n          countDownLatch.countDown();\n        });\n      }\n\n      boolean allIsDone = countDownLatch.await(1, TimeUnit.HOURS);\n      if (!allIsDone) {\n        throw new TimeoutException(\"Initial replicas were not created within 1 hour. Timing out.\");\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/RestoreCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"MB"},{"authorDate":"2021-02-19 21:40:23","commitOrder":2,"curCode":"  private static void addFailure(NamedList<Object> results, String key, Object value) {\n    SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n    if (failure == null) {\n      failure = new SimpleOrderedMap<>();\n      results.add(\"failure\", failure);\n    }\n    failure.add(key, value);\n  }\n","date":"2021-02-19 21:40:23","endLine":383,"groupId":"39332","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addFailure","params":"(NamedList<Object>results@Stringkey@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/9d7c7d6907172cf1dc79e896bd41e04ca888f6.src","preCode":"  private static void addFailure(NamedList<Object> results, String key, Object value) {\n    SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n    if (failure == null) {\n      failure = new SimpleOrderedMap<>();\n      results.add(\"failure\", failure);\n    }\n    failure.add(key, value);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollectionHandlingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"B"}],"commitId":"e7c80f6445a04cb3d1b49d85d773fde283c916fe","commitMessage":"@@@SOLR-15157: refactor Collection API to separate from Overseer and message handling abstractions (#2390)\n\nNo functional changes. In preparation of distributing the Collection API command execution.","date":"2021-02-19 21:40:23","modifiedFileCount":"42","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2021-02-19 21:40:23","commitOrder":3,"curCode":"    private void createSingleReplicaPerShard(NamedList results,\n                                             DocCollection restoreCollection,\n                                             String asyncId,\n                                             ClusterState clusterState, List<ReplicaPosition> replicaPositions) throws Exception {\n      CountDownLatch countDownLatch = new CountDownLatch(restoreCollection.getSlices().size());\n\n      \r\n      for (Slice slice : restoreCollection.getSlices()) {\n        String sliceName = slice.getName();\n        log.info(\"Adding replica for shard={} collection={} \", sliceName, restoreCollection);\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD);\n        propMap.put(COLLECTION_PROP, restoreCollection.getName());\n        propMap.put(SHARD_ID_PROP, sliceName);\n\n        if (numNrtReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.NRT.name());\n        } else if (numTlogReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.TLOG.name());\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unexpected number of replicas, replicationFactor, \" +\n                  Replica.Type.NRT + \" or \" + Replica.Type.TLOG + \" must be greater than 0\");\n        }\n\n        \r\n        String node;\n        for (ReplicaPosition replicaPosition : replicaPositions) {\n          if (Objects.equals(replicaPosition.shard, sliceName)) {\n            node = replicaPosition.node;\n            propMap.put(CoreAdminParams.NODE, node);\n            replicaPositions.remove(replicaPosition);\n            break;\n          }\n        }\n\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        CollectionHandlingUtils.addPropertyParams(message, propMap);\n        final NamedList addReplicaResult = new NamedList();\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), addReplicaResult, () -> {\n          Object addResultFailure = addReplicaResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addReplicaResult.get(\"success\"));\n          }\n          countDownLatch.countDown();\n        });\n      }\n\n      boolean allIsDone = countDownLatch.await(1, TimeUnit.HOURS);\n      if (!allIsDone) {\n        throw new TimeoutException(\"Initial replicas were not created within 1 hour. Timing out.\");\n      }\n    }\n","date":"2021-02-19 21:40:23","endLine":437,"groupId":"36421","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSingleReplicaPerShard","params":"(NamedListresults@DocCollectionrestoreCollection@StringasyncId@ClusterStateclusterState@List<ReplicaPosition>replicaPositions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/0605cda463d7d0908bf8d0a31dd31f476a6148.src","preCode":"    private void createSingleReplicaPerShard(NamedList results,\n                                             DocCollection restoreCollection,\n                                             String asyncId,\n                                             ClusterState clusterState, List<ReplicaPosition> replicaPositions) throws Exception {\n      CountDownLatch countDownLatch = new CountDownLatch(restoreCollection.getSlices().size());\n\n      \r\n      for (Slice slice : restoreCollection.getSlices()) {\n        String sliceName = slice.getName();\n        log.info(\"Adding replica for shard={} collection={} \", sliceName, restoreCollection);\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD);\n        propMap.put(COLLECTION_PROP, restoreCollection.getName());\n        propMap.put(SHARD_ID_PROP, sliceName);\n\n        if (numNrtReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.NRT.name());\n        } else if (numTlogReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.TLOG.name());\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unexpected number of replicas, replicationFactor, \" +\n                  Replica.Type.NRT + \" or \" + Replica.Type.TLOG + \" must be greater than 0\");\n        }\n\n        \r\n        String node;\n        for (ReplicaPosition replicaPosition : replicaPositions) {\n          if (Objects.equals(replicaPosition.shard, sliceName)) {\n            node = replicaPosition.node;\n            propMap.put(CoreAdminParams.NODE, node);\n            replicaPositions.remove(replicaPosition);\n            break;\n          }\n        }\n\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        CollectionHandlingUtils.addPropertyParams(message, propMap);\n        final NamedList addReplicaResult = new NamedList();\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), addReplicaResult, () -> {\n          Object addResultFailure = addReplicaResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addReplicaResult.get(\"success\"));\n          }\n          countDownLatch.countDown();\n        });\n      }\n\n      boolean allIsDone = countDownLatch.await(1, TimeUnit.HOURS);\n      if (!allIsDone) {\n        throw new TimeoutException(\"Initial replicas were not created within 1 hour. Timing out.\");\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/RestoreCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"N"},{"authorDate":"2021-07-08 04:15:36","commitOrder":3,"curCode":"  private static void addFailure(NamedList<Object> results, String key, Object value) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n    if (failure == null) {\n      failure = new SimpleOrderedMap<>();\n      results.add(\"failure\", failure);\n    }\n    failure.add(key, value);\n  }\n","date":"2021-07-08 04:15:36","endLine":355,"groupId":"39332","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"addFailure","params":"(NamedList<Object>results@Stringkey@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/34817554376e47cdfacbfa6cb7c60ecd2e2755.src","preCode":"  private static void addFailure(NamedList<Object> results, String key, Object value) {\n    SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n    if (failure == null) {\n      failure = new SimpleOrderedMap<>();\n      results.add(\"failure\", failure);\n    }\n    failure.add(key, value);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollectionHandlingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":4,"curCode":"    private void createSingleReplicaPerShard(NamedList<Object> results,\n                                             DocCollection restoreCollection,\n                                             String asyncId,\n                                             ClusterState clusterState, List<ReplicaPosition> replicaPositions) throws Exception {\n      CountDownLatch countDownLatch = new CountDownLatch(restoreCollection.getSlices().size());\n\n      \r\n      for (Slice slice : restoreCollection.getSlices()) {\n        String sliceName = slice.getName();\n        log.info(\"Adding replica for shard={} collection={} \", sliceName, restoreCollection);\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD);\n        propMap.put(COLLECTION_PROP, restoreCollection.getName());\n        propMap.put(SHARD_ID_PROP, sliceName);\n\n        if (numNrtReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.NRT.name());\n        } else if (numTlogReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.TLOG.name());\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unexpected number of replicas, replicationFactor, \" +\n                  Replica.Type.NRT + \" or \" + Replica.Type.TLOG + \" must be greater than 0\");\n        }\n\n        \r\n        String node;\n        for (ReplicaPosition replicaPosition : replicaPositions) {\n          if (Objects.equals(replicaPosition.shard, sliceName)) {\n            node = replicaPosition.node;\n            propMap.put(CoreAdminParams.NODE, node);\n            replicaPositions.remove(replicaPosition);\n            break;\n          }\n        }\n\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        CollectionHandlingUtils.addPropertyParams(message, propMap);\n        final NamedList<Object> addReplicaResult = new NamedList<>();\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), addReplicaResult, () -> {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> addResultFailure = (NamedList<Object>) addReplicaResult.get(\"failure\");\n          if (addResultFailure != null) {\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap<>();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll(addResultFailure);\n          } else {\n              @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap<>();\n              results.add(\"success\", success);\n            }\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> addReplicaSuccess = (NamedList<Object>) addReplicaResult.get(\"success\");\n            success.addAll(addReplicaSuccess);\n          }\n          countDownLatch.countDown();\n        });\n      }\n\n      boolean allIsDone = countDownLatch.await(1, TimeUnit.HOURS);\n      if (!allIsDone) {\n        throw new TimeoutException(\"Initial replicas were not created within 1 hour. Timing out.\");\n      }\n    }\n","date":"2021-07-13 23:49:56","endLine":442,"groupId":"102434","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createSingleReplicaPerShard","params":"(NamedList<Object>results@DocCollectionrestoreCollection@StringasyncId@ClusterStateclusterState@List<ReplicaPosition>replicaPositions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b1/fda48de5e33c5e824100f4af32b6f01df54777.src","preCode":"    private void createSingleReplicaPerShard(NamedList results,\n                                             DocCollection restoreCollection,\n                                             String asyncId,\n                                             ClusterState clusterState, List<ReplicaPosition> replicaPositions) throws Exception {\n      CountDownLatch countDownLatch = new CountDownLatch(restoreCollection.getSlices().size());\n\n      \r\n      for (Slice slice : restoreCollection.getSlices()) {\n        String sliceName = slice.getName();\n        log.info(\"Adding replica for shard={} collection={} \", sliceName, restoreCollection);\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(Overseer.QUEUE_OPERATION, CREATESHARD);\n        propMap.put(COLLECTION_PROP, restoreCollection.getName());\n        propMap.put(SHARD_ID_PROP, sliceName);\n\n        if (numNrtReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.NRT.name());\n        } else if (numTlogReplicas >= 1) {\n          propMap.put(REPLICA_TYPE, Replica.Type.TLOG.name());\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unexpected number of replicas, replicationFactor, \" +\n                  Replica.Type.NRT + \" or \" + Replica.Type.TLOG + \" must be greater than 0\");\n        }\n\n        \r\n        String node;\n        for (ReplicaPosition replicaPosition : replicaPositions) {\n          if (Objects.equals(replicaPosition.shard, sliceName)) {\n            node = replicaPosition.node;\n            propMap.put(CoreAdminParams.NODE, node);\n            replicaPositions.remove(replicaPosition);\n            break;\n          }\n        }\n\n        \r\n        if (asyncId != null) {\n          propMap.put(ASYNC, asyncId);\n        }\n        CollectionHandlingUtils.addPropertyParams(message, propMap);\n        final NamedList addReplicaResult = new NamedList();\n        new AddReplicaCmd(ccc).addReplica(clusterState, new ZkNodeProps(propMap), addReplicaResult, () -> {\n          Object addResultFailure = addReplicaResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addReplicaResult.get(\"success\"));\n          }\n          countDownLatch.countDown();\n        });\n      }\n\n      boolean allIsDone = countDownLatch.await(1, TimeUnit.HOURS);\n      if (!allIsDone) {\n        throw new TimeoutException(\"Initial replicas were not created within 1 hour. Timing out.\");\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/RestoreCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"},{"authorDate":"2021-07-08 04:15:36","commitOrder":4,"curCode":"  private static void addFailure(NamedList<Object> results, String key, Object value) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n    if (failure == null) {\n      failure = new SimpleOrderedMap<>();\n      results.add(\"failure\", failure);\n    }\n    failure.add(key, value);\n  }\n","date":"2021-07-08 04:15:36","endLine":355,"groupId":"102434","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"addFailure","params":"(NamedList<Object>results@Stringkey@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/34817554376e47cdfacbfa6cb7c60ecd2e2755.src","preCode":"  private static void addFailure(NamedList<Object> results, String key, Object value) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n    if (failure == null) {\n      failure = new SimpleOrderedMap<>();\n      results.add(\"failure\", failure);\n    }\n    failure.add(key, value);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollectionHandlingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
