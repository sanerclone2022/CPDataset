[{"authorTime":"2016-10-06 18:39:02","codes":[{"authorDate":"2016-12-19 23:15:04","commitOrder":3,"curCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        1, 1);\n    try (SolrClient solrClient = newSolrClient()) {\n      create.process(solrClient);\n    }\n\n    \r\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","date":"2016-12-19 23:15:04","endLine":213,"groupId":"29455","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/8397b37ef75b7a41bc021c74135e1130b2b98a.src","preCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        1, 1);\n    try (SolrClient solrClient = newSolrClient()) {\n      create.process(solrClient);\n    }\n\n    \r\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"},{"authorDate":"2016-10-06 18:39:02","commitOrder":3,"curCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    \r\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","date":"2016-10-18 19:34:13","endLine":361,"groupId":"29455","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/b7f5b9f746be399b49ac3feb9688f7e940d269.src","preCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    \r\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"NB"}],"commitId":"a1a8b2864e621c18aa86b21d4a244233e991a47d","commitMessage":"@@@SOLR-9513: Generic Hadoop authentication plugins.  GenericHadoopAuthPlugin and ConfigurableInternodeAuthHadoopPlugin\n","date":"2016-12-19 23:15:04","modifiedFileCount":"7","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2016-10-06 18:39:02","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":4,"curCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        1, 1);\n    try (SolrClient solrClient = newSolrClient()) {\n      create.process(solrClient);\n    }\n\n    \r\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      try (HttpSolrClient client =\n               new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      }\n    }\n  }\n","date":"2019-08-03 15:30:49","endLine":198,"groupId":"29455","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/e7527223d0504c24963d671f95b1cff92a6aef.src","preCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        1, 1);\n    try (SolrClient solrClient = newSolrClient()) {\n      create.process(solrClient);\n    }\n\n    \r\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2016-10-06 18:39:02","commitOrder":4,"curCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    \r\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","date":"2016-10-18 19:34:13","endLine":361,"groupId":"29455","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/b7f5b9f746be399b49ac3feb9688f7e940d269.src","preCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    \r\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"N"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"},{"authorTime":"2019-12-12 10:38:25","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":5,"curCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        1, 1);\n    try (SolrClient solrClient = newSolrClient()) {\n      create.process(solrClient);\n    }\n\n    \r\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      try (HttpSolrClient client =\n               new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      }\n    }\n  }\n","date":"2019-08-03 15:30:49","endLine":198,"groupId":"102840","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/e7527223d0504c24963d671f95b1cff92a6aef.src","preCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n\n    \r\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        1, 1);\n    try (SolrClient solrClient = newSolrClient()) {\n      create.process(solrClient);\n    }\n\n    \r\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      try (HttpSolrClient client =\n               new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestImpersonationWithHadoopAuth.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2019-12-12 10:38:25","commitOrder":5,"curCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    \r\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(\n          jetty.getBaseUrl().toString() + \"/\" + collectionName).build()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      }\n    }\n  }\n","date":"2019-12-12 11:02:07","endLine":331,"groupId":"102840","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/2de3566b87f236de1b53cbdae8a8ff49b97ca0.src","preCode":"  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    \r\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"861c77cb175a78cc898d6cd5b6db387ebdbd89b9","commitMessage":"@@@SOLR-14053: Fix HDFS tests to be ignored if Native I/O isn't available (remove tests.disableHdfs)\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2019-12-12 11:02:07","modifiedFileCount":"6","status":"M","submitter":"Kevin Risden"}]
