[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":2,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n","date":"2011-07-10 07:01:53","endLine":804,"groupId":"54395","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/b884c75369b2f67ff4932fe65d7972be9556fe.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"NB"}],"commitId":"96c4bb7074546cb87885bba5a7eaa1dea36d7c33","commitMessage":"@@@SOLR-2066: Added support for distributed grouping.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1171970 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-17 20:48:27","modifiedFileCount":"12","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2012-03-28 01:41:18","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":3,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2012-03-28 01:41:18","commitOrder":3,"curCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          if(removeKeyField) {\n            doc.removeFields(keyFieldName);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n","date":"2012-03-28 01:41:18","endLine":991,"groupId":"1949","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/2e953a34862e68b93a3655658a2291d380b7da.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":961,"status":"M"}],"commitId":"7b3f632f32ae483ef3a496e9abbbb5e1b40cb4a0","commitMessage":"@@@SOLR-3214: If you use multiple fl entries rather than a comma separated list.  all but the first entry can be ignored if you are using distributed search.\nSOLR-3256: Distributed search throws NPE when using fl=score\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1305927 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-28 01:41:18","modifiedFileCount":"2","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-02-24 13:43:23","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":4,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2014-02-24 13:43:23","commitOrder":4,"curCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2014-02-24 13:43:23","endLine":1140,"groupId":"19789","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/f3841434d9da568ce4f8b60b52f82ea177c44e.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          if(removeKeyField) {\n            doc.removeFields(keyFieldName);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1110,"status":"M"}],"commitId":"55426d50702f2fb80e4c9cbd325dedbd5bb3ed4d","commitMessage":"@@@SOLR-1880: Distributed Search skips GET_FIELDS stage if EXECUTE_QUERY stage gets all fields. Requests with fl=id or fl=id. score are now single-pass.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1571152 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-24 13:43:23","modifiedFileCount":"3","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2014-04-19 06:10:26","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":5,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2014-04-19 06:10:26","commitOrder":5,"curCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2014-04-19 06:10:26","endLine":1165,"groupId":"19789","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/e4f6437e55df1a903039633de453d9ddb07a5b.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1135,"status":"M"}],"commitId":"2af485f151fa72efc13d74566aec599c606c1523","commitMessage":"@@@SOLR-5974: Remove ShardDoc.score and use parent's ScoreDoc.score\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1588580 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-19 06:10:26","modifiedFileCount":"2","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2014-07-05 01:54:53","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":6,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2014-07-05 01:54:53","commitOrder":6,"curCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2014-07-05 01:54:53","endLine":1270,"groupId":"50961","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/cf8a04d0b8faa4659a1a5795ad66d42475028e.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1218,"status":"M"}],"commitId":"271576ed0f81421b0717f6da23bf3371c6c1bd87","commitMessage":"@@@SOLR-6223: SearchComponents may throw NPE when using shards.tolerant and there is a failure in the 'GET_FIELDS/GET_HIGHLIGHTS/GET_DEBUG' phase\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1607897 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-07-05 01:54:53","modifiedFileCount":"6","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2014-12-02 06:44:11","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":7,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2014-12-02 06:44:11","commitOrder":7,"curCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2014-12-02 06:44:11","endLine":1273,"groupId":"50961","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/1b8dfe720dbf8f1b37a95157a44b08b3e8cf25.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1217,"status":"M"}],"commitId":"25bbac4a0dadde06e518900716f40ab9738ba2d2","commitMessage":"@@@SOLR-6795: distrib.singlePass returns score even though not asked for\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1642774 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-02 06:44:11","modifiedFileCount":"2","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2016-02-01 11:25:37","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":8,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2016-02-01 11:25:37","commitOrder":8,"curCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2016-02-01 11:25:37","endLine":1326,"groupId":"50961","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/fe28dfe0e869d859e1ac1b8ae041200d924748.src","preCode":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"M"}],"commitId":"4cdce3db77cde2506ac77dc9ced8c1f91ed9800f","commitMessage":"@@@SOLR-7968: Make QueryComponent extensible\n","date":"2016-02-01 11:25:37","modifiedFileCount":"3","status":"M","submitter":"David Smiley"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":9,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2016-10-03 03:18:22","commitOrder":9,"curCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":1356,"groupId":"50961","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/6a68d28fc507b56b0ac74aea5f41c631635caf.src","preCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1297,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-02-20 21:24:52","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":10,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2019-02-20 21:24:52","commitOrder":10,"curCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (responseHeader!=null && Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2019-03-04 22:41:57","endLine":1196,"groupId":"50961","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/ab304b5f34bf507897feb0b3565933c160d9fe.src","preCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1130,"status":"M"}],"commitId":"b8d569aff0c4417b0f9cd52d54455ab9b66236a1","commitMessage":"@@@SOLR-9882: reporting timeAllowed breach as partialResults instead of 500 error\n","date":"2019-03-04 22:41:57","modifiedFileCount":"16","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2019-06-12 23:53:16","codes":[{"authorDate":"2011-09-17 20:48:27","commitOrder":11,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2011-09-17 20:48:27","endLine":55,"groupId":"54919","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/12e1e8756721b9ae6ad95868da78be20ab2c4a.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2019-06-12 23:53:16","commitOrder":11,"curCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2019-06-13 00:09:29","endLine":1209,"groupId":"48493","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/8b5c988928fec08bc1750d4575428f1c48dc48.src","preCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (responseHeader!=null && Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1143,"status":"M"}],"commitId":"5ba6c0c7a2ed71fef321abee6b0fee13d93ea183","commitMessage":"@@@SOLR-13509: add omitHeader=false for shards requests to avoid NPE on partialResuls check\n","date":"2019-06-13 00:09:29","modifiedFileCount":"5","status":"M","submitter":"Mikhail Khludnev"},{"authorTime":"2019-06-12 23:53:16","codes":[{"authorDate":"2021-03-27 02:39:46","commitOrder":12,"curCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    if (rb.rsp.getReturnFields().getFieldRenames().get(uniqueIdFieldName) != null) {\n      \r\n      uniqueIdFieldName = rb.rsp.getReturnFields().getFieldRenames().get(uniqueIdFieldName);\n    }\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","date":"2021-03-27 02:39:46","endLine":56,"groupId":"102146","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"process","params":"(ResponseBuilderrb@ShardRequestshardRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/9aca1958ff852e27f357aed46b2edb1c0d2dcb.src","preCode":"  public void process(ResponseBuilder rb, ShardRequest shardRequest) {\n    boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n    ShardResponse srsp = shardRequest.responses.get(0);\n    SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n    String uniqueIdFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n    for (SolrDocument doc : docs) {\n      Object id = doc.getFieldValue(uniqueIdFieldName).toString();\n      ShardDoc shardDoc = rb.resultIds.get(id);\n      FieldDoc fieldDoc = (FieldDoc) shardDoc;\n      if (shardDoc != null) {\n        if (returnScores && !Float.isNaN(fieldDoc.score)) {\n            doc.setField(\"score\", fieldDoc.score);\n        }\n        rb.retrievedDocuments.put(id, doc);\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/StoredFieldsShardResponseProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-06-12 23:53:16","commitOrder":12,"curCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","date":"2019-06-13 00:09:29","endLine":1209,"groupId":"102146","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"returnFields","params":"(ResponseBuilderrb@ShardRequestsreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/8b5c988928fec08bc1750d4575428f1c48dc48.src","preCode":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    \r\n    \r\n    \r\n    \r\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        \r\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          \r\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              \r\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              \r\n              \r\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1143,"status":"N"}],"commitId":"3a533aa2dfbe0e0a1a5e4710b52ebfee6546fa9f","commitMessage":"@@@SOLR-15273: Distributed Group Query supports rename unique key field name (#35)\n\n* SOLR-15273: Distributed Group Query supports rename unique key field name\n\n* SOLR-15273: add CHANGES.txt\n\n* solr/CHANGES.txt edit\n\npicked 'field name alias' and 'result grouping' terminology from Solr Reference Guide:\n* https://solr.apache.org/guide/8_8/common-query-parameters.html#field-name-aliases\n* https://solr.apache.org/guide/8_8/result-grouping.html\n\nincluded NullPointerException and StoredFieldsShardResponseProcessor since users would encounter those when encountering the issue being fixed here\n\nCo-authored-by: shiming.li <shiming.li@zhaopin.com.cn>\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-03-27 02:39:46","modifiedFileCount":"2","status":"M","submitter":"limingnihao"}]
