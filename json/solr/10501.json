[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2018-11-30 01:58:51","endLine":751,"groupId":"19195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/b67d4b055ccc07147bf9c107c04228ac86f01e.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":5,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2019-03-04 17:41:45","endLine":762,"groupId":"19195","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":6,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2020-06-17 01:27:53","endLine":835,"groupId":"19195","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fb/363589300707a5ba887ca8307c8502d1a624b8.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":6,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2020-06-17 01:27:53","endLine":857,"groupId":"19195","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/76cb83739b589a06e3faeacfdcbb4a3b836016.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":7,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2021-01-18 23:59:41","endLine":846,"groupId":"19195","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":798,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":7,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2020-06-17 01:27:53","endLine":857,"groupId":"19195","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/76cb83739b589a06e3faeacfdcbb4a3b836016.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":8,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList<?> deletes = (NamedList<?>) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2021-06-22 00:19:37","endLine":840,"groupId":"10501","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/c5416f7c48b29d5eae20c10b349b5e8b92acb9.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":793,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":8,"curCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    NamedList<?> deletes = (NamedList<?>) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","date":"2021-06-22 00:19:37","endLine":844,"groupId":"10501","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testVersionsAreReturned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/96eb25255c58f4d6362ea8cda2f0a1dd926902.src","preCode":"  public void testVersionsAreReturned() throws Exception {\n    CollectionAdminRequest.createCollection(\"versions_collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"versions_collection\", 2, 2);\n    \n    \r\n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(\"id\", \"1\", \"a_t\", \"hello1\")\n        .add(\"id\", \"2\", \"a_t\", \"hello2\");\n    updateRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n\n    NamedList<Object> response = updateRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object addsObject = response.get(\"adds\");\n    \n    assertNotNull(\"There must be a adds parameter\", addsObject);\n    assertTrue(addsObject instanceof NamedList<?>);\n    NamedList<?> adds = (NamedList<?>) addsObject;\n    assertEquals(\"There must be 2 versions (one per doc)\", 2, adds.size());\n\n    Map<String, Long> versions = new HashMap<>();\n    Object object = adds.get(\"1\");\n    assertNotNull(\"There must be a version for id 1\", object);\n    assertTrue(\"Version for id 1 must be a long\", object instanceof Long);\n    versions.put(\"1\", (Long) object);\n\n    object = adds.get(\"2\");\n    assertNotNull(\"There must be a version for id 2\", object);\n    assertTrue(\"Version for id 2 must be a long\", object instanceof Long);\n    versions.put(\"2\", (Long) object);\n\n    QueryResponse resp = getRandomClient().query(\"versions_collection\", new SolrQuery(\"*:*\"));\n    assertEquals(\"There should be one document because overwrite=true\", 2, resp.getResults().getNumFound());\n\n    for (SolrDocument doc : resp.getResults()) {\n      Long version = versions.get(doc.getFieldValue(\"id\"));\n      assertEquals(\"Version on add must match _version_ field\", version, doc.getFieldValue(\"_version_\"));\n    }\n\n    \r\n    UpdateRequest deleteRequest = new UpdateRequest().deleteById(\"1\");\n    deleteRequest.setParam(UpdateParams.VERSIONS, Boolean.TRUE.toString());\n    response = deleteRequest.commit(getRandomClient(), \"versions_collection\").getResponse();\n    Object deletesObject = response.get(\"deletes\");\n    assertNotNull(\"There must be a deletes parameter\", deletesObject);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deletes = (NamedList) deletesObject;\n    assertEquals(\"There must be 1 version\", 1, deletes.size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":799,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
