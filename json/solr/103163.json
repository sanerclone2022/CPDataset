[{"authorTime":"2016-07-07 04:42:21","codes":[{"authorDate":"2016-07-07 04:42:21","commitOrder":3,"curCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n    \r\n    assertU(adoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"uncommitted\"));\n\n  }\n","date":"2016-07-07 04:42:21","endLine":67,"groupId":"56753","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/6848b7c028597e5836faf5c70afecc68fa3cef.src","preCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n    \r\n    assertU(adoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"uncommitted\"));\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"},{"authorDate":"2016-07-07 04:42:21","commitOrder":3,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n    \r\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\",\n                                          \"subject\", \"uncommitted\")).getStatus());\n  }\n","date":"2016-07-07 04:42:21","endLine":107,"groupId":"56753","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/56821a61489923d2f691634fd073c8590c7b6a.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n    \r\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\",\n                                          \"subject\", \"uncommitted\")).getStatus());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"ae316f1e39e58d89758f997913a38059d74ccb47","commitMessage":"@@@SOLR-9180: More comprehensive tests of psuedo-fields for RTG and SolrCloud requests\n\nThis commit also includes new @AwaitsFix'ed tests for the following known issues...\n\n * SOLR-9285 ArrayIndexOutOfBoundsException when ValueSourceAugmenter used with RTG on uncommitted doc\n * SOLR-9286 SolrCloud RTG: psuedo-fields (like ValueSourceAugmenter.  [shard].  etc...) silently fails (even for committed doc)\n * SOLR-9287 single node RTG: NPE if score is requested\n * SOLR-9288 RTG: fl=[docid] silently missing for uncommitted docs\n * SOLR-9289 SolrCloud RTG: fl=[docid] silently ignored for all docs\n","date":"2016-07-07 04:42:21","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2016-08-03 03:23:19","codes":[{"authorDate":"2016-08-03 03:23:19","commitOrder":4,"curCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n  }\n","date":"2016-08-03 03:23:19","endLine":65,"groupId":"56753","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/987345ed25d2c126916dad6244e0654062b147.src","preCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n    \r\n    assertU(adoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"uncommitted\"));\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2016-08-03 03:23:19","commitOrder":4,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n","date":"2016-08-03 03:23:19","endLine":108,"groupId":"56753","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6a/15e682bd07fb3529d7aebae40b84c6d7922391.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n    \r\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"99\", \"val_i\", \"1\", \"ssto\", \"X\",\n                                          \"subject\", \"uncommitted\")).getStatus());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"b3505298a5bef76ff83b269bf87a179d027da849","commitMessage":"@@@SOLR-9308: Fix distributed RTG to forward request params.  fixes fq and non-default fl params\n","date":"2016-08-03 03:23:19","modifiedFileCount":"5","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2016-10-06 18:39:02","codes":[{"authorDate":"2016-08-03 03:23:19","commitOrder":5,"curCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n  }\n","date":"2016-08-03 03:23:19","endLine":65,"groupId":"56753","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/987345ed25d2c126916dad6244e0654062b147.src","preCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2016-10-06 18:39:02","commitOrder":5,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n","date":"2016-10-18 19:34:13","endLine":101,"groupId":"27153","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f7/e6756e9551e7737f5251e288466dd3cb570a7e.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n\n    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,\n                                           configName, null, null, collectionProperties));\n    \n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"67f3f433e2359aedd3a28bf4c3c01875e4c5d14a","commitMessage":"@@@SOLR-9634: Deprecate create/deleteCollection methods on MiniSolrCloudCluster\n","date":"2016-10-18 19:34:13","modifiedFileCount":"29","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-04-09 21:16:57","codes":[{"authorDate":"2021-04-09 21:16:57","commitOrder":6,"curCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-pseudo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n  }\n","date":"2021-04-09 21:16:57","endLine":63,"groupId":"103163","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/05640f35de0320099a45447bb01b99189189e9.src","preCode":"  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-tlog.xml\",\"schema-psuedo-fields.xml\");\n\n    assertU(adoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\"));\n    assertU(adoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\"));\n    assertU(adoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\"));\n    assertU(commit());\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-04-09 21:16:57","commitOrder":6,"curCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-pseudo-fields.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n","date":"2021-04-09 21:16:57","endLine":100,"groupId":"103163","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"createMiniSolrCloudCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/1a6e5efc3837614ef82a940c51066200a7f032.src","preCode":"  private static void createMiniSolrCloudCluster() throws Exception {\n    \r\n    final int repFactor = usually() ? 1 : 2;;\n    \r\n    final int numShards = 2;\n    \r\n    final int numNodes = 1 + (numShards * repFactor);\n   \n    final String configName = DEBUG_LABEL + \"_config-set\";\n    final Path configDir = Paths.get(TEST_HOME(), \"collection1\", \"conf\");\n    \n    configureCluster(numNodes).addConfig(configName, configDir).configure();\n    \n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(\"config\", \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"schema\", \"schema-psuedo-fields.xml\");\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, configName, numShards, repFactor)\n        .setProperties(collectionProperties)\n        .process(cluster.getSolrClient());\n\n    CLOUD_CLIENT = cluster.getSolrClient();\n    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);\n\n    waitForRecoveriesToFinish(CLOUD_CLIENT);\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + \"/\" + COLLECTION_NAME + \"/\"));\n    }\n\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"42\", \"val_i\", \"1\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"43\", \"val_i\", \"9\", \"ssto\", \"X\", \"subject\", \"bbb\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"44\", \"val_i\", \"4\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"45\", \"val_i\", \"6\", \"ssto\", \"X\", \"subject\", \"aaa\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(sdoc(\"id\", \"46\", \"val_i\", \"3\", \"ssto\", \"X\", \"subject\", \"ggg\")).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());;\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"adf9e6d39cc55d87c0ae09748891bf0f6009a2b5","commitMessage":"@@@SOLR-15327: Fix typos spread in code base (#65)\n\n* SOLR-15327: Fix typos in the code base","date":"2021-04-09 21:16:57","modifiedFileCount":"17","status":"M","submitter":"Edward Ribeiro"}]
