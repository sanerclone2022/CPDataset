[{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":1,"curCode":"  public void testConnectToOldNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (ParseException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","date":"2018-12-17 00:58:20","endLine":67,"groupId":"47175","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectToOldNodesUsingHttp1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/f64b65dd2f7aeb861cd5a5b7483bf5bbeb2d8e.src","preCode":"  public void testConnectToOldNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (ParseException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2018-12-17 00:58:20","commitOrder":1,"curCode":"  public void testConnectToNewNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(false)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (ParseException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","date":"2018-12-17 00:58:20","endLine":87,"groupId":"47175","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectToNewNodesUsingHttp1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/f64b65dd2f7aeb861cd5a5b7483bf5bbeb2d8e.src","preCode":"  public void testConnectToNewNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(false)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (ParseException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"B","submitter":"Cao Manh Dat"},{"authorTime":"2020-05-13 05:50:07","codes":[{"authorDate":"2020-05-13 05:50:07","commitOrder":2,"curCode":"  public void testConnectToOldNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","date":"2020-05-13 05:50:07","endLine":66,"groupId":"10513","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testConnectToOldNodesUsingHttp1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/f687527bfe4dc803d0e6a85239f00bcb00195d.src","preCode":"  public void testConnectToOldNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(true)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (ParseException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-05-13 05:50:07","commitOrder":2,"curCode":"  public void testConnectToNewNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(false)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","date":"2020-05-13 05:50:07","endLine":86,"groupId":"10513","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testConnectToNewNodesUsingHttp1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/f687527bfe4dc803d0e6a85239f00bcb00195d.src","preCode":"  public void testConnectToNewNodesUsingHttp1() throws Exception {\n\n    JettyConfig jettyConfig = JettyConfig.builder()\n        .withServlet(new ServletHolder(Http2SolrClientTest.DebugServlet.class), \"/debug/*\")\n        .useOnlyHttp1(false)\n        .build();\n    createAndStartJetty(legacyExampleCollection1SolrHome(), jettyConfig);\n\n    try (Http2SolrClient client = new Http2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/debug/foo\")\n        .useHttp1_1(true)\n        .build()) {\n      assertTrue(client.getHttpClient().getTransport() instanceof HttpClientTransportOverHTTP);\n      try {\n        client.query(new SolrQuery(\"*:*\"), SolrRequest.METHOD.GET);\n      } catch (ParseException ignored) {}\n    } finally {\n      afterSolrJettyTestBase();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientCompatibilityTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"adddab9d1466675cd79fd06c37592000a56841d2","commitMessage":"@@@SOLR-14456: Fix Content-Type header forwarding on compressed requests (#1480)\n\nCo-authored-by: Samuel Garc?a Mart?nez <samuelgma@inditex.com>","date":"2020-05-13 05:50:07","modifiedFileCount":"6","status":"M","submitter":"Samuel Garc?a Mart?nez"}]
