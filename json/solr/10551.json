[{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2014-12-31 22:05:48","commitOrder":2,"curCode":"  private void verifyServletState(HttpSolrClient client, SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","date":"2014-12-31 22:05:48","endLine":596,"groupId":"36404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyServletState","params":"(HttpSolrClientclient@SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/5aed3f09ac497d29cc8fdc235ba5c71e73e142.src","preCode":"  private void verifyServletState(HttpSolrClient client, SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"NB"},{"authorDate":"2018-12-17 00:58:20","commitOrder":2,"curCode":"  private void verifyServletState(Http2SolrClient client, SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n              || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","date":"2018-12-17 00:58:20","endLine":534,"groupId":"36404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyServletState","params":"(Http2SolrClientclient@SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/7838bb44f8d224796bc73ea4222192d170cc09.src","preCode":"  private void verifyServletState(Http2SolrClient client, SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n              || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"B"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  private void verifyServletState(HttpSolrClient client,\n                                  @SuppressWarnings({\"rawtypes\"})SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":697,"groupId":"36404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyServletState","params":"(HttpSolrClientclient@@SuppressWarnings({\"rawtypes\"})SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/32af99d6ce4e121365e85d81d1cf7933214fd0.src","preCode":"  private void verifyServletState(HttpSolrClient client, SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  private void verifyServletState(Http2SolrClient client,\n                                  @SuppressWarnings({\"rawtypes\"})SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n              || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":546,"groupId":"36404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyServletState","params":"(Http2SolrClientclient@@SuppressWarnings({\"rawtypes\"})SolrRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/6b339c80ce80be467308d2d4b6dfe3815cab6f.src","preCode":"  private void verifyServletState(Http2SolrClient client, SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n              || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  private void verifyServletState(HttpSolrClient client,\n                                  SolrRequest<?> request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":696,"groupId":"10551","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyServletState","params":"(HttpSolrClientclient@SolrRequest<?>request)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/7f5a4533abb4b80315665ec9599ce3cd5f657c.src","preCode":"  private void verifyServletState(HttpSolrClient client,\n                                  @SuppressWarnings({\"rawtypes\"})SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n            || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  private void verifyServletState(Http2SolrClient client,\n                                  SolrRequest<?> request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n              || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":575,"groupId":"10551","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyServletState","params":"(Http2SolrClientclient@SolrRequest<?>request)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/71/a059995e09564783be40be53ee255cb01012f2.src","preCode":"  private void verifyServletState(Http2SolrClient client,\n                                  @SuppressWarnings({\"rawtypes\"})SolrRequest request) {\n    \r\n    Iterator<String> paramNames = request.getParams().getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String name = paramNames.next();\n      String [] values = request.getParams().getParams(name);\n      if (values != null) {\n        for (String value : values) {\n          boolean shouldBeInQueryString = client.getQueryParams().contains(name)\n              || (request.getQueryParams() != null && request.getQueryParams().contains(name));\n          assertEquals(shouldBeInQueryString, DebugServlet.queryString.contains(name + \"=\" + value));\n          \r\n          assertNotNull(DebugServlet.parameters.get(name));\n          assertEquals(1, DebugServlet.parameters.get(name).length);\n          assertEquals(value, DebugServlet.parameters.get(name)[0]);\n        }\n      }\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
