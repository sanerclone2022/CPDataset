[{"authorTime":"2017-05-09 18:53:18","codes":[{"authorDate":"2017-05-09 18:53:18","commitOrder":1,"curCode":"  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null || info.className == null || info.className.trim().isEmpty()) {\n      return new DefaultCounterSupplier();\n    }\n\n    MetricRegistry.MetricSupplier<Counter> supplier;\n    try {\n      supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n    } catch (Exception e) {\n      log.warn(\"Error creating custom Counter supplier (will use default): \" + info, e);\n      supplier = new DefaultCounterSupplier();\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","date":"2017-05-09 19:47:39","endLine":285,"groupId":"6481","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"counterSupplier","params":"(SolrResourceLoaderloader@PluginInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/0d12183bf9ecccf1d81fce1546e0796baefb9d.src","preCode":"  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null || info.className == null || info.className.trim().isEmpty()) {\n      return new DefaultCounterSupplier();\n    }\n\n    MetricRegistry.MetricSupplier<Counter> supplier;\n    try {\n      supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n    } catch (Exception e) {\n      log.warn(\"Error creating custom Counter supplier (will use default): \" + info, e);\n      supplier = new DefaultCounterSupplier();\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"B"},{"authorDate":"2017-05-09 18:53:18","commitOrder":1,"curCode":"  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Timer> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultTimerSupplier(loader);\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Timer supplier (will use default): \" + info, e);\n        supplier = new DefaultTimerSupplier(loader);\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","date":"2017-05-09 19:47:39","endLine":337,"groupId":"30017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timerSupplier","params":"(SolrResourceLoaderloader@PluginInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/0d12183bf9ecccf1d81fce1546e0796baefb9d.src","preCode":"  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Timer> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultTimerSupplier(loader);\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Timer supplier (will use default): \" + info, e);\n        supplier = new DefaultTimerSupplier(loader);\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"B"}],"commitId":"3217fd7c3cc7868648133950bc98d1b480c673b7","commitMessage":"@@@SOLR-10262: Add support for configurable metrics implementations.\n","date":"2017-05-09 19:47:39","modifiedFileCount":"10","status":"B","submitter":"Andrzej Bialecki"},{"authorTime":"2020-04-20 03:58:50","codes":[{"authorDate":"2020-04-20 03:58:50","commitOrder":2,"curCode":"  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null || info.className == null || info.className.trim().isEmpty()) {\n      return new DefaultCounterSupplier();\n    }\n\n    MetricRegistry.MetricSupplier<Counter> supplier;\n    try {\n      supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n    } catch (Exception e) {\n      log.warn(\"Error creating custom Counter supplier (will use default): {}\", info, e);\n      supplier = new DefaultCounterSupplier();\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","date":"2020-04-20 03:58:50","endLine":297,"groupId":"6481","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"counterSupplier","params":"(SolrResourceLoaderloader@PluginInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/99153840e693ad4b410e509fa3cadcdfcf1c64.src","preCode":"  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null || info.className == null || info.className.trim().isEmpty()) {\n      return new DefaultCounterSupplier();\n    }\n\n    MetricRegistry.MetricSupplier<Counter> supplier;\n    try {\n      supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n    } catch (Exception e) {\n      log.warn(\"Error creating custom Counter supplier (will use default): \" + info, e);\n      supplier = new DefaultCounterSupplier();\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2020-04-20 03:58:50","commitOrder":2,"curCode":"  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Timer> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultTimerSupplier(loader);\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Timer supplier (will use default): {}\", info, e);\n        supplier = new DefaultTimerSupplier(loader);\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","date":"2020-04-20 03:58:50","endLine":349,"groupId":"30017","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timerSupplier","params":"(SolrResourceLoaderloader@PluginInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/99153840e693ad4b410e509fa3cadcdfcf1c64.src","preCode":"  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Timer> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultTimerSupplier(loader);\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Timer supplier (will use default): \" + info, e);\n        supplier = new DefaultTimerSupplier(loader);\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"f01c040ab3a600eb20995a9faf8d1b526efef321","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-20 03:58:50","modifiedFileCount":"27","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-10-15 16:13:47","codes":[{"authorDate":"2020-10-15 16:13:47","commitOrder":3,"curCode":"  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null || info.className == null || info.className.trim().isEmpty()) {\n      return new DefaultCounterSupplier();\n    }\n    if (MetricsConfig.NOOP_IMPL_CLASS.equals(info.className)) {\n      return NoOpCounterSupplier.INSTANCE;\n    }\n    MetricRegistry.MetricSupplier<Counter> supplier;\n    if (loader == null) {\n      supplier = new DefaultCounterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Counter supplier (will use default): {}\", info, e);\n        supplier = new DefaultCounterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","date":"2020-10-15 16:14:16","endLine":303,"groupId":"102468","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"counterSupplier","params":"(SolrResourceLoaderloader@PluginInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/3fa4c289431ebc5c674a4e881531756950796b.src","preCode":"  public static MetricRegistry.MetricSupplier<Counter> counterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null || info.className == null || info.className.trim().isEmpty()) {\n      return new DefaultCounterSupplier();\n    }\n\n    MetricRegistry.MetricSupplier<Counter> supplier;\n    try {\n      supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n    } catch (Exception e) {\n      log.warn(\"Error creating custom Counter supplier (will use default): {}\", info, e);\n      supplier = new DefaultCounterSupplier();\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2020-10-15 16:13:47","commitOrder":3,"curCode":"  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Timer> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultTimerSupplier(loader);\n    } else {\n      if (MetricsConfig.NOOP_IMPL_CLASS.equals(info.className)) {\n        return NoOpTimerSupplier.INSTANCE;\n      }\n      if (loader == null) {\n        supplier = new DefaultTimerSupplier(null);\n      } else {\n        try {\n          supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n        } catch (Exception e) {\n          log.warn(\"Error creating custom Timer supplier (will use default): {}\", info, e);\n          supplier = new DefaultTimerSupplier(loader);\n        }\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","date":"2020-10-15 16:14:16","endLine":371,"groupId":"102468","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"timerSupplier","params":"(SolrResourceLoaderloader@PluginInfoinfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/3fa4c289431ebc5c674a4e881531756950796b.src","preCode":"  public static MetricRegistry.MetricSupplier<Timer> timerSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Timer> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultTimerSupplier(loader);\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Timer supplier (will use default): {}\", info, e);\n        supplier = new DefaultTimerSupplier(loader);\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"}],"commitId":"2a3da99e2dc006701d0799d84480183c9a81cd3e","commitMessage":"@@@SOLR-14914: Add option to disable metrics collection.\n","date":"2020-10-15 16:14:16","modifiedFileCount":"28","status":"M","submitter":"Andrzej Bialecki"}]
