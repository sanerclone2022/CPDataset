[{"authorTime":"2017-03-17 07:41:37","codes":[{"authorDate":"2016-07-01 01:04:11","commitOrder":4,"curCode":"    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n","date":"2016-07-07 16:02:29","endLine":1180,"groupId":"17875","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAliasedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/0a3020e3033ab6a002df0f3ea4426bad450c3d.src","preCode":"    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1143,"status":"NB"},{"authorDate":"2017-03-17 07:41:37","commitOrder":4,"curCode":"    protected Query getAliasedMultiTermQuery(List<String> queryTerms) throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        \r\n        \r\n        \r\n        \r\n        \r\n        if (makeDismax) {\n          if (lst.get(0) instanceof BooleanQuery && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            for (int c = 0 ; c < ((BooleanQuery)lst.get(0)).clauses().size() ; ++c) {\n              subs.clear();\n              \r\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n","date":"2017-03-17 07:41:47","endLine":1245,"groupId":"2398","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getAliasedMultiTermQuery","params":"(List<String>queryTerms)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/aee881c935db063150ca1b695bef48f0c52e04.src","preCode":"    protected Query getAliasedMultiTermQuery(List<String> queryTerms) throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        \r\n        \r\n        \r\n        \r\n        \r\n        if (makeDismax) {\n          if (lst.get(0) instanceof BooleanQuery && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            for (int c = 0 ; c < ((BooleanQuery)lst.get(0)).clauses().size() ; ++c) {\n              subs.clear();\n              \r\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1196,"status":"B"}],"commitId":"d1b2fb33ef3bc0ced65feb98c31cffe4f209da7f","commitMessage":"@@@SOLR-9185: Solr's edismax and Lucene/standard query parsers should optionally not split on whitespace before sending terms to analysis\n","date":"2017-03-17 07:41:47","modifiedFileCount":"9","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-04-20 07:02:32","codes":[{"authorDate":"2016-07-01 01:04:11","commitOrder":5,"curCode":"    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n","date":"2016-07-07 16:02:29","endLine":1180,"groupId":"17875","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAliasedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/0a3020e3033ab6a002df0f3ea4426bad450c3d.src","preCode":"    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1143,"status":"N"},{"authorDate":"2017-04-20 07:02:32","commitOrder":5,"curCode":"    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        \r\n        \r\n        \r\n        \r\n        \r\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              \r\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n","date":"2017-04-20 07:03:31","endLine":1251,"groupId":"9752","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getAliasedMultiTermQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/7f77e0255741ef018e4c5935d87d91852727ba.src","preCode":"    protected Query getAliasedMultiTermQuery(List<String> queryTerms) throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        \r\n        \r\n        \r\n        \r\n        \r\n        if (makeDismax) {\n          if (lst.get(0) instanceof BooleanQuery && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            for (int c = 0 ; c < ((BooleanQuery)lst.get(0)).clauses().size() ; ++c) {\n              subs.clear();\n              \r\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1191,"status":"M"}],"commitId":"8b27b82babed40e72eceaec0765d448247a7d322","commitMessage":"@@@SOLR-10527: edismax with sow=false fails to create dismax-per-term queries when any field is boosted\n","date":"2017-04-20 07:03:31","modifiedFileCount":"2","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":6,"curCode":"    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return QueryUtils.build(q, parser);\n        }\n      } else {\n        \n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n","date":"2017-06-29 17:00:17","endLine":1182,"groupId":"102092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getAliasedQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/3f0393420a2ce04fc28b463367256b4e75ef93.src","preCode":"    protected Query getAliasedQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size()==0)\n          return getQuery();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \n        if (makeDismax) {\n          DisjunctionMaxQuery q = new DisjunctionMaxQuery(lst, a.tie);\n          return q;\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        \n        return getQuery();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1145,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":6,"curCode":"    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        \r\n        \r\n        \r\n        \r\n        \r\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              \r\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return QueryUtils.build(q, parser);\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return QueryUtils.build(q, parser);\n        }\n      } else {\n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n","date":"2017-06-29 17:00:17","endLine":1251,"groupId":"102092","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getAliasedMultiTermQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/3f0393420a2ce04fc28b463367256b4e75ef93.src","preCode":"    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        \r\n        \r\n        \r\n        \r\n        \r\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              \r\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        \r\n        \r\n        \r\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1191,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"}]
