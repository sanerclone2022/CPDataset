[{"authorTime":"2020-10-22 12:25:31","codes":[{"authorDate":"2021-01-13 19:28:01","commitOrder":8,"curCode":"  public void testCoreReloadingPlugin() throws Exception {\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"conf2\"))\n                    .configure();\n    try {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2021-01-13 19:28:01","endLine":161,"groupId":"60465","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoreReloadingPlugin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/908ef74581c06caff5e93bc2c93ab305792afe.src","preCode":"  public void testCoreReloadingPlugin() throws Exception {\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"conf2\"))\n                    .configure();\n    try {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2020-10-22 12:25:31","commitOrder":8,"curCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf1\", configset(\"schema-package\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2020-10-22 12:25:31","endLine":725,"groupId":"55408","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaPlugins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/a5d0c1104386ddcd95c70a72d3395158b7fa45.src","preCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf1\", configset(\"schema-package\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"NB"}],"commitId":"9466af576a4a9d3cd750438123063928329fbb46","commitMessage":"@@@SOLR-14155: Load all other SolrCore plugins from packages (#1666)\n\n","date":"2021-01-13 19:28:01","modifiedFileCount":"12","status":"M","submitter":"Noble Paul"},{"authorTime":"2021-04-27 00:54:14","codes":[{"authorDate":"2021-04-27 00:54:14","commitOrder":9,"curCode":"  public void testCoreReloadingPlugin() throws Exception {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n  }\n","date":"2021-04-27 00:54:14","endLine":166,"groupId":"60465","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoreReloadingPlugin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/6545c0b7a51f19e2ab9949fc92a908c3027ff6.src","preCode":"  public void testCoreReloadingPlugin() throws Exception {\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf\", configset(\"conf2\"))\n                    .configure();\n    try {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-04-27 00:54:14","commitOrder":9,"curCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n  }\n","date":"2021-04-27 00:54:14","endLine":757,"groupId":"55408","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaPlugins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/6545c0b7a51f19e2ab9949fc92a908c3027ff6.src","preCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    MiniSolrCloudCluster cluster =\n            configureCluster(4)\n                    .withJettyConfig(jetty -> jetty.enableV2(true))\n                    .addConfig(\"conf1\", configset(\"schema-package\"))\n                    .configure();\n    try {\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"}],"commitId":"c8cea3ffe4b48856e29e39fa0e60eae50a6a6883","commitMessage":"@@@SOLR-15369: Only load PackageStoreAPI with SolrCloud (#95)\n\n","date":"2021-04-27 00:54:14","modifiedFileCount":"3","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":10,"curCode":"  public void testCoreReloadingPlugin() throws Exception {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Map.of(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Map.of(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n  }\n","date":"2021-06-03 06:17:26","endLine":169,"groupId":"60465","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoreReloadingPlugin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/bf7df9b530ba5f2c1346dce6846f25cd76122d.src","preCode":"  public void testCoreReloadingPlugin() throws Exception {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Utils.makeMap(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":10,"curCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Map.of(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Map.of(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Map.of(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Map.of(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n  }\n","date":"2021-06-03 06:17:26","endLine":763,"groupId":"5373","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaPlugins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/bf7df9b530ba5f2c1346dce6846f25cd76122d.src","preCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Utils.makeMap(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Utils.makeMap(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-06-18 16:28:27","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":11,"curCode":"  public void testCoreReloadingPlugin() throws Exception {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Map.of(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Map.of(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n  }\n","date":"2021-06-03 06:17:26","endLine":169,"groupId":"102756","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoreReloadingPlugin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/bf7df9b530ba5f2c1346dce6846f25cd76122d.src","preCode":"  public void testCoreReloadingPlugin() throws Exception {\n      String FILE1 = \"/mypkg/runtimelibs.jar\";\n      String COLLECTION_NAME = \"testCoreReloadingPluginColl\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/runtimelibs.jar.bin\", FILE1,\n              \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = Arrays.asList(new String[]{FILE1});\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n              .forceV2(true)\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(Collections.singletonMap(\"add\", add))\n              .build();\n\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Map.of(\n                      \":result:packages:mypkg[0]:version\", \"1.0\",\n                      \":result:packages:mypkg[0]:files[0]\", FILE1\n              ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifyComponent(cluster.getSolrClient(), COLLECTION_NAME, \"query\", \"filterCache\", add.pkg, add.version);\n\n\n      add.version = \"2.0\";\n      req.process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n              () -> new V2Request.Builder(\"/cluster/package\").\n                      withMethod(SolrRequest.METHOD.GET)\n                      .build().process(cluster.getSolrClient()),\n              Map.of(\n                      \":result:packages:mypkg[1]:version\", \"2.0\",\n                      \":result:packages:mypkg[1]:files[0]\", FILE1\n              ));\n      new UpdateRequest().commit(cluster.getSolrClient(), COLLECTION_NAME);\n\n      verifyComponent(cluster.getSolrClient(),\n              COLLECTION_NAME, \"query\", \"filterCache\",\n              \"mypkg\", \"2.0\" );\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2021-06-18 16:28:27","commitOrder":11,"curCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Map.of(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Map.of(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Map.of(\n              \":result:packages:schemapkg[1]:version\", \"2.0\",\n              \":result:packages:schemapkg[1]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Map.of(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n  }\n","date":"2021-06-18 16:28:27","endLine":759,"groupId":"102756","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaPlugins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/65/1ebfe171ef09ac744ece8a1808db32f3b5335c.src","preCode":"  public void testSchemaPlugins() throws Exception {\n    String COLLECTION_NAME = \"testSchemaLoadingColl\";\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n      String FILE1 = \"/schemapkg/schema-plugins.jar\";\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      postFileAndWait(cluster, \"runtimecode/schema-plugins.jar.bin\", FILE1,\n          \"U+AdO/jgY3DtMpeFRGoTQk72iA5g/qjPvdQYPGBaXB5+ggcTZk4FoIWiueB0bwGJ8Mg3V/elxOqEbD2JR8R0tA==\");\n\n      String FILE2 = \"/schemapkg/payload-component.jar\";\n      postFileAndWait(cluster, \"runtimecode/payload-component.jar.bin\", FILE2,\n          \"gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==\");\n\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1,FILE2);\n      V2Request req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Map.of(\n              \":result:packages:schemapkg[0]:version\", \"1.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      CollectionAdminRequest\n              .createCollection(COLLECTION_NAME, \"conf1\", 2, 2)\n              .process(cluster.getSolrClient());\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n              Map.of(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"1.0\",\n                      \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"1.0\",\n                      \":fieldType:_packageinfo_:version\",\"1.0\"));\n\n      add = new Package.AddVersion();\n      add.version = \"2.0\";\n      add.pkg = \"schemapkg\";\n      add.files = Arrays.asList(FILE1);\n      req = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(Collections.singletonMap(\"add\", add))\n          .build();\n      req.process(cluster.getSolrClient());\n\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/package\").\n              withMethod(SolrRequest.METHOD.GET)\n              .build().process(cluster.getSolrClient()),\n          Map.of(\n              \":result:packages:schemapkg[0]:version\", \"2.0\",\n              \":result:packages:schemapkg[0]:files[0]\", FILE1\n          ));\n\n      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, \"/schema/fieldtypes/myNewTextFieldWithAnalyzerClass\",\n          Map.of(\":fieldType:analyzer:charFilters[0]:_packageinfo_:version\" ,\"2.0\",\n              \":fieldType:analyzer:tokenizer:_packageinfo_:version\",\"2.0\",\n              \":fieldType:_packageinfo_:version\",\"2.0\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":691,"status":"M"}],"commitId":"5f138186e146113ca4e282b5fcccf4c3ee5128e5","commitMessage":"@@@SOLR-15448: fixed test failures\n","date":"2021-06-18 16:28:27","modifiedFileCount":"2","status":"M","submitter":"Noble Paul"}]
