[{"authorTime":"2015-11-11 08:50:34","codes":[{"authorDate":"2016-01-23 03:07:15","commitOrder":2,"curCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","date":"2016-01-23 03:07:15","endLine":123,"groupId":"4685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDaemonStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/aba9037db95428bbaaecef8164307955fc3a05.src","preCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2015-11-11 08:50:34","commitOrder":2,"curCode":"  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    \r\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n","date":"2015-11-11 08:50:34","endLine":99,"groupId":"4685","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/97/3164a5730fdf99e5c4b8c839ada91777a9814b.src","preCode":"  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    \r\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"}],"commitId":"077e78f417ac461b2be2e6da71ee391cd08f137f","commitMessage":"@@@SOLR-8550: Add asynchronous DaemonStreams to the Streaming API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1726291 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-23 03:07:15","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-03-28 16:25:25","codes":[{"authorDate":"2016-01-23 03:07:15","commitOrder":3,"curCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","date":"2016-01-23 03:07:15","endLine":123,"groupId":"4685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDaemonStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/aba9037db95428bbaaecef8164307955fc3a05.src","preCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2017-03-28 16:25:25","commitOrder":3,"curCode":"  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    \r\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n","date":"2017-03-29 01:42:18","endLine":162,"groupId":"4685","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/597b7ab8081d47a1ff188af059504574d6cd90.src","preCode":"  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    \r\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"aa2b46a62a52c0d0117312add2a667bf6b14a709","commitMessage":"@@@SOLR-10341: SQL AVG function mis-interprets field type\n","date":"2017-03-29 01:42:18","modifiedFileCount":"13","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":4,"curCode":"  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    \r\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":124,"groupId":"10657","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDaemonStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":4,"curCode":"  public void testStatsStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (StatsStream stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"stats(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":159,"groupId":"10657","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    \r\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
