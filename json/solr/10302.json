[{"authorTime":"2017-04-26 22:57:52","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2016-05-23 14:35:53","endLine":353,"groupId":"23811","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/124dedf3cdbe25e3aba1ae6b265a7c1827c65f.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"NB"},{"authorDate":"2017-04-26 22:57:52","commitOrder":5,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2017-04-26 23:17:43","endLine":276,"groupId":"23811","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/48a46c5b1c92b107a90f0d4c42f4a88132ce72.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"0e963f7a8aeac0b8a831cd44fd48cd0c6bda11d2","commitMessage":"@@@SOLR-10566: Add timeseries Streaming Expression\n","date":"2017-04-26 23:17:43","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-03-10 22:30:57","codes":[{"authorDate":"2018-03-10 22:30:57","commitOrder":6,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-03-10 23:45:43","endLine":348,"groupId":"23811","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b1/910850dfa69a8c2788c3b3bd3b767f220e05e9.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-03-10 22:30:57","commitOrder":6,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-03-10 23:45:43","endLine":298,"groupId":"23811","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/0a6df2bd41e2fd621b41489e0c80cc6b4bfd4f.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"971bd26df6ecfa9c266910a8008a2dad52d4443a","commitMessage":"@@@SOLR-11629: Add new CloudSolrClient.Builder ctors\n\nCloudSolrClient.Builder can be pointed at a Solr cluster in two ways: a\nZK connection string.  or one or more Solr base URLs.  One of these two\nvalues must be provided to create a working CloudSolrClient.\n\nSince these values are required.  this commit introduces two new ctors. \none for each means of CloudSolrClient setup.  It deprecates the existing\nno-arg CloudSolrClient ctor.\n\nTogether.  these changes make it clearer to our users that these options\nare required (and mutually exclusive).\n","date":"2018-03-10 23:45:43","modifiedFileCount":"24","status":"M","submitter":"Jason Gerlowski"},{"authorTime":"2018-03-10 22:30:57","codes":[{"authorDate":"2018-11-07 00:22:51","commitOrder":7,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-11-07 00:23:40","endLine":512,"groupId":"43739","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/23a3b2e18cb10b80210bb84480689933eac513.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"},{"authorDate":"2018-03-10 22:30:57","commitOrder":7,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-03-10 23:45:43","endLine":298,"groupId":"23811","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/0a6df2bd41e2fd621b41489e0c80cc6b4bfd4f.src","preCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"N"}],"commitId":"3d942131104a38a470b21020bfeb4a12c2dcd99b","commitMessage":"@@@SOLR-12795: Introduce 'rows' and 'offset' parameter in FacetStream\n","date":"2018-11-07 00:23:40","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-03-10 22:30:57","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":8,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":512,"groupId":"43739","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/4cb5d6d266b5894cc0fd531d6b75a022d577dc.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"},{"authorDate":"2018-03-10 22:30:57","commitOrder":8,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-03-10 23:45:43","endLine":298,"groupId":"23811","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/0a6df2bd41e2fd621b41489e0c80cc6b4bfd4f.src","preCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"N"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2018-12-10 23:05:29","codes":[{"authorDate":"2018-12-10 23:05:29","commitOrder":9,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-12-11 01:22:52","endLine":513,"groupId":"43739","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/4967c01dde59879b9db84d13e6b909dda30532.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"M"},{"authorDate":"2018-12-10 23:05:29","commitOrder":9,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2018-12-11 01:22:52","endLine":299,"groupId":"23811","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/e72faf0ef19b2de4a53f418f99091cacfdddf3.src","preCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"b6cbb8494e0bc32ed57a94e45aecba9723133786","commitMessage":"@@@SOLR-13014: URI Too Long with large streaming expressions in SolrJ\n","date":"2018-12-11 01:22:52","modifiedFileCount":"7","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2020-06-10 07:16:14","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":10,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":571,"groupId":"43739","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/8550f79ded2fe755c4ab396dbb2a0fe0b2beb3.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"},{"authorDate":"2020-06-10 07:16:14","commitOrder":10,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":316,"groupId":"23811","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/cbee727762c9936bc1c3342cf1f7a17f406fab.src","preCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-10 07:16:14","codes":[{"authorDate":"2021-01-12 01:34:28","commitOrder":11,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    \r\n    if (params.getBool(TIERED_PARAM, defaultTieredEnabled)) {\n      ClusterStateProvider clusterStateProvider = cloudSolrClient.getClusterStateProvider();\n      final List<String> resolved = clusterStateProvider != null ? clusterStateProvider.resolveAlias(collection) : null;\n      if (resolved != null && resolved.size() > 1) {\n        Optional<TupleStream> maybeParallelize = openParallelStream(context, resolved, metrics);\n        if (maybeParallelize.isPresent()) {\n          this.parallelizedStream = maybeParallelize.get();\n          return; \r\n        } \r\n      }\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    if (paramsLoc.get(\"lb.proxy\") != null) {\n      request.setPath(\"/\"+collection+\"/select\");\n    }\n\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2021-01-12 01:34:28","endLine":604,"groupId":"18208","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/c9c56342c47f8f4123e4670e19732a7e96a8e0.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2020-06-10 07:16:14","commitOrder":11,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":316,"groupId":"23811","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/cbee727762c9936bc1c3342cf1f7a17f406fab.src","preCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"}],"commitId":"6711eb7571727552aad3ace53c52c9a8fe07dc40","commitMessage":"@@@SOLR-15036: auto- select / rollup / sort / plist over facet expression when using a collection alias with multiple collections (#2132)\n\n","date":"2021-01-12 01:34:28","modifiedFileCount":"10","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":12,"curCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    \r\n    if (params.getBool(TIERED_PARAM, defaultTieredEnabled)) {\n      ClusterStateProvider clusterStateProvider = cloudSolrClient.getClusterStateProvider();\n      final List<String> resolved = clusterStateProvider != null ? clusterStateProvider.resolveAlias(collection) : null;\n      if (resolved != null && resolved.size() > 1) {\n        Optional<TupleStream> maybeParallelize = openParallelStream(context, resolved, metrics);\n        if (maybeParallelize.isPresent()) {\n          this.parallelizedStream = maybeParallelize.get();\n          return; \r\n        } \r\n      }\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    if (paramsLoc.get(\"lb.proxy\") != null) {\n      request.setPath(\"/\"+collection+\"/select\");\n    }\n\n    try {\n      NamedList<?> response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":603,"groupId":"10302","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fd/66fd566370a09c447b3c93222109a506e2d754.src","preCode":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    \r\n    if (params.getBool(TIERED_PARAM, defaultTieredEnabled)) {\n      ClusterStateProvider clusterStateProvider = cloudSolrClient.getClusterStateProvider();\n      final List<String> resolved = clusterStateProvider != null ? clusterStateProvider.resolveAlias(collection) : null;\n      if (resolved != null && resolved.size() > 1) {\n        Optional<TupleStream> maybeParallelize = openParallelStream(context, resolved, metrics);\n        if (maybeParallelize.isPresent()) {\n          this.parallelizedStream = maybeParallelize.get();\n          return; \r\n        } \r\n      }\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    if (paramsLoc.get(\"lb.proxy\") != null) {\n      request.setPath(\"/\"+collection+\"/select\");\n    }\n\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":12,"curCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList<?> response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":340,"groupId":"10302","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"open","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/7ba9c394b102aefa8e1c77932c75ac1323960d.src","preCode":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    String json = getJsonFacetString(field, metrics, start, end, gap);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, field, metrics);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
