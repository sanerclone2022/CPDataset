[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testSortOneDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(1, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":1725,"groupId":"19168","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortOneDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/d92379b394ef8a9b41bd8d1532f30ac1bf732c.src","preCode":"  public void testSortOneDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(1, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1706,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":1750,"groupId":"15869","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSortOneDocumentWithScores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/d92379b394ef8a9b41bd8d1532f30ac1bf732c.src","preCode":"  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1728,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2018-07-18 14:31:44","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":2,"curCode":"  public void testSortOneDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(1, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","date":"2016-05-26 01:42:11","endLine":1725,"groupId":"19168","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortOneDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/d92379b394ef8a9b41bd8d1532f30ac1bf732c.src","preCode":"  public void testSortOneDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(1, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1706,"status":"N"},{"authorDate":"2018-07-18 14:31:44","commitOrder":2,"curCode":"  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","date":"2018-07-18 14:38:57","endLine":1747,"groupId":"15869","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSortOneDocumentWithScores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dd/f4cc3d20ee8caf4f72fab4f3f0259f6d25ba12.src","preCode":"  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1725,"status":"M"}],"commitId":"331ccf391067b7775db371bec1ec8e8c9004e904","commitMessage":"@@@LUCENE-8405: Remove TopDocs.maxScore.\n","date":"2018-07-18 14:38:57","modifiedFileCount":"67","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-30 16:08:16","codes":[{"authorDate":"2018-07-30 16:08:16","commitOrder":3,"curCode":"  public void testSortOneDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(1, td.totalHits.value);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":1722,"groupId":"103352","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortOneDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/7bd7f4dbdc86fdf230ef84c8c0c2201a9c8b07.src","preCode":"  public void testSortOneDocument() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(1, td.totalHits);\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1703,"status":"M"},{"authorDate":"2018-07-30 16:08:16","commitOrder":3,"curCode":"  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits.value);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits.value, actual.totalHits.value);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","date":"2018-07-30 22:38:05","endLine":1747,"groupId":"103352","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSortOneDocumentWithScores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/7bd7f4dbdc86fdf230ef84c8c0c2201a9c8b07.src","preCode":"  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1725,"status":"M"}],"commitId":"9ca053712af0795cbd0d0d9f2d862f24d9e547c3","commitMessage":"@@@LUCENE-8430: TopDocs.totalHits may now be a lower bound of the hit count.\n","date":"2018-07-30 22:38:05","modifiedFileCount":"178","status":"M","submitter":"Adrien Grand"}]
