[{"authorTime":"2019-12-03 12:16:34","codes":[{"authorDate":"2019-12-03 12:16:34","commitOrder":1,"curCode":"  public ShardTerms setTermEqualsToLeader(String coreNodeName) {\n    long maxTerm = getMaxTerm();\n    if (values.get(coreNodeName) == maxTerm) return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    newValues.put(coreNodeName, maxTerm);\n    newValues.remove(recoveringTerm(coreNodeName));\n    return new ShardTerms(newValues, version);\n  }\n","date":"2019-12-03 12:16:34","endLine":192,"groupId":"42","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setTermEqualsToLeader","params":"(StringcoreNodeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/2f754bc4d5743e0c4f0ea44917e50ae7a65d99.src","preCode":"  public ShardTerms setTermEqualsToLeader(String coreNodeName) {\n    long maxTerm = getMaxTerm();\n    if (values.get(coreNodeName) == maxTerm) return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    newValues.put(coreNodeName, maxTerm);\n    newValues.remove(recoveringTerm(coreNodeName));\n    return new ShardTerms(newValues, version);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"},{"authorDate":"2019-12-03 12:16:34","commitOrder":1,"curCode":"  public ShardTerms startRecovering(String coreNodeName) {\n    long maxTerm = getMaxTerm();\n    if (values.get(coreNodeName) == maxTerm)\n      return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    if (!newValues.containsKey(recoveringTerm(coreNodeName))) {\n      long currentTerm = newValues.getOrDefault(coreNodeName, 0L);\n      \r\n      newValues.put(recoveringTerm(coreNodeName), currentTerm);\n    }\n    newValues.put(coreNodeName, maxTerm);\n    return new ShardTerms(newValues, version);\n  }\n","date":"2019-12-03 12:16:34","endLine":216,"groupId":"43","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startRecovering","params":"(StringcoreNodeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/2f754bc4d5743e0c4f0ea44917e50ae7a65d99.src","preCode":"  public ShardTerms startRecovering(String coreNodeName) {\n    long maxTerm = getMaxTerm();\n    if (values.get(coreNodeName) == maxTerm)\n      return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    if (!newValues.containsKey(recoveringTerm(coreNodeName))) {\n      long currentTerm = newValues.getOrDefault(coreNodeName, 0L);\n      \r\n      newValues.put(recoveringTerm(coreNodeName), currentTerm);\n    }\n    newValues.put(coreNodeName, maxTerm);\n    return new ShardTerms(newValues, version);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"a51c7b89f2597a0b22041517ad6ea55ff6011589","commitMessage":"@@@SOLR-13995: Move ZkShardTerms.Terms to SolrJ\n","date":"2019-12-03 12:16:34","modifiedFileCount":"3","status":"B","submitter":"noble"},{"authorTime":"2020-12-05 07:19:49","codes":[{"authorDate":"2020-12-05 07:19:49","commitOrder":2,"curCode":"  public ShardTerms setTermEqualsToLeader(String coreNodeName) {\n    if (values.get(coreNodeName) == maxTerm) return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    newValues.put(coreNodeName, maxTerm);\n    newValues.remove(recoveringTerm(coreNodeName));\n    return new ShardTerms(newValues, version);\n  }\n","date":"2020-12-16 05:54:40","endLine":196,"groupId":"10102","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"setTermEqualsToLeader","params":"(StringcoreNodeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/6ead0be2e2dde7fc89ee7339611cedba88f2cd.src","preCode":"  public ShardTerms setTermEqualsToLeader(String coreNodeName) {\n    long maxTerm = getMaxTerm();\n    if (values.get(coreNodeName) == maxTerm) return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    newValues.put(coreNodeName, maxTerm);\n    newValues.remove(recoveringTerm(coreNodeName));\n    return new ShardTerms(newValues, version);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2020-12-05 07:19:49","commitOrder":2,"curCode":"  public ShardTerms startRecovering(String coreNodeName) {\n    if (values.get(coreNodeName) == maxTerm)\n      return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    if (!newValues.containsKey(recoveringTerm(coreNodeName))) {\n      long currentTerm = newValues.getOrDefault(coreNodeName, 0L);\n      \r\n      newValues.put(recoveringTerm(coreNodeName), currentTerm);\n    }\n    newValues.put(coreNodeName, maxTerm);\n    return new ShardTerms(newValues, version);\n  }\n","date":"2020-12-16 05:54:40","endLine":219,"groupId":"10102","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"startRecovering","params":"(StringcoreNodeName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/6ead0be2e2dde7fc89ee7339611cedba88f2cd.src","preCode":"  public ShardTerms startRecovering(String coreNodeName) {\n    long maxTerm = getMaxTerm();\n    if (values.get(coreNodeName) == maxTerm)\n      return null;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    if (!newValues.containsKey(recoveringTerm(coreNodeName))) {\n      long currentTerm = newValues.getOrDefault(coreNodeName, 0L);\n      \r\n      newValues.put(recoveringTerm(coreNodeName), currentTerm);\n    }\n    newValues.put(coreNodeName, maxTerm);\n    return new ShardTerms(newValues, version);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"bf7b438f12d65904b461e595594fc9a64cfcc899","commitMessage":"@@@SOLR-15029 Trigger leader election on index writer tragedy\n\nSOLR-13027 Use TestInjection so that we always have a Tragic Event\n\nWhen we encounter a tragic error in the index writer.  we can trigger a\nleader election instead of queing up a delete and re-add of the node in\nquestion. This should result in a more graceful transition.  and the\nprevious leader will eventually be put into recovery by a new leader.\n\ncloses #2120\n","date":"2020-12-16 05:54:40","modifiedFileCount":"15","status":"M","submitter":"Mike Drob"}]
