[{"authorTime":"2013-04-22 22:26:55","codes":[{"authorDate":"2013-04-22 22:26:55","commitOrder":2,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","date":"2013-04-22 22:26:55","endLine":189,"groupId":"44292","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/52c8ae86c775ed7c456a4b8c25a5362f893fcf.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"MB"},{"authorDate":"2013-04-22 22:26:55","commitOrder":2,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2013-04-22 22:26:55","endLine":216,"groupId":"44291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/52c8ae86c775ed7c456a4b8c25a5362f893fcf.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"28b7111dc79fb0095814d617a5879fb93e70fb9c","commitMessage":"@@@SOLR-3251: Dynamically add fields to schema.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1470539 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-04-22 22:26:55","modifiedFileCount":"120","status":"M","submitter":"Steven Rowe"},{"authorTime":"2013-04-22 22:26:55","codes":[{"authorDate":"2014-11-07 14:39:26","commitOrder":3,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","date":"2014-11-07 14:39:26","endLine":189,"groupId":"44292","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/53b7b84aecbff2f3d6f92a763ebd78a7366dce.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2013-04-22 22:26:55","commitOrder":3,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2013-04-22 22:26:55","endLine":216,"groupId":"44291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/52c8ae86c775ed7c456a4b8c25a5362f893fcf.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"49052488796545bbac19d855b6a1bf246641f171","commitMessage":"@@@SOLR-6715: ZkSolrResourceLoader constructors accept a parameter called 'collection' but it should be 'configName'\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1637296 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-07 14:39:26","modifiedFileCount":"10","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2013-04-22 22:26:55","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":4,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","date":"2016-10-03 03:18:22","endLine":190,"groupId":"44292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/d947ea09b2f9bb2f2f433485d5e96d9ee371f6.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2013-04-22 22:26:55","commitOrder":4,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2013-04-22 22:26:55","endLine":216,"groupId":"44291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/52c8ae86c775ed7c456a4b8c25a5362f893fcf.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2013-04-22 22:26:55","codes":[{"authorDate":"2019-03-20 01:51:44","commitOrder":5,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","date":"2019-03-20 01:51:44","endLine":179,"groupId":"44292","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/c3d6f087a4eba9c7f0cd25fdcce92d0009438c.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable, \n                                      managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (KeeperException e) {\n      final String msg = \"Error instantiating ManagedIndexSchema\";\n      log.error(msg, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n    } catch (InterruptedException e) {\n      \r\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n    }\n\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2013-04-22 22:26:55","commitOrder":5,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2013-04-22 22:26:55","endLine":216,"groupId":"44291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/52c8ae86c775ed7c456a4b8c25a5362f893fcf.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"85a702cdff23a6352945dd78eb54ff6db68f6965","commitMessage":"@@@SOLR-13253: avoid using IndexSchema.getResourceLoader for non-schema things.\nFurthermore it's reference to SolrConfig was removed.\n","date":"2019-03-20 01:51:44","modifiedFileCount":"8","status":"M","submitter":"David Smiley"},{"authorTime":"2013-04-22 22:26:55","codes":[{"authorDate":"2019-04-08 16:47:29","commitOrder":6,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","date":"2019-04-08 16:47:29","endLine":181,"groupId":"44292","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/73059568439349dae1cc87a83b2e26dc1a39bb.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      upgradeToManagedSchema();\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2013-04-22 22:26:55","commitOrder":6,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2013-04-22 22:26:55","endLine":216,"groupId":"44291","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/52c8ae86c775ed7c456a4b8c25a5362f893fcf.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"0859be134db8abb5d7cf68dd49baa51acf8d0c44","commitMessage":"@@@SOLR-13368: Tentative fix for a race condition in managed schema initialization.\n","date":"2019-04-08 16:47:29","modifiedFileCount":"2","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-01-06 13:32:31","codes":[{"authorDate":"2020-01-06 13:32:31","commitOrder":7,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","date":"2020-03-11 21:20:28","endLine":187,"groupId":"30070","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/d4c8e3ce74779043cfdad826eba757017f7f57.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openSchema(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-01-06 13:32:31","commitOrder":7,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2020-03-11 21:20:28","endLine":214,"groupId":"44291","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/d4c8e3ce74779043cfdad826eba757017f7f57.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openSchema(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openSchema(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"732348ec7f9c6b6f7bf9d539a40e50d16198cccc","commitMessage":"@@@SOLR-14197: SolrResourceLoader refactorings to reduce API\n* Remove SRL.listConfigDir (unused)\n* Remove SRL.getDataDir\n* Remove SRL.getCoreName\n* Remove SRL.getCoreProperties\n XmlConfigFile needs to be passed in the substitutableProperties\n IndexSchema needs to be passed in the substitutableProperties\n Remove redundant Properties from CoreContainer constructors\n* Remove SRL.newAdminHandlerInstance (unused)\n* Remove SRL.openSchema and openConfig\n* Avoid SRL.getConfigDir\n Also harmonized similar initialization logic between DIH Tika processor & ExtractingRequestHandler.\n* Ensure SRL.addToClassLoader and reloadLuceneSPI are called at most once\n Don't auto-load \"lib\" in constructor; wrong place for this logic.\n* Avoid SRL.getInstancePath\n Added SolrCore.getInstancePath instead\n Use CoreContainer.getSolrHome instead\n NodeConfig should track solrHome separate from SolrResourceLoader\n* Simplify some SolrCore constructors\n* Move locateSolrHome to new SolrPaths\n* Move \"User Files\" stuff to SolrPaths\n","date":"2020-03-11 21:20:28","modifiedFileCount":"58","status":"M","submitter":"David Smiley"},{"authorTime":"2020-04-20 03:58:50","codes":[{"authorDate":"2020-04-20 03:58:50","commitOrder":8,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource {} not found - loading non-managed schema {} instead\"\n            , managedSchemaResourceName, resourceName);\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","date":"2020-04-20 03:58:50","endLine":187,"groupId":"30070","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/52cd30d4e7ad1bb3ddea4f8b207f71f87df1bd.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n                + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-04-20 03:58:50","commitOrder":8,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource {}  not found - loading non-managed schema {} instead\"\n          , managedSchemaResourceName, resourceName);\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2020-04-20 03:58:50","endLine":214,"groupId":"44291","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/52cd30d4e7ad1bb3ddea4f8b207f71f87df1bd.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource \" + managedSchemaResourceName\n              + \" not found - loading non-managed schema \" + resourceName + \" instead\");\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"f01c040ab3a600eb20995a9faf8d1b526efef321","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-20 03:58:50","modifiedFileCount":"27","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-04-20 03:58:50","codes":[{"authorDate":"2020-12-11 12:27:47","commitOrder":9,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ZkSolrResourceLoader.ZkByteArrayInputStream(data, managedSchemaPath, stat);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource {} not found - loading non-managed schema {} instead\"\n            , managedSchemaResourceName, resourceName);\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource,IndexSchemaFactory.getConfigResource(configSetService, schemaInputStream, loader, managedSchemaResourceName) , isMutable,\n              managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading parsing schema\", e);\n    }\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","date":"2020-12-11 12:27:47","endLine":192,"groupId":"31390","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(StringresourceName@SolrConfigconfig@ConfigSetServiceconfigSetService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/4751bd91c327545b4985bfadd96f59486a6696.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ByteArrayInputStream(data);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource {} not found - loading non-managed schema {} instead\"\n            , managedSchemaResourceName, resourceName);\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-04-20 03:58:50","commitOrder":9,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource {}  not found - loading non-managed schema {} instead\"\n          , managedSchemaResourceName, resourceName);\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","date":"2020-04-20 03:58:50","endLine":214,"groupId":"44291","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/52cd30d4e7ad1bb3ddea4f8b207f71f87df1bd.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource {}  not found - loading non-managed schema {} instead\"\n          , managedSchemaResourceName, resourceName);\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream; \n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"a95ce0d4224539094dc602ba8afa1ff796009a2b","commitMessage":"@@@SOLR-14827: Refactor schema loading to not use XPath (#1963)\n\n","date":"2020-12-11 12:27:47","modifiedFileCount":"18","status":"M","submitter":"Noble Paul"},{"authorTime":"2021-09-16 20:43:31","codes":[{"authorDate":"2021-09-16 20:43:31","commitOrder":10,"curCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = lookupZKManagedSchemaPath();\n      managedSchemaResourceName = managedSchemaPath.substring(managedSchemaPath.lastIndexOf(\"/\")+1); \r\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ZkSolrResourceLoader.ZkByteArrayInputStream(data, managedSchemaPath, stat);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource {} not found - loading non-managed schema {} instead\"\n            , managedSchemaResourceName, resourceName);\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (IOException e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource,IndexSchemaFactory.getConfigResource(configSetService, schemaInputStream, loader, managedSchemaResourceName) , isMutable,\n              managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading parsing schema\", e);\n    }\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","date":"2021-09-16 20:43:31","endLine":256,"groupId":"101995","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"create","params":"(StringresourceName@SolrConfigconfig@ConfigSetServiceconfigSetService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7c/3e670f13b4bb1dbeca0e7636b595f22c9c017e.src","preCode":"  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n    this.resourceName = resourceName;\n    this.config = config;\n    this.loader = config.getResourceLoader();\n    InputStream schemaInputStream = null;\n\n    if (null == resourceName) {\n      resourceName = IndexSchema.DEFAULT_SCHEMA_FILE;\n    }\n\n    int schemaZkVersion = -1;\n    if ( ! (loader instanceof ZkSolrResourceLoader)) {\n      schemaInputStream = readSchemaLocally();\n    } else { \r\n      final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      final SolrZkClient zkClient = zkLoader.getZkController().getZkClient();\n      final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n      Stat stat = new Stat();\n      try {\n        \r\n        byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n        schemaZkVersion = stat.getVersion();\n        schemaInputStream = new ZkSolrResourceLoader.ZkByteArrayInputStream(data, managedSchemaPath, stat);\n        loadedResource = managedSchemaResourceName;\n        warnIfNonManagedSchemaExists();\n      } catch (InterruptedException e) {\n        \r\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      } catch (KeeperException.NoNodeException e) {\n        log.info(\"The schema is configured as managed, but managed schema resource {} not found - loading non-managed schema {} instead\"\n            , managedSchemaResourceName, resourceName);\n      } catch (KeeperException e) {\n        String msg = \"Error attempting to access \" + managedSchemaPath;\n        log.error(msg, e);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n      }\n      if (null == schemaInputStream) {\n        \r\n        try {\n          schemaInputStream = loader.openResource(resourceName);\n          loadedResource = resourceName;\n          shouldUpgrade = true;\n        } catch (Exception e) {\n          try {\n            \r\n            byte[] data = zkClient.getData(managedSchemaPath, null, stat, true);\n            schemaZkVersion = stat.getVersion();\n            schemaInputStream = new ByteArrayInputStream(data);\n            loadedResource = managedSchemaPath;\n            warnIfNonManagedSchemaExists();\n          } catch (Exception e1) {\n            if (e1 instanceof InterruptedException) {\n              Thread.currentThread().interrupt(); \r\n            }\n            final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                             + managedSchemaResourceName + \"'\";\n            log.error(msg, e);\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n          }\n        }\n      }\n    }\n    InputSource inputSource = new InputSource(schemaInputStream);\n    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n    try {\n      schema = new ManagedIndexSchema(config, loadedResource,IndexSchemaFactory.getConfigResource(configSetService, schemaInputStream, loader, managedSchemaResourceName) , isMutable,\n              managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading parsing schema\", e);\n    }\n    if (shouldUpgrade) {\n      \r\n      synchronized (schema.getSchemaUpdateLock()) {\n        upgradeToManagedSchema();\n      }\n    }\n\n    return schema;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2021-09-16 20:43:31","commitOrder":10,"curCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      final Path managedSchemaPath = lookupLocalManagedSchemaPath();\n      managedSchemaResourceName = managedSchemaPath.getName(managedSchemaPath.getNameCount()-1).toString();\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource {}  not found - loading non-managed schema {} instead\"\n          , managedSchemaResourceName, resourceName);\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream;\n  }\n","date":"2021-09-16 20:43:31","endLine":285,"groupId":"101995","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"readSchemaLocally","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7c/3e670f13b4bb1dbeca0e7636b595f22c9c017e.src","preCode":"  private InputStream readSchemaLocally() {\n    InputStream schemaInputStream = null;\n    try {\n      \r\n      schemaInputStream = loader.openResource(managedSchemaResourceName);\n      loadedResource = managedSchemaResourceName;\n      warnIfNonManagedSchemaExists();\n    } catch (IOException e) {\n      log.info(\"The schema is configured as managed, but managed schema resource {}  not found - loading non-managed schema {} instead\"\n          , managedSchemaResourceName, resourceName);\n    }\n    if (null == schemaInputStream) {\n      \r\n      try {\n        schemaInputStream = loader.openResource(resourceName);\n        loadedResource = resourceName;\n        shouldUpgrade = true;\n      } catch (Exception e) {\n        final String msg = \"Error loading both non-managed schema '\" + resourceName + \"' and managed schema '\"\n                         + managedSchemaResourceName + \"'\";\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      }\n    }\n    return schemaInputStream;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"df903cbdc1de7fb2c3469b9773d6f9d23d591a5d","commitMessage":"@@@ SOLR-10887: Append .xml to managed-schema file VERSION 2 (#279)\n\nManaged schema file is now called \"managed-schema.xml\".  however there is a fallback to \"managed-schema\" since that is a common legacy name for the file.   Updated the name of the files used in running tests.","date":"2021-09-16 20:43:31","modifiedFileCount":"9","status":"M","submitter":"Eric Pugh"}]
