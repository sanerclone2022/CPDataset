[{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":1,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n","date":"2018-01-23 20:35:14","endLine":46,"groupId":"23040","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/a59c8b122a874a17f6ae36528e498c22f4de8b.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2018-01-23 20:35:14","commitOrder":1,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> colLabels =  (List<String>)value2;\n      matrix.setColumnLabels(colLabels);\n      return matrix;\n    }\n  }\n","date":"2018-01-23 20:35:14","endLine":46,"groupId":"23040","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1d/589aff71f2db3ab18a8af742fddd0f67a633c7.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> colLabels =  (List<String>)value2;\n      matrix.setColumnLabels(colLabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetColumnLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"B","submitter":"Karl Wright"},{"authorTime":"2019-07-30 22:01:15","codes":[{"authorDate":"2019-07-30 22:01:15","commitOrder":2,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List rowlabels =  (List)value2;\n\n      \r\n\n      List<String> strLabels = new ArrayList(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n","date":"2019-07-30 22:42:06","endLine":56,"groupId":"23040","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/0299e3338460151e1c9a8d5c732769ab0ef5b9.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-07-30 22:01:15","commitOrder":2,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n\n      List colLabels =  (List)value2;\n      \r\n      List<String> strLabels = new ArrayList(colLabels.size());\n      for(Object o : colLabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setColumnLabels(strLabels);\n      return matrix;\n    }\n  }\n","date":"2019-07-30 22:42:06","endLine":54,"groupId":"23040","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/78c2e9dabfc603d6bd73ba3e9040e9fb3d7010.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> colLabels =  (List<String>)value2;\n      matrix.setColumnLabels(colLabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetColumnLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"62955b1a4e98c4a583f9c6c5d71adc7947423b90","commitMessage":"@@@SOLR-13625: Fix broken test cases\n","date":"2019-07-30 22:42:06","modifiedFileCount":"34","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":3,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      @SuppressWarnings({\"rawtypes\"})\n      List rowlabels =  (List)value2;\n\n      \r\n\n      List<String> strLabels = new ArrayList<>(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":57,"groupId":"23040","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/6782f3f00719c885817e07f53f73ed9b6a280b.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List rowlabels =  (List)value2;\n\n      \r\n\n      List<String> strLabels = new ArrayList(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":3,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n\n      @SuppressWarnings({\"rawtypes\"})\n      List colLabels =  (List)value2;\n      \r\n      List<String> strLabels = new ArrayList<>(colLabels.size());\n      for(Object o : colLabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setColumnLabels(strLabels);\n      return matrix;\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":55,"groupId":"23040","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/610c0ceab0aa0dfd8a55e4f84ffd9f0ff5e3ea.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n\n      List colLabels =  (List)value2;\n      \r\n      List<String> strLabels = new ArrayList(colLabels.size());\n      for(Object o : colLabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setColumnLabels(strLabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetColumnLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<?> rowlabels =  (List<?>)value2;\n\n      \r\n\n      List<String> strLabels = new ArrayList<>(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":56,"groupId":"10195","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/ed61a1f801075cd12e0647ca615ab205a2111d.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      @SuppressWarnings({\"rawtypes\"})\n      List rowlabels =  (List)value2;\n\n      \r\n\n      List<String> strLabels = new ArrayList<>(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n\n      List<?> colLabels =  (List<?>)value2;\n      \r\n      List<String> strLabels = new ArrayList<>(colLabels.size());\n      for(Object o : colLabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setColumnLabels(strLabels);\n      return matrix;\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":54,"groupId":"10195","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/524e4df53db55e84a457ba84c24d93c0e76a7f.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n\n      @SuppressWarnings({\"rawtypes\"})\n      List colLabels =  (List)value2;\n      \r\n      List<String> strLabels = new ArrayList<>(colLabels.size());\n      for(Object o : colLabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setColumnLabels(strLabels);\n      return matrix;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetColumnLabelsEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
