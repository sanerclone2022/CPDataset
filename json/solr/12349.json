[{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2015-11-12 12:37:37","commitOrder":2,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim().toLowerCase(Locale.ROOT);\n      if(value.contains(\" as \")){\n        String[] parts = value.split(\" as \");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2015-11-12 12:37:37","endLine":109,"groupId":"39601","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/8d68e751f5806e02dabf3720085fa81de8684c.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim().toLowerCase(Locale.ROOT);\n      if(value.contains(\" as \")){\n        String[] parts = value.split(\" as \");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2015-07-04 22:24:35","commitOrder":2,"curCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","date":"2015-07-04 22:24:35","endLine":54,"groupId":"9457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"RecordCountStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/450fd69a4efa1b3f2841043271cfdd9ed01684.src","preCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"NB"}],"commitId":"1161f2d018962780e36aa6278c923bd7b6c31876","commitMessage":"@@@SOLR-7669: Add SelectStream and Tuple Operations to the Streaming API and Streaming Expressions\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713967 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-12 12:37:37","modifiedFileCount":"8","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2016-01-08 09:55:25","commitOrder":3,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2016-01-08 09:55:25","endLine":111,"groupId":"39601","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/9d9ada1bcec03c62de857583d30a046439b90f.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim().toLowerCase(Locale.ROOT);\n      if(value.contains(\" as \")){\n        String[] parts = value.split(\" as \");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2015-07-04 22:24:35","commitOrder":3,"curCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","date":"2015-07-04 22:24:35","endLine":54,"groupId":"9457","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"RecordCountStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/450fd69a4efa1b3f2841043271cfdd9ed01684.src","preCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"ac754fcd593fb334ea9e46677390a7afa100cd9d","commitMessage":"@@@SOLR-8485: SelectStream now properly handles non-lowercase and/or quoted select field names\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723648 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-08 09:55:25","modifiedFileCount":"2","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2017-02-10 13:39:06","commitOrder":4,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          }\n          catch(Throwable e){\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2017-02-10 13:39:51","endLine":145,"groupId":"32615","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/d818280ff676b9885b0a0f335a65038b5549b6.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2015-07-04 22:24:35","commitOrder":4,"curCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","date":"2015-07-04 22:24:35","endLine":54,"groupId":"9457","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"RecordCountStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/450fd69a4efa1b3f2841043271cfdd9ed01684.src","preCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"62489678d074edb2ee962e1c4ee38026ff504b2a","commitMessage":"@@@SOLR-9916: Adds Stream Evaluators to support evaluating values from tuples\n","date":"2017-02-10 13:39:51","modifiedFileCount":"6","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2017-04-17 22:10:05","commitOrder":5,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2017-04-17 23:09:05","endLine":157,"groupId":"32615","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/433e375d6795b1f942906d34a7c0758680382e.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          }\n          catch(Throwable e){\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2015-07-04 22:24:35","commitOrder":5,"curCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","date":"2015-07-04 22:24:35","endLine":54,"groupId":"9457","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"RecordCountStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/450fd69a4efa1b3f2841043271cfdd9ed01684.src","preCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"8417307c63362806031fda14512ff373559cc65a","commitMessage":"@@@SOLR-10486: Add Length Conversion Evaluators\n","date":"2017-04-17 23:09:05","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2018-10-11 22:43:30","commitOrder":6,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2018-10-11 22:43:57","endLine":159,"groupId":"21024","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d8/7a637e63ef0e35a79b607c89ae3900df19ff20.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2015-07-04 22:24:35","commitOrder":6,"curCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","date":"2015-07-04 22:24:35","endLine":54,"groupId":"9457","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"RecordCountStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/450fd69a4efa1b3f2841043271cfdd9ed01684.src","preCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"a0bb5017722ce698fc390f3990243697341d2b8d","commitMessage":"@@@SOLR-12851: Improvements and fixes to let and select Streaming Expressions\n","date":"2018-10-11 22:43:57","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":7,"curCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap<>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":160,"groupId":"12349","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"SelectStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/e490aeba1b28127d985a96f6abc3a6c8e66ab2.src","preCode":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      \r\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); \r\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          \r\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            \r\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2015-07-04 22:24:35","commitOrder":7,"curCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","date":"2015-07-04 22:24:35","endLine":54,"groupId":"12349","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"RecordCountStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/450fd69a4efa1b3f2841043271cfdd9ed01684.src","preCode":"  public RecordCountStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n        \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    stream = factory.constructStream(streamExpressions.get(0));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/RecordCountStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"}]
