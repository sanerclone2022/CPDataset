[{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":1,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2017-08-26 17:07:19","endLine":66,"groupId":"9245","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/305b11aecdb3c9955ea8e66c9ec15134de61f1.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2017-08-26 17:07:19","commitOrder":1,"curCode":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n","date":"2017-08-26 17:07:19","endLine":74,"groupId":"9245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/cdeb594aee3d3325480563d02cfc106ea157f9.src","preCode":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"ddcb98e9c3e0d5f6acf59f872e8324e7ad144506","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-26 17:07:19","modifiedFileCount":"90","status":"B","submitter":"Karl Wright"},{"authorTime":"2017-12-05 10:08:58","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2017-08-26 17:07:19","endLine":66,"groupId":"9245","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/305b11aecdb3c9955ea8e66c9ec15134de61f1.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2017-12-05 10:08:58","commitOrder":2,"curCode":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n","date":"2017-12-05 10:09:41","endLine":75,"groupId":"9245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/8f003be57fc5ff9a53158edd70ed01cb7c99c3.src","preCode":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"8750e5f2a97e2011da7a3c821dca38a31d0f9bf1","commitMessage":"@@@SOLR-11485: Add olsRegress.  spline and derivative Stream Evaluators\n","date":"2017-12-05 10:09:41","modifiedFileCount":"46","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-07-30 22:01:15","codes":[{"authorDate":"2019-07-30 22:01:15","commitOrder":3,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    } else if (value instanceof String) {\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2019-07-30 22:42:06","endLine":68,"groupId":"10160","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/dce630f91d19fbbffc3d08f5e1309d8321805a.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-07-30 22:01:15","commitOrder":3,"curCode":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    } else if(value instanceof String) {\n      return new BigDecimal((String)value);\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      if(value instanceof List) {\n        if(((List)value).get(0) instanceof Number) {\n          return  value;\n        }\n      }\n\n      return ((Collection<?>) value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n","date":"2019-07-30 22:42:06","endLine":84,"groupId":"10160","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/89f6e685901509001e9546716b2e5c5817d943.src","preCode":"  public Object normalizeInputType(Object value) throws StreamEvaluatorException {\n    if(null == value) {\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    } else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return Double.NaN;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n  }  \n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"62955b1a4e98c4a583f9c6c5d71adc7947423b90","commitMessage":"@@@SOLR-13625: Fix broken test cases\n","date":"2019-07-30 22:42:06","modifiedFileCount":"34","status":"M","submitter":"Joel Bernstein"}]
