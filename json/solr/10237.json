[{"authorTime":"2017-09-08 13:20:00","codes":[{"authorDate":"2017-09-08 13:20:00","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n","date":"2017-09-08 13:20:00","endLine":58,"groupId":"6370","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/e6d5a201792a8e7d56f09b22982f13231d6548.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"MB"},{"authorDate":"2017-09-08 13:20:00","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n","date":"2017-09-08 13:20:00","endLine":51,"groupId":"6370","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/c25cb5846c8ceefdfd8c153a5e5626cff94ed4.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"5fee937242430b4f90681968b91969a656fd6dcd","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-08 13:20:00","modifiedFileCount":"55","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-11-28 16:01:18","codes":[{"authorDate":"2017-09-08 13:20:00","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n","date":"2017-09-08 13:20:00","endLine":58,"groupId":"10237","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/e6d5a201792a8e7d56f09b22982f13231d6548.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof  RealDistribution) {\n      RealDistribution rd = (RealDistribution) first;\n      Number predictOver = (Number) second;\n      return rd.cumulativeProbability(predictOver.doubleValue());\n    } else {\n      IntegerDistribution id = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return id.cumulativeProbability(predictOver.intValue());\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CumulativeProbabilityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"},{"authorDate":"2017-11-28 16:01:18","commitOrder":3,"curCode":"  public Object doWork(Object... values) throws IOException{\n\n    Object first = null;\n    Object second = null;\n    Object third = null;\n\n    if(values.length == 2) {\n      first = values[0];\n      second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof IntegerDistribution)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a IntegerDistributionm for probability at a specific value.\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      IntegerDistribution d = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return d.probability(predictOver.intValue());\n\n    } else if(values.length == 3) {\n      first = values[0];\n      second = values[1];\n      third = values[2];\n\n      if (!(first instanceof AbstractRealDistribution)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RealDistribution for probability ranges\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (!(third instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      AbstractRealDistribution realDistribution = (AbstractRealDistribution)first;\n      Number start = (Number) second;\n      Number end = (Number) third;\n      return realDistribution.probability(start.doubleValue(), end.doubleValue());\n    } else {\n      throw new IOException(\"The probability function expects 2 or 3 parameters\");\n    }\n  }\n","date":"2017-11-28 16:01:18","endLine":85,"groupId":"10237","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/09/2760c152c1fb31adece4bf26febab6b57006f2.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"dae529de58b4714e18e38b32ade1973863deb11e","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-11-28 16:01:18","modifiedFileCount":"8","status":"M","submitter":"Karl Wright"}]
