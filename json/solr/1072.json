[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2019-03-04 17:41:45","commitOrder":1,"curCode":"  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); \r\n    }\n    if (collection != null) { \r\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    \r\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n","date":"2019-03-04 17:41:45","endLine":148,"groupId":"61134","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchClusterState","params":"(SolrClientclient@Stringcollection@Map<String@Object>clusterProperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/2b6e41f9264d645d43ccdc7b4d97107bde6292.src","preCode":"  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); \r\n    }\n    if (collection != null) { \r\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    \r\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2019-03-04 17:41:45","commitOrder":1,"curCode":"  private static Set<String> fetchLiveNodes(SolrClient client) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    return (Set<String>) new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n  }\n","date":"2019-03-04 17:41:45","endLine":188,"groupId":"51962","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchLiveNodes","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/2b6e41f9264d645d43ccdc7b4d97107bde6292.src","preCode":"  private static Set<String> fetchLiveNodes(SolrClient client) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    return (Set<String>) new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"B","submitter":"Cao Manh Dat"},{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2020-06-10 02:59:17","commitOrder":2,"curCode":"  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); \r\n    }\n    if (collection != null) { \r\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.createFromCollectionMap(znodeVersion, collectionsMap, liveNodes);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n","date":"2020-06-10 02:59:17","endLine":149,"groupId":"61134","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fetchClusterState","params":"(SolrClientclient@Stringcollection@Map<String@Object>clusterProperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/d7854ff9b14b15b4c96947ee8f48307f5a2720.src","preCode":"  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); \r\n    }\n    if (collection != null) { \r\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    \r\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-03-04 17:41:45","commitOrder":2,"curCode":"  private static Set<String> fetchLiveNodes(SolrClient client) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    return (Set<String>) new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n  }\n","date":"2019-03-04 17:41:45","endLine":188,"groupId":"51962","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchLiveNodes","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/2b6e41f9264d645d43ccdc7b4d97107bde6292.src","preCode":"  private static Set<String> fetchLiveNodes(SolrClient client) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    return (Set<String>) new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"}],"commitId":"1ab9b811c65abb3d1a827c87b4f1135116ff90eb","commitMessage":"@@@SOLR-12823: remove /clusterstate.json (#1528)\n\n* SOLR-12823: remove /clusterstate.json\n\nRemove all code dealing with Zookeeper's /clusterstate.json.  remove Collection API's MIGRATESTATEVERSION.  remove legacyCloud option.\n\nAlso fixes SOLR-11877 DocCollection.getStateFormat is buggy\n\nCo-authored-by: Ilan Ginzburg <iginzburg@salesforce.com>","date":"2020-06-10 02:59:17","modifiedFileCount":"69","status":"M","submitter":"murblanc"},{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":3,"curCode":"  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    SimpleOrderedMap<?> cluster = (SimpleOrderedMap<?>) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList<?>) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList<?>)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); \r\n    }\n    if (collection != null) { \r\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet<>((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.createFromCollectionMap(znodeVersion, collectionsMap, liveNodes);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n","date":"2021-06-22 00:19:37","endLine":149,"groupId":"1072","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"fetchClusterState","params":"(SolrClientclient@Stringcollection@Map<String@Object>clusterProperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/c133f0e249e821a7b41522c87c6429fb067b5d.src","preCode":"  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); \r\n    }\n    if (collection != null) { \r\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.createFromCollectionMap(znodeVersion, collectionsMap, liveNodes);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-03-04 17:41:45","commitOrder":3,"curCode":"  private static Set<String> fetchLiveNodes(SolrClient client) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    return (Set<String>) new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n  }\n","date":"2019-03-04 17:41:45","endLine":188,"groupId":"1072","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchLiveNodes","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/2b6e41f9264d645d43ccdc7b4d97107bde6292.src","preCode":"  private static Set<String> fetchLiveNodes(SolrClient client) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    return (Set<String>) new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"N"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
