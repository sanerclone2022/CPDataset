[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, sort, groupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":678,"groupId":"39147","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, sort, groupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, sort, groupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":879,"groupId":"32041","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, sort, groupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2015-10-18 12:52:14","codes":[{"authorDate":"2015-10-18 12:52:14","commitOrder":2,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, sort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2015-10-18 12:52:14","endLine":772,"groupId":"39147","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/76240d75e3c8868dc90df0c2f918585554a363.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, sort, groupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":742,"status":"M"},{"authorDate":"2015-10-18 12:52:14","commitOrder":2,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, sort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2015-10-18 12:52:14","endLine":992,"groupId":"32041","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/76240d75e3c8868dc90df0c2f918585554a363.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, sort, groupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":962,"status":"M"}],"commitId":"64c73ef6a291d52374fee2f0e2d0328b183424a1","commitMessage":"@@@SOLR-8114: in Grouping.java rename groupSort to withinGroupSort\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1709230 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-18 12:52:14","modifiedFileCount":"3","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2015-10-18 23:14:05","codes":[{"authorDate":"2015-10-18 23:14:05","commitOrder":3,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2015-10-18 23:14:05","endLine":772,"groupId":"39147","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/0142303e3e09d55dd66cf8a979b587dae54ed1.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, sort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":742,"status":"M"},{"authorDate":"2015-10-18 23:14:05","commitOrder":3,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2015-10-18 23:14:05","endLine":992,"groupId":"32041","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/0142303e3e09d55dd66cf8a979b587dae54ed1.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, sort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":962,"status":"M"}],"commitId":"c1ec5f5ec7ca9cdfbbeaa65c6d42dba3078c409e","commitMessage":"@@@SOLR-8114: in Grouping.java rename sort to groupSort\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1709288 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-18 23:14:05","modifiedFileCount":"2","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2015-11-26 12:56:47","codes":[{"authorDate":"2015-11-26 12:56:47","commitOrder":4,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2015-11-26 12:56:47","endLine":771,"groupId":"39147","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/730a684789245158ecc70b0dd7c01bd9af5c63.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"M"},{"authorDate":"2015-11-26 12:56:47","commitOrder":4,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2015-11-26 12:56:47","endLine":992,"groupId":"29662","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/730a684789245158ecc70b0dd7c01bd9af5c63.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":961,"status":"M"}],"commitId":"0442747f05d870684689be971d58d39b9c4dd526","commitMessage":"@@@LUCENE-6900: Grouping sortWithinGroup shouldn't be null; use Sort.RELEVANCE.\nEnhanced related Solr side a bit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1716569 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-26 12:56:47","modifiedFileCount":"12","status":"M","submitter":"David Wayne Smiley"},{"authorTime":"2017-03-29 02:52:53","codes":[{"authorDate":"2017-03-29 02:52:53","commitOrder":5,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(new TermGroupSelector(groupBy),\n          topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2017-04-10 18:10:18","endLine":768,"groupId":"626","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/b6b66f82ddb2871cf13eaa636119f8d3739bfd.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new TermAllGroupsCollector(groupBy);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TermSecondPassGroupingCollector(\n          groupBy, topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new TermAllGroupsCollector(groupBy);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":737,"status":"M"},{"authorDate":"2017-03-29 02:52:53","commitOrder":5,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(newSelector());\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(newSelector(),\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2017-04-10 18:10:18","endLine":993,"groupId":"6887","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/b6b66f82ddb2871cf13eaa636119f8d3739bfd.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new FunctionSecondPassGroupingCollector(\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false, groupBy, context\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new FunctionAllGroupsCollector(groupBy, context);\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":962,"status":"M"}],"commitId":"caf329717ef643b2a5a8b7ef0bfb7bd5e096c849","commitMessage":"@@@LUCENE-7701: Refactor grouping collectors\n","date":"2017-04-10 18:10:18","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"},{"authorTime":"2018-07-18 18:49:31","codes":[{"authorDate":"2018-07-18 18:49:31","commitOrder":6,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset) : firstPass.getTopGroups(0);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(new TermGroupSelector(groupBy),\n          topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2018-07-18 18:55:05","endLine":759,"groupId":"626","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/8f4cd5420f554d8fb95d3f1a40a85757050857.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(new TermGroupSelector(groupBy),\n          topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2018-07-18 18:49:31","commitOrder":6,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset) : firstPass.getTopGroups(0);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(newSelector());\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(newSelector(),\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2018-07-18 18:55:05","endLine":964,"groupId":"6887","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ba/8f4cd5420f554d8fb95d3f1a40a85757050857.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset, false) : firstPass.getTopGroups(0, false);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(newSelector());\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(newSelector(),\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores, false\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"M"}],"commitId":"7d8fc543f01a31c8439c369b26c3c8c5924ba4ea","commitMessage":"@@@LUCENE-8411: Remove fillFields from TopFieldCollector factory methods.\n","date":"2018-07-18 18:55:05","modifiedFileCount":"28","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-23 15:05:02","codes":[{"authorDate":"2018-07-23 15:05:02","commitOrder":7,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset) : firstPass.getTopGroups(0);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(new TermGroupSelector(groupBy),\n          topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2018-07-23 15:06:49","endLine":767,"groupId":"112276","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/7dccd26ac6db58f69d6f792e96587cdc71667e.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset) : firstPass.getTopGroups(0);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupedDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupedDocsToCollect = Math.max(groupedDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(new TermGroupSelector(groupBy),\n          topGroups, groupSort, withinGroupSort, groupedDocsToCollect, needScores, needScores\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(new TermGroupSelector(groupBy));\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"},{"authorDate":"2018-07-23 15:05:02","commitOrder":7,"curCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset) : firstPass.getTopGroups(0);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(newSelector());\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(newSelector(),\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","date":"2018-07-23 15:06:49","endLine":975,"groupId":"112276","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createSecondPassCollector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/7dccd26ac6db58f69d6f792e96587cdc71667e.src","preCode":"    protected Collector createSecondPassCollector() throws IOException {\n      if (actualGroupsToFind <= 0) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return totalCount == TotalCount.grouped ? allGroupsCollector : null;\n      }\n\n      topGroups = format == Format.grouped ? firstPass.getTopGroups(offset) : firstPass.getTopGroups(0);\n      if (topGroups == null) {\n        if (totalCount == TotalCount.grouped) {\n          allGroupsCollector = new AllGroupsCollector<>(newSelector());\n          fallBackCollector = new TotalHitCountCollector();\n          return MultiCollector.wrap(allGroupsCollector, fallBackCollector);\n        } else {\n          fallBackCollector = new TotalHitCountCollector();\n          return fallBackCollector;\n        }\n      }\n\n      int groupdDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      groupdDocsToCollect = Math.max(groupdDocsToCollect, 1);\n      Sort withinGroupSort = this.withinGroupSort != null ? this.withinGroupSort : Sort.RELEVANCE;\n      secondPass = new TopGroupsCollector<>(newSelector(),\n          topGroups, groupSort, withinGroupSort, groupdDocsToCollect, needScores, needScores\n      );\n\n      if (totalCount == TotalCount.grouped) {\n        allGroupsCollector = new AllGroupsCollector<>(newSelector());\n        return MultiCollector.wrap(secondPass, allGroupsCollector);\n      } else {\n        return secondPass;\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":944,"status":"M"}],"commitId":"55bfadbce115a825a75686fe0bfe71406bc3ee44","commitMessage":"@@@LUCENE-8412: TopFieldCollector no longer takes a trackDocScores option.\n","date":"2018-07-23 15:06:49","modifiedFileCount":"30","status":"M","submitter":"Adrien Grand"}]
