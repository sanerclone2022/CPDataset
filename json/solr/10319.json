[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2019-05-30 00:52:57","commitOrder":2,"curCode":"  protected Tuple _read() throws IOException {\n    if(tuples.size() > 0) {\n      TupleWrapper tw = tuples.removeFirst();\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.addLast(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n","date":"2019-05-30 00:53:10","endLine":415,"groupId":"33308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"_read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/50bcce86f2bda7bfa00c57017f77e4d1af4fb0.src","preCode":"  protected Tuple _read() throws IOException {\n    if(tuples.size() > 0) {\n      TupleWrapper tw = tuples.removeFirst();\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.addLast(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n","date":"2015-05-11 20:37:18","endLine":381,"groupId":"38934","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"_read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/b5aa006d5fc64918b3c847a2bb5e7cfc074e8e.src","preCode":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"NB"}],"commitId":"6ca372fcbb2a77dce3ed4488a56edf7da9a1bb32","commitMessage":"@@@SOLR-13494: Add DeepRandomStream implementation\n","date":"2019-05-30 00:53:10","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 22:03:07","codes":[{"authorDate":"2020-06-08 22:03:07","commitOrder":3,"curCode":"  protected Tuple _read() throws IOException {\n    if(tuples.size() > 0) {\n      TupleWrapper tw = tuples.removeFirst();\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.addLast(tw);\n      }\n      return t;\n    } else {\n      Tuple tuple = Tuple.EOF();\n      if(trace) {\n        tuple.put(\"_COLLECTION_\", this.collection);\n      }\n      return tuple;\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":412,"groupId":"10319","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"_read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1d/53604e8e8747f788770df92aa554e8ffd1feb6.src","preCode":"  protected Tuple _read() throws IOException {\n    if(tuples.size() > 0) {\n      TupleWrapper tw = tuples.removeFirst();\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.addLast(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2020-06-08 22:03:07","commitOrder":3,"curCode":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Tuple tuple = Tuple.EOF();\n      if(trace) {\n        tuple.put(\"_COLLECTION_\", this.collection);\n      }\n      return tuple;\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":462,"groupId":"10319","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"_read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/a0211a67ca5b500b0705a4fafe9771a18b313c.src","preCode":"  protected Tuple _read() throws IOException {\n    TupleWrapper tw = tuples.pollFirst();\n    if(tw != null) {\n      Tuple t = tw.getTuple();\n\n      if (trace) {\n        t.put(\"_COLLECTION_\", this.collection);\n      }\n\n      if(tw.next()) {\n        tuples.add(tw);\n      }\n      return t;\n    } else {\n      Map m = new HashMap();\n      if(trace) {\n        m.put(\"_COLLECTION_\", this.collection);\n      }\n\n      m.put(\"EOF\", true);\n\n      return new Tuple(m);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"}],"commitId":"30924f23d6834605b9bf2d24509755ff61c4e878","commitMessage":"@@@SOLR-14470: Add streaming expressions to /export handler.\n","date":"2020-06-08 22:03:07","modifiedFileCount":"75","status":"M","submitter":"Andrzej Bialecki"}]
