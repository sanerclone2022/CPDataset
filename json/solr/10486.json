[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","date":"2018-11-30 01:58:51","endLine":220,"groupId":"52358","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAliasHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/b67d4b055ccc07147bf9c107c04228ac86f01e.src","preCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":5,"curCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudHttp2SolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","date":"2019-03-04 17:41:45","endLine":231,"groupId":"52358","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudHttp2SolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":6,"curCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","date":"2021-01-18 23:59:41","endLine":241,"groupId":"10486","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAliasHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2019-03-04 17:41:45","commitOrder":6,"curCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudHttp2SolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","date":"2019-03-04 17:41:45","endLine":231,"groupId":"10486","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testAliasHandling() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION2, 2, 2);\n\n    CloudHttp2SolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    CollectionAdminRequest.createAlias(\"testalias\", COLLECTION).process(cluster.getSolrClient());\n\n    SolrInputDocument doc2 = new SolrInputDocument(\"id\", \"2\", \"title_s\", \"my doc too\");\n    client.add(COLLECTION2, doc2);\n    client.commit(COLLECTION2);\n    CollectionAdminRequest.createAlias(\"testalias2\", COLLECTION2).process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createAlias(\"testaliascombined\", COLLECTION + \",\" + COLLECTION2).process(cluster.getSolrClient());\n\n    \r\n    Map<String, String> aliases = new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases();\n    assertEquals(COLLECTION, aliases.get(\"testalias\"));\n    assertEquals(COLLECTION2, aliases.get(\"testalias2\"));\n    assertEquals(COLLECTION + \",\" + COLLECTION2, aliases.get(\"testaliascombined\"));\n\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(1, client.query(COLLECTION2, params(\"q\", \"*:*\")).getResults().getNumFound());\n    assertEquals(1, client.query(\"testalias2\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    assertEquals(2, client.query(\"testaliascombined\", params(\"q\", \"*:*\")).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothCollections = params(\"q\", \"*:*\", \"collection\", COLLECTION + \",\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithBothCollections).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithBothAliases = params(\"q\", \"*:*\", \"collection\", \"testalias,testalias2\");\n    assertEquals(2, client.query(null, paramsWithBothAliases).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithCombinedAlias = params(\"q\", \"*:*\", \"collection\", \"testaliascombined\");\n    assertEquals(2, client.query(null, paramsWithCombinedAlias).getResults().getNumFound());\n\n    ModifiableSolrParams paramsWithMixedCollectionAndAlias = params(\"q\", \"*:*\", \"collection\", \"testalias,\" + COLLECTION2);\n    assertEquals(2, client.query(null, paramsWithMixedCollectionAndAlias).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
