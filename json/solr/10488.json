[{"authorTime":"2020-11-20 01:57:47","codes":[{"authorDate":"2020-11-20 01:57:47","commitOrder":1,"curCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","date":"2020-11-20 01:57:47","endLine":427,"groupId":"60300","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queryWithLocalShardsPreferenceRulesTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/80358e3865d292d6acbecea7380da445f2b636.src","preCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"B"},{"authorDate":"2020-11-20 01:57:47","commitOrder":1,"curCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","date":"2020-11-20 01:57:47","endLine":441,"groupId":"60300","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"queryWithLocalShardsPreferenceRulesTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/85e46c99b3801265c876c72fcfb178e31d889b.src","preCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"B"}],"commitId":"c4d4767bca196ad358b72156889effd27fdfcc9b","commitMessage":"@@@SOLR-14035: Remove deprecated preferLocalShards=true support in favour of the shards.preference=replica.location:local alternative.\n(Alex Bulygin via Christine Poerschke)\n","date":"2020-11-20 01:57:47","modifiedFileCount":"5","status":"B","submitter":"Christine Poerschke"},{"authorTime":"2020-11-20 01:57:47","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":2,"curCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","date":"2021-01-18 23:59:41","endLine":442,"groupId":"10488","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"queryWithLocalShardsPreferenceRulesTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2020-11-20 01:57:47","commitOrder":2,"curCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","date":"2020-11-20 01:57:47","endLine":441,"groupId":"10488","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"queryWithLocalShardsPreferenceRulesTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/85e46c99b3801265c876c72fcfb178e31d889b.src","preCode":"  public void queryWithLocalShardsPreferenceRulesTest() throws Exception {\n\n    String collectionName = \"localShardsTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    \r\n    \r\n    \r\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * liveNodes);\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    queryWithShardsPreferenceRules(getRandomClient(), collectionName);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
