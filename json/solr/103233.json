[{"authorTime":"2020-05-21 02:16:05","codes":[{"authorDate":"2020-05-21 02:16:05","commitOrder":1,"curCode":"  public void testBespoke() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"str\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      facets.put(\"int\", new TermFacet(multiIntField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, \"skg desc\", false));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"perSeg\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"prefix\", \"2\")));\n      \n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      \r\n      \n      \r\n      \r\n      \r\n      \r\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(multiStrField(9), limit, 0, \"skg desc\", true));\n        assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n      }\n    }\n    \n    { \r\n      final TermFacet xxx = new TermFacet(multiStrField(12), -1, 0, \"count asc\", false);\n      xxx.subFacets.put(\"sum\", new SumFacet(multiIntField(4)));\n      final Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", xxx);\n      assertFacetSKGsAreConsistent(facets,\n                                   buildORQuery(multiStrField(13) + \":26\",\n                                                multiStrField(6) + \":33\",\n                                                multiStrField(9) + \":24\"),\n                                   buildORQuery(multiStrField(4) + \":27\",\n                                                multiStrField(12) + \":18\",\n                                                multiStrField(2) + \":28\",\n                                                multiStrField(13) + \":50\"),\n                                   \"*:*\");\n    }\n  }\n","date":"2020-05-21 02:16:05","endLine":374,"groupId":"5232","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBespoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/a16e03331a7bbbaa458288b489efa9adc29f3e.src","preCode":"  public void testBespoke() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"str\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      facets.put(\"int\", new TermFacet(multiIntField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, \"skg desc\", false));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"perSeg\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"prefix\", \"2\")));\n      \n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      \r\n      \n      \r\n      \r\n      \r\n      \r\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(multiStrField(9), limit, 0, \"skg desc\", true));\n        assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n      }\n    }\n    \n    { \r\n      final TermFacet xxx = new TermFacet(multiStrField(12), -1, 0, \"count asc\", false);\n      xxx.subFacets.put(\"sum\", new SumFacet(multiIntField(4)));\n      final Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", xxx);\n      assertFacetSKGsAreConsistent(facets,\n                                   buildORQuery(multiStrField(13) + \":26\",\n                                                multiStrField(6) + \":33\",\n                                                multiStrField(9) + \":24\"),\n                                   buildORQuery(multiStrField(4) + \":27\",\n                                                multiStrField(12) + \":18\",\n                                                multiStrField(2) + \":28\",\n                                                multiStrField(13) + \":50\"),\n                                   \"*:*\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"},{"authorDate":"2020-05-21 02:16:05","commitOrder":1,"curCode":"  public void testBespokeAllBuckets() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), map(\"sort\", \"skg desc\",\n                                                            \"allBuckets\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n  }\n","date":"2020-05-21 02:16:05","endLine":389,"groupId":"5232","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBespokeAllBuckets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/a16e03331a7bbbaa458288b489efa9adc29f3e.src","preCode":"  public void testBespokeAllBuckets() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), map(\"sort\", \"skg desc\",\n                                                            \"allBuckets\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"B"}],"commitId":"28209cb8b1fe2a4d8050e4877c4df2ad5d85509b","commitMessage":"@@@SOLR-14492: Fix ArrayIndexOutOfBoundsException in json.facet 'terms' when FacetFieldProcessorByHashDV is used with aggregations over multivalued numeric fields\n\nSOLR-14477: Fix incorrect 'relatedness()' calculations in json.facet 'terms' when 'prefix' option is used\n","date":"2020-05-21 02:16:05","modifiedFileCount":"8","status":"B","submitter":"Chris Hostetter"},{"authorTime":"2020-05-21 02:16:05","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":2,"curCode":"  public void testBespoke() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"str\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      facets.put(\"int\", new TermFacet(multiIntField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, \"skg desc\", false));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"perSeg\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      Map.of(\"prefix\", \"2\")));\n      \n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      \r\n      \n      \r\n      \r\n      \r\n      \r\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(multiStrField(9), limit, 0, \"skg desc\", true));\n        assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n      }\n    }\n    \n    { \r\n      final TermFacet xxx = new TermFacet(multiStrField(12), -1, 0, \"count asc\", false);\n      xxx.subFacets.put(\"sum\", new SumFacet(multiIntField(4)));\n      final Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", xxx);\n      assertFacetSKGsAreConsistent(facets,\n                                   buildORQuery(multiStrField(13) + \":26\",\n                                                multiStrField(6) + \":33\",\n                                                multiStrField(9) + \":24\"),\n                                   buildORQuery(multiStrField(4) + \":27\",\n                                                multiStrField(12) + \":18\",\n                                                multiStrField(2) + \":28\",\n                                                multiStrField(13) + \":50\"),\n                                   \"*:*\");\n    }\n  }\n","date":"2021-06-03 06:17:26","endLine":582,"groupId":"103233","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBespoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/02/1eb1327309925fec2924b042da22ea5496956c.src","preCode":"  public void testBespoke() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"str\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      facets.put(\"int\", new TermFacet(multiIntField(9), UNIQUE_FIELD_VALS, 0, null, null));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, \"skg desc\", false));\n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"perSeg\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9),\n                                      map(\"prefix\", \"2\")));\n      \n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n    \n    { \r\n      \r\n      \n      \r\n      \r\n      \r\n      \r\n      for (int limit : new int[] { 999999999, -1 }) {\n        Map<String,TermFacet> facets = new LinkedHashMap<>();\n        facets.put(\"top_facet_limit__\" + limit, new TermFacet(multiStrField(9), limit, 0, \"skg desc\", true));\n        assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n      }\n    }\n    \n    { \r\n      final TermFacet xxx = new TermFacet(multiStrField(12), -1, 0, \"count asc\", false);\n      xxx.subFacets.put(\"sum\", new SumFacet(multiIntField(4)));\n      final Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", xxx);\n      assertFacetSKGsAreConsistent(facets,\n                                   buildORQuery(multiStrField(13) + \":26\",\n                                                multiStrField(6) + \":33\",\n                                                multiStrField(9) + \":24\"),\n                                   buildORQuery(multiStrField(4) + \":27\",\n                                                multiStrField(12) + \":18\",\n                                                multiStrField(2) + \":28\",\n                                                multiStrField(13) + \":50\"),\n                                   \"*:*\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"M"},{"authorDate":"2020-05-21 02:16:05","commitOrder":2,"curCode":"  public void testBespokeAllBuckets() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), map(\"sort\", \"skg desc\",\n                                                            \"allBuckets\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n  }\n","date":"2020-05-21 02:16:05","endLine":389,"groupId":"103233","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBespokeAllBuckets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/a16e03331a7bbbaa458288b489efa9adc29f3e.src","preCode":"  public void testBespokeAllBuckets() throws Exception {\n    { \r\n      Map<String,TermFacet> facets = new LinkedHashMap<>();\n      facets.put(\"xxx\", new TermFacet(multiStrField(9), map(\"sort\", \"skg desc\",\n                                                            \"allBuckets\", true)));\n      \n      assertFacetSKGsAreConsistent(facets, multiStrField(7)+\":11\", multiStrField(5)+\":9\", \"*:*\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
