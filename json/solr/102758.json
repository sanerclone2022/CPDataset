[{"authorTime":"2020-08-06 14:32:32","codes":[{"authorDate":"2020-09-29 13:25:22","commitOrder":2,"curCode":"  public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"}) Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (@SuppressWarnings({\"rawtypes\"}) Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n","date":"2020-09-29 13:25:22","endLine":810,"groupId":"57601","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateZip","params":"(@SuppressWarnings({\"rawtypes\"})Class...classes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/a5d0c1104386ddcd95c70a72d3395158b7fa45.src","preCode":"  public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"}) Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (@SuppressWarnings({\"rawtypes\"}) Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"B"},{"authorDate":"2020-08-06 14:32:32","commitOrder":2,"curCode":"    public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"})Class... classes) throws IOException {\n      SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n      try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n        zipOut.setLevel(ZipOutputStream.DEFLATED);\n        for (@SuppressWarnings({\"rawtypes\"})Class c : classes) {\n          String path = c.getName().replace('.', '/').concat(\".class\");\n          ZipEntry entry = new ZipEntry(path);\n          ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n          zipOut.putNextEntry(entry);\n          zipOut.write(b.array(), 0, b.limit());\n          zipOut.closeEntry();\n        }\n      }\n      return bos.getByteBuffer();\n    }\n","date":"2020-08-06 14:32:32","endLine":115,"groupId":"57601","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateZip","params":"(@SuppressWarnings({\"rawtypes\"})Class...classes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/d344c316dd22ab51644a29804510c618eacf1f.src","preCode":"    public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"})Class... classes) throws IOException {\n      SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n      try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n        zipOut.setLevel(ZipOutputStream.DEFLATED);\n        for (@SuppressWarnings({\"rawtypes\"})Class c : classes) {\n          String path = c.getName().replace('.', '/').concat(\".class\");\n          ZipEntry entry = new ZipEntry(path);\n          ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n          zipOut.putNextEntry(entry);\n          zipOut.write(b.array(), 0, b.limit());\n          zipOut.closeEntry();\n        }\n      }\n      return bos.getByteBuffer();\n    }\n","realPath":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"}],"commitId":"01da67c728df1e46ed82fee1a178546c0665b421","commitMessage":"@@@SOLR-14901: TestPackages uses binary precompiled classes to refer to analysis factory FQCNs\n","date":"2020-09-29 13:25:22","modifiedFileCount":"1","status":"M","submitter":"noble"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":3,"curCode":"  public static ByteBuffer generateZip(Class<?>... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (Class<?> c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n","date":"2021-07-13 23:49:56","endLine":842,"groupId":"57601","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateZip","params":"(Class<?>...classes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8f/c209530edfdf446c1900f77b81021e8a38d658.src","preCode":"  public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"}) Class... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (@SuppressWarnings({\"rawtypes\"}) Class c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"M"},{"authorDate":"2021-07-13 23:49:56","commitOrder":3,"curCode":"    public static ByteBuffer generateZip(Class<?>... classes) throws IOException {\n      SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n      try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n        zipOut.setLevel(ZipOutputStream.DEFLATED);\n        for (Class<?> c : classes) {\n          String path = c.getName().replace('.', '/').concat(\".class\");\n          ZipEntry entry = new ZipEntry(path);\n          ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n          zipOut.putNextEntry(entry);\n          zipOut.write(b.array(), 0, b.limit());\n          zipOut.closeEntry();\n        }\n      }\n      return bos.getByteBuffer();\n    }\n","date":"2021-07-13 23:49:56","endLine":116,"groupId":"57601","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateZip","params":"(Class<?>...classes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/8b9f31f28e715b28aa3b93900913abcfa02f9c.src","preCode":"    public static ByteBuffer generateZip(@SuppressWarnings({\"rawtypes\"})Class... classes) throws IOException {\n      SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n      try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n        zipOut.setLevel(ZipOutputStream.DEFLATED);\n        for (@SuppressWarnings({\"rawtypes\"})Class c : classes) {\n          String path = c.getName().replace('.', '/').concat(\".class\");\n          ZipEntry entry = new ZipEntry(path);\n          ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n          zipOut.putNextEntry(entry);\n          zipOut.write(b.array(), 0, b.limit());\n          zipOut.closeEntry();\n        }\n      }\n      return bos.getByteBuffer();\n    }\n","realPath":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-08-17 01:38:32","codes":[{"authorDate":"2021-08-17 01:38:32","commitOrder":4,"curCode":"  public static ByteBuffer generateZip(Class<?>... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (Class<?> c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), b.arrayOffset(), b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n","date":"2021-08-17 01:38:32","endLine":843,"groupId":"102758","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"generateZip","params":"(Class<?>...classes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/682363c92ac0cc2d7a9a5691e6faa69a594ab0.src","preCode":"  public static ByteBuffer generateZip(Class<?>... classes) throws IOException {\n    SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n    try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n      zipOut.setLevel(ZipOutputStream.DEFLATED);\n      for (Class<?> c : classes) {\n        String path = c.getName().replace('.', '/').concat(\".class\");\n        ZipEntry entry = new ZipEntry(path);\n        ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n        zipOut.putNextEntry(entry);\n        zipOut.write(b.array(), 0, b.limit());\n        zipOut.closeEntry();\n      }\n    }\n    return bos.getByteBuffer();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/pkg/TestPackages.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"M"},{"authorDate":"2021-08-17 01:38:32","commitOrder":4,"curCode":"    public static ByteBuffer generateZip(Class<?>... classes) throws IOException {\n      SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n      try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n        zipOut.setLevel(ZipOutputStream.DEFLATED);\n        for (Class<?> c : classes) {\n          String path = c.getName().replace('.', '/').concat(\".class\");\n          ZipEntry entry = new ZipEntry(path);\n          ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n          zipOut.putNextEntry(entry);\n          zipOut.write(b.array(), b.arrayOffset(), b.limit());\n          zipOut.closeEntry();\n        }\n      }\n      return bos.getByteBuffer();\n    }\n","date":"2021-08-17 01:38:32","endLine":116,"groupId":"102758","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"generateZip","params":"(Class<?>...classes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/60c205bf66ed68b0f641ecb3d29e85a9b03272.src","preCode":"    public static ByteBuffer generateZip(Class<?>... classes) throws IOException {\n      SimplePostTool.BAOS bos = new SimplePostTool.BAOS();\n      try (ZipOutputStream zipOut = new ZipOutputStream(bos)) {\n        zipOut.setLevel(ZipOutputStream.DEFLATED);\n        for (Class<?> c : classes) {\n          String path = c.getName().replace('.', '/').concat(\".class\");\n          ZipEntry entry = new ZipEntry(path);\n          ByteBuffer b = SimplePostTool.inputStreamToByteArray(c.getClassLoader().getResourceAsStream(path));\n          zipOut.putNextEntry(entry);\n          zipOut.write(b.array(), 0, b.limit());\n          zipOut.closeEntry();\n        }\n      }\n      return bos.getByteBuffer();\n    }\n","realPath":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"e21d3ed16da2d65e7612b0c5fa85438ca66ab8f7","commitMessage":"@@@SOLR-15583 Update error-prone to 2.8.1 and fix bug patterns (#260)\n\n","date":"2021-08-17 01:38:32","modifiedFileCount":"36","status":"M","submitter":"Mike Drob"}]
