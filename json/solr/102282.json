[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","date":"2011-07-10 07:01:53","endLine":89,"groupId":"20790","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/194c8827f2f893c61a05edca6873b557ec7ca6.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","date":"2011-07-10 07:01:53","endLine":70,"groupId":"20694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/011ec3c4140671d95eeb38658ffe4135b5570c.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2012-11-24 03:45:50","codes":[{"authorDate":"2012-11-24 03:45:50","commitOrder":2,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","date":"2012-11-24 03:45:50","endLine":88,"groupId":"20790","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/8e7ae97b49bc0cdee9c36a51697c03cf43757b.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2012-11-24 03:45:50","commitOrder":2,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","date":"2012-11-24 03:45:50","endLine":69,"groupId":"1852","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/3dfadc935d263e1c56d84ede2d4860cddcddd1.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"2d4e789d00ecb5dfaf73e7df01a7da4502c404a9","commitMessage":"@@@SOLR-4093: solr specific parser + localParams syntax\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1413042 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-11-24 03:45:50","modifiedFileCount":"35","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2017-11-23 00:08:08","codes":[{"authorDate":"2012-11-24 03:45:50","commitOrder":3,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","date":"2012-11-24 03:45:50","endLine":88,"groupId":"20790","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bf/8e7ae97b49bc0cdee9c36a51697c03cf43757b.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2017-11-23 00:08:08","commitOrder":3,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    if (localParams == null) { \r\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"the 'query' QParser must be invoked with local-params, e.g. {!query defType=...}\");\n    }\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","date":"2017-11-23 00:08:08","endLine":71,"groupId":"1852","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/f282fd79089cfb12d3e11da7fafa0a966ef61d.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"26cbf520d574a37c59b61962a85a847a07bc2af9","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-11-23 00:08:08","modifiedFileCount":"13","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-11-23 00:08:08","codes":[{"authorDate":"2017-12-14 20:09:51","commitOrder":4,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return boostQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","date":"2017-12-19 01:47:03","endLine":92,"groupId":"20790","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/91f660eded32eea983be7044fb0549cab62dd7.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2017-11-23 00:08:08","commitOrder":4,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    if (localParams == null) { \r\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"the 'query' QParser must be invoked with local-params, e.g. {!query defType=...}\");\n    }\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","date":"2017-11-23 00:08:08","endLine":71,"groupId":"1852","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/f282fd79089cfb12d3e11da7fafa0a966ef61d.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    if (localParams == null) { \r\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"the 'query' QParser must be invoked with local-params, e.g. {!query defType=...}\");\n    }\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"b01e6023e1cd3c62260b38c05c8d145ba143a2ac","commitMessage":"@@@LUCENE-8099: Deprecate CustomScoreQuery.  BoostedQuery.  BoostingQuery\n","date":"2017-12-19 01:47:03","modifiedFileCount":"15","status":"M","submitter":"Alan Woodward"},{"authorTime":"2017-11-23 00:08:08","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":5,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource());\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","date":"2018-01-23 20:35:14","endLine":85,"groupId":"102282","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/e08a6728c9444d79fef87acd772b4beae64c60.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return boostQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2017-11-23 00:08:08","commitOrder":5,"curCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    if (localParams == null) { \r\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"the 'query' QParser must be invoked with local-params, e.g. {!query defType=...}\");\n    }\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","date":"2017-11-23 00:08:08","endLine":71,"groupId":"102282","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createParser","params":"(Stringqstr@SolrParamslocalParams@SolrParamsparams@SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/f282fd79089cfb12d3e11da7fafa0a966ef61d.src","preCode":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    if (localParams == null) { \r\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"the 'query' QParser must be invoked with local-params, e.g. {!query defType=...}\");\n    }\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        return baseParser.getQuery();\n      }\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n\n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        \r\n        baseParser.addDebugInfo(debugInfo);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/NestedQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"}]
