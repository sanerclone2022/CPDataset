[{"authorTime":"2015-11-13 06:52:06","codes":[{"authorDate":"2015-11-13 06:52:06","commitOrder":1,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax = (int) minMaxValues.get(contextDoc);\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":1617,"groupId":"27932","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax = (int) minMaxValues.get(contextDoc);\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1584,"status":"B"},{"authorDate":"2015-11-13 06:52:06","commitOrder":1,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal = minMaxVals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":1697,"groupId":"27932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal = minMaxVals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1666,"status":"B"}],"commitId":"918476e0ac207fc2a0454e9047857cd78f68fa4a","commitMessage":"@@@SOLR-6168: Add a 'sort' local param to the collapse QParser to support using complex sort options to select the representitive doc for each collapsed group\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1714133 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-13 06:52:06","modifiedFileCount":"4","status":"B","submitter":"Chris M. Hostetter"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentMinMax;\n      if (valuesDocID == contextDoc) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2016-10-03 03:18:22","endLine":1724,"groupId":"27932","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/58d1c44517ebc98feb4473e3e8d9ea734591b9.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax = (int) minMaxValues.get(contextDoc);\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1680,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      int valuesDocID = minMaxVals.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxVals.advance(contextDoc);\n      }\n\n      long currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2016-10-03 03:18:22","endLine":1815,"groupId":"27932","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/58d1c44517ebc98feb4473e3e8d9ea734591b9.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal = minMaxVals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1773,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-02-13 22:53:19","codes":[{"authorDate":"2018-02-13 22:53:19","commitOrder":3,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2018-02-13 22:53:19","endLine":1714,"groupId":"27932","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/f1c8957dcfe1197be0a0757d08949da52a089e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentMinMax;\n      if (valuesDocID == contextDoc) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1675,"status":"M"},{"authorDate":"2018-02-13 22:53:19","commitOrder":3,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2018-02-13 22:53:19","endLine":1800,"groupId":"27932","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/f1c8957dcfe1197be0a0757d08949da52a089e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      int valuesDocID = minMaxVals.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxVals.advance(contextDoc);\n      }\n\n      long currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1763,"status":"M"}],"commitId":"8a5a4a6317e272cdda316a54fa74f60fa82f1497","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-02-13 22:53:19","modifiedFileCount":"34","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-04-10 16:24:10","codes":[{"authorDate":"2020-04-10 16:24:10","commitOrder":4,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2020-04-10 16:24:10","endLine":1743,"groupId":"24343","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/e4bed5c1c6853f002e8ee7eef39a1eae46964e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1704,"status":"M"},{"authorDate":"2020-04-10 16:24:10","commitOrder":4,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2020-04-10 16:24:10","endLine":1821,"groupId":"24343","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/e4bed5c1c6853f002e8ee7eef39a1eae46964e.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1784,"status":"M"}],"commitId":"adbd714b37d794e9aa7615e61c431e42162c1d3c","commitMessage":"@@@SOLR-14365: CollapsingQParser - Avoiding always allocate int[] and float[] with size equals to number of unique values (WIP) (#1395)\n\n","date":"2020-04-10 16:24:10","modifiedFileCount":"1","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-09-29 21:49:49","codes":[{"authorDate":"2020-09-29 21:49:49","commitOrder":5,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2020-09-29 21:49:49","endLine":1789,"groupId":"24343","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/1e740bd8fb3cd95358bd57ec7a4102fd9b392f.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1750,"status":"M"},{"authorDate":"2020-09-29 21:49:49","commitOrder":5,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2020-09-29 21:49:49","endLine":1867,"groupId":"24343","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/1e740bd8fb3cd95358bd57ec7a4102fd9b392f.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1830,"status":"M"}],"commitId":"1dba76c0d31b6f0294c1f257e5a1fc51a722b82f","commitMessage":"@@@SOLR-14333: Implement toString in Collapse filter  (#1371)\n\n","date":"2020-09-29 21:49:49","modifiedFileCount":"2","status":"M","submitter":"Guna Sekhar Dora Kovvuru"},{"authorTime":"2021-01-06 01:00:56","codes":[{"authorDate":"2021-01-06 01:00:56","commitOrder":6,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2021-01-06 01:00:56","endLine":1722,"groupId":"112120","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/6ec45dfccf4b7d94c5215e8e7a648432ac563d.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentMinMax;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentMinMax = (int) minMaxValues.longValue();\n      } else {\n        currentMinMax = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(currentMinMax);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1689,"status":"M"},{"authorDate":"2021-01-06 01:00:56","commitOrder":6,"curCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2021-01-06 01:00:56","endLine":1795,"groupId":"112120","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intord@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/6ec45dfccf4b7d94c5215e8e7a648432ac563d.src","preCode":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n        return;\n      }\n\n      long currentVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        currentVal = minMaxVals.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1764,"status":"M"}],"commitId":"a48e937f599bc1487df3321c490589b0d8820616","commitMessage":"@@@SOLR-15048: Fixed collapse parser behavior when dealing with docs boosted by QueryElevationComponent that are in the null group to treat them consistently regardless of collapse field type or group head selector\n","date":"2021-01-06 01:00:56","modifiedFileCount":"2","status":"M","submitter":"Chris Hostetter"}]
