[{"authorTime":"2015-12-09 21:21:56","codes":[{"authorDate":"2015-12-09 21:21:56","commitOrder":1,"curCode":"  public void testDomainHostPortMatch() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"myhost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"myhost\");\n    try {\n      h.match(cookie, null);\n      Assert.fail(\"IllegalArgumentException should have been thrown, since origin is null.\");\n    } catch (final IllegalArgumentException ex) {\n      \r\n    }\n\n    cookie.setDomain(null);\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"otherhost\");\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:80\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:8080\");\n    Assert.assertFalse(h.match(cookie, origin));\n  }\n","date":"2015-12-09 21:21:56","endLine":76,"groupId":"13074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDomainHostPortMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/dee6671d51231dada5620917779deb1d9d5297.src","preCode":"  public void testDomainHostPortMatch() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"myhost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"myhost\");\n    try {\n      h.match(cookie, null);\n      Assert.fail(\"IllegalArgumentException should have been thrown, since origin is null.\");\n    } catch (final IllegalArgumentException ex) {\n      \r\n    }\n\n    cookie.setDomain(null);\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"otherhost\");\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:80\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:8080\");\n    Assert.assertFalse(h.match(cookie, origin));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2015-12-09 21:21:56","commitOrder":1,"curCode":"  public void testDomainValidate1() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"somehost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"somehost\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\"otherhost\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","date":"2015-12-09 21:21:56","endLine":94,"groupId":"13073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDomainValidate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/dee6671d51231dada5620917779deb1d9d5297.src","preCode":"  public void testDomainValidate1() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"somehost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"somehost\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\"otherhost\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"0ac77568521523cda60e3e75d34e82bf149ada9f","commitMessage":"@@@SOLR-8373: KerberosPlugin: Using multiple nodes on same machine leads clients to\n  fetch TGT for every request\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718852 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-09 21:21:56","modifiedFileCount":"4","status":"B","submitter":"Noble Paul"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testDomainHostPortMatch() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"myhost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"myhost\");\n    SolrTestCaseJ4.expectThrows(IllegalArgumentException.class, () -> h.match(cookie, null));\n\n    cookie.setDomain(null);\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"otherhost\");\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:80\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:8080\");\n    Assert.assertFalse(h.match(cookie, origin));\n  }\n","date":"2019-08-03 15:30:49","endLine":66,"groupId":"10477","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDomainHostPortMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/c4643cefe6d4ef63c35abe4b5a6acca6ccc5ff.src","preCode":"  public void testDomainHostPortMatch() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"myhost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"myhost\");\n    try {\n      h.match(cookie, null);\n      Assert.fail(\"IllegalArgumentException should have been thrown, since origin is null.\");\n    } catch (final IllegalArgumentException ex) {\n      \r\n    }\n\n    cookie.setDomain(null);\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"otherhost\");\n    Assert.assertFalse(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:80\");\n    Assert.assertTrue(h.match(cookie, origin));\n\n    cookie.setDomain(\"myhost:8080\");\n    Assert.assertFalse(h.match(cookie, origin));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void testDomainValidate1() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"somehost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"somehost\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\"otherhost\");\n    SolrTestCaseJ4.expectThrows(MalformedCookieException.class, () ->  h.validate(cookie, origin));\n  }\n","date":"2019-08-03 15:30:49","endLine":79,"groupId":"10477","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDomainValidate1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/c4643cefe6d4ef63c35abe4b5a6acca6ccc5ff.src","preCode":"  public void testDomainValidate1() throws Exception {\n    final BasicClientCookie cookie = new BasicClientCookie(\"name\", \"value\");\n    final CookieOrigin origin = new CookieOrigin(\"somehost\", 80, \"/\", false);\n    final CookieAttributeHandler h = new SolrPortAwareCookieSpecFactory.PortAwareDomainHandler();\n\n    cookie.setDomain(\"somehost\");\n    h.validate(cookie, origin);\n\n    cookie.setDomain(\"otherhost\");\n    try {\n      h.validate(cookie, origin);\n      Assert.fail(\"MalformedCookieException should have been thrown\");\n    } catch (final MalformedCookieException ex) {\n      \r\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/SolrPortAwareCookieSpecTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
