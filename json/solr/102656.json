[{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2017-07-11 07:58:23","commitOrder":3,"curCode":"  public void testIntPointFieldSortAndFunction() throws Exception {\n\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(IntPointField.class);\n    final List<String> sequential = Arrays.asList(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    final List<Integer> randomInts = getRandomInts(10, false);\n    final List<Integer> randomIntsMissing = getRandomInts(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_i\", \"*_p_i_dv\", \"*_p_i_dv_ns\", \"*_p_i_ni_dv\",\n                                  \"*_p_i_ni_dv_ns\", \"*_p_i_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n      doTestIntPointFunctionQuery(field, \"int\");\n    }\n    for (String r : Arrays.asList(\"*_p_i_smf\", \"*_p_i_dv_smf\", \"*_p_i_ni_dv_smf\",\n                                  \"*_p_i_sml\", \"*_p_i_dv_sml\", \"*_p_i_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomIntsMissing);\n      doTestIntPointFunctionQuery(field, \"int\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_ni\", \"*_p_i_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_mv\", \"*_p_i_ni_mv\", \"*_p_i_ni_mv_dv\", \"*_p_i_ni_dv_ns_mv\",\n                                  \"*_p_i_ni_ns_mv\", \"*_p_i_dv_ns_mv\", \"*_p_i_mv_dv\",\n                                  \"*_p_i_mv_smf\", \"*_p_i_mv_dv_smf\", \"*_p_i_ni_mv_dv_smf\",\n                                  \"*_p_i_mv_sml\", \"*_p_i_mv_dv_sml\", \"*_p_i_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n   }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-07-11 07:58:23","endLine":193,"groupId":"45556","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntPointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testIntPointFieldSortAndFunction() throws Exception {\n\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(IntPointField.class);\n    final List<String> sequential = Arrays.asList(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    final List<Integer> randomInts = getRandomInts(10, false);\n    final List<Integer> randomIntsMissing = getRandomInts(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_i\", \"*_p_i_dv\", \"*_p_i_dv_ns\", \"*_p_i_ni_dv\",\n                                  \"*_p_i_ni_dv_ns\", \"*_p_i_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n      doTestIntPointFunctionQuery(field, \"int\");\n    }\n    for (String r : Arrays.asList(\"*_p_i_smf\", \"*_p_i_dv_smf\", \"*_p_i_ni_dv_smf\",\n                                  \"*_p_i_sml\", \"*_p_i_dv_sml\", \"*_p_i_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomIntsMissing);\n      doTestIntPointFunctionQuery(field, \"int\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_ni\", \"*_p_i_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_mv\", \"*_p_i_ni_mv\", \"*_p_i_ni_mv_dv\", \"*_p_i_ni_dv_ns_mv\",\n                                  \"*_p_i_ni_ns_mv\", \"*_p_i_dv_ns_mv\", \"*_p_i_mv_dv\",\n                                  \"*_p_i_mv_smf\", \"*_p_i_mv_dv_smf\", \"*_p_i_ni_mv_dv_smf\",\n                                  \"*_p_i_mv_sml\", \"*_p_i_mv_dv_sml\", \"*_p_i_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n   }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"MB"},{"authorDate":"2017-07-11 07:58:23","commitOrder":3,"curCode":"  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-07-11 07:58:23","endLine":1166,"groupId":"47391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1119,"status":"MB"}],"commitId":"5bb09e08528552c310d30fc627dc823a86aa6880","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values\n","date":"2017-07-11 07:58:23","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-15 01:54:27","codes":[{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  public void testIntPointFieldSortAndFunction() throws Exception {\n\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(IntPointField.class);\n    final List<String> sequential = Arrays.asList(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    final List<Integer> randomInts = getRandomInts(10, false);\n    final List<Integer> randomIntsMissing = getRandomInts(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_i\", \"*_p_i_dv\", \"*_p_i_dv_ns\", \"*_p_i_ni_dv\",\n                                  \"*_p_i_ni_dv_ns\", \"*_p_i_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n      doTestIntPointFunctionQuery(field);\n    }\n    for (String r : Arrays.asList(\"*_p_i_smf\", \"*_p_i_dv_smf\", \"*_p_i_ni_dv_smf\",\n                                  \"*_p_i_sml\", \"*_p_i_dv_sml\", \"*_p_i_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomIntsMissing);\n      doTestIntPointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_ni\", \"*_p_i_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_mv\", \"*_p_i_ni_mv\", \"*_p_i_ni_mv_dv\", \"*_p_i_ni_dv_ns_mv\",\n                                  \"*_p_i_ni_ns_mv\", \"*_p_i_dv_ns_mv\", \"*_p_i_mv_dv\",\n                                  \"*_p_i_mv_smf\", \"*_p_i_mv_dv_smf\", \"*_p_i_ni_mv_dv_smf\",\n                                  \"*_p_i_mv_sml\", \"*_p_i_mv_dv_sml\", \"*_p_i_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n   }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-07-15 01:54:35","endLine":192,"groupId":"60973","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntPointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testIntPointFieldSortAndFunction() throws Exception {\n\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(IntPointField.class);\n    final List<String> sequential = Arrays.asList(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    final List<Integer> randomInts = getRandomInts(10, false);\n    final List<Integer> randomIntsMissing = getRandomInts(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_i\", \"*_p_i_dv\", \"*_p_i_dv_ns\", \"*_p_i_ni_dv\",\n                                  \"*_p_i_ni_dv_ns\", \"*_p_i_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n      doTestIntPointFunctionQuery(field, \"int\");\n    }\n    for (String r : Arrays.asList(\"*_p_i_smf\", \"*_p_i_dv_smf\", \"*_p_i_ni_dv_smf\",\n                                  \"*_p_i_sml\", \"*_p_i_dv_sml\", \"*_p_i_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomIntsMissing);\n      doTestIntPointFunctionQuery(field, \"int\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_ni\", \"*_p_i_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_mv\", \"*_p_i_ni_mv\", \"*_p_i_ni_mv_dv\", \"*_p_i_ni_dv_ns_mv\",\n                                  \"*_p_i_ni_ns_mv\", \"*_p_i_dv_ns_mv\", \"*_p_i_mv_dv\",\n                                  \"*_p_i_mv_smf\", \"*_p_i_mv_dv_smf\", \"*_p_i_ni_mv_dv_smf\",\n                                  \"*_p_i_mv_sml\", \"*_p_i_mv_dv_sml\", \"*_p_i_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n   }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2017-07-15 01:54:27","commitOrder":4,"curCode":"  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2017-07-15 01:54:35","endLine":1355,"groupId":"47391","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/4e55e42bf83ea67b994b5fb6824d315756699a.src","preCode":"  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1308,"status":"M"}],"commitId":"82515fd329ce02cee68ea533e7d4bfb022b2fb00","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values (part 2)\n","date":"2017-07-15 01:54:35","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2018-01-23 20:35:14","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":5,"curCode":"  public void testIntPointFieldSortAndFunction() throws Exception {\n\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(IntPointField.class);\n    final List<String> sequential = Arrays.asList(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    final List<Integer> randomInts = getRandomInts(10, false);\n    final List<Integer> randomIntsMissing = getRandomInts(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_i\", \"*_p_i_dv\", \"*_p_i_dv_ns\", \"*_p_i_ni_dv\",\n                                  \"*_p_i_ni_dv_ns\", \"*_p_i_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n      doTestIntPointFunctionQuery(field);\n    }\n    for (String r : Arrays.asList(\"*_p_i_smf\", \"*_p_i_dv_smf\", \"*_p_i_ni_dv_smf\",\n                                  \"*_p_i_sml\", \"*_p_i_dv_sml\", \"*_p_i_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomIntsMissing);\n      doTestIntPointFunctionQuery(field);\n    }\n\n    \r\n    for (String r : Arrays.asList(\"*_p_i_ni\", \"*_p_i_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n    }\n    \n    \r\n    for (String r : Arrays.asList(\"*_p_i_mv\", \"*_p_i_ni_mv\", \"*_p_i_ni_ns_mv\", \n                                  \"*_p_i_mv_smf\", \"*_p_i_mv_sml\")) {\n           \n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n    }\n\n    \r\n    for (String r : Arrays.asList(\"*_p_i_ni_mv_dv\", \"*_p_i_ni_dv_ns_mv\",\n                                  \"*_p_i_dv_ns_mv\", \"*_p_i_mv_dv\",\n                                  \"*_p_i_mv_dv_smf\", \"*_p_i_ni_mv_dv_smf\",\n                                  \"*_p_i_mv_dv_sml\", \"*_p_i_ni_mv_dv_sml\"\n                                  )) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n\n      \r\n      \r\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n\n      \r\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2018-01-23 20:35:14","endLine":213,"groupId":"102656","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntPointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/d2e1ffc7e24bca8d7be75e3d221b644447ed6f.src","preCode":"  public void testIntPointFieldSortAndFunction() throws Exception {\n\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(IntPointField.class);\n    final List<String> sequential = Arrays.asList(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    final List<Integer> randomInts = getRandomInts(10, false);\n    final List<Integer> randomIntsMissing = getRandomInts(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_i\", \"*_p_i_dv\", \"*_p_i_dv_ns\", \"*_p_i_ni_dv\",\n                                  \"*_p_i_ni_dv_ns\", \"*_p_i_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomInts);\n      doTestIntPointFunctionQuery(field);\n    }\n    for (String r : Arrays.asList(\"*_p_i_smf\", \"*_p_i_dv_smf\", \"*_p_i_ni_dv_smf\",\n                                  \"*_p_i_sml\", \"*_p_i_dv_sml\", \"*_p_i_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, sequential);\n      doTestPointFieldSort(field, randomIntsMissing);\n      doTestIntPointFunctionQuery(field);\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_ni\", \"*_p_i_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomInts(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_i_mv\", \"*_p_i_ni_mv\", \"*_p_i_ni_mv_dv\", \"*_p_i_ni_dv_ns_mv\",\n                                  \"*_p_i_ni_ns_mv\", \"*_p_i_dv_ns_mv\", \"*_p_i_mv_dv\",\n                                  \"*_p_i_mv_smf\", \"*_p_i_mv_dv_smf\", \"*_p_i_ni_mv_dv_smf\",\n                                  \"*_p_i_mv_sml\", \"*_p_i_mv_dv_sml\", \"*_p_i_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomInts(numValues, false)));\n   }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2018-01-23 20:35:14","commitOrder":5,"curCode":"  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n    \n    \r\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    \r\n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_ns_mv\", \n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_sml\")) {\n                                  \n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \r\n    for (String r : Arrays.asList(\"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n\n      \r\n      \r\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n\n      \r\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","date":"2018-01-23 20:35:14","endLine":1429,"groupId":"102656","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPointFieldSortAndFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/d2e1ffc7e24bca8d7be75e3d221b644447ed6f.src","preCode":"  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1363,"status":"M"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"}]
