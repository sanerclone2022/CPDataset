[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2011-07-10 07:01:53","endLine":469,"groupId":"59244","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/9561786017267027e671c70a2d2bca7740ddfa.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2011-07-10 07:01:53","endLine":226,"groupId":"14118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/a15ddeb209d2f1eb98998fadd33a1a998bc7a7.src","preCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2011-12-14 02:39:06","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2011-07-10 07:01:53","endLine":469,"groupId":"59244","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/9561786017267027e671c70a2d2bca7740ddfa.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"N"},{"authorDate":"2011-12-14 02:39:06","commitOrder":2,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2011-12-14 02:39:06","endLine":226,"groupId":"14118","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b8/b70694b676e26130f37b6752a839bc94007ab8.src","preCode":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"8d7749ea4fc55e54f4d7ead438c24f327ceb8358","commitMessage":"@@@LUCENE-3622: separate IndexDocValues interface from implementation (phase 1)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1213844 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-12-14 02:39:06","modifiedFileCount":"136","status":"M","submitter":"Robert Muir"},{"authorTime":"2012-03-14 07:28:17","codes":[{"authorDate":"2012-03-14 07:28:17","commitOrder":3,"curCode":"    double dist(double lat, double lon) {\n      double latRad = Math.toRadians(lat);\n      double lonRad = Math.toRadians(lon);\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-03-14 07:28:17","endLine":448,"groupId":"59244","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b2/f4f2bb3f7947141a471e136a40a24cb267c0ea.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"},{"authorDate":"2012-03-14 07:28:17","commitOrder":3,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = Math.toRadians(this.latCenter);\n    final double lonCenterRad = Math.toRadians(this.lonCenter);\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = Math.toRadians(latVals.doubleVal(doc));\n        double lonRad = Math.toRadians(lonVals.doubleVal(doc));\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2012-03-14 07:28:17","endLine":226,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/6bbcce169251dbcb2127864bfe2475fe95470c.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"2ac613aef9ba5e329b99d0e2a83ad5661df3b45d","commitMessage":"@@@LUCENE-3795: Replace contrib/spatial with modules/spatial  (merge from branch)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1300409 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-14 07:28:17","modifiedFileCount":"13","status":"M","submitter":"Ryan McKinley"},{"authorTime":"2012-03-14 12:05:51","codes":[{"authorDate":"2012-03-14 12:05:51","commitOrder":4,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * HaversineConstFunction.DEGREES_TO_RADIANS;\n      double lonRad = lon * HaversineConstFunction.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-03-14 12:05:51","endLine":449,"groupId":"59244","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/2c4f25ce6e209be0b5b283c42e2f0796496d63.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = Math.toRadians(lat);\n      double lonRad = Math.toRadians(lon);\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"},{"authorDate":"2012-03-14 12:05:51","commitOrder":4,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2012-03-14 12:05:51","endLine":229,"groupId":"16291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/22eb3e1140ca7405d743bd92fbf8b3a7e3a924.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = Math.toRadians(this.latCenter);\n    final double lonCenterRad = Math.toRadians(this.lonCenter);\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = Math.toRadians(latVals.doubleVal(doc));\n        double lonRad = Math.toRadians(lonVals.doubleVal(doc));\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"d8fff9b873687b452fd3575c15a2e4dc75a08f5b","commitMessage":"@@@LUCENE-3795: re-optimize degrees-radians conversions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1300457 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-14 12:05:51","modifiedFileCount":"5","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-03-14 12:05:51","codes":[{"authorDate":"2012-09-05 23:37:11","commitOrder":5,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-09-05 23:37:11","endLine":447,"groupId":"59244","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/a78cc570639371318152dfa8e8640d25989af0.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * HaversineConstFunction.DEGREES_TO_RADIANS;\n      double lonRad = lon * HaversineConstFunction.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"},{"authorDate":"2012-03-14 12:05:51","commitOrder":5,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2012-03-14 12:05:51","endLine":229,"groupId":"16291","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/22eb3e1140ca7405d743bd92fbf8b3a7e3a924.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"}],"commitId":"1db287ce64036c6a1fe03b4e9e110fd798baeed3","commitMessage":"@@@LUCENE-4351 update to Spatial4j 0.3.  Lucene spatial distances are now all degrees based (0-180).  Also.  improved TestRecursivePrefixTreeStrategy.geohashRecursiveRandom() to use circle index clusters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1381230 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-05 23:37:11","modifiedFileCount":"34","status":"M","submitter":"David Wayne Smiley"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2012-09-05 23:37:11","commitOrder":6,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-09-05 23:37:11","endLine":447,"groupId":"59244","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/a78cc570639371318152dfa8e8640d25989af0.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"N"},{"authorDate":"2014-09-24 07:51:55","commitOrder":6,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":85,"groupId":"16291","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/f98f3879b4ed70810340fd8be9a73089d88a64.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2012-09-05 23:37:11","commitOrder":7,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-09-05 23:37:11","endLine":447,"groupId":"59244","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/a78cc570639371318152dfa8e8640d25989af0.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"N"},{"authorDate":"2016-10-03 03:18:22","commitOrder":7,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":84,"groupId":"16291","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/89ff499e768c9bd28a62d23ef9786658609f81.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2020-06-13 23:00:58","codes":[{"authorDate":"2012-09-05 23:37:11","commitOrder":8,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-09-05 23:37:11","endLine":447,"groupId":"59244","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/a78cc570639371318152dfa8e8640d25989af0.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"N"},{"authorDate":"2020-06-13 23:00:58","commitOrder":8,"curCode":"  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context,\n                                  LeafReaderContext readerContext) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2020-06-13 23:00:58","endLine":87,"groupId":"16291","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(@SuppressWarnings({\"rawtypes\"})Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/fada0c95a795c543e437a394d839c3a1a78f0c.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"a41aa20b0afaadf47ec6e58476a947c6936c1921","commitMessage":"@@@SOLR-14564: Fix or suppress remaining warnings in solr/core\n","date":"2020-06-13 23:00:58","modifiedFileCount":"91","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2012-09-05 23:37:11","commitOrder":9,"curCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","date":"2012-09-05 23:37:11","endLine":447,"groupId":"102005","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"dist","params":"(doublelat@doublelon)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/a78cc570639371318152dfa8e8640d25989af0.src","preCode":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      \r\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      \r\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/schema/LatLonType.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"N"},{"authorDate":"2021-06-03 06:17:26","commitOrder":9,"curCode":"  public FunctionValues getValues(Map<Object, Object> context,\n                                  LeafReaderContext readerContext) throws IOException {\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":85,"groupId":"102005","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/67/5d4f5deb006d6c4b9d01b27b23beb17082db3f.src","preCode":"  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context,\n                                  LeafReaderContext readerContext) throws IOException {\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues latVals = latSource.getValues(context, readerContext);\n    @SuppressWarnings({\"unchecked\"})\n    final FunctionValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        double latRad = latVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineConstFunction.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
