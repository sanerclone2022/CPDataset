[{"authorTime":"2011-11-25 23:46:26","codes":[{"authorDate":"2011-11-25 23:46:26","commitOrder":1,"curCode":"  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"������B*\", \"AB������*\"},   \r\n        {\"H*\", \"H������*\", \"H������J*\"},   \r\n        {\"O*\", \"������P*\", \"OPQ*\"},   \r\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*������1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*Lm������1\", \"*M������1\"},\n        {\"*������1\", \"*sTu1\", \"*R������TU1\"}\n    };\n\n    \r\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","date":"2011-11-25 23:46:26","endLine":108,"groupId":"14096","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrefixCaseAccentFolding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/02e922135da4023c18296dc1fec68b78f5839d.src","preCode":"  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"������B*\", \"AB������*\"},   \r\n        {\"H*\", \"H������*\", \"H������J*\"},   \r\n        {\"O*\", \"������P*\", \"OPQ*\"},   \r\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*������1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*Lm������1\", \"*M������1\"},\n        {\"*������1\", \"*sTu1\", \"*R������TU1\"}\n    };\n\n    \r\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2011-11-25 23:46:26","commitOrder":1,"curCode":"  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"������*C*\", \"������B*1\", \"AB������*g1\", \"������*FG1\"},      \r\n        {\"H*k*\", \"H������*l?*\", \"H������J*n*\", \"H������J*m*\"},   \r\n        {\"O*������*\", \"������P*������???\", \"OPQ*S?������*\", \"������P*1\"},  \r\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","date":"2011-11-25 23:46:26","endLine":136,"groupId":"14096","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWildcardCaseAccentFolding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/02e922135da4023c18296dc1fec68b78f5839d.src","preCode":"  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"������*C*\", \"������B*1\", \"AB������*g1\", \"������*FG1\"},      \r\n        {\"H*k*\", \"H������*l?*\", \"H������J*n*\", \"H������J*m*\"},   \r\n        {\"O*������*\", \"������P*������???\", \"OPQ*S?������*\", \"������P*1\"},  \r\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"098371446aaab89b978cba936e9012055c67ef64","commitMessage":"@@@SOLR-2438.  allow an analysis chain to be created for multiterm query terms or synthesize one if not defined explicitly\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1206229 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-25 23:46:26","modifiedFileCount":"7","status":"B","submitter":"Erick Erickson"},{"authorTime":"2011-11-28 01:04:38","codes":[{"authorDate":"2011-11-28 01:04:38","commitOrder":2,"curCode":"  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"������B*\", \"AB������*\"},   \r\n        {\"H*\", \"H������*\", \"H������J*\"},   \r\n        {\"O*\", \"������P*\", \"OPQ*\"},   \r\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*������1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*Lm������1\", \"*M������1\"},\n        {\"*������1\", \"*sTu1\", \"*R������TU1\"}\n    };\n\n    \r\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_oldstyle:\" + me),\n            \"//result[@numFound='0']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","date":"2011-11-28 01:04:38","endLine":115,"groupId":"103282","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrefixCaseAccentFolding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/8f6047291900d47b126f5eb12f5b6e7784db90.src","preCode":"  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"������B*\", \"AB������*\"},   \r\n        {\"H*\", \"H������*\", \"H������J*\"},   \r\n        {\"O*\", \"������P*\", \"OPQ*\"},   \r\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*������1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*Lm������1\", \"*M������1\"},\n        {\"*������1\", \"*sTu1\", \"*R������TU1\"}\n    };\n\n    \r\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2011-11-28 01:04:38","commitOrder":2,"curCode":"  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"������*C*\", \"������B*1\", \"AB������*g1\", \"������*FG1\"},      \r\n        {\"H*k*\", \"H������*l?*\", \"H������J*n*\", \"H������J*m*\"},   \r\n        {\"O*������*\", \"������P*������???\", \"OPQ*S?������*\", \"������P*1\"},  \r\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_oldstyle:\" + me),\n            \"//result[@numFound='0']\");\n      }\n    }\n  }\n","date":"2011-11-28 01:04:38","endLine":142,"groupId":"103282","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWildcardCaseAccentFolding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/8f6047291900d47b126f5eb12f5b6e7784db90.src","preCode":"  public void testWildcardCaseAccentFolding() throws Exception {\n    String matchOneDocWildUpper[][] = {\n        {\"������*C*\", \"������B*1\", \"AB������*g1\", \"������*FG1\"},      \r\n        {\"H*k*\", \"H������*l?*\", \"H������J*n*\", \"H������J*m*\"},   \r\n        {\"O*������*\", \"������P*������???\", \"OPQ*S?������*\", \"������P*1\"},  \r\n    };\n\n    for (int idx = 0; idx < matchOneDocWildUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocWildUpper[idx].length; jdx++) {\n        String me = matchOneDocWildUpper[idx][jdx];\n        assertQ(\"Error with \" + me, req(\"q\", \"content:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"c94c1c5a647b0462754d80a11e47a07df28568f1","commitMessage":"@@@\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1206767 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-28 01:04:38","modifiedFileCount":"14","status":"M","submitter":"Erick Erickson"}]
