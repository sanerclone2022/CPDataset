[{"authorTime":"2016-04-19 20:28:36","codes":[{"authorDate":"2018-11-28 00:21:42","commitOrder":2,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","date":"2018-11-28 00:22:02","endLine":218,"groupId":"58984","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/eeb78e77102275782cfc3100eb927a0a6db439.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"},{"authorDate":"2016-04-19 20:28:36","commitOrder":2,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","date":"2016-04-19 20:28:36","endLine":192,"groupId":"58984","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/b35c1861854977a6598ab9a9cb581b5dc6bc32.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"NB"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-09-13 20:42:38","codes":[{"authorDate":"2019-09-13 20:42:38","commitOrder":3,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","date":"2019-09-13 20:42:38","endLine":223,"groupId":"33691","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/368a0a98213ef99e9bf592b0ef2f87fb777ac6.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2019-09-13 20:42:38","commitOrder":3,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","date":"2019-09-13 20:42:38","endLine":229,"groupId":"33691","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/6083b8d9bd5f4f22d229c3f9dc0927c1ace16e.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"ec78ef785275e4d46c0f133c6b55be1f974b8db2","commitMessage":"@@@Changing keyset() to entryset() and sometines values(). (#868)\n\n","date":"2019-09-13 20:42:38","modifiedFileCount":"21","status":"M","submitter":"Koen De Groote"},{"authorTime":"2019-12-12 09:23:20","codes":[{"authorDate":"2019-09-13 20:42:38","commitOrder":4,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","date":"2019-09-13 20:42:38","endLine":223,"groupId":"33691","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/368a0a98213ef99e9bf592b0ef2f87fb777ac6.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"N"},{"authorDate":"2019-12-12 09:23:20","commitOrder":4,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n\n      \r\n      if(outputX) {\n        map.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","date":"2019-12-12 09:37:20","endLine":257,"groupId":"33691","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/a0e3d4af811de40fa7f15f5c81a1b4f9d77cf3.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"ee0a6b45ca50b94bf1a68032687442919d19ecb9","commitMessage":"@@@SOLR-14060: Allow the random Streaming Expression to create the x-axis\n","date":"2019-12-12 09:37:20","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 22:03:07","codes":[{"authorDate":"2020-06-08 22:03:07","commitOrder":5,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Tuple tuple = new Tuple();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        tuple.put(entry.getKey(), entry.getValue());\n      }\n      return tuple;\n    } else {\n      return Tuple.EOF();\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":218,"groupId":"10296","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/96d6091931bfa092ade1d935729bd7dcf711dc.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SearchStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2020-06-08 22:03:07","commitOrder":5,"curCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Tuple tuple = new Tuple();\n      SolrDocument doc = documentIterator.next();\n\n      \r\n      if(outputX) {\n        tuple.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        tuple.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return tuple;\n    } else {\n      return Tuple.EOF();\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":254,"groupId":"10296","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"read","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/a055c31823b3e2d5fa70f99be805030301ae49.src","preCode":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n\n      \r\n      if(outputX) {\n        map.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"30924f23d6834605b9bf2d24509755ff61c4e878","commitMessage":"@@@SOLR-14470: Add streaming expressions to /export handler.\n","date":"2020-06-08 22:03:07","modifiedFileCount":"75","status":"M","submitter":"Andrzej Bialecki"}]
