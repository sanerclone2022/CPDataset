[{"authorTime":"2015-04-09 05:49:21","codes":[{"authorDate":"2015-04-09 05:49:21","commitOrder":1,"curCode":"  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","date":"2015-04-09 05:49:21","endLine":104,"groupId":"11253","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForAllActiveAndLiveReplicas","params":"(ZkStateReaderzkStateReader@Stringcollection@inttimeoutInMs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/bf082e52bdb1b8533f800acb517bcefa1b24b0.src","preCode":"  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2015-04-09 05:49:21","commitOrder":1,"curCode":"  public static boolean waitForAllReplicasNotLive(ZkStateReader zkStateReader,\n      String collection, int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection == null) {\n          collections = clusterState.getCollections();\n        } else {\n          collections = Collections.singleton(collection);\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                if (live) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","date":"2015-04-09 05:49:21","endLine":216,"groupId":"11254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllReplicasNotLive","params":"(ZkStateReaderzkStateReader@Stringcollection@inttimeoutInMs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/bf082e52bdb1b8533f800acb517bcefa1b24b0.src","preCode":"  public static boolean waitForAllReplicasNotLive(ZkStateReader zkStateReader,\n      String collection, int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection == null) {\n          collections = clusterState.getCollections();\n        } else {\n          collections = Collections.singleton(collection);\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                if (live) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"f3d352501a5a5232c3dda2a75df095669df176fc","commitMessage":"@@@SOLR-7066: autoAddReplicas feature has bug when selecting replacement nodes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1672201 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-09 05:49:21","modifiedFileCount":"3","status":"B","submitter":"Mark Robert Miller"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = null;\n        if (collection != null) {\n          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));\n        } else {\n          collections = clusterState.getCollectionsMap();\n        }\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","date":"2016-05-05 15:05:25","endLine":107,"groupId":"1025","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForAllActiveAndLiveReplicas","params":"(ZkStateReaderzkStateReader@Stringcollection@inttimeoutInMs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/682451167db95ae71939af03f40585b63fd301.src","preCode":"  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public static boolean waitForAllReplicasNotLive(ZkStateReader zkStateReader,\n      String collection, int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = null;\n        if (collection != null) {\n          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));\n        } else {\n          collections = clusterState.getCollectionsMap();\n        }\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                if (live) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","date":"2016-05-05 15:05:25","endLine":219,"groupId":"1025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllReplicasNotLive","params":"(ZkStateReaderzkStateReader@Stringcollection@inttimeoutInMs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/682451167db95ae71939af03f40585b63fd301.src","preCode":"  public static boolean waitForAllReplicasNotLive(ZkStateReader zkStateReader,\n      String collection, int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection == null) {\n          collections = clusterState.getCollections();\n        } else {\n          collections = Collections.singleton(collection);\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            \r\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                \r\n                boolean live = clusterState.liveNodesContain(replica\n                    .getNodeName());\n                if (live) {\n                  \r\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"}]
