[{"authorTime":"2015-09-24 09:49:09","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n    del(\"*:*\");\n    commit();\n\n  }\n","date":"2015-06-24 21:07:09","endLine":212,"groupId":"48435","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"NB"},{"authorDate":"2015-09-24 09:49:09","commitOrder":4,"curCode":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-09-24 09:49:09","endLine":643,"groupId":"20312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/7112bd459f7a11986b09d58d2d438a9055f291.src","preCode":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"B"}],"commitId":"fb881a4f0fbdb2b2e0375b536814cc931b36fb3a","commitMessage":"@@@SOLR-8038: Add StatsStream to the Streaming API and wire it into the SQLHandler\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1704973 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-24 09:49:09","modifiedFileCount":"5","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-09-24 09:49:09","codes":[{"authorDate":"2015-12-10 03:52:28","commitOrder":5,"curCode":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n    del(\"*:*\");\n    commit();\n\n  }\n","date":"2015-12-10 03:52:28","endLine":203,"groupId":"48435","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/9acab9fbe43bdf605cca5729e7ef7c3d98f4ea.src","preCode":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2015-09-24 09:49:09","commitOrder":5,"curCode":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-09-24 09:49:09","endLine":643,"groupId":"20312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/7112bd459f7a11986b09d58d2d438a9055f291.src","preCode":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"N"}],"commitId":"e04981edc7995280b488197611847f9a7b201e2e","commitMessage":"@@@SOLR-8266: Remove Java Serialization from the Streaming API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718947 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-10 03:52:28","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":6,"curCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n  }\n","date":"2016-05-05 15:05:25","endLine":156,"groupId":"32958","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":6,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, paramsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":578,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testStatsStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":7,"curCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n  }\n","date":"2016-05-23 14:35:53","endLine":157,"groupId":"32955","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":7,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":604,"groupId":"32955","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, paramsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-27 02:39:37","commitOrder":8,"curCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == (10 * numWorkers)); \r\n\n  }\n","date":"2016-05-27 02:39:37","endLine":161,"groupId":"32955","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/ea31126212eca3af35418c2d2da7d922cecc93.src","preCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":8,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":604,"groupId":"32955","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"N"}],"commitId":"4d4030350b79303d6f358612473f4e68570858cc","commitMessage":"@@@SOLR-9141: Fix ClassCastException when using the /sql handler count() function with single-shard collections\n","date":"2016-05-27 02:39:37","modifiedFileCount":"2","status":"M","submitter":"jdyer1"},{"authorTime":"2016-11-14 15:03:37","codes":[{"authorDate":"2016-05-27 02:39:37","commitOrder":9,"curCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == (10 * numWorkers)); \r\n\n  }\n","date":"2016-05-27 02:39:37","endLine":161,"groupId":"32955","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/ea31126212eca3af35418c2d2da7d922cecc93.src","preCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == (10 * numWorkers)); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2016-11-14 15:03:37","commitOrder":9,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assertEquals(1, tuples.size());\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(70, sumi.longValue());\n    assertEquals(55.0, sumf.doubleValue(), 0.01);\n    assertEquals(0.0, mini.doubleValue(), 0.01);\n    assertEquals(1.0, minf.doubleValue(), 0.01);\n    assertEquals(14.0, maxi.doubleValue(), 0.01);\n    assertEquals(10.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.0, avgi.doubleValue(), .01);\n    assertEquals(5.5, avgf.doubleValue(), .001);\n    assertEquals(10, count.doubleValue(), .01);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":606,"groupId":"37608","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assert(tuples.size() == 1);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":10,"curCode":"public void testNonePartitionKeys() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n  ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n  attachStreamFactory(pstream);\n  List<Tuple> tuples = getTuples(pstream);\n\n  assert(tuples.size() == (10 * numWorkers)); \r\n\n}\n","date":"2016-11-16 10:33:58","endLine":177,"groupId":"19591","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testNonePartitionKeys() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == (10 * numWorkers)); \r\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":10,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTIONORALIAS, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assertEquals(1, tuples.size());\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(70, sumi.longValue());\n    assertEquals(55.0, sumf.doubleValue(), 0.01);\n    assertEquals(0.0, mini.doubleValue(), 0.01);\n    assertEquals(1.0, minf.doubleValue(), 0.01);\n    assertEquals(14.0, maxi.doubleValue(), 0.01);\n    assertEquals(10.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.0, avgi.doubleValue(), .01);\n    assertEquals(5.5, avgf.doubleValue(), .001);\n    assertEquals(10, count.doubleValue(), .01);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":620,"groupId":"19591","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTION, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assertEquals(1, tuples.size());\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(70, sumi.longValue());\n    assertEquals(55.0, sumf.doubleValue(), 0.01);\n    assertEquals(0.0, mini.doubleValue(), 0.01);\n    assertEquals(1.0, minf.doubleValue(), 0.01);\n    assertEquals(14.0, maxi.doubleValue(), 0.01);\n    assertEquals(10.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.0, avgi.doubleValue(), .01);\n    assertEquals(5.5, avgf.doubleValue(), .001);\n    assertEquals(10, count.doubleValue(), .01);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":11,"curCode":"public void testNonePartitionKeys() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    pstream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert (tuples.size() == (10 * numWorkers)); \r\n  } finally {\n    solrClientCache.close();\n  }\n}\n","date":"2017-04-12 03:24:42","endLine":193,"groupId":"59308","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"public void testNonePartitionKeys() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n  ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n  attachStreamFactory(pstream);\n  List<Tuple> tuples = getTuples(pstream);\n\n  assert(tuples.size() == (10 * numWorkers)); \r\n\n}\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":11,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      StatsStream statsStream = new StatsStream(zkHost, COLLECTIONORALIAS, sParamsA, metrics);\n      statsStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(statsStream);\n\n      assertEquals(1, tuples.size());\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(70, sumi.longValue());\n      assertEquals(55.0, sumf.doubleValue(), 0.01);\n      assertEquals(0.0, mini.doubleValue(), 0.01);\n      assertEquals(1.0, minf.doubleValue(), 0.01);\n      assertEquals(14.0, maxi.doubleValue(), 0.01);\n      assertEquals(10.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.0, avgi.doubleValue(), .01);\n      assertEquals(5.5, avgf.doubleValue(), .001);\n      assertEquals(10, count.doubleValue(), .01);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":717,"groupId":"59308","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    StatsStream statsStream = new StatsStream(zkHost, COLLECTIONORALIAS, sParamsA, metrics);\n\n    List<Tuple> tuples = getTuples(statsStream);\n\n    assertEquals(1, tuples.size());\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(70, sumi.longValue());\n    assertEquals(55.0, sumf.doubleValue(), 0.01);\n    assertEquals(0.0, mini.doubleValue(), 0.01);\n    assertEquals(1.0, minf.doubleValue(), 0.01);\n    assertEquals(14.0, maxi.doubleValue(), 0.01);\n    assertEquals(10.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.0, avgi.doubleValue(), .01);\n    assertEquals(5.5, avgf.doubleValue(), .001);\n    assertEquals(10, count.doubleValue(), .01);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2018-11-28 00:21:42","commitOrder":12,"curCode":"public void testNonePartitionKeys() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\", \"qt\", \"/export\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    pstream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert (tuples.size() == (10 * numWorkers)); \r\n  } finally {\n    solrClientCache.close();\n  }\n}\n","date":"2018-11-28 00:22:02","endLine":194,"groupId":"10854","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonePartitionKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/85f2ce458e9299a8c12edad6d0e2bcf87128db.src","preCode":"public void testNonePartitionKeys() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n      .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n      .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n      .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n      .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n      .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n      .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n\n    SolrParams sParamsA = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = parallelStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    pstream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert (tuples.size() == (10 * numWorkers)); \r\n  } finally {\n    solrClientCache.close();\n  }\n}\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":12,"curCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      StatsStream statsStream = new StatsStream(zkHost, COLLECTIONORALIAS, sParamsA, metrics);\n      statsStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(statsStream);\n\n      assertEquals(1, tuples.size());\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(70, sumi.longValue());\n      assertEquals(55.0, sumf.doubleValue(), 0.01);\n      assertEquals(0.0, mini.doubleValue(), 0.01);\n      assertEquals(1.0, minf.doubleValue(), 0.01);\n      assertEquals(14.0, maxi.doubleValue(), 0.01);\n      assertEquals(10.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.0, avgi.doubleValue(), .01);\n      assertEquals(5.5, avgf.doubleValue(), .001);\n      assertEquals(10, count.doubleValue(), .01);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":717,"groupId":"10854","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testStatsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\");\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      StatsStream statsStream = new StatsStream(zkHost, COLLECTIONORALIAS, sParamsA, metrics);\n      statsStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(statsStream);\n\n      assertEquals(1, tuples.size());\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(70, sumi.longValue());\n      assertEquals(55.0, sumf.doubleValue(), 0.01);\n      assertEquals(0.0, mini.doubleValue(), 0.01);\n      assertEquals(1.0, minf.doubleValue(), 0.01);\n      assertEquals(14.0, maxi.doubleValue(), 0.01);\n      assertEquals(10.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.0, avgi.doubleValue(), .01);\n      assertEquals(5.5, avgf.doubleValue(), .001);\n      assertEquals(10, count.doubleValue(), .01);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"N"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
