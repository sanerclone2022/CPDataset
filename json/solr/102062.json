[{"authorTime":"2021-06-08 02:48:28","codes":[{"authorDate":"2020-06-09 07:03:34","commitOrder":8,"curCode":"  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; \r\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n","date":"2020-06-09 07:03:34","endLine":197,"groupId":"17667","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(@SuppressWarnings({\"rawtypes\"})NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/5a88cc7723edc83e6089d7ccdd96bb5fb1e46d.src","preCode":"  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; \r\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"NB"},{"authorDate":"2021-06-08 02:48:28","commitOrder":8,"curCode":"  protected void initDateTimeFormatters(NamedList args) {\n\n    Locale locale = Locale.US;\n    String localeParam = (String) args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> dateTimePatterns = args.removeConfigArgs(FORMATS_PARAM);\n    if (dateTimePatterns == null || dateTimePatterns.isEmpty()) {\n      dateTimePatterns = DEFAULT_DATE_TIME_PATTERNS;\n    }\n\n    for (String pattern : dateTimePatterns) {\n      DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n          .appendPattern(pattern).toFormatter(locale).withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n      validateFormatter(formatter);\n      dateTimeFormatters.add(formatter);\n    }\n  }\n","date":"2021-06-08 02:48:28","endLine":414,"groupId":"57453","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initDateTimeFormatters","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/4556ea744f1093693c6d93b1a96b261f29131f.src","preCode":"  protected void initDateTimeFormatters(NamedList args) {\n\n    Locale locale = Locale.US;\n    String localeParam = (String) args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> dateTimePatterns = args.removeConfigArgs(FORMATS_PARAM);\n    if (dateTimePatterns == null || dateTimePatterns.isEmpty()) {\n      dateTimePatterns = DEFAULT_DATE_TIME_PATTERNS;\n    }\n\n    for (String pattern : dateTimePatterns) {\n      DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n          .appendPattern(pattern).toFormatter(locale).withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n      validateFormatter(formatter);\n      dateTimeFormatters.add(formatter);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/designer/DefaultSchemaSuggester.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"B"}],"commitId":"aab66e7bf12b30e1c8abf866e26c744df55da24b","commitMessage":"@@@SOLR-15277: Schema designer UI and supporting backend (#42)\n\n","date":"2021-06-08 02:48:28","modifiedFileCount":"8","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-06-08 02:48:28","codes":[{"authorDate":"2021-06-09 02:08:25","commitOrder":9,"curCode":"  public void init(NamedList<?> args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; \r\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n","date":"2021-06-09 02:08:25","endLine":168,"groupId":"17667","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"init","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/bb458abef210b98fec3e3dd63901d2aa1b3e26.src","preCode":"  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; \r\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2021-06-08 02:48:28","commitOrder":9,"curCode":"  protected void initDateTimeFormatters(NamedList args) {\n\n    Locale locale = Locale.US;\n    String localeParam = (String) args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> dateTimePatterns = args.removeConfigArgs(FORMATS_PARAM);\n    if (dateTimePatterns == null || dateTimePatterns.isEmpty()) {\n      dateTimePatterns = DEFAULT_DATE_TIME_PATTERNS;\n    }\n\n    for (String pattern : dateTimePatterns) {\n      DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n          .appendPattern(pattern).toFormatter(locale).withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n      validateFormatter(formatter);\n      dateTimeFormatters.add(formatter);\n    }\n  }\n","date":"2021-06-08 02:48:28","endLine":414,"groupId":"57453","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initDateTimeFormatters","params":"(NamedListargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/4556ea744f1093693c6d93b1a96b261f29131f.src","preCode":"  protected void initDateTimeFormatters(NamedList args) {\n\n    Locale locale = Locale.US;\n    String localeParam = (String) args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> dateTimePatterns = args.removeConfigArgs(FORMATS_PARAM);\n    if (dateTimePatterns == null || dateTimePatterns.isEmpty()) {\n      dateTimePatterns = DEFAULT_DATE_TIME_PATTERNS;\n    }\n\n    for (String pattern : dateTimePatterns) {\n      DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n          .appendPattern(pattern).toFormatter(locale).withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n      validateFormatter(formatter);\n      dateTimeFormatters.add(formatter);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/designer/DefaultSchemaSuggester.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"}],"commitId":"916b7a04f65490179a73e2c1620bab1df65e4bb8","commitMessage":"@@@SOLR-15385 RawTypes Part II.  Searching for NamedList (#165)\n\nMost updates relate to NamedListInitializationPlugin init method.  and RequestHandler.\n\nLink to JIRA issues for some extant bugs.\n\nCo-authored-by: David Smiley <dsmiley@apache.org>","date":"2021-06-09 02:08:25","modifiedFileCount":"221","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-06-09 02:08:25","commitOrder":10,"curCode":"  public void init(NamedList<?> args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; \r\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n","date":"2021-06-09 02:08:25","endLine":168,"groupId":"102062","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"init","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/bb458abef210b98fec3e3dd63901d2aa1b3e26.src","preCode":"  public void init(NamedList<?> args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; \r\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"},{"authorDate":"2021-07-13 23:49:56","commitOrder":10,"curCode":"  protected void initDateTimeFormatters(NamedList<?> args) {\n    Locale locale = Locale.US;\n    String localeParam = (String) args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> dateTimePatterns = args.removeConfigArgs(FORMATS_PARAM);\n    if (dateTimePatterns == null || dateTimePatterns.isEmpty()) {\n      dateTimePatterns = DEFAULT_DATE_TIME_PATTERNS;\n    }\n\n    for (String pattern : dateTimePatterns) {\n      DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n          .appendPattern(pattern).toFormatter(locale).withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n      validateFormatter(formatter);\n      dateTimeFormatters.add(formatter);\n    }\n  }\n","date":"2021-07-13 23:49:56","endLine":411,"groupId":"102062","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"initDateTimeFormatters","params":"(NamedList<?>args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/3ab99f47fe90cb11d9737c586adeddb3981cc5.src","preCode":"  protected void initDateTimeFormatters(NamedList args) {\n\n    Locale locale = Locale.US;\n    String localeParam = (String) args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> dateTimePatterns = args.removeConfigArgs(FORMATS_PARAM);\n    if (dateTimePatterns == null || dateTimePatterns.isEmpty()) {\n      dateTimePatterns = DEFAULT_DATE_TIME_PATTERNS;\n    }\n\n    for (String pattern : dateTimePatterns) {\n      DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n          .appendPattern(pattern).toFormatter(locale).withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n      validateFormatter(formatter);\n      dateTimeFormatters.add(formatter);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/designer/DefaultSchemaSuggester.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
