[{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":2,"curCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","date":"2019-06-18 00:59:43","endLine":156,"groupId":"17498","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWaitForStateChecksCurrentState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/24a1c929c47e061b241a2536395e4a77cec598.src","preCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2016-05-23 14:35:53","commitOrder":2,"curCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","date":"2016-05-23 14:35:53","endLine":171,"groupId":"17498","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWaitForStateChecksCurrentState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/2e181b68a425f9896beb07ed65da8dec8f640b.src","preCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS, (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      }\n      catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"NB"}],"commitId":"5a974860fa83408a86ca64b417f3111b037da7eb","commitMessage":"@@@SOLR-13490: Fix CollectionStateWatcher/CollectionStatePredicate based APIs in ZkStateReader and CloudSolrClient to be triggered on liveNode changes.\n\nAlso add Predicate<DocCollection> equivilents for callers that don't care about liveNodes.\n","date":"2019-06-18 00:59:43","modifiedFileCount":"15","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":3,"curCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","date":"2019-06-18 00:59:43","endLine":156,"groupId":"10396","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWaitForStateChecksCurrentState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/24a1c929c47e061b241a2536395e4a77cec598.src","preCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestDocCollectionWatcher.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2021-01-18 23:59:41","commitOrder":3,"curCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","date":"2021-01-18 23:59:41","endLine":221,"groupId":"10396","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testWaitForStateChecksCurrentState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/94/eae27b05c2869601c305c17d036f1058236bd1.src","preCode":"  public void testWaitForStateChecksCurrentState() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"waitforstate\", \"config\", 1, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"waitforstate\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    \r\n    for (int i = 0; i < 10; i++) {\n      try {\n        client.waitForState(\"waitforstate\", 1, TimeUnit.SECONDS,\n                            (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n      } catch (TimeoutException e) {\n        fail(\"waitForState should return immediately if the predicate is already satisfied\");\n      }\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
