[{"authorTime":"2015-02-27 20:17:51","codes":[{"authorDate":"2018-01-23 20:35:14","commitOrder":3,"curCode":"  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); \r\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n","date":"2018-01-23 20:35:14","endLine":1238,"groupId":"49604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkShardConsistency","params":"(Stringshard@booleanexpectFailure@booleanverbose)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/31393ba6b219168f2efc42a7af7142c9ec4e4d.src","preCode":"  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); \r\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1163,"status":"B"},{"authorDate":"2015-02-27 20:17:51","commitOrder":3,"curCode":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); \r\n                                                          \r\n                                                          \r\n                                                          \r\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException | SolrException | IOException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n","date":"2015-02-27 20:17:51","endLine":1209,"groupId":"34139","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"showCounts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/aaf79ae33756988b1dc6c961a1ea33c1fe378f.src","preCode":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); \r\n                                                          \r\n                                                          \r\n                                                          \r\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException | SolrException | IOException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1175,"status":"NB"}],"commitId":"653935bbdfd70fa9490f8c363ffcf9832d3141a5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-01-23 20:35:14","modifiedFileCount":"279","status":"M","submitter":"Karl Wright"},{"authorTime":"2015-02-27 20:17:51","codes":[{"authorDate":"2020-03-12 03:32:01","commitOrder":4,"curCode":"  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); \r\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrException | SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n","date":"2020-03-27 06:38:05","endLine":1374,"groupId":"121906","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkShardConsistency","params":"(Stringshard@booleanexpectFailure@booleanverbose)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/f73b32a675ed0046c54e36a2e32437f9883b2b.src","preCode":"  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getCollection(DEFAULT_COLLECTION).getSlice(shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); \r\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n\n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \" (previous client)\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            CloudInspectUtil.showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1303,"status":"M"},{"authorDate":"2015-02-27 20:17:51","commitOrder":4,"curCode":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); \r\n                                                          \r\n                                                          \r\n                                                          \r\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException | SolrException | IOException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n","date":"2015-02-27 20:17:51","endLine":1209,"groupId":"121906","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"showCounts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/aaf79ae33756988b1dc6c961a1ea33c1fe378f.src","preCode":"  public void showCounts() {\n    Set<String> theShards = shardToJetty.keySet();\n\n    for (String shard : theShards) {\n      List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n\n      for (CloudJettyRunner cjetty : solrJetties) {\n        ZkNodeProps props = cjetty.info;\n        System.err.println(\"PROPS:\" + props);\n\n        try {\n          SolrParams query = params(\"q\", \"*:*\", \"rows\", \"0\", \"distrib\",\n              \"false\", \"tests\", \"checkShardConsistency\"); \r\n                                                          \r\n                                                          \r\n                                                          \r\n          long num = cjetty.client.solrClient.query(query).getResults()\n              .getNumFound();\n          System.err.println(\"DOCS:\" + num);\n        } catch (SolrServerException | SolrException | IOException e) {\n          System.err.println(\"error contacting client: \" + e.getMessage()\n              + \"\\n\");\n          continue;\n        }\n        boolean live = false;\n        String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n        ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n        if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n          live = true;\n        }\n        System.err.println(\" live:\" + live);\n\n      }\n    }\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1175,"status":"N"}],"commitId":"a31ecd2eb8c2f1b8b24d0afb7242e71c622378cc","commitMessage":"@@@SOLR-14322 Improve AbstractFullDistribZkTestBase.waitForThingsToLevelOut\n","date":"2020-03-27 06:38:05","modifiedFileCount":"28","status":"M","submitter":"Mike Drob"}]
