[{"authorTime":"2018-02-17 08:06:58","codes":[{"authorDate":"2018-02-17 08:06:58","commitOrder":1,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getL1Norm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","date":"2018-02-17 08:07:37","endLine":55,"groupId":"43870","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/b316e6a6c174cd94d68e70b03728ade34c761a.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getL1Norm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/L1NormEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2018-02-17 08:06:58","commitOrder":1,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getLInfNorm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","date":"2018-02-17 08:07:37","endLine":55,"groupId":"43870","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e3/54e4e7f95899bc17171eac67016a3a0d31ca27.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getLInfNorm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/LInfNormEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"6c0f9ac8c701cb5b4afab437a849c2d3f66fb403","commitMessage":"@@@SOLR-11689: Add l1norm.  l2norm and linfnorm Stream Evaluators\n","date":"2018-02-17 08:07:37","modifiedFileCount":"4","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getL1Norm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":56,"groupId":"10210","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/71c2260a4e1ea77b5d489e7a86b370c6b9fc1f.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getL1Norm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/L1NormEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getLInfNorm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":56,"groupId":"10210","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/b0de9623d7cf30776d4083daf8200b8a97f771.src","preCode":"  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is null\", constructingFactory.getFunctionName(getClass())));\n    }\n    else if(value instanceof List){\n      List<Number> c = (List<Number>) value;\n      double[] data = new double[c.size()];\n      for(int i=0; i< c.size(); i++) {\n        data[i] = c.get(i).doubleValue();\n      }\n\n      return new ArrayRealVector(data).getLInfNorm();\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT, \"Unable to find %s(...) because the value is not a collection, instead a %s was found\", constructingFactory.getFunctionName(getClass()), value.getClass().getSimpleName()));\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/LInfNormEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"}]
