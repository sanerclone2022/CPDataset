[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2012-01-26 03:49:26","commitOrder":2,"curCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","date":"2012-01-26 03:49:26","endLine":444,"groupId":"26349","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"JQ","params":"(SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/7b96c2ca657334044768798747d0ee83f96bd0.src","preCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","date":"2011-07-10 07:01:53","endLine":483,"groupId":"26349","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertJQ","params":"(SolrQueryRequestreq@doubledelta@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/5acc64938f74e9a1392b6b3f134b97582d59bb.src","preCode":"  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"NB"}],"commitId":"9fed484fb108e53cd6026133f660b3fd270e2025","commitMessage":"@@@SOLR-2358: merge in solrcloud branch (watch out hudson!)\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1235888 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-26 03:49:26","modifiedFileCount":"88","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-07-10 23:54:35","codes":[{"authorDate":"2012-01-26 03:49:26","commitOrder":3,"curCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","date":"2012-01-26 03:49:26","endLine":444,"groupId":"26349","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"JQ","params":"(SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/7b96c2ca657334044768798747d0ee83f96bd0.src","preCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"N"},{"authorDate":"2013-07-10 23:54:35","commitOrder":3,"curCode":"  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","date":"2013-07-10 23:54:35","endLine":710,"groupId":"26349","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertJQ","params":"(SolrQueryRequestreq@doubledelta@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/b558be22c3109846e1599e0529bfe4f2085232.src","preCode":"  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"}],"commitId":"7f1765f1fa447295cf4160eadbcadce05375d78f","commitMessage":"@@@tests: use single quoted json for readability\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1501809 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-07-10 23:54:35","modifiedFileCount":"3","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2012-01-26 03:49:26","commitOrder":4,"curCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","date":"2012-01-26 03:49:26","endLine":444,"groupId":"26349","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"JQ","params":"(SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/7b96c2ca657334044768798747d0ee83f96bd0.src","preCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"N"},{"authorDate":"2014-01-07 05:15:45","commitOrder":4,"curCode":"  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","date":"2014-01-07 05:15:45","endLine":749,"groupId":"26349","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertJQ","params":"(SolrQueryRequestreq@doubledelta@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/661e8f25e79282df4ff1c4d39ae92a4b839b95.src","preCode":"  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"}],"commitId":"5efc4132f10d476373b7da72e23f475eeec4046a","commitMessage":"@@@SOLR-5463: new 'cursorMark' request param for deep paging of sorted result sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1556036 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-07 05:15:45","modifiedFileCount":"10","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2020-05-01 07:50:31","commitOrder":5,"curCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: {}\", req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","date":"2020-05-01 07:50:31","endLine":1032,"groupId":"101855","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"JQ","params":"(SolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/4aca327a679911a2a0ffee0419ece3c2665c6e.src","preCode":"  public static String JQ(SolrQueryRequest req) throws Exception {\n    SolrParams params = req.getParams();\n    if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n      ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n      newParams.set(\"wt\",\"json\");\n      if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n      req.setParams(newParams);\n    }\n\n    String response;\n    boolean failed=true;\n    try {\n      response = h.query(req);\n      failed = false;\n    } finally {\n      if (failed) {\n        log.error(\"REQUEST FAILED: \" + req.getParamString());\n      }\n    }\n\n    return response;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1011,"status":"M"},{"authorDate":"2020-05-01 07:50:31","commitOrder":5,"curCode":"  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: {}\", req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error={}\\n expected ={}\\n response = {}\\n request = {}\"\n                , err, testJSON, response, req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\\n expected ={} \\n response = {}\\n request = {}\"\n                , testJSON, response, req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","date":"2020-05-01 07:50:31","endLine":1107,"groupId":"101855","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertJQ","params":"(SolrQueryRequestreq@doubledelta@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/4aca327a679911a2a0ffee0419ece3c2665c6e.src","preCode":"  public static String assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = json(test);\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n      return response;\n    } finally {\n      \r\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1058,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"}]
