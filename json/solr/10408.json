[{"authorTime":"2018-10-19 07:53:21","codes":[{"authorDate":"2018-10-19 07:53:21","commitOrder":1,"curCode":"  public void testFileStreamGZIP() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      \r\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n    }\n  }\n","date":"2018-10-19 07:53:21","endLine":93,"groupId":"10157","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileStreamGZIP","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/c4f9a7f3f70b615cdff721a2c98223abd73380.src","preCode":"  public void testFileStreamGZIP() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      \r\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2018-10-19 07:53:21","commitOrder":1,"curCode":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      \r\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n","date":"2018-10-19 07:53:21","endLine":172,"groupId":"10157","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testURLStreamCSVGZIPExtention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/c4f9a7f3f70b615cdff721a2c98223abd73380.src","preCode":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      \r\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"1a8188d92b8148f2d937bd038f48f103526fcbcc","commitMessage":"@@@SOLR-10981: Support for stream.url or stream.file pointing to gzipped data\n","date":"2018-10-19 07:53:21","modifiedFileCount":"2","status":"B","submitter":"Andrew Lundgren"},{"authorTime":"2020-01-09 03:16:32","codes":[{"authorDate":"2020-01-09 03:16:32","commitOrder":2,"curCode":"  public void testFileStreamGZIP() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      \r\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n    }\n  }\n","date":"2020-01-09 03:16:32","endLine":93,"groupId":"10157","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileStreamGZIP","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/72981d81da96352259518bf3629b45b8402bc4.src","preCode":"  public void testFileStreamGZIP() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      \r\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-01-09 03:16:32","commitOrder":2,"curCode":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      \r\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n","date":"2020-01-09 03:16:32","endLine":172,"groupId":"10157","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testURLStreamCSVGZIPExtention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/72981d81da96352259518bf3629b45b8402bc4.src","preCode":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      \r\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"a9beeb1d1ea5ffe56c958b6bb02cfa0360766067","commitMessage":"@@@SOLR-14169: Fix 20 Resource Leak warnings in SolrJ's apache/solr/common\n","date":"2020-01-09 03:16:32","modifiedFileCount":"6","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2020-12-03 01:24:36","codes":[{"authorDate":"2020-12-03 01:24:36","commitOrder":3,"curCode":"  public void testFileStreamGZIP() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(Paths.get(\"\").toAbsolutePath());\n         InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      \r\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n    }\n  }\n","date":"2020-12-03 01:24:36","endLine":96,"groupId":"10408","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testFileStreamGZIP","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/27e5e2806cc6fdd7973a6a9641dd87e295cdc6.src","preCode":"  public void testFileStreamGZIP() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.FileStream(file);\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      assertEquals(file.length(), stream.getSize().intValue());\n      \r\n      assertEquals(\"application/xml\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-12-03 01:24:36","commitOrder":3,"curCode":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(Paths.get(\"\").toAbsolutePath());\n         InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      \r\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n","date":"2020-12-03 01:24:36","endLine":178,"groupId":"10408","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testURLStreamCSVGZIPExtention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/27e5e2806cc6fdd7973a6a9641dd87e295cdc6.src","preCode":"  public void testURLStreamCSVGZIPExtention() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README.CSV.gz\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file);\n         GZIPOutputStream zos = new GZIPOutputStream(os)) {\n      IOUtils.copy(is, zos);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         GZIPInputStream zis = new GZIPInputStream(fis);\n         InputStreamReader isr = new InputStreamReader(zis, StandardCharsets.UTF_8);\n         FileInputStream fis2 = new FileInputStream(file);\n         GZIPInputStream zis2 = new GZIPInputStream(fis2);\n         Reader r = stream.getReader()) {\n      \r\n      assertEquals(\"text/csv\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertTrue(IOUtils.contentEquals(zis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"2e6a02394ec4eea6ba72d5bc2bf02c0139a54f39","commitMessage":"@@@SOLR-14934: Refactored duplicate \"Solr Home\" logic into a single place to eliminate risk of tests using divergent values for a single solr node.\n","date":"2020-12-03 01:24:36","modifiedFileCount":"25","status":"M","submitter":"Chris Hostetter"}]
