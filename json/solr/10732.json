[{"authorTime":"2016-04-20 00:06:32","codes":[{"authorDate":"2016-04-20 00:06:32","commitOrder":1,"curCode":"  public void testUniqueStream() throws Exception {\n\n    UniqueStream stream;\n    \n    \r\n    stream = new UniqueStream(StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\"), factory);\n    Explanation explanation = stream.toExplanation(factory);\n    Assert.assertEquals(\"unique\", explanation.getFunctionName());\n    Assert.assertEquals(UniqueStream.class.getName(), explanation.getImplementingClass());\n  }\n","date":"2016-04-20 00:06:32","endLine":145,"groupId":"24745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/898d8480bf5058e3eb65cf5f46c5e467a5b0d1.src","preCode":"  public void testUniqueStream() throws Exception {\n\n    UniqueStream stream;\n    \n    \r\n    stream = new UniqueStream(StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\"), factory);\n    Explanation explanation = stream.toExplanation(factory);\n    Assert.assertEquals(\"unique\", explanation.getFunctionName());\n    Assert.assertEquals(UniqueStream.class.getName(), explanation.getImplementingClass());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2016-04-20 00:06:32","commitOrder":1,"curCode":"  public void testReducerStream() throws Exception {\n\n    ReducerStream stream;\n    String expressionString;\n    \n    \r\n    stream = new ReducerStream(StreamExpressionParser.parse(\"reduce(\"\n                                                  + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s desc, a_f asc\\\"),\"\n                                                  + \"by=\\\"a_s\\\", group(sort=\\\"a_i desc\\\", n=\\\"5\\\"))\"), factory);\n    Explanation explanation = stream.toExplanation(factory);\n    Assert.assertEquals(\"reduce\", explanation.getFunctionName());\n    Assert.assertEquals(ReducerStream.class.getName(), explanation.getImplementingClass());\n    Assert.assertEquals(1, ((StreamExplanation)explanation).getChildren().size());\n  }\n","date":"2016-04-20 00:06:32","endLine":194,"groupId":"24745","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/898d8480bf5058e3eb65cf5f46c5e467a5b0d1.src","preCode":"  public void testReducerStream() throws Exception {\n\n    ReducerStream stream;\n    String expressionString;\n    \n    \r\n    stream = new ReducerStream(StreamExpressionParser.parse(\"reduce(\"\n                                                  + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s desc, a_f asc\\\"),\"\n                                                  + \"by=\\\"a_s\\\", group(sort=\\\"a_i desc\\\", n=\\\"5\\\"))\"), factory);\n    Explanation explanation = stream.toExplanation(factory);\n    Assert.assertEquals(\"reduce\", explanation.getFunctionName());\n    Assert.assertEquals(ReducerStream.class.getName(), explanation.getImplementingClass());\n    Assert.assertEquals(1, ((StreamExplanation)explanation).getChildren().size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"}],"commitId":"8ba1a3880bdcfb0a8764e997fae7a79cc29142a4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-20 00:06:32","modifiedFileCount":"43","status":"B","submitter":"Karl Wright"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":2,"curCode":"  public void testUniqueStream() throws Exception {\n    \r\n    try (UniqueStream stream = new UniqueStream(StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\"), factory)) {\n      Explanation explanation = stream.toExplanation(factory);\n      Assert.assertEquals(\"unique\", explanation.getFunctionName());\n      Assert.assertEquals(UniqueStream.class.getName(), explanation.getImplementingClass());\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":129,"groupId":"10732","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/c53690a06322dc24660b1936b9d6bba8fd67c5.src","preCode":"  public void testUniqueStream() throws Exception {\n\n    UniqueStream stream;\n    \n    \r\n    stream = new UniqueStream(StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\"), factory);\n    Explanation explanation = stream.toExplanation(factory);\n    Assert.assertEquals(\"unique\", explanation.getFunctionName());\n    Assert.assertEquals(UniqueStream.class.getName(), explanation.getImplementingClass());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":2,"curCode":"  public void testReducerStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (ReducerStream stream = new ReducerStream(StreamExpressionParser.parse(\"reduce(\"\n                                                  + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s desc, a_f asc\\\"),\"\n                                                  + \"by=\\\"a_s\\\", group(sort=\\\"a_i desc\\\", n=\\\"5\\\"))\"), factory)) {\n      Explanation explanation = stream.toExplanation(factory);\n      Assert.assertEquals(\"reduce\", explanation.getFunctionName());\n      Assert.assertEquals(ReducerStream.class.getName(), explanation.getImplementingClass());\n      Assert.assertEquals(1, ((StreamExplanation) explanation).getChildren().size());\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":174,"groupId":"10732","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c1/c53690a06322dc24660b1936b9d6bba8fd67c5.src","preCode":"  public void testReducerStream() throws Exception {\n\n    ReducerStream stream;\n    String expressionString;\n    \n    \r\n    stream = new ReducerStream(StreamExpressionParser.parse(\"reduce(\"\n                                                  + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s desc, a_f asc\\\"),\"\n                                                  + \"by=\\\"a_s\\\", group(sort=\\\"a_i desc\\\", n=\\\"5\\\"))\"), factory);\n    Explanation explanation = stream.toExplanation(factory);\n    Assert.assertEquals(\"reduce\", explanation.getFunctionName());\n    Assert.assertEquals(ReducerStream.class.getName(), explanation.getImplementingClass());\n    Assert.assertEquals(1, ((StreamExplanation)explanation).getChildren().size());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExplanationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
