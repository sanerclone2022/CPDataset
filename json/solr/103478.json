[{"authorTime":"2015-02-15 16:21:13","codes":[{"authorDate":"2015-01-28 19:55:57","commitOrder":9,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","date":"2015-01-28 19:55:57","endLine":103,"groupId":"3042","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/73333fcb215f42e052086370b32f60cd9a2d81.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"NB"},{"authorDate":"2015-02-15 16:21:13","commitOrder":9,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2015-02-15 16:21:13","endLine":114,"groupId":"3042","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/46/6e51692cc35ef0baab347d21d5f439d6eedb3c.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"8c1c170468f56e368a8013ba32d333b2d529819a","commitMessage":"@@@SOLR-6917: TestDynamicLoading should wait for .system collection to recover and JarRepository should always choose an active replica\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1659893 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-15 16:21:13","modifiedFileCount":"4","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-02-15 16:21:13","codes":[{"authorDate":"2015-03-07 13:55:35","commitOrder":10,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","date":"2015-03-07 13:55:35","endLine":104,"groupId":"3042","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/94b9e557dac945fe1a547121b1d4a1e3d48566.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr  = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i]= (byte) (i % 127);\n      byte[] bytarr2  = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i]= (byte) (i % 127);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, ByteBuffer.wrap( bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url,cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\"+map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\"+bytarr.length,String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl+\"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl+\"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2015-02-15 16:21:13","commitOrder":10,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2015-02-15 16:21:13","endLine":114,"groupId":"3042","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/46/6e51692cc35ef0baab347d21d5f439d6eedb3c.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"}],"commitId":"b221a5349610150ffbbea6d6c2493c7f32ef8834","commitMessage":"@@@SOLR-7073: Add an API to add a jar to a collection's classpath\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1664797 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-07 13:55:35","modifiedFileCount":"20","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-05-27 02:33:33","codes":[{"authorDate":"2015-05-27 02:33:33","commitOrder":11,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","date":"2015-05-27 02:33:33","endLine":104,"groupId":"3042","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/1d9f7bbddccb8359b508642d4f1c11e5c62b38.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n      createCollectionRequest.setCollectionName(\".system\");\n      createCollectionRequest.setNumShards(1);\n      createCollectionRequest.setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2015-05-27 02:33:33","commitOrder":11,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2015-05-27 02:33:33","endLine":115,"groupId":"3042","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/1d9f7bbddccb8359b508642d4f1c11e5c62b38.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\".system\");\n    createCollectionRequest.setNumShards(1);\n    createCollectionRequest.setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"a94d110aa4491e46326cc5e1d53903137e74e97a","commitMessage":"@@@SOLR-7595: Allow method chaining for all CollectionAdminRequests in Solrj\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1681808 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-27 02:33:33","modifiedFileCount":"17","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-05-27 02:33:33","codes":[{"authorDate":"2015-07-14 21:55:46","commitOrder":12,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","date":"2015-07-14 21:55:46","endLine":104,"groupId":"3042","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d9/cd5d0ca286d9396c89c4a940e0596e708d469b.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2015-05-27 02:33:33","commitOrder":12,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2015-05-27 02:33:33","endLine":115,"groupId":"3042","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/1d9f7bbddccb8359b508642d4f1c11e5c62b38.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"422694f9c06393964bc6f26447c6b74e9f22de92","commitMessage":"@@@SOLR-7793: Refactor some utility methods to a separate utility class\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1690935 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-14 21:55:46","modifiedFileCount":"65","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-05-27 02:33:33","codes":[{"authorDate":"2016-10-26 04:34:20","commitOrder":13,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","date":"2016-10-26 04:34:20","endLine":114,"groupId":"3042","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/28/80e8f51efa9071eec4da746914d65748850efd.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2015-05-27 02:33:33","commitOrder":13,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2015-05-27 02:33:33","endLine":115,"groupId":"3042","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/1d9f7bbddccb8359b508642d4f1c11e5c62b38.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"34ad8577b6fac0e48cc1885f2fe40b0abf60bd79","commitMessage":"@@@SOLR-7604: add testcase to verify the schema of .system collection\n","date":"2016-10-26 04:34:20","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-05-27 02:33:33","codes":[{"authorDate":"2017-02-02 12:56:26","commitOrder":14,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n","date":"2017-02-02 12:56:26","endLine":95,"groupId":"3042","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c3/95d205b648e54e13c4af02975d6dd1740737ac.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      byte[] bytarr = new byte[1024];\n      for (int i = 0; i < bytarr.length; i++) bytarr[i] = (byte) (i % 127);\n      byte[] bytarr2 = new byte[2048];\n      for (int i = 0; i < bytarr2.length; i++) bytarr2[i] = (byte) (i % 127);\n      String blobName = \"test\";\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr), 1);\n      postAndCheck(cloudClient, baseUrl, blobName, ByteBuffer.wrap(bytarr2), 2);\n\n      url = baseUrl + \"/.system/blob/test/1\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(\"\" + map, l);\n      assertTrue(\"\" + map, l.size() > 0);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytarr.length, String.valueOf(map.get(\"size\")));\n\n      compareInputAndOutput(baseUrl + \"/.system/blob/test?wt=filestream\", bytarr2);\n      compareInputAndOutput(baseUrl + \"/.system/blob/test/1?wt=filestream\", bytarr);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2015-05-27 02:33:33","commitOrder":14,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2015-05-27 02:33:33","endLine":115,"groupId":"3042","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c8/1d9f7bbddccb8359b508642d4f1c11e5c62b38.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"e200b8a2a418cdb145acb51d1181b1b60362a926","commitMessage":"@@@SOLR-7955: Auto create .system collection on first request if it does not exist\n","date":"2017-02-02 12:56:26","modifiedFileCount":"2","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-06-01 03:04:40","codes":[{"authorDate":"2017-06-01 03:04:40","commitOrder":15,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n","date":"2017-06-01 03:04:40","endLine":92,"groupId":"3042","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/7e16e33ce0b7fb4208a7ed504e07898edb6a82.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n              .setCollectionName(\".system\")\n              .setNumShards(1)\n              .setReplicationFactor(2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2017-06-01 03:04:40","commitOrder":15,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2017-06-01 03:04:40","endLine":123,"groupId":"2059","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/7e16e33ce0b7fb4208a7ed504e07898edb6a82.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(\".system\")\n            .setNumShards(1)\n            .setReplicationFactor(2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"3291ef884d26e3f8cb43707f2acdf674f3e51c01","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-01 03:04:40","modifiedFileCount":"29","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-06-01 03:04:40","codes":[{"authorDate":"2018-10-05 06:32:00","commitOrder":16,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n","date":"2018-10-05 06:32:00","endLine":91,"groupId":"3042","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/fd8c0f12dbd8427abed529a49cf67b153e0c08.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      Map map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", getObjectByPath(map, true, Arrays.asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\")));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"name\")));\n      assertEquals(\"bytes\", getObjectByPath(map, true, Arrays.asList(\n          \"field\",\n          \"type\")));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2017-06-01 03:04:40","commitOrder":16,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2017-06-01 03:04:40","endLine":123,"groupId":"2059","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/7e16e33ce0b7fb4208a7ed504e07898edb6a82.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"}],"commitId":"14e6eb2c2488a5983c4449da32757d1f3bf17ce0","commitMessage":"@@@use MapWriter._get()\n","date":"2018-10-05 06:32:00","modifiedFileCount":"10","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-06-01 03:04:40","codes":[{"authorDate":"2019-09-15 04:23:17","commitOrder":17,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n      checkBlobPostMd5(baseUrl, cloudClient);\n    }\n  }\n","date":"2019-09-15 04:23:17","endLine":90,"groupId":"3042","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ecc9e62ec1d7f80687e49a678443dc3c6d0aad.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2017-06-01 03:04:40","commitOrder":17,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2017-06-01 03:04:40","endLine":123,"groupId":"2059","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/7e16e33ce0b7fb4208a7ed504e07898edb6a82.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"}],"commitId":"31735eeb402d7b00785bba484093b81107ffc2c9","commitMessage":"@@@SOLR-13238: BlobHandler generates non-padded md5\n","date":"2019-09-15 04:23:17","modifiedFileCount":"2","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2017-06-01 03:04:40","codes":[{"authorDate":"2020-12-01 03:05:48","commitOrder":18,"curCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getBaseUrl();\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n      checkBlobPostMd5(baseUrl, cloudClient);\n    }\n  }\n","date":"2020-12-01 03:05:48","endLine":89,"groupId":"103478","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doBlobHandlerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/4003df59f61f61a3f74c5c5fef276536c9485b.src","preCode":"  public void doBlobHandlerTest() throws Exception {\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse response1;\n      CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n      response1 = createCollectionRequest.process(client);\n      assertEquals(0, response1.getStatus());\n      assertTrue(response1.isSuccess());\n      DocCollection sysColl = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\");\n      Replica replica = sysColl.getActiveSlicesMap().values().iterator().next().getLeader();\n\n      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n      String url = baseUrl + \"/.system/config/requestHandler\";\n      MapWriter map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      assertNotNull(map);\n      assertEquals(\"solr.BlobHandler\", map._get(asList(\n          \"config\",\n          \"requestHandler\",\n          \"/blob\",\n          \"class\"),null));\n      map = TestSolrConfigHandlerConcurrent.getAsMap(baseUrl + \"/.system/schema/fields/blob\", cloudClient);\n      assertNotNull(map);\n      assertEquals(\"blob\", map._get(asList(\n          \"field\",\n          \"name\"),null));\n      assertEquals(\"bytes\", map._get( asList(\n          \"field\",\n          \"type\"),null));\n\n      checkBlobPost(baseUrl, cloudClient);\n      checkBlobPostMd5(baseUrl, cloudClient);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2017-06-01 03:04:40","commitOrder":18,"curCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","date":"2017-06-01 03:04:40","endLine":123,"groupId":"103478","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createSystemCollection","params":"(SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/7e16e33ce0b7fb4208a7ed504e07898edb6a82.src","preCode":"  public static void createSystemCollection(SolrClient client) throws SolrServerException, IOException {\n    CollectionAdminResponse response1;\n    CollectionAdminRequest.Create createCollectionRequest = CollectionAdminRequest.createCollection(\".system\",1,2);\n    response1 = createCollectionRequest.process(client);\n    assertEquals(0, response1.getStatus());\n    assertTrue(response1.isSuccess());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"}],"commitId":"a0492840ee8690ddf48369665c744d16c7dd30cb","commitMessage":"@@@SOLR-12182: Don't persist base_url in ZK as the scheme is variable.  compute from node_name instead (#2010)\n\n","date":"2020-12-01 03:05:48","modifiedFileCount":"53","status":"M","submitter":"Timothy Potter"}]
