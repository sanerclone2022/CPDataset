[{"authorTime":"2017-12-19 03:31:08","codes":[{"authorDate":"2017-12-19 03:31:08","commitOrder":1,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.pairedT(samples1, samples2);\n        double pval = tTest.pairedTTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for pairedTtest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for pairedTtest must be a double array\");\n    }\n  }\n","date":"2017-12-19 03:31:47","endLine":74,"groupId":"46782","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/c2dc9104add61909a3c78cd74a4abe3dfeab13.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.pairedT(samples1, samples2);\n        double pval = tTest.pairedTTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for pairedTtest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for pairedTtest must be a double array\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairedTTestEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2017-12-19 03:31:08","commitOrder":1,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n","date":"2017-12-19 03:31:47","endLine":94,"groupId":"46782","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/62/73376d7f11ac61dcf4727a9d73f62127b149b4.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"f8c93db9eb3626877a1a9c52c197ed0f0911ab73","commitMessage":"@@@SOLR-11681: Add ttest and pairedTtest Stream Evaluators\n","date":"2017-12-19 03:31:47","modifiedFileCount":"2","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.pairedT(samples1, samples2);\n        double pval = tTest.pairedTTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for pairedTtest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for pairedTtest must be a double array\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":77,"groupId":"46782","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/1f90f811e51b539ed24cbba49f0ec9e7a412a1.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.pairedT(samples1, samples2);\n        double pval = tTest.pairedTTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for pairedTtest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for pairedTtest must be a double array\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairedTTestEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":2,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":98,"groupId":"46782","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dc/8b37afddd5de73d86ff6ac331d72f47f890a9e.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-08 22:03:07","codes":[{"authorDate":"2020-06-08 22:03:07","commitOrder":3,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Tuple tuple = new Tuple();\n    if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.pairedT(samples1, samples2);\n        double pval = tTest.pairedTTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(StreamParams.P_VALUE, pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for pairedTtest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for pairedTtest must be a double array\");\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":74,"groupId":"10215","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fc/865db43bd7b2805ebcdf3bdf7b742b53ab0f55.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.pairedT(samples1, samples2);\n        double pval = tTest.pairedTTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for pairedTtest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for pairedTtest must be a double array\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PairedTTestEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-06-08 22:03:07","commitOrder":3,"curCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    Tuple tuple = new Tuple();\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(StreamParams.P_VALUE, pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(StreamParams.P_VALUE, pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":95,"groupId":"10215","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectvalue1@Objectvalue2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/c5e80d27210aace5910b3821e4948d01a9fe1f.src","preCode":"  public Object doWork(Object value1, Object value2) throws IOException {\n\n    TTest tTest = new TTest();\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n    Tuple tuple = new Tuple(map);\n    if(value1 instanceof Number) {\n      double mean = ((Number) value1).doubleValue();\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values = (List<Number>) value2;\n        double[] samples = new double[values.size()];\n        for (int i = 0; i < samples.length; i++) {\n          samples[i] = values.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(mean, samples);\n        double pval = tTest.tTest(mean, samples);\n\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else if(value1 instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values1 = (List<Number>)value1;\n\n      double[] samples1 = new double[values1.size()];\n\n      for(int i=0; i< samples1.length; i++) {\n        samples1[i] = values1.get(i).doubleValue();\n      }\n\n      if(value2 instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> values2 = (List<Number>) value2;\n        double[] samples2 = new double[values2.size()];\n\n        for (int i = 0; i < samples2.length; i++) {\n          samples2[i] = values2.get(i).doubleValue();\n        }\n\n        double tstat = tTest.t(samples1, samples2);\n        double pval = tTest.tTest(samples1, samples2);\n        tuple.put(\"t-statistic\", tstat);\n        tuple.put(\"p-value\", pval);\n        return tuple;\n      } else {\n        throw new IOException(\"Second parameter for ttest must be a double array\");\n      }\n    } else {\n      throw new IOException(\"First parameter for ttest must be either a double our double array\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TTestEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"30924f23d6834605b9bf2d24509755ff61c4e878","commitMessage":"@@@SOLR-14470: Add streaming expressions to /export handler.\n","date":"2020-06-08 22:03:07","modifiedFileCount":"75","status":"M","submitter":"Andrzej Bialecki"}]
