[{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-05 17:22:22","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    TestInjection.failUpdateRequests = \"true:100\";\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","date":"2016-10-09 13:06:09","endLine":69,"groupId":"31026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/ec3f27bf90b2d10b352c9526a70f1352e869a1.src","preCode":"  public static void setupCluster() throws Exception {\n    TestInjection.failUpdateRequests = \"true:100\";\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public static void beforeClass() throws Exception {\n    useFactory(null);\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","date":"2016-10-03 03:18:22","endLine":58,"groupId":"50445","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/b39014c4d6eb86f3fb7faa4a12424c48a1fafc.src","preCode":"  public static void beforeClass() throws Exception {\n    useFactory(null);\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"NB"}],"commitId":"f22b1da261b93f60687431b161828e2fb27fdc8f","commitMessage":"@@@SOLR-9604. SOLR-9608: Ensure SSL connections are re-used\n\nFix ConnectionReuseTest. Add coverage for all SolrClients.\nRemove explicit cacheKey for HttpRequestContext.  make it singleton.\n\n","date":"2016-10-09 13:06:09","modifiedFileCount":"9","status":"M","submitter":"Alan Woodward"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2016-10-05 17:22:22","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    TestInjection.failUpdateRequests = \"true:100\";\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","date":"2016-10-09 13:06:09","endLine":69,"groupId":"103080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/ec3f27bf90b2d10b352c9526a70f1352e869a1.src","preCode":"  public static void setupCluster() throws Exception {\n    TestInjection.failUpdateRequests = \"true:100\";\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public static void beforeClass() throws Exception {\n    useFactory(null);\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.waitForActiveCollection(COLLECTION_NAME, 1, 1);\n  }\n","date":"2018-11-30 01:58:51","endLine":57,"groupId":"103080","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/bb15a18b0f08d80dd32964871411e8b9b8a381.src","preCode":"  public static void beforeClass() throws Exception {\n    useFactory(null);\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION_NAME, \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    cluster.getSolrClient().waitForState(COLLECTION_NAME, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"}]
