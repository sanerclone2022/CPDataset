[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":269,"groupId":"54192","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","date":"2015-05-11 20:37:18","endLine":806,"groupId":"27584","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":730,"status":"B"}],"commitId":"e50f4d94c74560d863df197f21bc87d21c212f8c","commitMessage":"@@@SOLR-7377: Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1678743 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-11 20:37:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2015-06-15 10:51:36","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":269,"groupId":"54192","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2015-06-15 10:51:36","commitOrder":2,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","date":"2015-06-15 10:51:36","endLine":1050,"groupId":"27584","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/0408c0c9e86edef9c422a958ebb1025d29f4f5.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"M"}],"commitId":"03cafc671109f8777e760cdf657463775978eb54","commitMessage":"@@@SOLR-7560: Parallel SQL Support\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1685497 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-15 10:51:36","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-15 10:51:36","codes":[{"authorDate":"2015-06-20 02:53:57","commitOrder":3,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-20 02:53:57","endLine":267,"groupId":"54192","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/ef764448d34c5703ed5e7327acd3b09e6563ec.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2015-06-15 10:51:36","commitOrder":3,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","date":"2015-06-15 10:51:36","endLine":1050,"groupId":"27584","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/0408c0c9e86edef9c422a958ebb1025d29f4f5.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"N"}],"commitId":"1ff66e90f1a5c209130bc39095f2f57107ee30d4","commitMessage":"@@@SOLR-7513.  SOLR-7528: Add Equalitors to Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686481 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-20 02:53:57","modifiedFileCount":"16","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-15 10:51:36","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2015-06-15 10:51:36","commitOrder":4,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","date":"2015-06-15 10:51:36","endLine":1050,"groupId":"27584","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/0408c0c9e86edef9c422a958ebb1025d29f4f5.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"N"}],"commitId":"33a4099b9850b4f5ee8f6fe237d07060a4272704","commitMessage":"@@@SOLR-7554: Add checks in Streams for incoming stream order\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1687258 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-24 21:07:09","modifiedFileCount":"18","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-04 00:32:07","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":5,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2015-07-04 00:32:07","commitOrder":5,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n","date":"2015-07-04 00:32:07","endLine":1175,"groupId":"27584","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/a86103d081bf0887a46d7a57f8435785d44b71.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"M"}],"commitId":"a4e7ab3796c30d9f0d3eea7553b89de32902df27","commitMessage":"@@@SOLR-7441.  SOLR-7647: Improve overall robustness of the Streaming stack: Streaming API.  Streaming Expressions.  Parallel SQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689045 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-04 00:32:07","modifiedFileCount":"9","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-07 10:18:29","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":6,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2015-07-07 10:18:29","commitOrder":6,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","date":"2015-07-07 10:18:29","endLine":1123,"groupId":"27584","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e9bfe39747e85c960e8310bd596e4a5f163621.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1043,"status":"M"}],"commitId":"676accb5f44a9a528be6640dafaab3460b4b7a6c","commitMessage":"@@@SOLR-7441: Disable failing test\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689559 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-07 10:18:29","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-09-10 07:37:35","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":7,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2015-09-10 07:37:35","commitOrder":7,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","date":"2015-09-10 07:37:35","endLine":1713,"groupId":"27584","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/c72b26e545b80beedfb8fe606f3a4db8fe762b.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1631,"status":"M"}],"commitId":"087154a0d8e1d1ba77e3e08c63bc512647253c61","commitMessage":"@@@SOLR-7903: Add the FacetStream to the Streaming API and wire it into the SQLHandler\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1702132 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-10 07:37:35","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-09-24 09:49:09","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":8,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2015-09-24 09:49:09","commitOrder":8,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","date":"2015-09-24 09:49:09","endLine":1781,"groupId":"27584","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/7112bd459f7a11986b09d58d2d438a9055f291.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1698,"status":"M"}],"commitId":"fb881a4f0fbdb2b2e0375b536814cc931b36fb3a","commitMessage":"@@@SOLR-8038: Add StatsStream to the Streaming API and wire it into the SQLHandler\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1704973 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-24 09:49:09","modifiedFileCount":"5","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-10-03 06:18:58","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":9,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2015-10-03 06:18:58","commitOrder":9,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","date":"2015-10-03 06:18:58","endLine":1781,"groupId":"27584","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/28/c5b4be16d7795895b47bd67082ffc5574a2273.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1698,"status":"M"}],"commitId":"04efea7e7d6ec051fe6b2ed6fa9d8f7e5e701e7a","commitMessage":"@@@Call waitForRecoveriesToFinish(false) in the Streaming and SQL tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1706497 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-03 06:18:58","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-03-21 10:04:14","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":10,"curCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":279,"groupId":"54192","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2016-03-21 10:04:14","commitOrder":10,"curCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    \r\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","date":"2016-03-21 10:05:18","endLine":1864,"groupId":"27584","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/5029ffe42f596e3bf32f84f5e6630aa4c3be30.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    \r\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1780,"status":"M"}],"commitId":"f86ac58a5a4f1268e118c2cd7d2ec9192d91da6e","commitMessage":"@@@SOLR-8878: Allow the DaemonStream run rate be controlled by the internal stream\n","date":"2016-03-21 10:05:18","modifiedFileCount":"3","status":"M","submitter":"jbernste"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":11,"curCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":209,"groupId":"0","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testRankStream() throws Exception {\n\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":11,"curCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":1724,"groupId":"0","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    \r\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    \r\n    testZeroParallelReducerStream();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1678,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":12,"curCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":235,"groupId":"32960","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    Map params = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":12,"curCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1744,"groupId":"32960","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    \r\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1699,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-11-14 15:03:37","commitOrder":13,"curCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n    assertOrder(tuples, 4,3,2);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":241,"groupId":"32960","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 4,3,2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":13,"curCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1744,"groupId":"32960","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1699,"status":"N"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-11-14 15:11:59","codes":[{"authorDate":"2016-11-14 15:03:37","commitOrder":14,"curCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n    assertOrder(tuples, 4,3,2);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":241,"groupId":"32960","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n    assertOrder(tuples, 4,3,2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"},{"authorDate":"2016-11-14 15:11:59","commitOrder":14,"curCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","date":"2016-11-14 15:11:59","endLine":1749,"groupId":"32960","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/6e1d392f5c83a87070b2548344ea124d3da9db.src","preCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1704,"status":"M"}],"commitId":"907bed887d6be1aaec832c4f6d395d051bb49b17","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:11:59","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":15,"curCode":"public void testRankStream() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n  SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n  List<Tuple> tuples = getTuples(rstream);\n\n  assertEquals(3, tuples.size());\n  assertOrder(tuples, 4,3,2);\n\n}\n","date":"2016-11-16 10:33:58","endLine":255,"groupId":"27696","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    List<Tuple> tuples = getTuples(rstream);\n\n    assertEquals(3, tuples.size());\n    assertOrder(tuples, 4,3,2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":15,"curCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":2000,"groupId":"27696","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1955,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":16,"curCode":"public void testRankStream() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n    rstream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(rstream);\n    assertEquals(3, tuples.size());\n    assertOrder(tuples, 4, 3, 2);\n  } finally {\n    solrClientCache.close();\n  }\n}\n","date":"2017-04-12 03:24:42","endLine":295,"groupId":"10855","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testRankStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"public void testRankStream() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n  SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  RankStream rstream = new RankStream(stream, 3, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n  List<Tuple> tuples = getTuples(rstream);\n\n  assertEquals(3, tuples.size());\n  assertOrder(tuples, 4,3,2);\n\n}\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":16,"curCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \r\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n\n      \r\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n\n      \r\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 2, 0, 1, 3, 4);\n\n\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":2218,"groupId":"10855","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"streamTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    \r\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    \r\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2163,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"}]
