[{"authorTime":"2019-04-16 01:27:08","codes":[{"authorDate":"2019-04-16 01:27:08","commitOrder":1,"curCode":"  public void testManyClauses_Solr() throws Exception {\n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    \n    \r\n    \r\n    final String too_long = \"id:(\" + a + a + a + a + a + \")\";\n\n    final String expectedMsg = \"Too many clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long)\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"false\")\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"true\")\n             ,\"/response/numFound==6\");\n  }\n","date":"2019-04-16 01:27:08","endLine":366,"groupId":"5557","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testManyClauses_Solr","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/22145480fde3bb63bdd9e9cce224f5b281571d.src","preCode":"  public void testManyClauses_Solr() throws Exception {\n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    \n    \r\n    \r\n    final String too_long = \"id:(\" + a + a + a + a + a + \")\";\n\n    final String expectedMsg = \"Too many clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long)\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"false\")\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"true\")\n             ,\"/response/numFound==6\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"},{"authorDate":"2019-04-16 01:27:08","commitOrder":1,"curCode":"  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = BooleanQuery.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    \r\n    \r\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(BooleanQuery.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n","date":"2019-04-16 01:27:08","endLine":403,"groupId":"5557","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testManyClauses_Lucene","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/22145480fde3bb63bdd9e9cce224f5b281571d.src","preCode":"  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = BooleanQuery.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    \r\n    \r\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(BooleanQuery.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"B"}],"commitId":"d90034f0d61cd1525e10d07cf064a8647dc08cc9","commitMessage":"@@@SOLR-13336: add maxBooleanClauses (default to 1024) setting to solr.xml.  reverting previous effective value of Integer.MAX_VALUE-1.  to restrict risk of pathalogical query expansion.\n","date":"2019-04-16 01:27:08","modifiedFileCount":"8","status":"B","submitter":"Chris Hostetter"},{"authorTime":"2019-06-26 16:36:42","codes":[{"authorDate":"2019-04-16 01:27:08","commitOrder":2,"curCode":"  public void testManyClauses_Solr() throws Exception {\n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    \n    \r\n    \r\n    final String too_long = \"id:(\" + a + a + a + a + a + \")\";\n\n    final String expectedMsg = \"Too many clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long)\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"false\")\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"true\")\n             ,\"/response/numFound==6\");\n  }\n","date":"2019-04-16 01:27:08","endLine":366,"groupId":"103153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testManyClauses_Solr","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/22145480fde3bb63bdd9e9cce224f5b281571d.src","preCode":"  public void testManyClauses_Solr() throws Exception {\n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    \n    \r\n    \r\n    final String too_long = \"id:(\" + a + a + a + a + a + \")\";\n\n    final String expectedMsg = \"Too many clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long)\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"false\")\n             ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", too_long, \"sow\", \"true\")\n             ,\"/response/numFound==6\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"N"},{"authorDate":"2019-06-26 16:36:42","commitOrder":2,"curCode":"  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = IndexSearcher.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    \r\n    \r\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(IndexSearcher.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n","date":"2019-06-26 17:55:55","endLine":404,"groupId":"103153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testManyClauses_Lucene","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/cbc95c9d5ef220e9a79ccabe6948df5a081706.src","preCode":"  public void testManyClauses_Lucene() throws Exception {\n    final int numZ = BooleanQuery.getMaxClauseCount();\n    \n    final String a = \"1 a 2 b 3 c 10 d 11 12 \"; \r\n    final StringBuilder sb = new StringBuilder(\"id:(\");\n    for (int i = 0; i < numZ; i++) {\n      sb.append('z').append(i).append(' ');\n    }\n    sb.append(a);\n    sb.append(\")\");\n    \n    \r\n    \r\n    final String way_too_long = sb.toString();\n\n    final String expectedMsg = \"too many boolean clauses\";\n    ignoreException(expectedMsg);\n    SolrException e = expectThrows(SolrException.class, \"expected SolrException\",\n                                   () -> assertJQ(req(\"q\", way_too_long), \"/response/numFound==6\"));\n    assertThat(e.getMessage(), containsString(expectedMsg));\n    \n    assertNotNull(e.getCause());\n    assertEquals(SyntaxError.class, e.getCause().getClass());\n    \n    assertNotNull(e.getCause().getCause());\n    assertEquals(BooleanQuery.TooManyClauses.class, e.getCause().getCause().getClass());\n\n    \r\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long)\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"false\")\n        ,\"/response/numFound==6\");\n    assertJQ(req(\"q\",\"*:*\", \"fq\", way_too_long, \"sow\", \"true\")\n        ,\"/response/numFound==6\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"53f56fb7ad44afab9c78fab2e89737438093247f","commitMessage":"@@@LUCENE-8811: Move max clause checks to IndexSearcher\n","date":"2019-06-26 17:55:55","modifiedFileCount":"36","status":"M","submitter":"Alan Woodward"}]
