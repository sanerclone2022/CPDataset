[{"authorTime":"2018-08-08 01:52:11","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":3,"curCode":"  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); \r\n      \r\n      \r\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n","date":"2014-03-12 22:39:17","endLine":402,"groupId":"33557","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testXML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e9/aae01b2f6e070d66486fea458d5934f837c0e7.src","preCode":"  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); \r\n      \r\n      \r\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"NB"},{"authorDate":"2018-08-08 01:52:11","commitOrder":3,"curCode":"  public void testXMLMultiLevelLabeledChildren() throws IOException, XMLStreamException {\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"      <field name=\\\"grandChild\\\">\" +\n            \"        <doc>  \" +\n            \"          <field name=\\\"id\\\" >7</field>\" +\n            \"          <field name=\\\"child_s\\\">d</field>\" +\n            \"        </doc>\" +\n            \"      </field>\" +\n            \"    </doc>\" +\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc1));\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc(parser);\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc2));\n    parser2.next(); \r\n    \r\n    \r\n    SolrInputDocument document2 = loader.readDoc(parser2);\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\", \"grandChild\", Collections.singleton(sdoc(\"id\", \"7\", \"child_s\", \"d\"))),\n            sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n  }\n","date":"2018-08-08 01:52:11","endLine":569,"groupId":"51505","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testXMLMultiLevelLabeledChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/c0c39277ecac50b777e1878f5e4490f1225492.src","preCode":"  public void testXMLMultiLevelLabeledChildren() throws IOException, XMLStreamException {\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"      <field name=\\\"grandChild\\\">\" +\n            \"        <doc>  \" +\n            \"          <field name=\\\"id\\\" >7</field>\" +\n            \"          <field name=\\\"child_s\\\">d</field>\" +\n            \"        </doc>\" +\n            \"      </field>\" +\n            \"    </doc>\" +\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc1));\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc(parser);\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc2));\n    parser2.next(); \r\n    \r\n    \r\n    SolrInputDocument document2 = loader.readDoc(parser2);\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\", \"grandChild\", Collections.singleton(sdoc(\"id\", \"7\", \"child_s\", \"d\"))),\n            sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"B"}],"commitId":"38bf976cd4b9e324c21664bd7ae3d554df803705","commitMessage":"@@@SOLR-12485: Solr-Update XML format now accepts child documents under a field\nthus providing a semantic relationship.  (like allowed for JSON).\nImproved XML.java a bit\nCloses #430\n","date":"2018-08-08 01:52:11","modifiedFileCount":"5","status":"M","submitter":"Moshe"},{"authorTime":"2019-03-23 05:30:01","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); \r\n      \r\n      \r\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n","date":"2014-03-12 22:39:17","endLine":402,"groupId":"103005","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testXML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e9/aae01b2f6e070d66486fea458d5934f837c0e7.src","preCode":"  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); \r\n      \r\n      \r\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"N"},{"authorDate":"2019-03-23 05:30:01","commitOrder":4,"curCode":"  public void testXMLMultiLevelLabeledChildren() throws XMLStreamException {\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"      <field name=\\\"grandChild\\\">\" +\n            \"        <doc>  \" +\n            \"          <field name=\\\"id\\\" >7</field>\" +\n            \"          <field name=\\\"child_s\\\">d</field>\" +\n            \"        </doc>\" +\n            \"      </field>\" +\n            \"    </doc>\" +\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc1));\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc(parser);\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc2));\n    parser2.next(); \r\n    \r\n    \r\n    SolrInputDocument document2 = loader.readDoc(parser2);\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\", \"grandChild\", Collections.singleton(sdoc(\"id\", \"7\", \"child_s\", \"d\"))),\n            sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n  }\n","date":"2019-03-25 20:15:01","endLine":582,"groupId":"103005","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testXMLMultiLevelLabeledChildren","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/a3df6937d297d4b6fb1059ab589a3d0620b124.src","preCode":"  public void testXMLMultiLevelLabeledChildren() throws IOException, XMLStreamException {\n    String xml_doc1 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">1</field>\" +\n            \"  <field name=\\\"empty_s\\\"></field>\" +\n            \"  <field name=\\\"parent_s\\\">X</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >2</field>\" +\n            \"      <field name=\\\"child_s\\\">y</field>\" +\n            \"    </doc>\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >3</field>\" +\n            \"      <field name=\\\"child_s\\\">z</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n            \"  <field name=\\\"id\\\">4</field>\" +\n            \"  <field name=\\\"parent_s\\\">A</field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >5</field>\" +\n            \"      <field name=\\\"child_s\\\">b</field>\" +\n            \"      <field name=\\\"grandChild\\\">\" +\n            \"        <doc>  \" +\n            \"          <field name=\\\"id\\\" >7</field>\" +\n            \"          <field name=\\\"child_s\\\">d</field>\" +\n            \"        </doc>\" +\n            \"      </field>\" +\n            \"    </doc>\" +\n            \"  </field>\" +\n            \"  <field name=\\\"test\\\">\" +\n            \"    <doc>  \" +\n            \"      <field name=\\\"id\\\" >6</field>\" +\n            \"      <field name=\\\"child_s\\\">c</field>\" +\n            \"    </doc>\" +\n            \"  </field> \" +\n            \"</doc>\";\n\n    XMLStreamReader parser =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc1));\n    parser.next(); \r\n    \r\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc(parser);\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader(new StringReader(xml_doc2));\n    parser2.next(); \r\n    \r\n    \r\n    SolrInputDocument document2 = loader.readDoc(parser2);\n\n    assertFalse(document1.hasChildDocuments());\n    assertEquals(document1.toString(), sdoc(\"id\", \"1\", \"empty_s\", \"\", \"parent_s\", \"X\", \"test\",\n        sdocs(sdoc(\"id\", \"2\", \"child_s\", \"y\"), sdoc(\"id\", \"3\", \"child_s\", \"z\"))).toString());\n\n    assertFalse(document2.hasChildDocuments());\n    assertEquals(document2.toString(), sdoc(\"id\", \"4\", \"parent_s\", \"A\", \"test\",\n        sdocs(sdoc(\"id\", \"5\", \"child_s\", \"b\", \"grandChild\", Collections.singleton(sdoc(\"id\", \"7\", \"child_s\", \"d\"))),\n            sdoc(\"id\", \"6\", \"child_s\", \"c\"))).toString());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"0231c1ecb6c8c1909b555f4975d522c746ea86be","commitMessage":"@@@SOLR-13342: Remove dom4j from Solr\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2019-03-25 20:15:01","modifiedFileCount":"1","status":"M","submitter":"Kevin Risden"}]
