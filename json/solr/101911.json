[{"authorTime":"2014-08-29 03:03:18","codes":[{"authorDate":"2014-07-01 23:16:36","commitOrder":2,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n    \n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n      \n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(replicas.size() == rf);\n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n      \n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n        \n        if (!leader.equals(replica)) \n          notLeaders.put(replica.getName(), replica);\n      }\n      \n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n    \n    if (!allReplicasUp) \n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n    \n    if (notLeaders.isEmpty()) \n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n    \n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n    \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }  \n","date":"2014-07-01 23:16:36","endLine":1824,"groupId":"47871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/f1ee29b861babf39f4d8a1e44dc94117acb9bc.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n    \n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n      \n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(replicas.size() == rf);\n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n      \n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n        \n        if (!leader.equals(replica)) \n          notLeaders.put(replica.getName(), replica);\n      }\n      \n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n    \n    if (!allReplicasUp) \n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n    \n    if (notLeaders.isEmpty()) \n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n    \n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n    \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1759,"status":"NB"},{"authorDate":"2014-08-29 03:03:18","commitOrder":2,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","date":"2014-08-29 03:03:18","endLine":596,"groupId":"9435","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/e5b7987f9722bf7ff4912953b4af3b8711de92.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"B"}],"commitId":"f20a9e70bb87d7686cf22f6c449fbe2945649047","commitMessage":"@@@SOLR-6444: Use distrib=false to ensure real-time get request only hits the replica we're testing for proper recovery.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1621181 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-08-29 03:03:18","modifiedFileCount":"1","status":"M","submitter":"Timothy Potter"},{"authorTime":"2014-09-24 23:21:47","codes":[{"authorDate":"2014-07-01 23:16:36","commitOrder":3,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n    \n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n      \n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(replicas.size() == rf);\n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n      \n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n        \n        if (!leader.equals(replica)) \n          notLeaders.put(replica.getName(), replica);\n      }\n      \n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n    \n    if (!allReplicasUp) \n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n    \n    if (notLeaders.isEmpty()) \n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n    \n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n    \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }  \n","date":"2014-07-01 23:16:36","endLine":1824,"groupId":"47871","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/f1ee29b861babf39f4d8a1e44dc94117acb9bc.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n    \n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n      \n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(replicas.size() == rf);\n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n      \n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n        \n        if (!leader.equals(replica)) \n          notLeaders.put(replica.getName(), replica);\n      }\n      \n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n    \n    if (!allReplicasUp) \n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n    \n    if (notLeaders.isEmpty()) \n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n    \n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n    \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1759,"status":"N"},{"authorDate":"2014-09-24 23:21:47","commitOrder":3,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","date":"2014-09-24 23:21:47","endLine":497,"groupId":"9435","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/5cd31d3076cc21237439f7e33d822f12fe329c.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"}],"commitId":"3f31f26d3d58e22477dffefc0312386566235134","commitMessage":"@@@SOLR-6511: Fencepost error in LeaderInitiatedRecoveryThread; refactor HttpPartitionTest to resolve jenkins failures.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627347 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 23:21:47","modifiedFileCount":"5","status":"M","submitter":"Timothy Potter"},{"authorTime":"2014-09-24 23:21:47","codes":[{"authorDate":"2015-01-10 01:33:04","commitOrder":4,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n    \n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n      \n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n      \n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n        \n        if (!leader.equals(replica)) \n          notLeaders.put(replica.getName(), replica);\n      }\n      \n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n    \n    if (!allReplicasUp) \n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n    \n    if (notLeaders.isEmpty()) \n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n    \n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n    \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }  \n","date":"2015-01-10 01:33:04","endLine":1958,"groupId":"4074","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/722309b5546e078c8bd13e5fbe5c2a18295802.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n    \n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n    \n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n      \n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(replicas.size() == rf);\n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n      \n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n        \n        if (!leader.equals(replica)) \n          notLeaders.put(replica.getName(), replica);\n      }\n      \n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n    \n    if (!allReplicasUp) \n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n    \n    if (notLeaders.isEmpty()) \n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n    \n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n    \n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }  \n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1892,"status":"M"},{"authorDate":"2014-09-24 23:21:47","commitOrder":4,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","date":"2014-09-24 23:21:47","endLine":497,"groupId":"9435","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/5cd31d3076cc21237439f7e33d822f12fe329c.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"N"}],"commitId":"b870aed9b91ea8d1a6c36f37f4fb57c5e245675b","commitMessage":"@@@SOLR-6932: All HttpClient ConnectionManagers and SolrJ clients should always be shutdown in tests and regular code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1650608 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-10 01:33:04","modifiedFileCount":"76","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-09-24 23:21:47","codes":[{"authorDate":"2015-03-25 08:03:33","commitOrder":5,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2015-03-25 08:03:33","endLine":1949,"groupId":"4074","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/31d425cf5ae7fffc3d9c25a671c4fa4862484b.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<String,Replica>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<Replica>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1883,"status":"M"},{"authorDate":"2014-09-24 23:21:47","commitOrder":5,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","date":"2014-09-24 23:21:47","endLine":497,"groupId":"9435","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/5cd31d3076cc21237439f7e33d822f12fe329c.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"N"}],"commitId":"83c0c952b644bfa89d36a0ec0f1bbd7b34ee0b4e","commitMessage":"@@@SOLR-7291: Test indexing on ZK disconnect with ChaosMonkey tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1669026 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-25 08:03:33","modifiedFileCount":"7","status":"M","submitter":"Ramkumar Aiyengar"},{"authorTime":"2015-04-04 15:02:20","codes":[{"authorDate":"2015-04-04 15:02:20","commitOrder":6,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2015-04-04 15:02:20","endLine":1932,"groupId":"58066","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/66/0925608dec97715eb5c9fb251e170c0b8609cb.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1867,"status":"M"},{"authorDate":"2015-04-04 15:02:20","commitOrder":6,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","date":"2015-04-04 15:02:20","endLine":552,"groupId":"23790","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0e/cf9a0ef2d4165978f3d0ae4f4de0fd89b197ad.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        String replicaState = replica.getStr(ZkStateReader.STATE_PROP);\n        if (!ZkStateReader.ACTIVE.equals(replicaState)) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + replicaState);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"}],"commitId":"2d15d935f039adda066c5e582b1ba66da884e5ea","commitMessage":"@@@SOLR-7336: Add State enum to Replica\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1671240 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-04 15:02:20","modifiedFileCount":"42","status":"M","submitter":"Shai Erera"},{"authorTime":"2015-08-01 14:24:04","codes":[{"authorDate":"2015-08-01 14:24:04","commitOrder":7,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2015-08-01 14:24:04","endLine":1854,"groupId":"58066","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/651f1f71f4c684f11f68b689b95d8cc4ccd20d.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1789,"status":"M"},{"authorDate":"2015-08-01 14:24:04","commitOrder":7,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","date":"2015-08-01 14:24:04","endLine":570,"groupId":"39704","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/b469a4615e6ef7f1f1124d103733173964c64d.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(true); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState(true);\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"M"}],"commitId":"2a8bef841ab9ec1908dfd945e33248ad7bb45930","commitMessage":"@@@SOLR-7854: Remove unused ZkStateReader.updateClusterState(false) method\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1693681 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-01 14:24:04","modifiedFileCount":"39","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2015-08-08 21:39:58","codes":[{"authorDate":"2015-08-08 21:39:58","commitOrder":8,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2015-08-08 21:39:58","endLine":1855,"groupId":"58066","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/a3b1686b2e03ad5d9df6c10e60a9dad1ba0523.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see all replicas become active.\");\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1791,"status":"M"},{"authorDate":"2015-08-08 21:39:58","commitOrder":8,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","date":"2015-08-08 21:39:58","endLine":570,"groupId":"39704","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/51/7b3a3df106ad646a8efca82b21cd3fe8cf4f78.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    long startMs = System.currentTimeMillis();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(\"Took \" + diffMs + \" ms to see replicas [\"+replicasToCheck+\"] become active.\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"M"}],"commitId":"b4aafbb6060a5b865281f8403b1f87b05061db33","commitMessage":"@@@SOLR-7859: Clamp down on use of System.currentTimeMillis\n\n - Use RTimer where currentTimeMillis is used for timing\n - Abstract out a new class TimeOut for when currentTimeMillis/nanoTime\n   is used to timeout operations.\n - Used `new Date()` in some cases where that is the logical intent.\n - Deprecated a couple of APIs which were publicly exposing epoch time. \n   in favour of Date objects to make the intent clearer.\n - A couple of cases had currentTimeMillis in dead code.\n - In some cases where currentTimeMillis was used to just generate a name. \n   used nanoTime instead (really it should be some sequence/random number\n   in such a case).\n - In some other cases where stamps were used for SQL queries.  HTTP headers. \n   comparing against data in external files.  ZK etc..  used SuppressForbidden.\n - Also currently allow the use of currentTimeMillis in commit data. \n   this is then used in replication -- this is concerning since absolute\n   times are being compared.  but that can be dealt with separately.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1694798 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-08 21:39:58","modifiedFileCount":"89","status":"M","submitter":"Ramkumar Aiyengar"},{"authorTime":"2016-03-07 17:33:03","codes":[{"authorDate":"2016-03-07 17:33:03","commitOrder":9,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2016-03-07 17:33:03","endLine":1871,"groupId":"58066","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/84dbd450bc446981514d83a75fdc03a8bd0864.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1811,"status":"M"},{"authorDate":"2016-03-07 17:33:03","commitOrder":9,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","date":"2016-03-07 17:33:03","endLine":686,"groupId":"44076","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f1/960aa952ea64baddc40ac789d652c86ec4e6a2.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.updateClusterState(); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      \r\n      if (waitMs % 2000 == 0)\n        cloudClient.getZkStateReader().updateClusterState();\n\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"}],"commitId":"093a8ce57c06f1bf2f71ddde52dcc7b40cbd6197","commitMessage":"@@@SOLR-8745: Deprecate costly ZkStateReader.updateClusterState().  replace with a narrow forceUpdateCollection(collection)\n","date":"2016-03-07 17:33:03","modifiedFileCount":"46","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2017-02-22 22:56:59","codes":[{"authorDate":"2016-03-07 17:33:03","commitOrder":10,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2016-03-07 17:33:03","endLine":1871,"groupId":"58066","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/84dbd450bc446981514d83a75fdc03a8bd0864.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1811,"status":"N"},{"authorDate":"2017-02-22 22:56:59","commitOrder":10,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","date":"2017-02-22 22:56:59","endLine":688,"groupId":"44076","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/e4c17c9de05f8cbfc1a04e555dc93f45137af2.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(1000L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 1000L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"}],"commitId":"a342d6bba6f5c3526763542ced8b4c7e5cda8d53","commitMessage":"@@@test: speed up test\n","date":"2017-02-22 22:56:59","modifiedFileCount":"1","status":"M","submitter":"markrmiller"},{"authorTime":"2017-08-01 15:49:57","codes":[{"authorDate":"2017-08-01 15:49:57","commitOrder":11,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2017-08-01 15:55:00","endLine":2007,"groupId":"28373","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/90/d5bd9315f55f92bc2a81c6622d5c332dc83bdf.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1945,"status":"M"},{"authorDate":"2017-08-01 15:49:57","commitOrder":11,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","date":"2017-08-01 15:55:00","endLine":670,"groupId":"38472","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/56e7679512b40dbb7703b71a3014336a5c2f0a.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getActiveSlices(testCollectionName);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      Slice shard = cs.getSlice(testCollectionName, shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"}],"commitId":"93ed4770ac82eb732c7409f82d02009e0fabe390","commitMessage":"@@@SOLR-9321: Remove deprecated methods of ClusterState\n","date":"2017-08-01 15:55:00","modifiedFileCount":"45","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2017-08-01 15:49:57","codes":[{"authorDate":"2018-01-29 16:55:28","commitOrder":12,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    ZkShardTerms zkShardTerms = new ZkShardTerms(testCollectionName, shardId, cloudClient.getZkStateReader().getZkClient());\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (!zkShardTerms.canBecomeLeader(replica.getName()) ||\n            replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    zkShardTerms.close();\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","date":"2018-01-29 16:55:28","endLine":2016,"groupId":"43314","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/2b7dbac2a8a06d2c77d376d24a0d6167052d0c.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1951,"status":"M"},{"authorDate":"2017-08-01 15:49:57","commitOrder":12,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","date":"2017-08-01 15:55:00","endLine":670,"groupId":"38472","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/56e7679512b40dbb7703b71a3014336a5c2f0a.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"N"}],"commitId":"27ef6530646a9af6f8fdf491afd80185bc4f7fee","commitMessage":"@@@SOLR-11702: Redesign current LIR implementation\n","date":"2018-01-29 16:55:28","modifiedFileCount":"16","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2017-08-01 15:49:57","codes":[{"authorDate":"2019-10-15 00:45:47","commitOrder":13,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    ZkShardTerms zkShardTerms = new ZkShardTerms(testCollectionName, shardId, cloudClient.getZkStateReader().getZkClient());\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (!zkShardTerms.canBecomeLeader(replica.getName()) ||\n            replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    zkShardTerms.close();\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>(notLeaders.values());\n    return replicas;\n  }\n","date":"2019-10-15 00:45:47","endLine":2163,"groupId":"43314","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/bd4102a7b7b906e7d0664dfe28f61bc5d22f15.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    ZkShardTerms zkShardTerms = new ZkShardTerms(testCollectionName, shardId, cloudClient.getZkStateReader().getZkClient());\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (!zkShardTerms.canBecomeLeader(replica.getName()) ||\n            replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    zkShardTerms.close();\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>();\n    replicas.addAll(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2099,"status":"M"},{"authorDate":"2017-08-01 15:49:57","commitOrder":13,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","date":"2017-08-01 15:55:00","endLine":670,"groupId":"38472","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/56e7679512b40dbb7703b71a3014336a5c2f0a.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"N"}],"commitId":"e7e6cfaecfa44729bc7eae75a80493ec3e11944b","commitMessage":"@@@LUCENE-8994: Code Cleanup - Pass values to list constructor instead of empty constructor followed by addAll(). (#919)\n\n","date":"2019-10-15 00:45:47","modifiedFileCount":"27","status":"M","submitter":"Koen De Groote"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2020-05-01 07:50:31","commitOrder":14,"curCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    ZkShardTerms zkShardTerms = new ZkShardTerms(testCollectionName, shardId, cloudClient.getZkStateReader().getZkClient());\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      if (log.isInfoEnabled()) {\n        log.info(\"Found {}  replicas and leader on {} for {} in {}\"\n            , replicas.size(), leader.getNodeName(), shardId, testCollectionName);\n      }\n\n      \r\n      for (Replica replica : replicas) {\n        if (!zkShardTerms.canBecomeLeader(replica.getName()) ||\n            replica.getState() != Replica.State.ACTIVE) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          }\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    zkShardTerms.close();\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n    }\n\n    List<Replica> replicas = new ArrayList<>(notLeaders.values());\n    return replicas;\n  }\n","date":"2020-05-01 07:50:31","endLine":2176,"groupId":"101911","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"ensureAllReplicasAreActive","params":"(StringtestCollectionName@StringshardId@intshards@intrf@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/df36a3205f788f9ba303c336a2a3815ebc5e5d.src","preCode":"  protected List<Replica> ensureAllReplicasAreActive(String testCollectionName, String shardId, int shards, int rf, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    Map<String,Replica> notLeaders = new HashMap<>();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName); \r\n\n    ClusterState cs = zkr.getClusterState();\n    Collection<Slice> slices = cs.getCollection(testCollectionName).getActiveSlices();\n    assertTrue(slices.size() == shards);\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    Replica leader = null;\n    ZkShardTerms zkShardTerms = new ZkShardTerms(testCollectionName, shardId, cloudClient.getZkStateReader().getZkClient());\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(\"No collection found for \" + testCollectionName, docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n      Collection<Replica> replicas = shard.getReplicas();\n      assertTrue(\"Did not find correct number of replicas. Expected:\" + rf + \" Found:\" + replicas.size(), replicas.size() == rf);\n      \n      leader = shard.getLeader();\n      assertNotNull(leader);\n      log.info(\"Found \"+replicas.size()+\" replicas and leader on \"+\n        leader.getNodeName()+\" for \"+shardId+\" in \"+testCollectionName);\n\n      \r\n      for (Replica replica : replicas) {\n        if (!zkShardTerms.canBecomeLeader(replica.getName()) ||\n            replica.getState() != Replica.State.ACTIVE) {\n          log.info(\"Replica {} is currently {}\", replica.getName(), replica.getState());\n          allReplicasUp = false;\n        }\n\n        if (!leader.equals(replica))\n          notLeaders.put(replica.getName(), replica);\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(500L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 500L;\n      }\n    } \r\n\n    zkShardTerms.close();\n    if (!allReplicasUp)\n      fail(\"Didn't see all replicas for shard \"+shardId+\" in \"+testCollectionName+\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo());\n\n    if (notLeaders.isEmpty())\n      fail(\"Didn't isolate any replicas that are not the leader! ClusterState: \" + printClusterStateInfo());\n\n    log.info(\"Took {} ms to see all replicas become active.\", timer.getTime());\n\n    List<Replica> replicas = new ArrayList<>(notLeaders.values());\n    return replicas;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2106,"status":"M"},{"authorDate":"2020-05-01 07:50:31","commitOrder":14,"curCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Replica {} is currently {}\", replica.getName(), state);\n          }\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n    }\n  }\n","date":"2020-05-01 07:50:31","endLine":636,"groupId":"101911","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"waitToSeeReplicasActive","params":"(StringtestCollectionName@StringshardId@Set<String>replicasToCheck@intmaxWaitSecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/61ef9cd5c9fa27b2db304e34a134af9c3c5c63.src","preCode":"  protected void waitToSeeReplicasActive(String testCollectionName, String shardId, Set<String> replicasToCheck, int maxWaitSecs) throws Exception {\n    final RTimer timer = new RTimer();\n\n    ZkStateReader zkr = cloudClient.getZkStateReader();\n    zkr.forceUpdateCollection(testCollectionName);\n    ClusterState cs = zkr.getClusterState();\n    boolean allReplicasUp = false;\n    long waitMs = 0L;\n    long maxWaitMs = maxWaitSecs * 1000L;\n    while (waitMs < maxWaitMs && !allReplicasUp) {\n      cs = cloudClient.getZkStateReader().getClusterState();\n      assertNotNull(cs);\n      final DocCollection docCollection = cs.getCollectionOrNull(testCollectionName);\n      assertNotNull(docCollection);\n      Slice shard = docCollection.getSlice(shardId);\n      assertNotNull(\"No Slice for \"+shardId, shard);\n      allReplicasUp = true; \r\n\n      \r\n      for (Replica replica : shard.getReplicas()) {\n        if (!replicasToCheck.contains(replica.getName()))\n          continue;\n\n        final Replica.State state = replica.getState();\n        if (state != Replica.State.ACTIVE) {\n          log.info(\"Replica \" + replica.getName() + \" is currently \" + state);\n          allReplicasUp = false;\n        }\n      }\n\n      if (!allReplicasUp) {\n        try {\n          Thread.sleep(200L);\n        } catch (Exception ignoreMe) {}\n        waitMs += 200L;\n      }\n    } \r\n\n    if (!allReplicasUp)\n      fail(\"Didn't see replicas \"+ replicasToCheck +\n          \" come up within \" + maxWaitMs + \" ms! ClusterState: \" + printClusterStateInfo(testCollectionName));\n\n    log.info(\"Took {} ms to see replicas [{}] become active.\", timer.getTime(), replicasToCheck);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"}]
