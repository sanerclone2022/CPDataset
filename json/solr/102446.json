[{"authorTime":"2014-06-26 22:54:44","codes":[{"authorDate":"2015-08-27 10:18:36","commitOrder":7,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","date":"2015-08-27 10:18:36","endLine":383,"groupId":"46380","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/13/8d696d3b7c70e0500eb7b6fe8df6670ddfef4d.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"B"},{"authorDate":"2014-06-26 22:54:44","commitOrder":7,"curCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            \"/overseer_elect/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n          log.info(\"\", e);\n        } else {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","date":"2014-06-26 22:54:44","endLine":630,"groupId":"46380","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/1b5e12ec9e776fa8e362762f377b1659382afe.src","preCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            \"/overseer_elect/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n          log.info(\"\", e);\n        } else {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"NB"}],"commitId":"679dd8f7902d0c607cc020d17b40b93b950c2939","commitMessage":"@@@SOLR-7789: Introduce a ConfigSet management API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1698043 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-27 10:18:36","modifiedFileCount":"25","status":"M","submitter":"Gregory Chanan"},{"authorTime":"2015-11-18 02:07:52","codes":[{"authorDate":"2015-11-18 02:07:52","commitOrder":8,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","date":"2015-11-18 02:07:52","endLine":383,"groupId":"46380","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e3/793c17d676070666e6f6b2fd760d0e96d9f9e1.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"},{"authorDate":"2015-11-18 02:07:52","commitOrder":8,"curCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n          log.info(\"\", e);\n        } else {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","date":"2015-11-18 02:07:52","endLine":439,"groupId":"46380","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/dbe09219b9df14a1ce1b5d7becbbe234b9596b.src","preCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            \"/overseer_elect/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n          log.info(\"\", e);\n        } else {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"dd8b980036bc1b947bc071849b0bf952d7c7d1e7","commitMessage":"@@@SOLR-8300: Use constants for the /overseer_elect znode\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1714841 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-18 02:07:52","modifiedFileCount":"7","status":"M","submitter":"Varun Thacker"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":9,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","date":"2016-10-03 03:18:22","endLine":412,"groupId":"46380","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/72fd5c5735221e55a7ed12f84a7cd8a241035b.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":9,"curCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","date":"2016-10-03 03:18:22","endLine":424,"groupId":"46380","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a3/eed3694f700e984dbc0f2b90b4833127297634.src","preCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n          log.info(\"\", e);\n        } else {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-11-22 17:07:33","codes":[{"authorDate":"2016-11-22 17:07:33","commitOrder":10,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","date":"2016-11-22 17:07:33","endLine":412,"groupId":"46380","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/5334626466a7d78fb238bc09409f592ab7aff0.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2016-11-22 17:07:33","commitOrder":10,"curCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","date":"2016-11-22 17:07:33","endLine":421,"groupId":"46380","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/285fa20a67018cf47eeba641c03e48c9f3758a.src","preCode":"    private LeaderStatus amILeader() {\n      TimerContext timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"ff6da66601ca454941f6e3f0957068f5269319a6","commitMessage":"@@@SOLR-8785: Use Dropwizard Metrics library for core metrics\n","date":"2016-11-22 17:07:33","modifiedFileCount":"10","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2017-03-08 05:00:38","codes":[{"authorDate":"2017-03-08 05:00:38","commitOrder":11,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","date":"2017-03-08 05:01:21","endLine":412,"groupId":"46380","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/d71a637347ba580221cde10cd6aecd63f2594a.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2017-03-08 05:00:38","commitOrder":11,"curCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","date":"2017-03-08 05:01:21","endLine":423,"groupId":"46380","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/f15fca6eb7efe98b3054a56a64e4942aa22179.src","preCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"4d7bc9477144937335e997ad630c4b89f558ddc5","commitMessage":"@@@SOLR-9858: Collect aggregated metrics from nodes and shard leaders in overseer.\n","date":"2017-03-08 05:01:21","modifiedFileCount":"26","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-03-23 09:15:50","codes":[{"authorDate":"2017-03-23 09:15:50","commitOrder":12,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(ID))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","date":"2017-03-23 09:15:50","endLine":413,"groupId":"46380","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/ffb21905eeb0130fba88eebdaf7c9693d8a04b.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2017-03-23 09:15:50","commitOrder":12,"curCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(ID))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","date":"2017-03-23 09:15:50","endLine":425,"groupId":"46380","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/449b4a0f147c4bb7671f7a0b5d388b765d11be.src","preCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(\"id\"))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"}],"commitId":"eb587772ddecaea371b20feb955a197e80699f22","commitMessage":"@@@SOLR-6615: use constants for 'id'.  '_route_'.  '_version_'\n","date":"2017-03-23 09:15:50","modifiedFileCount":"48","status":"M","submitter":"Noble Paul"},{"authorTime":"2018-07-18 00:17:27","codes":[{"authorDate":"2018-07-18 00:17:27","commitOrder":13,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    String propsId = null;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      propsId = props.getStr(ID);\n      if (myId.equals(propsId)) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      } else {\n        log.debug(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n    return LeaderStatus.NO;\n  }\n","date":"2018-07-18 03:16:11","endLine":422,"groupId":"46182","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/afc431cbfb308c19c990c87b9e0d4501f48459.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(ID))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2018-07-18 00:17:27","commitOrder":13,"curCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      String propsId = null;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        propsId = props.getStr(ID);\n        if (myId.equals(propsId)) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        } else {\n          log.debug(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n      return LeaderStatus.NO;\n    }\n","date":"2018-07-18 03:16:11","endLine":448,"groupId":"46182","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/7e9646978f11d50f9c9f7f9bc51f68fe7e4df7.src","preCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        if (myId.equals(props.getStr(ID))) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"}],"commitId":"e9c6effd07f5bd14ce87c8cea6ced64a33d8d6b0","commitMessage":"@@@SOLR-12454: Tweak Overseer leadership transition related logging for easier troubleshooting.\n","date":"2018-07-18 03:16:11","modifiedFileCount":"2","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-07-18 00:17:27","commitOrder":14,"curCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    String propsId = null;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      propsId = props.getStr(ID);\n      if (myId.equals(propsId)) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      } else {\n        log.debug(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n    return LeaderStatus.NO;\n  }\n","date":"2018-07-18 03:16:11","endLine":422,"groupId":"102446","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/afc431cbfb308c19c990c87b9e0d4501f48459.src","preCode":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    String propsId = null;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      propsId = props.getStr(ID);\n      if (myId.equals(propsId)) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      } else {\n        log.debug(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n    return LeaderStatus.NO;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"},{"authorDate":"2018-11-30 01:58:18","commitOrder":14,"curCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      String propsId = null;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        propsId = props.getStr(ID);\n        if (myId.equals(propsId)) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        } else {\n          log.debug(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } catch (AlreadyClosedException e) {\n        success = false;\n      } catch (Exception e) {\n        success = false;\n        log.warn(\"Unexpected exception\", e);\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n      return LeaderStatus.NO;\n    }\n","date":"2018-11-30 01:58:51","endLine":466,"groupId":"102446","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"amILeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/b7e745052603707732a0088138018a05b4f595.src","preCode":"    private LeaderStatus amILeader() {\n      Timer.Context timerContext = stats.time(\"am_i_leader\");\n      boolean success = true;\n      String propsId = null;\n      try {\n        ZkNodeProps props = ZkNodeProps.load(zkClient.getData(\n            OVERSEER_ELECT + \"/leader\", null, null, true));\n        propsId = props.getStr(ID);\n        if (myId.equals(propsId)) {\n          return LeaderStatus.YES;\n        }\n      } catch (KeeperException e) {\n        success = false;\n        if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.error(\"\", e);\n          return LeaderStatus.DONT_KNOW;\n        } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n          log.warn(\"\", e);\n        } else {\n          log.debug(\"\", e);\n        }\n      } catch (InterruptedException e) {\n        success = false;\n        Thread.currentThread().interrupt();\n      } finally {\n        timerContext.stop();\n        if (success)  {\n          stats.success(\"am_i_leader\");\n        } else  {\n          stats.error(\"am_i_leader\");\n        }\n      }\n      log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n      return LeaderStatus.NO;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/Overseer.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"}]
