[{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2017-07-11 07:58:23","commitOrder":2,"curCode":"  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); \r\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":399,"groupId":"40915","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntPointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); \r\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"MB"},{"authorDate":"2017-07-11 07:58:23","commitOrder":2,"curCode":"  public void testLongPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_l_mv_dv\";\n    String nonDocValuesField = \"number_p_l_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Long> values;\n    List<PosVal<Long>> sortedValues;\n    long max;\n    do {\n      values = getRandomLongs(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Long.MAX_VALUE - numValues); \r\n    long min = sortedValues.get(0).val;\n    long gap = BigInteger.valueOf(max + numValues).subtract(BigInteger.valueOf(min))\n        .divide(BigInteger.valueOf(numBuckets)).longValueExact();\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    long minBucketVal = min;\n    for (PosVal<Long> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":1364,"groupId":"34168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testLongPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_l_mv_dv\";\n    String nonDocValuesField = \"number_p_l_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Long> values;\n    List<PosVal<Long>> sortedValues;\n    long max;\n    do {\n      values = getRandomLongs(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Long.MAX_VALUE - numValues); \r\n    long min = sortedValues.get(0).val;\n    long gap = BigInteger.valueOf(max + numValues).subtract(BigInteger.valueOf(min))\n        .divide(BigInteger.valueOf(numBuckets)).longValueExact();\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    long minBucketVal = min;\n    for (PosVal<Long> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1292,"status":"B"}],"commitId":"5bb09e08528552c310d30fc627dc823a86aa6880","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values\n","date":"2017-07-11 07:58:23","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"},{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2021-03-06 02:42:13","commitOrder":3,"curCode":"  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); \r\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while ((long)value.val - (long)minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2021-03-06 02:42:13","endLine":417,"groupId":"102659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntPointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b1/85a13291eea7e9fef9ded19c0e48937d0686de.src","preCode":"  public void testIntPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_i_mv_dv\";\n    String nonDocValuesField = \"number_p_i_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Integer> values;\n    List<PosVal<Integer>> sortedValues;\n    int max;\n    do {\n      values = getRandomInts(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Integer.MAX_VALUE - numValues); \r\n    int min = sortedValues.get(0).val;\n    int gap = (int)(((long)(max + numValues) - (long)min) / (long)numBuckets);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    int minBucketVal = min;\n    for (PosVal<Integer> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    minBucketVal = min;\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2017-07-11 07:58:23","commitOrder":3,"curCode":"  public void testLongPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_l_mv_dv\";\n    String nonDocValuesField = \"number_p_l_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Long> values;\n    List<PosVal<Long>> sortedValues;\n    long max;\n    do {\n      values = getRandomLongs(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Long.MAX_VALUE - numValues); \r\n    long min = sortedValues.get(0).val;\n    long gap = BigInteger.valueOf(max + numValues).subtract(BigInteger.valueOf(min))\n        .divide(BigInteger.valueOf(numBuckets)).longValueExact();\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    long minBucketVal = min;\n    for (PosVal<Long> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","date":"2017-07-11 07:58:23","endLine":1364,"groupId":"102659","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPointFieldMultiValuedRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  public void testLongPointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_l_mv_dv\";\n    String nonDocValuesField = \"number_p_l_mv\";\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Long> values;\n    List<PosVal<Long>> sortedValues;\n    long max;\n    do {\n      values = getRandomLongs(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n    } while ((max = sortedValues.get(sortedValues.size() - 1).val) >= Long.MAX_VALUE - numValues); \r\n    long min = sortedValues.get(0).val;\n    long gap = BigInteger.valueOf(max + numValues).subtract(BigInteger.valueOf(min))\n        .divide(BigInteger.valueOf(numBuckets)).longValueExact();\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    long minBucketVal = min;\n    for (PosVal<Long> value : sortedValues) {\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); \r\n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    \r\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min), \"facet.range.end\", String.valueOf(max),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1292,"status":"N"}],"commitId":"f36a867bd07270421b8295f1698adf45c4905149","commitMessage":"@@@SOLR-15219: Fix TestPointFields integer overflow (#2460)\n\nAnd also restore it's getRandomInts(... ... bound) semantics to what it was -- positive or negative random values.","date":"2021-03-06 02:42:13","modifiedFileCount":"1","status":"M","submitter":"David Smiley"}]
